├── .github
    ├── CODE_OF_CONDUCT.md
    ├── CONTRIBUTING.md
    ├── ISSUE_TEMPLATE
    │   ├── bug_report.md
    │   └── feature_request.md
    └── PULL_REQUEST_TEMPLATE.md
├── LICENSE
├── README.md
├── agencies
    └── agencies.json
├── assets
    └── images
    │   └── Screenshot 2024-05-13 at 2.41.43 PM.png
├── associations
    └── associations.json
├── blogs
    └── blogs.json
├── businesses
    └── businesses.json
├── calendars
    └── calendars.json
├── campaigns
    └── campaigns.json
├── companies
    └── companies.json
├── contacts
    └── contacts.json
├── conversations
    └── conversations.json
├── courses
    └── courses.json
├── custom-fields
    └── custom-fields.json
├── custom-menus
    └── custom-menus.json
├── docs
    ├── country list
    │   └── Country.md
    ├── marketplace modules
    │   ├── CustomJs.md
    │   └── shared_secret_customJS_customPages.md
    ├── oauth
    │   ├── Authorization.md
    │   ├── Billing.md
    │   ├── ExternalAuthentication.md
    │   ├── Faqs.md
    │   ├── Overview.md
    │   ├── Scopes.md
    │   ├── ScopesOld.md
    │   └── WebhookAuthentication.md
    └── webhook events
    │   ├── AppInstall.md
    │   ├── AppUninstall.md
    │   ├── AppointmentCreate.md
    │   ├── AppointmentDelete.md
    │   ├── AppointmentUpdate.md
    │   ├── AssociationCreate.md
    │   ├── AssociationDelete.md
    │   ├── AssociationUpdate.md
    │   ├── CampaignStatusUpdate.md
    │   ├── ContactCreate.md
    │   ├── ContactDelete.md
    │   ├── ContactDndUpdate.md
    │   ├── ContactTagUpdate.md
    │   ├── ContactUpdate.md
    │   ├── ConversationUnreadWebhook.md
    │   ├── InboundMessage.md
    │   ├── InvoiceCreate.md
    │   ├── InvoiceDelete.md
    │   ├── InvoicePaid.md
    │   ├── InvoicePartiallyPaid.md
    │   ├── InvoiceSent.md
    │   ├── InvoiceUpdate.md
    │   ├── InvoiceVoid.md
    │   ├── LCEmailStats.md
    │   ├── LocationCreate.md
    │   ├── LocationUpdate.md
    │   ├── NoteCreate.md
    │   ├── NoteDelete.md
    │   ├── NoteUpdate.md
    │   ├── ObjectSchemaCreate.md
    │   ├── ObjectSchemaUpdate.md
    │   ├── OpportunityAssignedToUpdate.md
    │   ├── OpportunityCreate.md
    │   ├── OpportunityDelete.md
    │   ├── OpportunityMonetaryValueUpdate.md
    │   ├── OpportunityStageUpdate.md
    │   ├── OpportunityStatusUpdate.md
    │   ├── OpportunityUpdate.md
    │   ├── OrderCreate.md
    │   ├── OrderStatusUpdate.md
    │   ├── OutboundMessage.md
    │   ├── PlanChange.md
    │   ├── PriceCreate.md
    │   ├── PriceDelete.md
    │   ├── PriceUpdate.md
    │   ├── ProductCreate.md
    │   ├── ProductDelete.md
    │   ├── ProductUpdate.md
    │   ├── ProviderOutboundMessage.md
    │   ├── RecordCreate.md
    │   ├── RecordDelete.md
    │   ├── RecordUpdate.md
    │   ├── RelationCreate.md
    │   ├── RelationDelete.md
    │   ├── TaskComplete.md
    │   ├── TaskCreate.md
    │   ├── TaskDelete.md
    │   └── UserCreate.md
├── email-isv
    └── email-isv.json
├── emails
    └── emails.json
├── forms
    └── forms.json
├── funnels
    └── funnels.json
├── invoices
    └── invoices.json
├── links
    └── links.json
├── locations
    └── locations.json
├── marketplace
    └── marketplace.json
├── medias
    └── medias.json
├── models
    └── Footer.yaml
├── oauth
    └── oauth.json
├── objects
    └── objects.json
├── opportunities
    └── opportunities.json
├── payments
    └── payments.json
├── products
    └── products.json
├── saas-api
    └── saas-api.json
├── snapshots
    └── snapshots.json
├── social-media-posting
    └── social-media-posting.json
├── surveys
    └── surveys.json
├── toc.json
├── users
    └── users.json
└── workflows
    └── workflows.json


/.github/CODE_OF_CONDUCT.md:
--------------------------------------------------------------------------------
 1 | # Contributor Covenant Code of Conduct
 2 | 
 3 | ## Our Pledge
 4 | 
 5 | We as contributors and maintainers pledge to make participation in our project and community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, gender identity and expression, level of experience, education, socioeconomic status, nationality, personal appearance, race, religion, or sexual identity and orientation.
 6 | 
 7 | We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.
 8 | 
 9 | ## Our Standards
10 | 
11 | Examples of behavior that contributes to a positive environment for our community include:
12 | 
13 | - Demonstrating empathy and kindness toward other people
14 | - Using welcoming and inclusive language
15 | - Being respectful of differing viewpoints and experiences
16 | - Gracefully accepting constructive criticism
17 | - Focusing on what is best for the community
18 | - Showing empathy toward other community members
19 | 
20 | Examples of unacceptable behavior include:
21 | 
22 | - The use of sexualized language or imagery, and sexual attention or advances of any kind
23 | - Trolling, insulting or derogatory comments, and personal or political attacks
24 | - Public or private harassment
25 | - Publishing others’ private information, such as a physical or email address, without their explicit permission
26 | - Other conduct which could reasonably be considered inappropriate in a professional setting
27 | 
28 | ## Enforcement Responsibilities
29 | 
30 | Project maintainers are responsible for clarifying and enforcing standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.
31 | 
32 | Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.
33 | 
34 | ## Scope
35 | 
36 | This Code of Conduct applies within all project spaces, and also applies when an individual is officially representing the project or its community in public spaces.
37 | 
38 | Examples of representing a project or community include using an official project email address, posting via an official social media account, or acting as an appointed representative at an online or offline event.
39 | 
40 | ## Enforcement
41 | 
42 | Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the project team at [support@gohighlevel.com](mailto:support@gohighlevel.com).
43 | 
44 | All complaints will be reviewed and investigated promptly and fairly.
45 | 
46 | All project maintainers are obligated to respect the privacy and security of the reporter of any incident.
47 | 
48 | ## Attribution
49 | 
50 | This Code of Conduct is adapted from the [Contributor Covenant](https://www.contributor-covenant.org), version 2.1, available at  
51 | [https://www.contributor-covenant.org/version/2/1/code_of_conduct.html](https://www.contributor-covenant.org/version/2/1/code_of_conduct.html)
52 | 
53 | For answers to common questions about this code of conduct, see  
54 | [https://www.contributor-covenant.org/faq](https://www.contributor-covenant.org/faq).
55 | 


--------------------------------------------------------------------------------
/.github/CONTRIBUTING.md:
--------------------------------------------------------------------------------
 1 | # Contributing to GoHighLevel API V2 Docs
 2 | 
 3 | Thank you for your interest in contributing! We welcome suggestions, improvements, and fixes that help enhance the GoHighLevel developer experience.
 4 | 
 5 | This guide outlines how you can get started and what we expect from contributors.
 6 | 
 7 | ---
 8 | 
 9 | ## 🚀 How to Contribute
10 | 
11 | 1. **Fork the Repository**  
12 |    Click the **Fork** button at the top right to create your own copy of this repository.
13 | 
14 | 2. **Clone Your Fork Locally**  
15 |     Clone your fork using the following commands:
16 |     
17 |     ```bash
18 |     git clone https://github.com/YOUR-USERNAME/api-v2-docs.git
19 |     cd api-v2-docs
20 |     ```
21 | 
22 | 3. **Create a New Branch**  
23 |     Create a feature branch to work on:
24 |     
25 |     ```bash
26 |     git checkout -b feature/your-feature-name
27 |     ```
28 | 
29 | 4. **Make Your Changes**  
30 |     Edit the documentation using clear and consistent Markdown. Follow the formatting and structure used in existing files.
31 | 
32 | 5. **Commit Your Changes**  
33 |     Commit your changes with a descriptive message:
34 | 
35 |     ```bash
36 |     git commit -m "Update: Brief description of your changes"
37 |     ```
38 | 
39 | 6. **Push to Your Fork**  
40 |     Push the branch to your GitHub fork:
41 | 
42 |     ```bash
43 |     git push origin feature/your-feature-name
44 |     ```
45 | 
46 | 7. **Open a Pull Request**  
47 |     - Go to the original repo: [GoHighLevel/api-v2-docs](https://github.com/GoHighLevel/api-v2-docs)
48 |     - Click **“Compare & pull request”**
49 |     - Describe your changes clearly and concisely
50 |     - Submit the pull request for review
51 | 
52 | ---
53 | 
54 | ## ✍️ Documentation Guidelines
55 | 
56 | When contributing new documentation or improving existing content, please:
57 | 
58 | - Use clear, concise language
59 | - Format your contributions in Markdown
60 | - Match the tone and structure of the existing documentation
61 | - When documenting API endpoints, include:
62 |   - Endpoint path and HTTP method
63 |   - Authentication requirements
64 |   - Request parameters and example body
65 |   - Example responses
66 |   - Common error codes and descriptions
67 | 
68 | ---
69 | 
70 | ## ✅ Before You Submit
71 | 
72 | Please make sure that:
73 | 
74 | - [ ] Your changes follow the existing file structure and style  
75 | - [ ] You’ve tested that Markdown renders correctly  
76 | - [ ] You’ve proofread for grammar, clarity, and formatting  
77 | - [ ] You’ve linked any related GitHub issues (if applicable)  
78 | 
79 | ---
80 | 
81 | ## 🧠 Questions or Support
82 | 
83 | If you’re not sure how or where to contribute:
84 | 
85 | - Open a [GitHub issue](https://github.com/GoHighLevel/api-v2-docs/issues)
86 | - Ask in the [HighLevel Community](https://www.facebook.com/groups/gohighlevel)
87 | 
88 | We’re excited to collaborate with you—thanks for helping improve our documentation!
89 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/bug_report.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 🐛 Bug Report
 3 | about: Report a problem with the documentation
 4 | title: "[Bug] "
 5 | labels: bug
 6 | assignees: ''
 7 | 
 8 | ---
 9 | 
10 | ## 🐛 Describe the Bug
11 | 
12 | A clear and concise description of what the bug is.
13 | 
14 | ## 📍 Location
15 | 
16 | Which page/endpoint does this relate to?
17 | 
18 | ## ✅ Expected Behavior
19 | 
20 | What should have happened?
21 | 
22 | ## 💻 Screenshots or Code Samples
23 | 
24 | Paste relevant markdown/code samples or screenshots.
25 | 
26 | ## 🧠 Additional Context
27 | 
28 | Any other helpful information?
29 | 


--------------------------------------------------------------------------------
/.github/ISSUE_TEMPLATE/feature_request.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | name: 🌟 Feature Request
 3 | about: Suggest a new feature or documentation improvement
 4 | title: "[Feature] "
 5 | labels: enhancement
 6 | assignees: ''
 7 | 
 8 | ---
 9 | 
10 | ## 🌟 Describe the Feature
11 | 
12 | A clear and concise description of the proposed improvement.
13 | 
14 | ## 🚀 Justification
15 | 
16 | Why would this be useful for other developers?
17 | 
18 | ## 📝 Suggestions
19 | 
20 | If applicable, include ideas or mockups of the improvement.
21 | 
22 | ## 🧠 Additional Context
23 | 
24 | Any other details you’d like to share?
25 | 


--------------------------------------------------------------------------------
/.github/PULL_REQUEST_TEMPLATE.md:
--------------------------------------------------------------------------------
 1 | # Pull Request Template
 2 | 
 3 | ## 📋 Description
 4 | 
 5 | Please provide a short summary explaining your changes and the motivation behind them.
 6 | 
 7 | - [ ] Bug fix
 8 | - [ ] New documentation
 9 | - [ ] Update to existing docs
10 | - [ ] Other (please describe):
11 | 
12 | ## 🧪 Related Issues
13 | 
14 | Link any related GitHub issues or discussions here (e.g. `Closes #123`).
15 | 
16 | ## 📝 Checklist
17 | 
18 | - [ ] I’ve tested my changes locally (if applicable).
19 | - [ ] I’ve added sufficient documentation.
20 | - [ ] I’ve reviewed existing open PRs for potential conflicts.
21 | - [ ] I’ve followed the repository's contribution guidelines.
22 | 
23 | ## 💬 Additional Comments
24 | 
25 | Add any additional context or screenshots here.
26 | 


--------------------------------------------------------------------------------
/LICENSE:
--------------------------------------------------------------------------------
  1 | Creative Commons Legal Code
  2 | 
  3 | CC0 1.0 Universal
  4 | 
  5 |     CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
  6 |     LEGAL SERVICES. DISTRIBUTION OF THIS DOCUMENT DOES NOT CREATE AN
  7 |     ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
  8 |     INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
  9 |     REGARDING THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS
 10 |     PROVIDED HEREUNDER, AND DISCLAIMS LIABILITY FOR DAMAGES RESULTING FROM
 11 |     THE USE OF THIS DOCUMENT OR THE INFORMATION OR WORKS PROVIDED
 12 |     HEREUNDER.
 13 | 
 14 | Statement of Purpose
 15 | 
 16 | The laws of most jurisdictions throughout the world automatically confer
 17 | exclusive Copyright and Related Rights (defined below) upon the creator
 18 | and subsequent owner(s) (each and all, an "owner") of an original work of
 19 | authorship and/or a database (each, a "Work").
 20 | 
 21 | Certain owners wish to permanently relinquish those rights to a Work for
 22 | the purpose of contributing to a commons of creative, cultural and
 23 | scientific works ("Commons") that the public can reliably and without fear
 24 | of later claims of infringement build upon, modify, incorporate in other
 25 | works, reuse and redistribute as freely as possible in any form whatsoever
 26 | and for any purposes, including without limitation commercial purposes.
 27 | These owners may contribute to the Commons to promote the ideal of a free
 28 | culture and the further production of creative, cultural and scientific
 29 | works, or to gain reputation or greater distribution for their Work in
 30 | part through the use and efforts of others.
 31 | 
 32 | For these and/or other purposes and motivations, and without any
 33 | expectation of additional consideration or compensation, the person
 34 | associating CC0 with a Work (the "Affirmer"), to the extent that he or she
 35 | is an owner of Copyright and Related Rights in the Work, voluntarily
 36 | elects to apply CC0 to the Work and publicly distribute the Work under its
 37 | terms, with knowledge of his or her Copyright and Related Rights in the
 38 | Work and the meaning and intended legal effect of CC0 on those rights.
 39 | 
 40 | 1. Copyright and Related Rights. A Work made available under CC0 may be
 41 | protected by copyright and related or neighboring rights ("Copyright and
 42 | Related Rights"). Copyright and Related Rights include, but are not
 43 | limited to, the following:
 44 | 
 45 |   i. the right to reproduce, adapt, distribute, perform, display,
 46 |      communicate, and translate a Work;
 47 |  ii. moral rights retained by the original author(s) and/or performer(s);
 48 | iii. publicity and privacy rights pertaining to a person's image or
 49 |      likeness depicted in a Work;
 50 |  iv. rights protecting against unfair competition in regards to a Work,
 51 |      subject to the limitations in paragraph 4(a), below;
 52 |   v. rights protecting the extraction, dissemination, use and reuse of data
 53 |      in a Work;
 54 |  vi. database rights (such as those arising under Directive 96/9/EC of the
 55 |      European Parliament and of the Council of 11 March 1996 on the legal
 56 |      protection of databases, and under any national implementation
 57 |      thereof, including any amended or successor version of such
 58 |      directive); and
 59 | vii. other similar, equivalent or corresponding rights throughout the
 60 |      world based on applicable law or treaty, and any national
 61 |      implementations thereof.
 62 | 
 63 | 2. Waiver. To the greatest extent permitted by, but not in contravention
 64 | of, applicable law, Affirmer hereby overtly, fully, permanently,
 65 | irrevocably and unconditionally waives, abandons, and surrenders all of
 66 | Affirmer's Copyright and Related Rights and associated claims and causes
 67 | of action, whether now known or unknown (including existing as well as
 68 | future claims and causes of action), in the Work (i) in all territories
 69 | worldwide, (ii) for the maximum duration provided by applicable law or
 70 | treaty (including future time extensions), (iii) in any current or future
 71 | medium and for any number of copies, and (iv) for any purpose whatsoever,
 72 | including without limitation commercial, advertising or promotional
 73 | purposes (the "Waiver"). Affirmer makes the Waiver for the benefit of each
 74 | member of the public at large and to the detriment of Affirmer's heirs and
 75 | successors, fully intending that such Waiver shall not be subject to
 76 | revocation, rescission, cancellation, termination, or any other legal or
 77 | equitable action to disrupt the quiet enjoyment of the Work by the public
 78 | as contemplated by Affirmer's express Statement of Purpose.
 79 | 
 80 | 3. Public License Fallback. Should any part of the Waiver for any reason
 81 | be judged legally invalid or ineffective under applicable law, then the
 82 | Waiver shall be preserved to the maximum extent permitted taking into
 83 | account Affirmer's express Statement of Purpose. In addition, to the
 84 | extent the Waiver is so judged Affirmer hereby grants to each affected
 85 | person a royalty-free, non transferable, non sublicensable, non exclusive,
 86 | irrevocable and unconditional license to exercise Affirmer's Copyright and
 87 | Related Rights in the Work (i) in all territories worldwide, (ii) for the
 88 | maximum duration provided by applicable law or treaty (including future
 89 | time extensions), (iii) in any current or future medium and for any number
 90 | of copies, and (iv) for any purpose whatsoever, including without
 91 | limitation commercial, advertising or promotional purposes (the
 92 | "License"). The License shall be deemed effective as of the date CC0 was
 93 | applied by Affirmer to the Work. Should any part of the License for any
 94 | reason be judged legally invalid or ineffective under applicable law, such
 95 | partial invalidity or ineffectiveness shall not invalidate the remainder
 96 | of the License, and in such case Affirmer hereby affirms that he or she
 97 | will not (i) exercise any of his or her remaining Copyright and Related
 98 | Rights in the Work or (ii) assert any associated claims and causes of
 99 | action with respect to the Work, in either case contrary to Affirmer's
100 | express Statement of Purpose.
101 | 
102 | 4. Limitations and Disclaimers.
103 | 
104 |  a. No trademark or patent rights held by Affirmer are waived, abandoned,
105 |     surrendered, licensed or otherwise affected by this document.
106 |  b. Affirmer offers the Work as-is and makes no representations or
107 |     warranties of any kind concerning the Work, express, implied,
108 |     statutory or otherwise, including without limitation warranties of
109 |     title, merchantability, fitness for a particular purpose, non
110 |     infringement, or the absence of latent or other defects, accuracy, or
111 |     the present or absence of errors, whether or not discoverable, all to
112 |     the greatest extent permissible under applicable law.
113 |  c. Affirmer disclaims responsibility for clearing rights of other persons
114 |     that may apply to the Work or any use thereof, including without
115 |     limitation any person's Copyright and Related Rights in the Work.
116 |     Further, Affirmer disclaims responsibility for obtaining any necessary
117 |     consents, permissions or other rights required for any use of the
118 |     Work.
119 |  d. Affirmer understands and acknowledges that Creative Commons is not a
120 |     party to this document and has no duty or obligation with respect to
121 |     this CC0 or use of the Work.
122 | 


--------------------------------------------------------------------------------
/README.md:
--------------------------------------------------------------------------------
 1 | # GoHighLevel API V2 Documentation
 2 | 
 3 | Welcome to the official public repository for **GoHighLevel API V2 Docs**! 🚀
 4 | 
 5 | This repository contains the source documentation for the [GoHighLevel API V2](https://marketplace.gohighlevel.com/docs/oauth/Overview/index.html) , designed to help developers integrate with the HighLevel platform easily and effectively.
 6 | 
 7 | ## 📚 What You'll Find Here
 8 | - Structured and detailed references for the HighLevel V2 API endpoints.
 9 | - Descriptions, parameters, request/response examples, and error codes.
10 | - Markdown and OpenAPI-based documentation for easy readability and automation.
11 | 
12 | ## 🤝 Contributing
13 | We welcome contributions from developers and partners who use our API!
14 | 
15 | If you’ve found something outdated, unclear, or missing:
16 | - 🧠 Feel free to open [issues](https://github.com/GoHighLevel/api-v2-docs/issues) for discussion or clarification.
17 | - 📌 We review suggestions and may choose to incorporate them into the official documentation.
18 | 
19 | > ⚠️ **Note:** Ensure compliance with our [terms of service](https://www.gohighlevel.com/terms) and do not misrepresent the HighLevel brand.
20 | 
21 | ## 📬 Contact & Support
22 | Please contact us on marketplace@gohighlevel.com. 
23 | 
24 | ---
25 | 
26 | > 🔔 _This documentation is actively maintained. We encourage your feedback and look forward to building a robust developer ecosystem together._
27 | 


--------------------------------------------------------------------------------
/agencies/agencies.json:
--------------------------------------------------------------------------------
 1 | {
 2 |   "openapi": "3.0.0",
 3 |   "info": {
 4 |     "title": "Agency API",
 5 |     "description": "Documentation for Agency API",
 6 |     "version": "1.0",
 7 |     "contact": {}
 8 |   },
 9 |   "tags": [
10 |     {
11 |       "name": "Agency",
12 |       "description": "Documentation for Agency API"
13 |     }
14 |   ],
15 |   "servers": [
16 |     {
17 |       "url": "https://api.msgsndr.com"
18 |     }
19 |   ],
20 |   "components": {
21 |     "securitySchemes": {
22 |       "bearer": {
23 |         "scheme": "bearer",
24 |         "bearerFormat": "JWT",
25 |         "type": "http"
26 |       }
27 |     }
28 |   },
29 |   "paths": {}
30 | }


--------------------------------------------------------------------------------
/assets/images/Screenshot 2024-05-13 at 2.41.43 PM.png:
--------------------------------------------------------------------------------
https://raw.githubusercontent.com/GoHighLevel/highlevel-api-docs/da7caa49c08a258c4f17651304c271b6f494c65d/assets/images/Screenshot 2024-05-13 at 2.41.43 PM.png


--------------------------------------------------------------------------------
/associations/associations.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/associations/relations": {
   5 |       "post": {
   6 |         "operationId": "create-relation",
   7 |         "summary": "Create Relation for you associated entities.",
   8 |         "description": "Create Relation.Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
   9 |         "externalDocs": {
  10 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
  11 |           "description": "Click here for more information"
  12 |         },
  13 |         "parameters": [
  14 |           {
  15 |             "name": "Authorization",
  16 |             "in": "header",
  17 |             "description": "Access Token",
  18 |             "required": true,
  19 |             "schema": {
  20 |               "type": "string",
  21 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  22 |             }
  23 |           },
  24 |           {
  25 |             "name": "Version",
  26 |             "in": "header",
  27 |             "description": "API Version",
  28 |             "required": true,
  29 |             "schema": {
  30 |               "type": "string",
  31 |               "enum": [
  32 |                 "2021-07-28"
  33 |               ]
  34 |             }
  35 |           }
  36 |         ],
  37 |         "requestBody": {
  38 |           "required": true,
  39 |           "content": {
  40 |             "application/json": {
  41 |               "schema": {
  42 |                 "$ref": "#/components/schemas/createRelationReqDto"
  43 |               }
  44 |             }
  45 |           }
  46 |         },
  47 |         "responses": {
  48 |           "201": {
  49 |             "description": "Successful response",
  50 |             "content": {
  51 |               "application/json": {
  52 |                 "schema": {
  53 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
  54 |                 }
  55 |               }
  56 |             }
  57 |           },
  58 |           "400": {
  59 |             "description": "Bad Request",
  60 |             "content": {
  61 |               "application/json": {
  62 |                 "schema": {
  63 |                   "$ref": "#/components/schemas/BadRequestDTO"
  64 |                 }
  65 |               }
  66 |             }
  67 |           },
  68 |           "401": {
  69 |             "description": "Unauthorized",
  70 |             "content": {
  71 |               "application/json": {
  72 |                 "schema": {
  73 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  74 |                 }
  75 |               }
  76 |             }
  77 |           },
  78 |           "422": {
  79 |             "description": "Unprocessable Entity",
  80 |             "content": {
  81 |               "application/json": {
  82 |                 "schema": {
  83 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  84 |                 }
  85 |               }
  86 |             }
  87 |           }
  88 |         },
  89 |         "tags": [
  90 |           "Relations"
  91 |         ],
  92 |         "security": [
  93 |           {
  94 |             "bearer": []
  95 |           }
  96 |         ]
  97 |       }
  98 |     },
  99 |     "/associations/relations/{recordId}": {
 100 |       "get": {
 101 |         "operationId": "get-relations-by-record-id",
 102 |         "summary": "Get all relations By record Id",
 103 |         "description": "Get all relations by record Id",
 104 |         "parameters": [
 105 |           {
 106 |             "name": "Authorization",
 107 |             "in": "header",
 108 |             "description": "Access Token",
 109 |             "required": true,
 110 |             "schema": {
 111 |               "type": "string",
 112 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 113 |             }
 114 |           },
 115 |           {
 116 |             "name": "Version",
 117 |             "in": "header",
 118 |             "description": "API Version",
 119 |             "required": true,
 120 |             "schema": {
 121 |               "type": "string",
 122 |               "enum": [
 123 |                 "2021-07-28"
 124 |               ]
 125 |             }
 126 |           },
 127 |           {
 128 |             "name": "recordId",
 129 |             "required": true,
 130 |             "in": "path",
 131 |             "schema": {
 132 |               "type": "string"
 133 |             }
 134 |           },
 135 |           {
 136 |             "name": "locationId",
 137 |             "required": true,
 138 |             "in": "query",
 139 |             "description": "Your Sub Account's ID",
 140 |             "schema": {
 141 |               "example": "clF1LD04GTUKN3b3XuOj",
 142 |               "type": "string"
 143 |             }
 144 |           },
 145 |           {
 146 |             "name": "skip",
 147 |             "required": true,
 148 |             "in": "query",
 149 |             "schema": {
 150 |               "example": "10",
 151 |               "type": "number"
 152 |             }
 153 |           },
 154 |           {
 155 |             "name": "limit",
 156 |             "required": true,
 157 |             "in": "query",
 158 |             "schema": {
 159 |               "example": "100",
 160 |               "type": "number"
 161 |             }
 162 |           },
 163 |           {
 164 |             "name": "associationIds",
 165 |             "required": false,
 166 |             "in": "query",
 167 |             "description": "Association Ids",
 168 |             "schema": {
 169 |               "type": "array",
 170 |               "items": {
 171 |                 "type": "string"
 172 |               }
 173 |             }
 174 |           }
 175 |         ],
 176 |         "responses": {
 177 |           "200": {
 178 |             "description": "Successful response",
 179 |             "content": {
 180 |               "application/json": {
 181 |                 "schema": {
 182 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 183 |                 }
 184 |               }
 185 |             }
 186 |           },
 187 |           "400": {
 188 |             "description": "Bad Request",
 189 |             "content": {
 190 |               "application/json": {
 191 |                 "schema": {
 192 |                   "$ref": "#/components/schemas/BadRequestDTO"
 193 |                 }
 194 |               }
 195 |             }
 196 |           },
 197 |           "401": {
 198 |             "description": "Unauthorized",
 199 |             "content": {
 200 |               "application/json": {
 201 |                 "schema": {
 202 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 203 |                 }
 204 |               }
 205 |             }
 206 |           },
 207 |           "422": {
 208 |             "description": "Unprocessable Entity",
 209 |             "content": {
 210 |               "application/json": {
 211 |                 "schema": {
 212 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 213 |                 }
 214 |               }
 215 |             }
 216 |           }
 217 |         },
 218 |         "tags": [
 219 |           "Relations"
 220 |         ],
 221 |         "security": [
 222 |           {
 223 |             "bearer": []
 224 |           }
 225 |         ]
 226 |       }
 227 |     },
 228 |     "/associations/relations/{relationId}": {
 229 |       "delete": {
 230 |         "operationId": "delete-relation",
 231 |         "summary": "Delete Relation",
 232 |         "description": "Delete Relation",
 233 |         "parameters": [
 234 |           {
 235 |             "name": "Authorization",
 236 |             "in": "header",
 237 |             "description": "Access Token",
 238 |             "required": true,
 239 |             "schema": {
 240 |               "type": "string",
 241 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 242 |             }
 243 |           },
 244 |           {
 245 |             "name": "Version",
 246 |             "in": "header",
 247 |             "description": "API Version",
 248 |             "required": true,
 249 |             "schema": {
 250 |               "type": "string",
 251 |               "enum": [
 252 |                 "2021-07-28"
 253 |               ]
 254 |             }
 255 |           },
 256 |           {
 257 |             "name": "relationId",
 258 |             "required": true,
 259 |             "in": "path",
 260 |             "schema": {
 261 |               "type": "string"
 262 |             }
 263 |           },
 264 |           {
 265 |             "name": "locationId",
 266 |             "required": true,
 267 |             "in": "query",
 268 |             "description": "Your Sub Account's ID",
 269 |             "schema": {
 270 |               "example": "clF1LD04GTUKN3b3XuOj",
 271 |               "type": "string"
 272 |             }
 273 |           }
 274 |         ],
 275 |         "responses": {
 276 |           "200": {
 277 |             "description": "Successful response",
 278 |             "content": {
 279 |               "application/json": {
 280 |                 "schema": {
 281 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 282 |                 }
 283 |               }
 284 |             }
 285 |           },
 286 |           "400": {
 287 |             "description": "Bad Request",
 288 |             "content": {
 289 |               "application/json": {
 290 |                 "schema": {
 291 |                   "$ref": "#/components/schemas/BadRequestDTO"
 292 |                 }
 293 |               }
 294 |             }
 295 |           },
 296 |           "401": {
 297 |             "description": "Unauthorized",
 298 |             "content": {
 299 |               "application/json": {
 300 |                 "schema": {
 301 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 302 |                 }
 303 |               }
 304 |             }
 305 |           },
 306 |           "422": {
 307 |             "description": "Unprocessable Entity",
 308 |             "content": {
 309 |               "application/json": {
 310 |                 "schema": {
 311 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 312 |                 }
 313 |               }
 314 |             }
 315 |           }
 316 |         },
 317 |         "tags": [
 318 |           "Relations"
 319 |         ],
 320 |         "security": [
 321 |           {
 322 |             "bearer": []
 323 |           }
 324 |         ]
 325 |       }
 326 |     },
 327 |     "/associations/key/{key_name}": {
 328 |       "get": {
 329 |         "operationId": "get-association-key-by-key-name",
 330 |         "summary": "Get association key by key name",
 331 |         "description": "Using this api you can get standard / user defined association by key",
 332 |         "parameters": [
 333 |           {
 334 |             "name": "Authorization",
 335 |             "in": "header",
 336 |             "description": "Access Token",
 337 |             "required": true,
 338 |             "schema": {
 339 |               "type": "string",
 340 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 341 |             }
 342 |           },
 343 |           {
 344 |             "name": "Version",
 345 |             "in": "header",
 346 |             "description": "API Version",
 347 |             "required": true,
 348 |             "schema": {
 349 |               "type": "string",
 350 |               "enum": [
 351 |                 "2021-07-28"
 352 |               ]
 353 |             }
 354 |           },
 355 |           {
 356 |             "name": "key_name",
 357 |             "required": true,
 358 |             "in": "path",
 359 |             "schema": {
 360 |               "type": "string"
 361 |             }
 362 |           },
 363 |           {
 364 |             "name": "locationId",
 365 |             "required": true,
 366 |             "in": "query",
 367 |             "schema": {
 368 |               "type": "string"
 369 |             }
 370 |           }
 371 |         ],
 372 |         "responses": {
 373 |           "200": {
 374 |             "description": "Successful response",
 375 |             "content": {
 376 |               "application/json": {
 377 |                 "schema": {
 378 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 379 |                 }
 380 |               }
 381 |             }
 382 |           },
 383 |           "400": {
 384 |             "description": "Bad Request",
 385 |             "content": {
 386 |               "application/json": {
 387 |                 "schema": {
 388 |                   "$ref": "#/components/schemas/BadRequestDTO"
 389 |                 }
 390 |               }
 391 |             }
 392 |           },
 393 |           "401": {
 394 |             "description": "Unauthorized",
 395 |             "content": {
 396 |               "application/json": {
 397 |                 "schema": {
 398 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 399 |                 }
 400 |               }
 401 |             }
 402 |           },
 403 |           "422": {
 404 |             "description": "Unprocessable Entity",
 405 |             "content": {
 406 |               "application/json": {
 407 |                 "schema": {
 408 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 409 |                 }
 410 |               }
 411 |             }
 412 |           }
 413 |         },
 414 |         "tags": [
 415 |           "Associations"
 416 |         ],
 417 |         "security": [
 418 |           {
 419 |             "bearer": []
 420 |           }
 421 |         ]
 422 |       }
 423 |     },
 424 |     "/associations/objectKey/{objectKey}": {
 425 |       "get": {
 426 |         "operationId": "get-association-by-object-keys",
 427 |         "summary": "Get association by object keys",
 428 |         "description": "Get association by object keys like contacts, custom objects and opportunities. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
 429 |         "externalDocs": {
 430 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
 431 |           "description": "Click here for more information"
 432 |         },
 433 |         "parameters": [
 434 |           {
 435 |             "name": "Authorization",
 436 |             "in": "header",
 437 |             "description": "Access Token",
 438 |             "required": true,
 439 |             "schema": {
 440 |               "type": "string",
 441 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 442 |             }
 443 |           },
 444 |           {
 445 |             "name": "Version",
 446 |             "in": "header",
 447 |             "description": "API Version",
 448 |             "required": true,
 449 |             "schema": {
 450 |               "type": "string",
 451 |               "enum": [
 452 |                 "2021-07-28"
 453 |               ]
 454 |             }
 455 |           },
 456 |           {
 457 |             "name": "objectKey",
 458 |             "required": false,
 459 |             "in": "path",
 460 |             "schema": {
 461 |               "example": "custom_objects.car",
 462 |               "type": "string"
 463 |             }
 464 |           },
 465 |           {
 466 |             "name": "locationId",
 467 |             "required": false,
 468 |             "in": "query",
 469 |             "schema": {
 470 |               "example": "ve9EPM428h8vShlRW1KT",
 471 |               "type": "string"
 472 |             }
 473 |           }
 474 |         ],
 475 |         "responses": {
 476 |           "200": {
 477 |             "description": "Successful response",
 478 |             "content": {
 479 |               "application/json": {
 480 |                 "schema": {
 481 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 482 |                 }
 483 |               }
 484 |             }
 485 |           },
 486 |           "400": {
 487 |             "description": "Bad Request",
 488 |             "content": {
 489 |               "application/json": {
 490 |                 "schema": {
 491 |                   "$ref": "#/components/schemas/BadRequestDTO"
 492 |                 }
 493 |               }
 494 |             }
 495 |           },
 496 |           "401": {
 497 |             "description": "Unauthorized",
 498 |             "content": {
 499 |               "application/json": {
 500 |                 "schema": {
 501 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 502 |                 }
 503 |               }
 504 |             }
 505 |           },
 506 |           "422": {
 507 |             "description": "Unprocessable Entity",
 508 |             "content": {
 509 |               "application/json": {
 510 |                 "schema": {
 511 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 512 |                 }
 513 |               }
 514 |             }
 515 |           }
 516 |         },
 517 |         "tags": [
 518 |           "Associations"
 519 |         ],
 520 |         "security": [
 521 |           {
 522 |             "bearer": []
 523 |           }
 524 |         ]
 525 |       }
 526 |     },
 527 |     "/associations/{associationId}": {
 528 |       "put": {
 529 |         "operationId": "update-association",
 530 |         "summary": "Update Association By Id",
 531 |         "description": "Update Association , Allows you to update labels of an associations. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
 532 |         "externalDocs": {
 533 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
 534 |           "description": "Click here for more information"
 535 |         },
 536 |         "parameters": [
 537 |           {
 538 |             "name": "Authorization",
 539 |             "in": "header",
 540 |             "description": "Access Token",
 541 |             "required": true,
 542 |             "schema": {
 543 |               "type": "string",
 544 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 545 |             }
 546 |           },
 547 |           {
 548 |             "name": "Version",
 549 |             "in": "header",
 550 |             "description": "API Version",
 551 |             "required": true,
 552 |             "schema": {
 553 |               "type": "string",
 554 |               "enum": [
 555 |                 "2021-07-28"
 556 |               ]
 557 |             }
 558 |           },
 559 |           {
 560 |             "name": "associationId",
 561 |             "required": true,
 562 |             "in": "path",
 563 |             "schema": {
 564 |               "type": "string"
 565 |             }
 566 |           }
 567 |         ],
 568 |         "requestBody": {
 569 |           "required": true,
 570 |           "content": {
 571 |             "application/json": {
 572 |               "schema": {
 573 |                 "$ref": "#/components/schemas/UpdateAssociationReqDto"
 574 |               }
 575 |             }
 576 |           }
 577 |         },
 578 |         "responses": {
 579 |           "200": {
 580 |             "description": "Successful response",
 581 |             "content": {
 582 |               "application/json": {
 583 |                 "schema": {
 584 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 585 |                 }
 586 |               }
 587 |             }
 588 |           },
 589 |           "400": {
 590 |             "description": "Bad Request",
 591 |             "content": {
 592 |               "application/json": {
 593 |                 "schema": {
 594 |                   "$ref": "#/components/schemas/BadRequestDTO"
 595 |                 }
 596 |               }
 597 |             }
 598 |           },
 599 |           "401": {
 600 |             "description": "Unauthorized",
 601 |             "content": {
 602 |               "application/json": {
 603 |                 "schema": {
 604 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 605 |                 }
 606 |               }
 607 |             }
 608 |           },
 609 |           "422": {
 610 |             "description": "Unprocessable Entity",
 611 |             "content": {
 612 |               "application/json": {
 613 |                 "schema": {
 614 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 615 |                 }
 616 |               }
 617 |             }
 618 |           }
 619 |         },
 620 |         "tags": [
 621 |           "Associations"
 622 |         ],
 623 |         "security": [
 624 |           {
 625 |             "bearer": []
 626 |           }
 627 |         ]
 628 |       },
 629 |       "delete": {
 630 |         "operationId": "delete-association",
 631 |         "summary": "Delete Association",
 632 |         "description": "Delete USER_DEFINED Association By Id, deleting an association will also all the relations for that association",
 633 |         "parameters": [
 634 |           {
 635 |             "name": "Authorization",
 636 |             "in": "header",
 637 |             "description": "Access Token",
 638 |             "required": true,
 639 |             "schema": {
 640 |               "type": "string",
 641 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 642 |             }
 643 |           },
 644 |           {
 645 |             "name": "Version",
 646 |             "in": "header",
 647 |             "description": "API Version",
 648 |             "required": true,
 649 |             "schema": {
 650 |               "type": "string",
 651 |               "enum": [
 652 |                 "2021-07-28"
 653 |               ]
 654 |             }
 655 |           },
 656 |           {
 657 |             "name": "associationId",
 658 |             "required": true,
 659 |             "in": "path",
 660 |             "schema": {
 661 |               "type": "string"
 662 |             }
 663 |           }
 664 |         ],
 665 |         "responses": {
 666 |           "200": {
 667 |             "description": "Successful response",
 668 |             "content": {
 669 |               "application/json": {
 670 |                 "schema": {
 671 |                   "$ref": "#/components/schemas/DeleteAssociationsResponseDTO"
 672 |                 }
 673 |               }
 674 |             }
 675 |           },
 676 |           "400": {
 677 |             "description": "Bad Request",
 678 |             "content": {
 679 |               "application/json": {
 680 |                 "schema": {
 681 |                   "$ref": "#/components/schemas/BadRequestDTO"
 682 |                 }
 683 |               }
 684 |             }
 685 |           },
 686 |           "401": {
 687 |             "description": "Unauthorized",
 688 |             "content": {
 689 |               "application/json": {
 690 |                 "schema": {
 691 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 692 |                 }
 693 |               }
 694 |             }
 695 |           },
 696 |           "422": {
 697 |             "description": "Unprocessable Entity",
 698 |             "content": {
 699 |               "application/json": {
 700 |                 "schema": {
 701 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 702 |                 }
 703 |               }
 704 |             }
 705 |           }
 706 |         },
 707 |         "tags": [
 708 |           "Associations"
 709 |         ],
 710 |         "security": [
 711 |           {
 712 |             "bearer": []
 713 |           }
 714 |         ]
 715 |       },
 716 |       "get": {
 717 |         "operationId": "get-association-by-ID",
 718 |         "summary": "Get association by ID",
 719 |         "description": "Using this api you can get SYSTEM_DEFINED / USER_DEFINED association by id ",
 720 |         "parameters": [
 721 |           {
 722 |             "name": "Authorization",
 723 |             "in": "header",
 724 |             "description": "Access Token",
 725 |             "required": true,
 726 |             "schema": {
 727 |               "type": "string",
 728 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 729 |             }
 730 |           },
 731 |           {
 732 |             "name": "Version",
 733 |             "in": "header",
 734 |             "description": "API Version",
 735 |             "required": true,
 736 |             "schema": {
 737 |               "type": "string",
 738 |               "enum": [
 739 |                 "2021-07-28"
 740 |               ]
 741 |             }
 742 |           },
 743 |           {
 744 |             "name": "associationId",
 745 |             "required": true,
 746 |             "in": "path",
 747 |             "schema": {
 748 |               "type": "string"
 749 |             }
 750 |           }
 751 |         ],
 752 |         "responses": {
 753 |           "200": {
 754 |             "description": "Successful response",
 755 |             "content": {
 756 |               "application/json": {
 757 |                 "schema": {
 758 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 759 |                 }
 760 |               }
 761 |             }
 762 |           },
 763 |           "400": {
 764 |             "description": "Bad Request",
 765 |             "content": {
 766 |               "application/json": {
 767 |                 "schema": {
 768 |                   "$ref": "#/components/schemas/BadRequestDTO"
 769 |                 }
 770 |               }
 771 |             }
 772 |           },
 773 |           "401": {
 774 |             "description": "Unauthorized",
 775 |             "content": {
 776 |               "application/json": {
 777 |                 "schema": {
 778 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 779 |                 }
 780 |               }
 781 |             }
 782 |           },
 783 |           "422": {
 784 |             "description": "Unprocessable Entity",
 785 |             "content": {
 786 |               "application/json": {
 787 |                 "schema": {
 788 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 789 |                 }
 790 |               }
 791 |             }
 792 |           }
 793 |         },
 794 |         "tags": [
 795 |           "Associations"
 796 |         ],
 797 |         "security": [
 798 |           {
 799 |             "bearer": []
 800 |           }
 801 |         ]
 802 |       }
 803 |     },
 804 |     "/associations/": {
 805 |       "post": {
 806 |         "operationId": "create-association",
 807 |         "summary": "Create Association",
 808 |         "description": "Allow you to create contact - contact , contact - custom objects associations, will add more in the future.Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
 809 |         "externalDocs": {
 810 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-293776/cd0f4122abc04d3",
 811 |           "description": "Click here for more information"
 812 |         },
 813 |         "parameters": [
 814 |           {
 815 |             "name": "Authorization",
 816 |             "in": "header",
 817 |             "description": "Access Token",
 818 |             "required": true,
 819 |             "schema": {
 820 |               "type": "string",
 821 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 822 |             }
 823 |           },
 824 |           {
 825 |             "name": "Version",
 826 |             "in": "header",
 827 |             "description": "API Version",
 828 |             "required": true,
 829 |             "schema": {
 830 |               "type": "string",
 831 |               "enum": [
 832 |                 "2021-07-28"
 833 |               ]
 834 |             }
 835 |           }
 836 |         ],
 837 |         "requestBody": {
 838 |           "required": true,
 839 |           "content": {
 840 |             "application/json": {
 841 |               "schema": {
 842 |                 "$ref": "#/components/schemas/createAssociationReqDto"
 843 |               }
 844 |             }
 845 |           }
 846 |         },
 847 |         "responses": {
 848 |           "201": {
 849 |             "description": "Successful response",
 850 |             "content": {
 851 |               "application/json": {
 852 |                 "schema": {
 853 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 854 |                 }
 855 |               }
 856 |             }
 857 |           },
 858 |           "400": {
 859 |             "description": "Bad Request",
 860 |             "content": {
 861 |               "application/json": {
 862 |                 "schema": {
 863 |                   "$ref": "#/components/schemas/BadRequestDTO"
 864 |                 }
 865 |               }
 866 |             }
 867 |           },
 868 |           "401": {
 869 |             "description": "Unauthorized",
 870 |             "content": {
 871 |               "application/json": {
 872 |                 "schema": {
 873 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 874 |                 }
 875 |               }
 876 |             }
 877 |           },
 878 |           "422": {
 879 |             "description": "Unprocessable Entity",
 880 |             "content": {
 881 |               "application/json": {
 882 |                 "schema": {
 883 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 884 |                 }
 885 |               }
 886 |             }
 887 |           }
 888 |         },
 889 |         "tags": [
 890 |           "Associations"
 891 |         ],
 892 |         "security": [
 893 |           {
 894 |             "bearer": []
 895 |           }
 896 |         ]
 897 |       },
 898 |       "get": {
 899 |         "operationId": "find-associations",
 900 |         "summary": "Get all associations for a sub-account / location",
 901 |         "description": "Get all Associations",
 902 |         "parameters": [
 903 |           {
 904 |             "name": "Authorization",
 905 |             "in": "header",
 906 |             "description": "Access Token",
 907 |             "required": true,
 908 |             "schema": {
 909 |               "type": "string",
 910 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 911 |             }
 912 |           },
 913 |           {
 914 |             "name": "Version",
 915 |             "in": "header",
 916 |             "description": "API Version",
 917 |             "required": true,
 918 |             "schema": {
 919 |               "type": "string",
 920 |               "enum": [
 921 |                 "2021-07-28"
 922 |               ]
 923 |             }
 924 |           },
 925 |           {
 926 |             "name": "locationId",
 927 |             "required": true,
 928 |             "in": "query",
 929 |             "schema": {
 930 |               "example": "string",
 931 |               "type": "string"
 932 |             }
 933 |           },
 934 |           {
 935 |             "name": "skip",
 936 |             "required": true,
 937 |             "in": "query",
 938 |             "schema": {
 939 |               "example": "10",
 940 |               "type": "number"
 941 |             }
 942 |           },
 943 |           {
 944 |             "name": "limit",
 945 |             "required": true,
 946 |             "in": "query",
 947 |             "schema": {
 948 |               "example": "100",
 949 |               "type": "number"
 950 |             }
 951 |           }
 952 |         ],
 953 |         "responses": {
 954 |           "200": {
 955 |             "description": "Successful response",
 956 |             "content": {
 957 |               "application/json": {
 958 |                 "schema": {
 959 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDto"
 960 |                 }
 961 |               }
 962 |             }
 963 |           },
 964 |           "400": {
 965 |             "description": "Bad Request",
 966 |             "content": {
 967 |               "application/json": {
 968 |                 "schema": {
 969 |                   "$ref": "#/components/schemas/BadRequestDTO"
 970 |                 }
 971 |               }
 972 |             }
 973 |           },
 974 |           "401": {
 975 |             "description": "Unauthorized",
 976 |             "content": {
 977 |               "application/json": {
 978 |                 "schema": {
 979 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 980 |                 }
 981 |               }
 982 |             }
 983 |           },
 984 |           "422": {
 985 |             "description": "Unprocessable Entity",
 986 |             "content": {
 987 |               "application/json": {
 988 |                 "schema": {
 989 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 990 |                 }
 991 |               }
 992 |             }
 993 |           }
 994 |         },
 995 |         "tags": [
 996 |           "Associations"
 997 |         ],
 998 |         "security": [
 999 |           {
1000 |             "bearer": []
1001 |           }
1002 |         ]
1003 |       }
1004 |     }
1005 |   },
1006 |   "info": {
1007 |     "title": "Associations API",
1008 |     "description": "Documentation for Associations API",
1009 |     "version": "1.0",
1010 |     "contact": {}
1011 |   },
1012 |   "tags": [
1013 |     {
1014 |       "name": "Associations",
1015 |       "description": "Documentation for Associations API"
1016 |     }
1017 |   ],
1018 |   "servers": [
1019 |     {
1020 |       "url": "https://services.leadconnectorhq.com"
1021 |     }
1022 |   ],
1023 |   "components": {
1024 |     "securitySchemes": {
1025 |       "bearer": {
1026 |         "scheme": "bearer",
1027 |         "bearerFormat": "JWT",
1028 |         "name": "Authorization",
1029 |         "in": "header",
1030 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1031 |         "type": "http"
1032 |       },
1033 |       "Location-Access": {
1034 |         "scheme": "bearer",
1035 |         "bearerFormat": "JWT",
1036 |         "name": "Authorization",
1037 |         "in": "header",
1038 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1039 |         "type": "http"
1040 |       },
1041 |       "Agency-Access": {
1042 |         "scheme": "bearer",
1043 |         "bearerFormat": "JWT",
1044 |         "name": "Authorization",
1045 |         "in": "header",
1046 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
1047 |         "type": "http"
1048 |       }
1049 |     },
1050 |     "schemas": {
1051 |       "BadRequestDTO": {
1052 |         "type": "object",
1053 |         "properties": {
1054 |           "statusCode": {
1055 |             "type": "number",
1056 |             "example": 400
1057 |           },
1058 |           "message": {
1059 |             "type": "string",
1060 |             "example": "Bad Request"
1061 |           }
1062 |         }
1063 |       },
1064 |       "UnauthorizedDTO": {
1065 |         "type": "object",
1066 |         "properties": {
1067 |           "statusCode": {
1068 |             "type": "number",
1069 |             "example": 401
1070 |           },
1071 |           "message": {
1072 |             "type": "string",
1073 |             "example": "Invalid token: access token is invalid"
1074 |           },
1075 |           "error": {
1076 |             "type": "string",
1077 |             "example": "Unauthorized"
1078 |           }
1079 |         }
1080 |       },
1081 |       "UnprocessableDTO": {
1082 |         "type": "object",
1083 |         "properties": {
1084 |           "statusCode": {
1085 |             "type": "number",
1086 |             "example": 422
1087 |           },
1088 |           "message": {
1089 |             "example": [
1090 |               "Unprocessable Entity"
1091 |             ],
1092 |             "type": "array",
1093 |             "items": {
1094 |               "type": "string"
1095 |             }
1096 |           },
1097 |           "error": {
1098 |             "type": "string",
1099 |             "example": "Unprocessable Entity"
1100 |           }
1101 |         }
1102 |       },
1103 |       "createRelationReqDto": {
1104 |         "type": "object",
1105 |         "properties": {
1106 |           "locationId": {
1107 |             "type": "string",
1108 |             "example": "clF1LD04GTUKN3b3XuOj",
1109 |             "description": "Your Sub Account's ID"
1110 |           },
1111 |           "associationId": {
1112 |             "type": "string",
1113 |             "example": "ve9EPM428h8vShlRW1KT",
1114 |             "description": "Association's Id"
1115 |           },
1116 |           "firstRecordId": {
1117 |             "type": "string",
1118 |             "example": "ve9EPM428h8vShlRW1KT",
1119 |             "description": "First Record's Id. For instance, if you have an association between a contact and a custom object, and you specify the contact as the first object while creating the association, then your firstRecordId would be the contactId "
1120 |           },
1121 |           "secondRecordId": {
1122 |             "type": "string",
1123 |             "example": "ve9EPM428h8vShlRW1KT",
1124 |             "description": "Second Record's Id.For instance, if you have an association between a contact and a custom object, and you specify the custom object as the second entity while creating the association, then your secondRecordId would be the customObject record Id"
1125 |           }
1126 |         },
1127 |         "required": [
1128 |           "locationId",
1129 |           "associationId",
1130 |           "firstRecordId",
1131 |           "secondRecordId"
1132 |         ]
1133 |       },
1134 |       "GetPostSuccessfulResponseDto": {
1135 |         "type": "object",
1136 |         "properties": {
1137 |           "locationId": {
1138 |             "type": "string",
1139 |             "example": "string"
1140 |           },
1141 |           "id": {
1142 |             "type": "string",
1143 |             "example": "ve9EPM428h8vShlRW1KT"
1144 |           },
1145 |           "key": {
1146 |             "type": "string",
1147 |             "example": "student",
1148 |             "description": "First Objects Association Label (custom_objects.children)"
1149 |           },
1150 |           "firstObjectLabel": {
1151 |             "type": "object",
1152 |             "example": "student",
1153 |             "description": "First Objects Association Label (custom_objects.children)"
1154 |           },
1155 |           "firstObjectKey": {
1156 |             "type": "object",
1157 |             "example": "custom_objects.children",
1158 |             "description": "First Objects Key"
1159 |           },
1160 |           "secondObjectLabel": {
1161 |             "type": "object",
1162 |             "example": "Teacher",
1163 |             "description": "Second Object Association Label (contact)"
1164 |           },
1165 |           "secondObjectKey": {
1166 |             "type": "object",
1167 |             "example": "contact",
1168 |             "description": "Second Objects Key"
1169 |           },
1170 |           "associationType": {
1171 |             "type": "object",
1172 |             "example": "USER_DEFINED",
1173 |             "description": "Association Type can be USER_DEFINED or SYSTEM_DEFINED"
1174 |           }
1175 |         },
1176 |         "required": [
1177 |           "locationId",
1178 |           "id",
1179 |           "key",
1180 |           "firstObjectLabel",
1181 |           "firstObjectKey",
1182 |           "secondObjectLabel",
1183 |           "secondObjectKey",
1184 |           "associationType"
1185 |         ]
1186 |       },
1187 |       "createAssociationReqDto": {
1188 |         "type": "object",
1189 |         "properties": {
1190 |           "locationId": {
1191 |             "type": "string",
1192 |             "example": "string"
1193 |           },
1194 |           "key": {
1195 |             "type": "string",
1196 |             "example": "student_teacher",
1197 |             "description": "Association's Unique key"
1198 |           },
1199 |           "firstObjectLabel": {
1200 |             "type": "object",
1201 |             "example": "student",
1202 |             "description": "First Objects Association Label (custom_objects.children)"
1203 |           },
1204 |           "firstObjectKey": {
1205 |             "type": "object",
1206 |             "example": "custom_objects.children",
1207 |             "description": "First Objects Key"
1208 |           },
1209 |           "secondObjectLabel": {
1210 |             "type": "object",
1211 |             "example": "Teacher",
1212 |             "description": "Second Object Association Label (contact)"
1213 |           },
1214 |           "secondObjectKey": {
1215 |             "type": "object",
1216 |             "example": "contact",
1217 |             "description": "Second Objects Key"
1218 |           }
1219 |         },
1220 |         "required": [
1221 |           "locationId",
1222 |           "key",
1223 |           "firstObjectLabel",
1224 |           "firstObjectKey",
1225 |           "secondObjectLabel",
1226 |           "secondObjectKey"
1227 |         ]
1228 |       },
1229 |       "UpdateAssociationReqDto": {
1230 |         "type": "object",
1231 |         "properties": {
1232 |           "firstObjectLabel": {
1233 |             "type": "object",
1234 |             "example": "student"
1235 |           },
1236 |           "secondObjectLabel": {
1237 |             "type": "object",
1238 |             "example": "tutor"
1239 |           }
1240 |         },
1241 |         "required": [
1242 |           "firstObjectLabel",
1243 |           "secondObjectLabel"
1244 |         ]
1245 |       },
1246 |       "DeleteAssociationsResponseDTO": {
1247 |         "type": "object",
1248 |         "properties": {
1249 |           "deleted": {
1250 |             "type": "boolean",
1251 |             "example": true,
1252 |             "description": "Deletion status"
1253 |           },
1254 |           "id": {
1255 |             "type": "string",
1256 |             "example": "6d6f6e676f5f6576656e7473",
1257 |             "description": "Association Id"
1258 |           },
1259 |           "message": {
1260 |             "type": "string",
1261 |             "example": "Association deleted successfully"
1262 |           }
1263 |         },
1264 |         "required": [
1265 |           "deleted",
1266 |           "id",
1267 |           "message"
1268 |         ]
1269 |       }
1270 |     }
1271 |   }
1272 | }


--------------------------------------------------------------------------------
/blogs/blogs.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/blogs/posts/url-slug-exists": {
   5 |       "get": {
   6 |         "operationId": "check-url-slug-exists",
   7 |         "summary": "Check url slug",
   8 |         "description": "The \"Check url slug\" API allows check the blog slug validation which is needed before publishing any blog post. Please use blogs/check-slug.readonly. you can find the POST ID from the post edit url.",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513ef"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "urlSlug",
  34 |             "required": true,
  35 |             "in": "query",
  36 |             "schema": {
  37 |               "type": "string"
  38 |             }
  39 |           },
  40 |           {
  41 |             "name": "locationId",
  42 |             "required": true,
  43 |             "in": "query",
  44 |             "example": "ve9EPM428h8vShlRW1KT",
  45 |             "schema": {
  46 |               "type": "string"
  47 |             }
  48 |           },
  49 |           {
  50 |             "name": "postId",
  51 |             "required": false,
  52 |             "example": "66f429b8afdce84227a4610d",
  53 |             "in": "query",
  54 |             "schema": {
  55 |               "type": "string"
  56 |             }
  57 |           }
  58 |         ],
  59 |         "responses": {
  60 |           "200": {
  61 |             "description": "Successful response",
  62 |             "content": {
  63 |               "application/json": {
  64 |                 "schema": {
  65 |                   "$ref": "#/components/schemas/UrlSlugCheckResponseDTO"
  66 |                 }
  67 |               }
  68 |             }
  69 |           },
  70 |           "422": {
  71 |             "description": "Unprocessable Entity",
  72 |             "content": {
  73 |               "application/json": {
  74 |                 "schema": {
  75 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  76 |                 }
  77 |               }
  78 |             }
  79 |           },
  80 |           "400": {
  81 |             "description": "Bad Request",
  82 |             "content": {
  83 |               "application/json": {
  84 |                 "schema": {
  85 |                   "$ref": "#/components/schemas/BadRequestDTO"
  86 |                 }
  87 |               }
  88 |             }
  89 |           },
  90 |           "401": {
  91 |             "description": "Unauthorized",
  92 |             "content": {
  93 |               "application/json": {
  94 |                 "schema": {
  95 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  96 |                 }
  97 |               }
  98 |             }
  99 |           }
 100 |         },
 101 |         "security": [
 102 |           {
 103 |             "Location-Access": []
 104 |           }
 105 |         ]
 106 |       }
 107 |     },
 108 |     "/blogs/posts/{postId}": {
 109 |       "put": {
 110 |         "operationId": "update-blog-post",
 111 |         "summary": "Update Blog Post",
 112 |         "description": "The \"Update Blog Post\" API allows you update blog post for any given blog site. Please use blogs/post-update.write",
 113 |         "parameters": [
 114 |           {
 115 |             "name": "Authorization",
 116 |             "in": "header",
 117 |             "description": "Access Token",
 118 |             "required": true,
 119 |             "schema": {
 120 |               "type": "string",
 121 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 122 |             }
 123 |           },
 124 |           {
 125 |             "name": "Version",
 126 |             "in": "header",
 127 |             "description": "API Version",
 128 |             "required": true,
 129 |             "schema": {
 130 |               "type": "string",
 131 |               "enum": [
 132 |                 "2021-07-28"
 133 |               ]
 134 |             }
 135 |           }
 136 |         ],
 137 |         "requestBody": {
 138 |           "required": true,
 139 |           "content": {
 140 |             "application/json": {
 141 |               "schema": {
 142 |                 "$ref": "#/components/schemas/UpdateBlogPostParams"
 143 |               }
 144 |             }
 145 |           }
 146 |         },
 147 |         "responses": {
 148 |           "200": {
 149 |             "description": "Successful response",
 150 |             "content": {
 151 |               "application/json": {
 152 |                 "schema": {
 153 |                   "$ref": "#/components/schemas/BlogPostUpdateResponseWrapperDTO"
 154 |                 }
 155 |               }
 156 |             }
 157 |           },
 158 |           "422": {
 159 |             "description": "Unprocessable Entity",
 160 |             "content": {
 161 |               "application/json": {
 162 |                 "schema": {
 163 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 164 |                 }
 165 |               }
 166 |             }
 167 |           },
 168 |           "400": {
 169 |             "description": "Bad Request",
 170 |             "content": {
 171 |               "application/json": {
 172 |                 "schema": {
 173 |                   "$ref": "#/components/schemas/BadRequestDTO"
 174 |                 }
 175 |               }
 176 |             }
 177 |           },
 178 |           "401": {
 179 |             "description": "Unauthorized",
 180 |             "content": {
 181 |               "application/json": {
 182 |                 "schema": {
 183 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 184 |                 }
 185 |               }
 186 |             }
 187 |           }
 188 |         },
 189 |         "security": [
 190 |           {
 191 |             "Location-Access": []
 192 |           }
 193 |         ]
 194 |       }
 195 |     },
 196 |     "/blogs/posts": {
 197 |       "post": {
 198 |         "operationId": "create-blog-post",
 199 |         "summary": "Create Blog Post",
 200 |         "description": "The \"Create Blog Post\" API allows you create blog post for any given blog site. Please use blogs/post.write",
 201 |         "parameters": [
 202 |           {
 203 |             "name": "Authorization",
 204 |             "in": "header",
 205 |             "description": "Access Token",
 206 |             "required": true,
 207 |             "schema": {
 208 |               "type": "string",
 209 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 210 |             }
 211 |           },
 212 |           {
 213 |             "name": "Version",
 214 |             "in": "header",
 215 |             "description": "API Version",
 216 |             "required": true,
 217 |             "schema": {
 218 |               "type": "string",
 219 |               "enum": [
 220 |                 "2021-07-28"
 221 |               ]
 222 |             }
 223 |           }
 224 |         ],
 225 |         "requestBody": {
 226 |           "required": true,
 227 |           "content": {
 228 |             "application/json": {
 229 |               "schema": {
 230 |                 "$ref": "#/components/schemas/CreateBlogPostParams"
 231 |               }
 232 |             }
 233 |           }
 234 |         },
 235 |         "responses": {
 236 |           "200": {
 237 |             "description": "Successful response",
 238 |             "content": {
 239 |               "application/json": {
 240 |                 "schema": {
 241 |                   "$ref": "#/components/schemas/BlogPostCreateResponseWrapperDTO"
 242 |                 }
 243 |               }
 244 |             }
 245 |           },
 246 |           "422": {
 247 |             "description": "Unprocessable Entity",
 248 |             "content": {
 249 |               "application/json": {
 250 |                 "schema": {
 251 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 252 |                 }
 253 |               }
 254 |             }
 255 |           },
 256 |           "400": {
 257 |             "description": "Bad Request",
 258 |             "content": {
 259 |               "application/json": {
 260 |                 "schema": {
 261 |                   "$ref": "#/components/schemas/BadRequestDTO"
 262 |                 }
 263 |               }
 264 |             }
 265 |           },
 266 |           "401": {
 267 |             "description": "Unauthorized",
 268 |             "content": {
 269 |               "application/json": {
 270 |                 "schema": {
 271 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 272 |                 }
 273 |               }
 274 |             }
 275 |           }
 276 |         },
 277 |         "security": [
 278 |           {
 279 |             "Location-Access": []
 280 |           }
 281 |         ]
 282 |       }
 283 |     },
 284 |     "/blogs/authors": {
 285 |       "get": {
 286 |         "operationId": "get-all-blog-authors-by-location",
 287 |         "summary": "Get all authors",
 288 |         "description": "The \"Get all authors\" Api return the blog authors for a given location ID. Please use \"blogs/author.readonly\" ",
 289 |         "parameters": [
 290 |           {
 291 |             "name": "Authorization",
 292 |             "in": "header",
 293 |             "description": "Access Token",
 294 |             "required": true,
 295 |             "schema": {
 296 |               "type": "string",
 297 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 298 |             }
 299 |           },
 300 |           {
 301 |             "name": "Version",
 302 |             "in": "header",
 303 |             "description": "API Version",
 304 |             "required": true,
 305 |             "schema": {
 306 |               "type": "string",
 307 |               "enum": [
 308 |                 "2021-07-28"
 309 |               ]
 310 |             }
 311 |           },
 312 |           {
 313 |             "name": "locationId",
 314 |             "required": true,
 315 |             "in": "query",
 316 |             "description": "Location Id",
 317 |             "example": "ve9EPM428h8vShlRW1KT",
 318 |             "schema": {
 319 |               "type": "string"
 320 |             }
 321 |           },
 322 |           {
 323 |             "name": "limit",
 324 |             "required": true,
 325 |             "description": "Number of authors to show in the listing",
 326 |             "in": "query",
 327 |             "example": 5,
 328 |             "schema": {
 329 |               "type": "number"
 330 |             }
 331 |           },
 332 |           {
 333 |             "name": "offset",
 334 |             "required": true,
 335 |             "description": "Number of authors to skip in listing",
 336 |             "in": "query",
 337 |             "example": 0,
 338 |             "schema": {
 339 |               "type": "number"
 340 |             }
 341 |           }
 342 |         ],
 343 |         "responses": {
 344 |           "200": {
 345 |             "description": "Successful response",
 346 |             "content": {
 347 |               "application/json": {
 348 |                 "schema": {
 349 |                   "$ref": "#/components/schemas/AuthorsResponseDTO"
 350 |                 }
 351 |               }
 352 |             }
 353 |           },
 354 |           "422": {
 355 |             "description": "Unprocessable Entity",
 356 |             "content": {
 357 |               "application/json": {
 358 |                 "schema": {
 359 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 360 |                 }
 361 |               }
 362 |             }
 363 |           },"400": {
 364 |             "description": "Bad Request",
 365 |             "content": {
 366 |               "application/json": {
 367 |                 "schema": {
 368 |                   "$ref": "#/components/schemas/BadRequestDTO"
 369 |                 }
 370 |               }
 371 |             }
 372 |           },
 373 |           "401": {
 374 |             "description": "Unauthorized",
 375 |             "content": {
 376 |               "application/json": {
 377 |                 "schema": {
 378 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 379 |                 }
 380 |               }
 381 |             }
 382 |           }
 383 |         },
 384 |         "security": [
 385 |           {
 386 |             "Location-Access": []
 387 |           }
 388 |         ]
 389 |       }
 390 |     },
 391 |     "/blogs/categories": {
 392 |       "get": {
 393 |         "operationId": "get-all-categories-by-location",
 394 |         "summary": "Get all categories",
 395 |         "description": "The \"Get all categories\" Api return the blog categoies for a given location ID. Please use \"blogs/category.readonly\" ",
 396 |         "parameters": [
 397 |           {
 398 |             "name": "Authorization",
 399 |             "in": "header",
 400 |             "description": "Access Token",
 401 |             "required": true,
 402 |             "schema": {
 403 |               "type": "string",
 404 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 405 |             }
 406 |           },
 407 |           {
 408 |             "name": "Version",
 409 |             "in": "header",
 410 |             "description": "API Version",
 411 |             "required": true,
 412 |             "schema": {
 413 |               "type": "string",
 414 |               "enum": [
 415 |                 "2021-07-28"
 416 |               ]
 417 |             }
 418 |           },
 419 |           {
 420 |             "name": "locationId",
 421 |             "required": true,
 422 |             "in": "query",
 423 |             "example": "ve9EPM428h8vShlRW1KT",
 424 |             "schema": {
 425 |               "type": "string"
 426 |             }
 427 |           },
 428 |           {
 429 |             "name": "limit",
 430 |             "required": true,
 431 |             "in": "query",
 432 |             "description": "Number of categories to show in the listing",
 433 |             "schema": {
 434 |               "type": "number"
 435 |             }
 436 |           },
 437 |           {
 438 |             "name": "offset",
 439 |             "required": true,
 440 |             "description": "Number of categories to skip in listing",
 441 |             "in": "query",
 442 |             "schema": {
 443 |               "type": "number"
 444 |             }
 445 |           }
 446 |         ],
 447 |         "responses": {
 448 |           "200": {
 449 |             "description": "Successful response",
 450 |             "content": {
 451 |               "application/json": {
 452 |                 "schema": {
 453 |                   "$ref": "#/components/schemas/CategoriesResponseDTO"
 454 |                 }
 455 |               }
 456 |             }
 457 |           },
 458 |           "422": {
 459 |             "description": "Unprocessable Entity",
 460 |             "content": {
 461 |               "application/json": {
 462 |                 "schema": {
 463 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 464 |                 }
 465 |               }
 466 |             }
 467 |           },
 468 |           "400": {
 469 |             "description": "Bad Request",
 470 |             "content": {
 471 |               "application/json": {
 472 |                 "schema": {
 473 |                   "$ref": "#/components/schemas/BadRequestDTO"
 474 |                 }
 475 |               }
 476 |             }
 477 |           },
 478 |           "401": {
 479 |             "description": "Unauthorized",
 480 |             "content": {
 481 |               "application/json": {
 482 |                 "schema": {
 483 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 484 |                 }
 485 |               }
 486 |             }
 487 |           }
 488 |         },
 489 |         "security": [
 490 |           {
 491 |             "Location-Access": []
 492 |           }
 493 |         ]
 494 |       }
 495 |     },
 496 |     "/blogs/posts/all": {
 497 |       "get": {
 498 |         "operationId": "get-blog-post",
 499 |         "summary": "Get Blog posts by Blog ID",
 500 |         "description": "The \"Get Blog posts by Blog ID\" API allows you get blog posts for any given blog site using blog ID.Please use blogs/posts.readonly",
 501 |         "parameters": [
 502 |           {
 503 |             "name": "Authorization",
 504 |             "in": "header",
 505 |             "description": "Access Token",
 506 |             "required": true,
 507 |             "schema": {
 508 |               "type": "string",
 509 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 510 |             }
 511 |           },
 512 |           {
 513 |             "name": "Version",
 514 |             "in": "header",
 515 |             "description": "API Version",
 516 |             "required": true,
 517 |             "schema": {
 518 |               "type": "string",
 519 |               "enum": [
 520 |                 "2021-07-28"
 521 |               ]
 522 |             }
 523 |           },
 524 |           {
 525 |             "name": "locationId",
 526 |             "required": true,
 527 |             "in": "query",
 528 |             "example": "ve9EPM428h8vShlRW1KT",
 529 |             "schema": {
 530 |               "type": "string"
 531 |             }
 532 |           },
 533 |           {
 534 |             "name": "blogId",
 535 |             "required": true,
 536 |             "example": "66f429b8afdce84227a4610d",
 537 |             "in": "query",
 538 |             "schema": {
 539 |               "type": "string"
 540 |             }
 541 |           },
 542 |           {
 543 |             "name": "limit",
 544 |             "required": true,
 545 |             "example":4,
 546 |             "in": "query",
 547 |             "schema": {
 548 |               "type": "number"
 549 |             }
 550 |           },
 551 |           {
 552 |             "name": "offset",
 553 |             "required": true,
 554 |             "example":0,
 555 |             "in": "query",
 556 |             "schema": {
 557 |               "type": "number"
 558 |             }
 559 |           },
 560 |           {
 561 |             "name": "searchTerm",
 562 |             "required": false,
 563 |             "description": "search for any post by name",
 564 |             "example":"ai news",
 565 |             "in": "query",
 566 |             "schema": {
 567 |               "type": "string"
 568 |             }
 569 |           },
 570 |           {
 571 |             "name": "status",
 572 |             "required": false,
 573 |             "example":"PUBLISHED",
 574 |             "in": "query",
 575 |             "schema": {
 576 |               "enum": [
 577 |                 "PUBLISHED",
 578 |                 "SCHEDULED",
 579 |                 "ARCHIVED",
 580 |                 "DRAFT"
 581 |               ],
 582 |               "type": "string"
 583 |             }
 584 |             
 585 |           }
 586 |         ],
 587 |         "responses": {
 588 |           "200": {
 589 |             "description": "Successful response",
 590 |             "content": {
 591 |               "application/json": {
 592 |                 "schema": {
 593 |                   "$ref": "#/components/schemas/BlogPostGetResponseWrapperDTO"
 594 |                 }
 595 |               }
 596 |             }
 597 |           },
 598 |           "422": {
 599 |             "description": "Unprocessable Entity",
 600 |             "content": {
 601 |               "application/json": {
 602 |                 "schema": {
 603 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 604 |                 }
 605 |               }
 606 |             }
 607 |           },
 608 |           "400": {
 609 |             "description": "Bad Request",
 610 |             "content": {
 611 |               "application/json": {
 612 |                 "schema": {
 613 |                   "$ref": "#/components/schemas/BadRequestDTO"
 614 |                 }
 615 |               }
 616 |             }
 617 |           },
 618 |           "401": {
 619 |             "description": "Unauthorized",
 620 |             "content": {
 621 |               "application/json": {
 622 |                 "schema": {
 623 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 624 |                 }
 625 |               }
 626 |             }
 627 |           }
 628 |         },
 629 |         "security": [
 630 |           {
 631 |             "Location-Access": []
 632 |           }
 633 |         ]
 634 |       }
 635 |     },
 636 |     "/blogs/site/all": {
 637 |       "get": {
 638 |         "operationId": "get-blogs",
 639 |         "summary": "Get Blogs by Location ID",
 640 |         "description": "The \"Get Blogs by Location ID\" API allows you get blogs using Location ID.Please use blogs/list.readonly",
 641 |         "parameters": [
 642 |           {
 643 |             "name": "Authorization",
 644 |             "in": "header",
 645 |             "description": "Access Token",
 646 |             "required": true,
 647 |             "schema": {
 648 |               "type": "string",
 649 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 650 |             }
 651 |           },
 652 |           {
 653 |             "name": "Version",
 654 |             "in": "header",
 655 |             "description": "API Version",
 656 |             "required": true,
 657 |             "schema": {
 658 |               "type": "string",
 659 |               "enum": [
 660 |                 "2021-07-28"
 661 |               ]
 662 |             }
 663 |           },
 664 |           {
 665 |             "name": "locationId",
 666 |             "required": true,
 667 |             "in": "query",
 668 |             "example": "ve9EPM428h8vShlRW1KT",
 669 |             "schema": {
 670 |               "type": "string"
 671 |             }
 672 |           },
 673 |           {
 674 |             "name": "skip",
 675 |             "required": true,
 676 |             "in": "query",
 677 |             "example":0,
 678 |             "schema": {
 679 |               "type": "number"
 680 |             }
 681 |           },
 682 |           {
 683 |             "name": "limit",
 684 |             "required": true,
 685 |             "in": "query",
 686 |             "example":4,
 687 |             "schema": {
 688 |               "type": "number"
 689 |             }
 690 |           },
 691 |           {
 692 |             "name": "searchTerm",
 693 |             "required": false,
 694 |             "description": "search for any post by name",
 695 |             "example":"ai news",
 696 |             "in": "query",
 697 |             "schema": {
 698 |               "type": "string"
 699 |             }
 700 |           }
 701 |         ],
 702 |         "responses": {
 703 |           "200": {
 704 |             "description": "Successful response",
 705 |             "content": {
 706 |               "application/json": {
 707 |                 "schema": {
 708 |                   "$ref": "#/components/schemas/BlogGetResponseWrapperDTO"
 709 |                 }
 710 |               }
 711 |             }
 712 |           },
 713 |           "422": {
 714 |             "description": "Unprocessable Entity",
 715 |             "content": {
 716 |               "application/json": {
 717 |                 "schema": {
 718 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 719 |                 }
 720 |               }
 721 |             }
 722 |           },
 723 |           "400": {
 724 |             "description": "Bad Request",
 725 |             "content": {
 726 |               "application/json": {
 727 |                 "schema": {
 728 |                   "$ref": "#/components/schemas/BadRequestDTO"
 729 |                 }
 730 |               }
 731 |             }
 732 |           },
 733 |           "401": {
 734 |             "description": "Unauthorized",
 735 |             "content": {
 736 |               "application/json": {
 737 |                 "schema": {
 738 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 739 |                 }
 740 |               }
 741 |             }
 742 |           }
 743 |         },
 744 |         "security": [
 745 |           {
 746 |             "Location-Access": []
 747 |           }
 748 |         ]
 749 |       }
 750 |     }
 751 |   },
 752 |   "info": {
 753 |     "title": "Blogs API",
 754 |     "description": "Documentation for Blog public API",
 755 |     "version": "1.0",
 756 |     "contact": {}
 757 |   },
 758 |   "tags": [
 759 |     {
 760 |       "name": "blogs",
 761 |       "description": "Documentation for Blogs"
 762 |     }
 763 |   ],
 764 |   "servers": [
 765 |     {
 766 |       "url": "https://services.leadconnectorhq.com"
 767 |     }
 768 |   ],
 769 |   "components": {
 770 |     "securitySchemes": {
 771 |       "bearer": {
 772 |         "scheme": "bearer",
 773 |         "bearerFormat": "JWT",
 774 |         "name": "Authorization",
 775 |         "in": "header",
 776 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 777 |         "type": "http"
 778 |       },
 779 |       "Location-Access": {
 780 |         "scheme": "bearer",
 781 |         "bearerFormat": "JWT",
 782 |         "name": "Authorization",
 783 |         "in": "header",
 784 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 785 |         "type": "http"
 786 |       },
 787 |       "Agency-Access": {
 788 |         "scheme": "bearer",
 789 |         "bearerFormat": "JWT",
 790 |         "name": "Authorization",
 791 |         "in": "header",
 792 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
 793 |         "type": "http"
 794 |       }
 795 |     },
 796 |     "schemas": {
 797 |       "BadRequestDTO": {
 798 |         "type": "object",
 799 |         "properties": {
 800 |           "statusCode": {
 801 |             "type": "number",
 802 |             "example": 400
 803 |           },
 804 |           "message": {
 805 |             "type": "string",
 806 |             "example": "Bad Request"
 807 |           }
 808 |         }
 809 |       },
 810 |       "UnauthorizedDTO": {
 811 |         "type": "object",
 812 |         "properties": {
 813 |           "statusCode": {
 814 |             "type": "number",
 815 |             "example": 401
 816 |           },
 817 |           "message": {
 818 |             "type": "string",
 819 |             "example": "Invalid token: access token is invalid"
 820 |           },
 821 |           "error": {
 822 |             "type": "string",
 823 |             "example": "Unauthorized"
 824 |           }
 825 |         }
 826 |       },
 827 |       "UrlSlugCheckResponseDTO": {
 828 |         "type": "object",
 829 |         "properties": {
 830 |           "exists": {
 831 |             "type": "boolean",
 832 |             "description": "Indicates whether the url slug exists or not"
 833 |           }
 834 |         },
 835 |         "required": [
 836 |           "exists"
 837 |         ]
 838 |       },
 839 |       "UnprocessableDTO": {
 840 |         "type": "object",
 841 |         "properties": {
 842 |           "statusCode": {
 843 |             "type": "number",
 844 |             "example": 422
 845 |           },
 846 |           "message": {
 847 |             "example": [
 848 |               "Unprocessable Entity"
 849 |             ],
 850 |             "type": "array",
 851 |             "items": {
 852 |               "type": "string"
 853 |             }
 854 |           },
 855 |           "error": {
 856 |             "type": "string",
 857 |             "example": "Unprocessable Entity"
 858 |           }
 859 |         }
 860 |       },
 861 |       "UpdateBlogPostParams": {
 862 |         "type": "object",
 863 |         "properties": {
 864 |           "title": {
 865 |             "example": "Your blog title",
 866 |             "type": "string"
 867 |           },
 868 |           "locationId": {
 869 |             "example": "Location ID",
 870 |             "type": "string"
 871 |           },
 872 |           "blogId": {
 873 |             "example": "Blog ID",
 874 |             "type": "string",
 875 |             "description": "You can find the blog id from blog site dashboard link"
 876 |           },
 877 |           "imageUrl": {
 878 |             "example": "Image URl",
 879 |             "type": "string"
 880 |           },
 881 |           "description": {
 882 |             "example": "A short description",
 883 |             "type": "string"
 884 |           },
 885 |           "rawHTML": {
 886 |             "example": "<h1>Your blog content</h1>",
 887 |             "type": "string"
 888 |           },
 889 |           "status": {
 890 |             "type": "string",
 891 |             "example": "PUBLISHED",
 892 |             "schema": {
 893 |               "type": "string"
 894 |             },
 895 |             "enum": [
 896 |               "DRAFT",
 897 |               "PUBLISHED",
 898 |               "SCHEDULED",
 899 |               "ARCHIVED"
 900 |             ]
 901 |           },
 902 |           "imageAltText": {
 903 |             "example": "Alt text for your blog image",
 904 |             "type": "string"
 905 |           },
 906 |           "categories": {
 907 |             "example": ["9c48df2694a849b6089f9d0d3513efe","6683abde331c041f32c07aee"],
 908 |             "type": "array",
 909 |             "items": {
 910 |               "type": "string"
 911 |             },
 912 |             "description": "This needs to be array of category ids, which you can get from the category get api call."
 913 |           },
 914 |           "tags": {
 915 |             "example": ["blog","seo"],
 916 |             "type": "array",
 917 |             "items": {
 918 |               "type": "string"
 919 |             }
 920 |           },
 921 |           "author": {
 922 |             "example":"6683abde331c041f32c07aea",
 923 |             "type": "string",
 924 |             "description": "This needs to be author id, which you can get from the author get api call."
 925 |           },
 926 |           "urlSlug": {
 927 |             "example":"any-blog-post-url",
 928 |             "type": "string"
 929 |           },
 930 |           "canonicalLink": {
 931 |             "example":"https://tryghl.blog/post/testing-unsplash",
 932 |             "type": "string"
 933 |           },
 934 |           "publishedAt": {
 935 |             "example":"2025-02-05T18:30:47.000Z",
 936 |             "type": "string",
 937 |             "description":"Provide ISO timestamp"
 938 |           }
 939 |         },
 940 |         "required": [
 941 |           "title",
 942 |           "locationId",
 943 |           "blogId",
 944 |           "imageUrl",
 945 |           "description",
 946 |           "rawHTML",
 947 |           "status",
 948 |           "imageAltText",
 949 |           "categories",
 950 |           "author",
 951 |           "urlSlug",
 952 |           "publishedAt"
 953 |         ]
 954 |       },
 955 |       "BlogPostUpdateResponseWrapperDTO": {
 956 |         "type": "object",
 957 |         "properties": {
 958 |           "updatedBlogPost": {
 959 |             "type": "object",
 960 |             "description": "Object containing response data of blog post update",
 961 |             "$ref": "#/components/schemas/BlogPostResponseDTO"
 962 |           }
 963 |         },
 964 |         "required": [
 965 |           "updatedBlogPost"
 966 |         ]
 967 |       },
 968 |       "CreateBlogPostParams": {
 969 |         "type": "object",
 970 |         "properties": {
 971 |           "title": {
 972 |             "example": "Your blog title",
 973 |             "type": "string"
 974 |           },
 975 |           "locationId": {
 976 |             "example": "Location ID",
 977 |             "type": "string"
 978 |           },
 979 |           "blogId": {
 980 |             "example": "Blog ID",
 981 |             "type": "string",
 982 |             "description": "You can find the blog id from blog site dashboard link"
 983 |           },
 984 |           "imageUrl": {
 985 |             "example": "Image URl",
 986 |             "type": "string"
 987 |           },
 988 |           "description": {
 989 |             "example": "A short description",
 990 |             "type": "string"
 991 |           },
 992 |           "rawHTML": {
 993 |             "example": "<h1>Your blog content</h1>",
 994 |             "type": "string"
 995 |           },
 996 |           "status": {
 997 |             "type": "string",
 998 |             "example": "This can be PUBLISHED OR SCHEDULED OR ARCHIVED OR DRAFT",
 999 |             "schema": {
1000 |               "type": "string"
1001 |             },
1002 |             "enum": [
1003 |               "DRAFT",
1004 |               "PUBLISHED",
1005 |               "SCHEDULED",
1006 |               "ARCHIVED"
1007 |             ]
1008 |           },
1009 |           "imageAltText": {
1010 |             "example": "Alt text for your blog image",
1011 |             "type": "string"
1012 |           },
1013 |           "categories": {
1014 |             "example": ["9c48df2694a849b6089f9d0d3513efe","6683abde331c041f32c07aee"],
1015 |             "type": "array",
1016 |             "items": {
1017 |               "type": "string"
1018 |             },
1019 |             "description": "This needs to be array of category ids, which you can get from the category get api call."
1020 |           },
1021 |           "tags": {
1022 |             "example": ["blog","seo"],
1023 |             "type": "array",
1024 |             "items": {
1025 |               "type": "string"
1026 |             }
1027 |           },
1028 |           "author": {
1029 |             "example":"6683abde331c041f32c07aea",
1030 |             "type": "string",
1031 |             "description": "This needs to be author id, which you can get from the author get api call."
1032 |           },
1033 |           "urlSlug": {
1034 |             "example":"any-blog-post-url",
1035 |             "type": "string"
1036 |           },
1037 |           "canonicalLink": {
1038 |             "example":"https://tryghl.blog/post/testing-unsplash",
1039 |             "type": "string"
1040 |           },
1041 |           "publishedAt": {
1042 |             "example":"2025-02-05T18:30:47.000Z",
1043 |             "type": "string",
1044 |             "description":"Provide ISO timestamp"
1045 |           }
1046 |         },
1047 |         "required": [
1048 |           "title",
1049 |           "locationId",
1050 |           "blogId",
1051 |           "imageUrl",
1052 |           "description",
1053 |           "rawHTML",
1054 |           "status",
1055 |           "imageAltText",
1056 |           "categories",
1057 |           "author",
1058 |           "urlSlug",
1059 |           "publishedAt"
1060 |         ]
1061 |       },
1062 |       "BlogPostCreateResponseWrapperDTO": {
1063 |         "type": "object",
1064 |         "properties": {
1065 |           "data": {
1066 |             "type": "object",
1067 |             "description": "Object containing response data of blog post create.",
1068 |             "$ref": "#/components/schemas/BlogPostResponseDTO"
1069 |           }
1070 |         },
1071 |         "required": [
1072 |           "data"
1073 |         ]
1074 |       },
1075 |       "AuthorsResponseDTO": {
1076 |         "type": "object",
1077 |         "properties": {
1078 |           "authors": {
1079 |             "type": "array",
1080 |             "description": "Array of authors",
1081 |             "items": {
1082 |               "$ref": "#/components/schemas/AuthorResponseDTO"
1083 |             }
1084 |           }
1085 |         },
1086 |         "required": [
1087 |           "authors"
1088 |         ]
1089 |       },
1090 |       "AuthorResponseDTO": {
1091 |         "type": "object",
1092 |         "properties": {
1093 |           "_id": {
1094 |             "type": "string",
1095 |             "example": "lMOzIQZne5m6zQ528sT6"
1096 |           },
1097 |           "name": {
1098 |             "type": "string",
1099 |             "example": "HighLevel"
1100 |           },
1101 |           "locationId": {
1102 |             "type": "string",
1103 |             "example": "lMOzIQZne5m6zQ528sT6"
1104 |           },
1105 |           "updatedAt": {
1106 |             "type": "string",
1107 |             "example": "2025-01-03T11:06:35.822Z"
1108 |           },
1109 |           "canonicalLink": {
1110 |             "type": "string",
1111 |             "example": "https://tryghl.blog/post/technology"
1112 |           }
1113 |         },
1114 |         "required": [
1115 |           "_id",
1116 |           "name",
1117 |           "locationId",
1118 |           "updatedAt",
1119 |           "canonicalLink"
1120 |         ]
1121 |       },
1122 |       "CategoriesResponseDTO": {
1123 |         "type": "object",
1124 |         "properties": {
1125 |           "categories": {
1126 |             "type": "array",
1127 |             "description": "Array of categories",
1128 |             "items": {
1129 |               "$ref": "#/components/schemas/CategoryResponseDTO"
1130 |             }
1131 |           }
1132 |         },
1133 |         "required": [
1134 |           "categories"
1135 |         ]
1136 |       },
1137 |       "CategoryResponseDTO": {
1138 |         "type": "object",
1139 |         "properties": {
1140 |           "_id": {
1141 |             "type": "string",
1142 |             "example": "lMOzIQZne5m6zQ528sT6"
1143 |           },
1144 |           "label": {
1145 |             "type": "string",
1146 |             "example": "HighLevel"
1147 |           },
1148 |           "locationId": {
1149 |             "type": "string",
1150 |             "example": "lMOzIQZne5m6zQ528sT6"
1151 |           },
1152 |           "updatedAt": {
1153 |             "type": "string",
1154 |             "example": "2025-01-03T11:06:35.822Z"
1155 |           },
1156 |           "canonicalLink": {
1157 |             "type": "string",
1158 |             "example": "https://tryghl.blog/doc/category/agency-growth"
1159 |           },
1160 |           "urlSlug": {
1161 |             "type": "string",
1162 |             "example": "agency-growth"
1163 |           }
1164 |         },
1165 |         "required": [
1166 |           "_id",
1167 |           "name",
1168 |           "locationId",
1169 |           "updatedAt",
1170 |           "canonicalLink",
1171 |           "urlSlug"
1172 |         ]
1173 |       },
1174 |       "BlogGetResponseWrapperDTO": {
1175 |         "type": "object",
1176 |         "properties": {
1177 |           "data": {
1178 |             "type": "array",
1179 |             "description": "Object containing response data of blog",
1180 |             "items": {
1181 |               "$ref": "#/components/schemas/BlogResponseDTO"
1182 |             }
1183 |           }
1184 |         },
1185 |         "required": [
1186 |           "data"
1187 |         ]
1188 |       },
1189 |       "BlogResponseDTO": {
1190 |         "type": "object",
1191 |         "properties": {
1192 |           "_id": {
1193 |             "type": "string",
1194 |             "example": "lMOzIQZne5m6zQ528sT6",
1195 |             "description": "Unique identifier of the blog"
1196 |           },
1197 |           "name": {
1198 |             "type": "string",
1199 |             "example": "My blog",
1200 |             "description": "Name of the blog"
1201 |           }
1202 |         },
1203 |         "required": [
1204 |           "_id",
1205 |           "name"
1206 |         ]
1207 |       },
1208 |       "BlogPostGetResponseWrapperDTO": {
1209 |         "type": "object",
1210 |         "properties": {
1211 |           "blogs": {
1212 |             "type": "array",
1213 |             "description": "Object containing response data of blog posts",
1214 |             "items": {
1215 |               "$ref": "#/components/schemas/BlogPostResponseDTO"
1216 |             }
1217 |           }
1218 |         },
1219 |         "required": [
1220 |           "blogs"
1221 |         ]
1222 |       },
1223 |       "BlogPostResponseDTO": {
1224 |         "type": "object",
1225 |         "properties": {
1226 |           "categories": {
1227 |             "example": [
1228 |               "659ecabc4a37969a2b7cc370",
1229 |               "6683abde331c041f32c07aee"
1230 |             ],
1231 |             "description": "Array of category IDs associated with the blog post",
1232 |             "type": "array",
1233 |             "items": {
1234 |               "type": "string"
1235 |             }
1236 |           },
1237 |           "tags": {
1238 |             "example": [
1239 |               "Apple",
1240 |               "Banana"
1241 |             ],
1242 |             "description": "Array of tags associated with the blog post",
1243 |             "type": "array",
1244 |             "items": {
1245 |               "type": "string"
1246 |             }
1247 |           },
1248 |           "archived": {
1249 |             "type": "boolean",
1250 |             "example": false,
1251 |             "description": "Indicates whether the blog post is archived"
1252 |           },
1253 |           "_id": {
1254 |             "type": "string",
1255 |             "example": "66c381b38be80858b9af62b6",
1256 |             "description": "Unique identifier of the blog post"
1257 |           },
1258 |           "title": {
1259 |             "type": "string",
1260 |             "example": "Banana is good source of energy",
1261 |             "description": "Title of the blog post"
1262 |           },
1263 |           "description": {
1264 |             "type": "string",
1265 |             "example": "Description",
1266 |             "description": "Description of the blog post"
1267 |           },
1268 |           "imageUrl": {
1269 |             "type": "string",
1270 |             "example": "https://storage.googleapis.com/ghl-test/fACm0Ojm5oC70G3DcFmE/media/66b5aa3b1745b2713a8d033f.jpeg",
1271 |             "description": "URL of the image associated with the blog post"
1272 |           },
1273 |           "status": {
1274 |             "type": "string",
1275 |             "example": "PUBLISHED",
1276 |             "description": "Publication status of the blog post"
1277 |           },
1278 |           "imageAltText": {
1279 |             "type": "string",
1280 |             "example": "alt",
1281 |             "description": "Alternative text for the blog post image"
1282 |           },
1283 |           "urlSlug": {
1284 |             "type": "string",
1285 |             "example": "banana-good-energy",
1286 |             "description": "URL slug for the blog post"
1287 |           },
1288 |           "canonicalLink": {
1289 |             "type": "string",
1290 |             "example": "https://blog.chatgpts.agency/post/test-8384",
1291 |             "description": "Canonical link of the blog post"
1292 |           },
1293 |           "author": {
1294 |             "type": "string",
1295 |             "example": "659ec9634a3796e4e47cc360",
1296 |             "description": "Identifier of the author of the blog post"
1297 |           },
1298 |           "publishedAt": {
1299 |             "type": "string",
1300 |             "example": "2024-08-19T17:14:57.000Z",
1301 |             "description": "Timestamp when the blog post was published"
1302 |           },
1303 |           "updatedAt": {
1304 |             "type": "string",
1305 |             "example": "2024-08-19T17:32:36.182Z",
1306 |             "description": "Timestamp when the blog post was last updated"
1307 |           }
1308 |         },
1309 |         "required": [
1310 |           "categories",
1311 |           "archived",
1312 |           "_id",
1313 |           "title",
1314 |           "description",
1315 |           "imageUrl",
1316 |           "status",
1317 |           "imageAltText",
1318 |           "urlSlug",
1319 |           "publishedAt",
1320 |           "updatedAt"
1321 |         ]
1322 |       }
1323 |     }
1324 |   }
1325 | }


--------------------------------------------------------------------------------
/businesses/businesses.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/businesses/{businessId}": {
  5 |       "put": {
  6 |         "operationId": "update-business",
  7 |         "summary": "Update Business",
  8 |         "description": "Update Business",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "businessId",
 34 |             "required": true,
 35 |             "in": "path",
 36 |             "example": "5DP4iH6HLkQsiKESj6rh",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           }
 41 |         ],
 42 |         "requestBody": {
 43 |           "required": true,
 44 |           "content": {
 45 |             "application/json": {
 46 |               "schema": {
 47 |                 "$ref": "#/components/schemas/UpdateBusinessDto"
 48 |               }
 49 |             }
 50 |           }
 51 |         },
 52 |         "responses": {
 53 |           "200": {
 54 |             "description": "Successful response",
 55 |             "content": {
 56 |               "application/json": {
 57 |                 "schema": {
 58 |                   "$ref": "#/components/schemas/UpdateBusinessResponseDto"
 59 |                 }
 60 |               }
 61 |             }
 62 |           },
 63 |           "400": {
 64 |             "description": "Bad Request",
 65 |             "content": {
 66 |               "application/json": {
 67 |                 "schema": {
 68 |                   "$ref": "#/components/schemas/BadRequestDTO"
 69 |                 }
 70 |               }
 71 |             }
 72 |           },
 73 |           "401": {
 74 |             "description": "Unauthorized",
 75 |             "content": {
 76 |               "application/json": {
 77 |                 "schema": {
 78 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 79 |                 }
 80 |               }
 81 |             }
 82 |           },
 83 |           "422": {
 84 |             "description": "Unprocessable Entity",
 85 |             "content": {
 86 |               "application/json": {
 87 |                 "schema": {
 88 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 89 |                 }
 90 |               }
 91 |             }
 92 |           }
 93 |         },
 94 |         "tags": [
 95 |           "Businesses"
 96 |         ],
 97 |         "security": [
 98 |           {
 99 |             "bearer": []
100 |           }
101 |         ]
102 |       },
103 |       "delete": {
104 |         "operationId": "delete-Business",
105 |         "summary": "Delete Business",
106 |         "description": "Delete Business",
107 |         "parameters": [
108 |           {
109 |             "name": "Authorization",
110 |             "in": "header",
111 |             "description": "Access Token",
112 |             "required": true,
113 |             "schema": {
114 |               "type": "string",
115 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
116 |             }
117 |           },
118 |           {
119 |             "name": "Version",
120 |             "in": "header",
121 |             "description": "API Version",
122 |             "required": true,
123 |             "schema": {
124 |               "type": "string",
125 |               "enum": [
126 |                 "2021-07-28"
127 |               ]
128 |             }
129 |           },
130 |           {
131 |             "name": "businessId",
132 |             "required": true,
133 |             "in": "path",
134 |             "example": "5DP4iH6HLkQsiKESj6rh",
135 |             "schema": {
136 |               "type": "string"
137 |             }
138 |           }
139 |         ],
140 |         "responses": {
141 |           "200": {
142 |             "description": "Successful response",
143 |             "content": {
144 |               "application/json": {
145 |                 "schema": {
146 |                   "$ref": "#/components/schemas/DeleteBusinessResponseDto"
147 |                 }
148 |               }
149 |             }
150 |           },
151 |           "400": {
152 |             "description": "Bad Request",
153 |             "content": {
154 |               "application/json": {
155 |                 "schema": {
156 |                   "$ref": "#/components/schemas/BadRequestDTO"
157 |                 }
158 |               }
159 |             }
160 |           },
161 |           "401": {
162 |             "description": "Unauthorized",
163 |             "content": {
164 |               "application/json": {
165 |                 "schema": {
166 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
167 |                 }
168 |               }
169 |             }
170 |           },
171 |           "422": {
172 |             "description": "Unprocessable Entity",
173 |             "content": {
174 |               "application/json": {
175 |                 "schema": {
176 |                   "$ref": "#/components/schemas/UnprocessableDTO"
177 |                 }
178 |               }
179 |             }
180 |           }
181 |         },
182 |         "tags": [
183 |           "Businesses"
184 |         ],
185 |         "security": [
186 |           {
187 |             "bearer": []
188 |           }
189 |         ]
190 |       },
191 |       "get": {
192 |         "operationId": "get-business",
193 |         "summary": "Get Business",
194 |         "description": "Get Business",
195 |         "parameters": [
196 |           {
197 |             "name": "Authorization",
198 |             "in": "header",
199 |             "description": "Access Token",
200 |             "required": true,
201 |             "schema": {
202 |               "type": "string",
203 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
204 |             }
205 |           },
206 |           {
207 |             "name": "Version",
208 |             "in": "header",
209 |             "description": "API Version",
210 |             "required": true,
211 |             "schema": {
212 |               "type": "string",
213 |               "enum": [
214 |                 "2021-07-28"
215 |               ]
216 |             }
217 |           },
218 |           {
219 |             "name": "businessId",
220 |             "required": true,
221 |             "in": "path",
222 |             "example": "5DP4iH6HLkQsiKESj6rh",
223 |             "schema": {
224 |               "type": "string"
225 |             }
226 |           }
227 |         ],
228 |         "responses": {
229 |           "200": {
230 |             "description": "Successful response",
231 |             "content": {
232 |               "application/json": {
233 |                 "schema": {
234 |                   "$ref": "#/components/schemas/GetBusinessByIdResponseDto"
235 |                 }
236 |               }
237 |             }
238 |           },
239 |           "400": {
240 |             "description": "Bad Request",
241 |             "content": {
242 |               "application/json": {
243 |                 "schema": {
244 |                   "$ref": "#/components/schemas/BadRequestDTO"
245 |                 }
246 |               }
247 |             }
248 |           },
249 |           "401": {
250 |             "description": "Unauthorized",
251 |             "content": {
252 |               "application/json": {
253 |                 "schema": {
254 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
255 |                 }
256 |               }
257 |             }
258 |           },
259 |           "422": {
260 |             "description": "Unprocessable Entity",
261 |             "content": {
262 |               "application/json": {
263 |                 "schema": {
264 |                   "$ref": "#/components/schemas/UnprocessableDTO"
265 |                 }
266 |               }
267 |             }
268 |           }
269 |         },
270 |         "tags": [
271 |           "Businesses"
272 |         ],
273 |         "security": [
274 |           {
275 |             "bearer": []
276 |           }
277 |         ]
278 |       }
279 |     },
280 |     "/businesses/": {
281 |       "get": {
282 |         "operationId": "get-businesses-by-location",
283 |         "summary": "Get Businesses by Location",
284 |         "description": "Get Businesses by Location",
285 |         "parameters": [
286 |           {
287 |             "name": "Authorization",
288 |             "in": "header",
289 |             "description": "Access Token",
290 |             "required": true,
291 |             "schema": {
292 |               "type": "string",
293 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
294 |             }
295 |           },
296 |           {
297 |             "name": "Version",
298 |             "in": "header",
299 |             "description": "API Version",
300 |             "required": true,
301 |             "schema": {
302 |               "type": "string",
303 |               "enum": [
304 |                 "2021-07-28"
305 |               ]
306 |             }
307 |           },
308 |           {
309 |             "name": "locationId",
310 |             "required": true,
311 |             "in": "query",
312 |             "example": "5DP4iH6HLkQsiKESj6rh",
313 |             "schema": {
314 |               "type": "string"
315 |             }
316 |           }
317 |         ],
318 |         "responses": {
319 |           "200": {
320 |             "description": "Successful response",
321 |             "content": {
322 |               "application/json": {
323 |                 "schema": {
324 |                   "$ref": "#/components/schemas/GetBusinessByLocationResponseDto"
325 |                 }
326 |               }
327 |             }
328 |           },
329 |           "400": {
330 |             "description": "Bad Request",
331 |             "content": {
332 |               "application/json": {
333 |                 "schema": {
334 |                   "$ref": "#/components/schemas/BadRequestDTO"
335 |                 }
336 |               }
337 |             }
338 |           },
339 |           "401": {
340 |             "description": "Unauthorized",
341 |             "content": {
342 |               "application/json": {
343 |                 "schema": {
344 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
345 |                 }
346 |               }
347 |             }
348 |           }
349 |         },
350 |         "tags": [
351 |           "Businesses"
352 |         ],
353 |         "security": [
354 |           {
355 |             "bearer": []
356 |           }
357 |         ]
358 |       },
359 |       "post": {
360 |         "operationId": "create-business",
361 |         "summary": "Create Business",
362 |         "description": "Create Business",
363 |         "parameters": [
364 |           {
365 |             "name": "Authorization",
366 |             "in": "header",
367 |             "description": "Access Token",
368 |             "required": true,
369 |             "schema": {
370 |               "type": "string",
371 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
372 |             }
373 |           },
374 |           {
375 |             "name": "Version",
376 |             "in": "header",
377 |             "description": "API Version",
378 |             "required": true,
379 |             "schema": {
380 |               "type": "string",
381 |               "enum": [
382 |                 "2021-07-28"
383 |               ]
384 |             }
385 |           }
386 |         ],
387 |         "requestBody": {
388 |           "required": true,
389 |           "content": {
390 |             "application/json": {
391 |               "schema": {
392 |                 "$ref": "#/components/schemas/CreateBusinessDto"
393 |               }
394 |             }
395 |           }
396 |         },
397 |         "responses": {
398 |           "201": {
399 |             "description": "Successful response",
400 |             "content": {
401 |               "application/json": {
402 |                 "schema": {
403 |                   "$ref": "#/components/schemas/UpdateBusinessResponseDto"
404 |                 }
405 |               }
406 |             }
407 |           },
408 |           "400": {
409 |             "description": "Bad Request",
410 |             "content": {
411 |               "application/json": {
412 |                 "schema": {
413 |                   "$ref": "#/components/schemas/BadRequestDTO"
414 |                 }
415 |               }
416 |             }
417 |           },
418 |           "401": {
419 |             "description": "Unauthorized",
420 |             "content": {
421 |               "application/json": {
422 |                 "schema": {
423 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
424 |                 }
425 |               }
426 |             }
427 |           },
428 |           "422": {
429 |             "description": "Unprocessable Entity",
430 |             "content": {
431 |               "application/json": {
432 |                 "schema": {
433 |                   "$ref": "#/components/schemas/UnprocessableDTO"
434 |                 }
435 |               }
436 |             }
437 |           }
438 |         },
439 |         "tags": [
440 |           "Businesses"
441 |         ],
442 |         "security": [
443 |           {
444 |             "bearer": []
445 |           }
446 |         ]
447 |       }
448 |     }
449 |   },
450 |   "info": {
451 |     "title": "Business API",
452 |     "description": "Documentation for business API",
453 |     "version": "1.0",
454 |     "contact": {}
455 |   },
456 |   "tags": [
457 |     {
458 |       "name": "Businesses",
459 |       "description": "Documentation for business API"
460 |     }
461 |   ],
462 |   "servers": [
463 |     {
464 |       "url": "https://services.leadconnectorhq.com"
465 |     }
466 |   ],
467 |   "components": {
468 |     "securitySchemes": {
469 |       "bearer": {
470 |         "scheme": "bearer",
471 |         "bearerFormat": "JWT",
472 |         "name": "Authorization",
473 |         "in": "header",
474 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
475 |         "type": "http"
476 |       },
477 |       "Location-Access": {
478 |         "scheme": "bearer",
479 |         "bearerFormat": "JWT",
480 |         "name": "Authorization",
481 |         "in": "header",
482 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
483 |         "type": "http"
484 |       },
485 |       "Agency-Access": {
486 |         "scheme": "bearer",
487 |         "bearerFormat": "JWT",
488 |         "name": "Authorization",
489 |         "in": "header",
490 |         "description": "Use the Access Token generated with user type as Agency.",
491 |         "type": "http"
492 |       }
493 |     },
494 |     "schemas": {
495 |       "BadRequestDTO": {
496 |         "type": "object",
497 |         "properties": {
498 |           "statusCode": {
499 |             "type": "number",
500 |             "example": 400
501 |           },
502 |           "message": {
503 |             "type": "string",
504 |             "example": "Bad Request"
505 |           }
506 |         }
507 |       },
508 |       "UnauthorizedDTO": {
509 |         "type": "object",
510 |         "properties": {
511 |           "statusCode": {
512 |             "type": "number",
513 |             "example": 401
514 |           },
515 |           "message": {
516 |             "type": "string",
517 |             "example": "Invalid token: access token is invalid"
518 |           },
519 |           "error": {
520 |             "type": "string",
521 |             "example": "Unauthorized"
522 |           }
523 |         }
524 |       },
525 |       "BusinessCreatedByOrUpdatedBy": {
526 |         "type": "object",
527 |         "properties": {}
528 |       },
529 |       "BusinessDto": {
530 |         "type": "object",
531 |         "properties": {
532 |           "id": {
533 |             "type": "string",
534 |             "description": "Business Id",
535 |             "example": "63771dcac1116f0e21de8e12"
536 |           },
537 |           "name": {
538 |             "type": "string",
539 |             "description": "Business Name",
540 |             "example": "Microsoft"
541 |           },
542 |           "phone": {
543 |             "type": "string",
544 |             "description": "phone number"
545 |           },
546 |           "email": {
547 |             "type": "string",
548 |             "description": "email",
549 |             "example": "abc@microsoft.com"
550 |           },
551 |           "website": {
552 |             "type": "string",
553 |             "description": "website",
554 |             "example": "microsoft.com"
555 |           },
556 |           "address": {
557 |             "type": "string",
558 |             "description": "address"
559 |           },
560 |           "city": {
561 |             "type": "string",
562 |             "description": "city"
563 |           },
564 |           "description": {
565 |             "type": "string",
566 |             "description": "description"
567 |           },
568 |           "state": {
569 |             "type": "string",
570 |             "description": "state"
571 |           },
572 |           "postalCode": {
573 |             "type": "string",
574 |             "description": "postal code"
575 |           },
576 |           "country": {
577 |             "type": "string",
578 |             "description": "country",
579 |             "example": "united states"
580 |           },
581 |           "updatedBy": {
582 |             "description": "updated By",
583 |             "allOf": [
584 |               {
585 |                 "$ref": "#/components/schemas/BusinessCreatedByOrUpdatedBy"
586 |               }
587 |             ]
588 |           },
589 |           "locationId": {
590 |             "type": "string",
591 |             "description": "locaitonId"
592 |           },
593 |           "createdBy": {
594 |             "description": "Created By",
595 |             "allOf": [
596 |               {
597 |                 "$ref": "#/components/schemas/BusinessCreatedByOrUpdatedBy"
598 |               }
599 |             ]
600 |           },
601 |           "createdAt": {
602 |             "format": "date-time",
603 |             "type": "string",
604 |             "description": "Creation Time"
605 |           },
606 |           "updatedAt": {
607 |             "format": "date-time",
608 |             "type": "string",
609 |             "description": "Last updation time"
610 |           }
611 |         },
612 |         "required": [
613 |           "id",
614 |           "name",
615 |           "locationId"
616 |         ]
617 |       },
618 |       "GetBusinessByLocationResponseDto": {
619 |         "type": "object",
620 |         "properties": {
621 |           "businesses": {
622 |             "description": "Business Response",
623 |             "type": "array",
624 |             "items": {
625 |               "$ref": "#/components/schemas/BusinessDto"
626 |             }
627 |           }
628 |         },
629 |         "required": [
630 |           "businesses"
631 |         ]
632 |       },
633 |       "CreateBusinessDto": {
634 |         "type": "object",
635 |         "properties": {
636 |           "name": {
637 |             "type": "string",
638 |             "example": "Microsoft"
639 |           },
640 |           "locationId": {
641 |             "type": "string",
642 |             "example": "5DP4iH6HLkQsiKESj6rh"
643 |           },
644 |           "phone": {
645 |             "type": "string",
646 |             "example": "+18832327657"
647 |           },
648 |           "email": {
649 |             "type": "string",
650 |             "example": "john@deo.com"
651 |           },
652 |           "website": {
653 |             "type": "string",
654 |             "example": "www.xyz.com"
655 |           },
656 |           "address": {
657 |             "type": "string",
658 |             "example": "street adress"
659 |           },
660 |           "city": {
661 |             "type": "string",
662 |             "example": "new york"
663 |           },
664 |           "postalCode": {
665 |             "type": "string",
666 |             "example": "12312312"
667 |           },
668 |           "state": {
669 |             "type": "string",
670 |             "example": "new york"
671 |           },
672 |           "country": {
673 |             "type": "string",
674 |             "example": "us"
675 |           },
676 |           "description": {
677 |             "type": "string",
678 |             "example": "business description"
679 |           }
680 |         },
681 |         "required": [
682 |           "name",
683 |           "locationId"
684 |         ]
685 |       },
686 |       "UpdateBusinessResponseDto": {
687 |         "type": "object",
688 |         "properties": {
689 |           "success": {
690 |             "type": "boolean",
691 |             "description": "Success Value",
692 |             "example": true
693 |           },
694 |           "buiseness": {
695 |             "description": "Business Response",
696 |             "allOf": [
697 |               {
698 |                 "$ref": "#/components/schemas/BusinessDto"
699 |               }
700 |             ]
701 |           }
702 |         },
703 |         "required": [
704 |           "success",
705 |           "buiseness"
706 |         ]
707 |       },
708 |       "UnprocessableDTO": {
709 |         "type": "object",
710 |         "properties": {
711 |           "statusCode": {
712 |             "type": "number",
713 |             "example": 422
714 |           },
715 |           "message": {
716 |             "example": [
717 |               "Unprocessable Entity"
718 |             ],
719 |             "type": "array",
720 |             "items": {
721 |               "type": "string"
722 |             }
723 |           },
724 |           "error": {
725 |             "type": "string",
726 |             "example": "Unprocessable Entity"
727 |           }
728 |         }
729 |       },
730 |       "UpdateBusinessDto": {
731 |         "type": "object",
732 |         "properties": {
733 |           "name": {
734 |             "type": "string",
735 |             "example": "Microsoft"
736 |           },
737 |           "phone": {
738 |             "type": "string",
739 |             "example": "+18832327657"
740 |           },
741 |           "email": {
742 |             "type": "string",
743 |             "example": "john@deo.com"
744 |           },
745 |           "postalCode": {
746 |             "type": "string",
747 |             "example": "12312312"
748 |           },
749 |           "website": {
750 |             "type": "string",
751 |             "example": "www.xyz.com"
752 |           },
753 |           "address": {
754 |             "type": "string",
755 |             "example": "street adress"
756 |           },
757 |           "state": {
758 |             "type": "string",
759 |             "example": "new york"
760 |           },
761 |           "city": {
762 |             "type": "string",
763 |             "example": "new york"
764 |           },
765 |           "country": {
766 |             "type": "string",
767 |             "example": "us"
768 |           },
769 |           "description": {
770 |             "type": "string",
771 |             "example": "business description"
772 |           }
773 |         }
774 |       },
775 |       "DeleteBusinessResponseDto": {
776 |         "type": "object",
777 |         "properties": {
778 |           "success": {
779 |             "type": "boolean",
780 |             "description": "Success value",
781 |             "example": true
782 |           }
783 |         },
784 |         "required": [
785 |           "success"
786 |         ]
787 |       },
788 |       "GetBusinessByIdResponseDto": {
789 |         "type": "object",
790 |         "properties": {
791 |           "business": {
792 |             "description": "Business Response",
793 |             "allOf": [
794 |               {
795 |                 "$ref": "#/components/schemas/BusinessDto"
796 |               }
797 |             ]
798 |           }
799 |         },
800 |         "required": [
801 |           "business"
802 |         ]
803 |       }
804 |     }
805 |   }
806 | }


--------------------------------------------------------------------------------
/calendars/calendars.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/calendars/groups": {
   5 |       "get": {
   6 |         "operationId": "get-groups",
   7 |         "summary": "Get Groups",
   8 |         "description": "Get all calendar groups in a location.",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-04-15"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "locationId",
  34 |             "required": true,
  35 |             "in": "query",
  36 |             "description": "Location Id",
  37 |             "example": "ve9EPM428h8vShlRW1KT",
  38 |             "schema": {
  39 |               "type": "string"
  40 |             }
  41 |           }
  42 |         ],
  43 |         "responses": {
  44 |           "200": {
  45 |             "description": "Successful response",
  46 |             "content": {
  47 |               "application/json": {
  48 |                 "schema": {
  49 |                   "$ref": "#/components/schemas/AllGroupsSuccessfulResponseDTO"
  50 |                 }
  51 |               }
  52 |             }
  53 |           },
  54 |           "400": {
  55 |             "description": "Bad Request",
  56 |             "content": {
  57 |               "application/json": {
  58 |                 "schema": {
  59 |                   "$ref": "#/components/schemas/BadRequestDTO"
  60 |                 }
  61 |               }
  62 |             }
  63 |           },
  64 |           "401": {
  65 |             "description": "Unauthorized",
  66 |             "content": {
  67 |               "application/json": {
  68 |                 "schema": {
  69 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  70 |                 }
  71 |               }
  72 |             }
  73 |           }
  74 |         },
  75 |         "tags": [
  76 |           "Calendar Groups"
  77 |         ],
  78 |         "security": [
  79 |           {
  80 |             "bearer": []
  81 |           }
  82 |         ]
  83 |       },
  84 |       "post": {
  85 |         "operationId": "create-calendar-group",
  86 |         "summary": "Create Calendar Group",
  87 |         "description": "Create Calendar Group",
  88 |         "parameters": [
  89 |           {
  90 |             "name": "Authorization",
  91 |             "in": "header",
  92 |             "description": "Access Token",
  93 |             "required": true,
  94 |             "schema": {
  95 |               "type": "string",
  96 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  97 |             }
  98 |           },
  99 |           {
 100 |             "name": "Version",
 101 |             "in": "header",
 102 |             "description": "API Version",
 103 |             "required": true,
 104 |             "schema": {
 105 |               "type": "string",
 106 |               "enum": [
 107 |                 "2021-04-15"
 108 |               ]
 109 |             }
 110 |           }
 111 |         ],
 112 |         "requestBody": {
 113 |           "required": true,
 114 |           "content": {
 115 |             "application/json": {
 116 |               "schema": {
 117 |                 "$ref": "#/components/schemas/GroupCreateDTO"
 118 |               }
 119 |             }
 120 |           }
 121 |         },
 122 |         "responses": {
 123 |           "201": {
 124 |             "description": "Successful response",
 125 |             "content": {
 126 |               "application/json": {
 127 |                 "schema": {
 128 |                   "$ref": "#/components/schemas/GroupCreateSuccessfulResponseDTO"
 129 |                 }
 130 |               }
 131 |             }
 132 |           },
 133 |           "400": {
 134 |             "description": "Bad Request",
 135 |             "content": {
 136 |               "application/json": {
 137 |                 "schema": {
 138 |                   "$ref": "#/components/schemas/BadRequestDTO"
 139 |                 }
 140 |               }
 141 |             }
 142 |           },
 143 |           "401": {
 144 |             "description": "Unauthorized",
 145 |             "content": {
 146 |               "application/json": {
 147 |                 "schema": {
 148 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 149 |                 }
 150 |               }
 151 |             }
 152 |           }
 153 |         },
 154 |         "tags": [
 155 |           "Calendar Groups"
 156 |         ],
 157 |         "security": [
 158 |           {
 159 |             "bearer": []
 160 |           }
 161 |         ]
 162 |       }
 163 |     },
 164 |     "/calendars/groups/validate-slug": {
 165 |       "post": {
 166 |         "operationId": "validate-groups-slug",
 167 |         "summary": "Validate group slug",
 168 |         "description": "Validate if group slug is available or not.",
 169 |         "parameters": [
 170 |           {
 171 |             "name": "Authorization",
 172 |             "in": "header",
 173 |             "description": "Access Token",
 174 |             "required": true,
 175 |             "schema": {
 176 |               "type": "string",
 177 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 178 |             }
 179 |           },
 180 |           {
 181 |             "name": "Version",
 182 |             "in": "header",
 183 |             "description": "API Version",
 184 |             "required": true,
 185 |             "schema": {
 186 |               "type": "string",
 187 |               "enum": [
 188 |                 "2021-04-15"
 189 |               ]
 190 |             }
 191 |           }
 192 |         ],
 193 |         "requestBody": {
 194 |           "required": true,
 195 |           "content": {
 196 |             "application/json": {
 197 |               "schema": {
 198 |                 "$ref": "#/components/schemas/ValidateGroupSlugPostBody"
 199 |               }
 200 |             }
 201 |           }
 202 |         },
 203 |         "responses": {
 204 |           "200": {
 205 |             "description": "Successful response",
 206 |             "content": {
 207 |               "application/json": {
 208 |                 "schema": {
 209 |                   "$ref": "#/components/schemas/ValidateGroupSlugSuccessResponseDTO"
 210 |                 }
 211 |               }
 212 |             }
 213 |           },
 214 |           "400": {
 215 |             "description": "Bad Request",
 216 |             "content": {
 217 |               "application/json": {
 218 |                 "schema": {
 219 |                   "$ref": "#/components/schemas/BadRequestDTO"
 220 |                 }
 221 |               }
 222 |             }
 223 |           },
 224 |           "401": {
 225 |             "description": "Unauthorized",
 226 |             "content": {
 227 |               "application/json": {
 228 |                 "schema": {
 229 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 230 |                 }
 231 |               }
 232 |             }
 233 |           }
 234 |         },
 235 |         "tags": [
 236 |           "Calendar Groups"
 237 |         ],
 238 |         "security": [
 239 |           {
 240 |             "bearer": []
 241 |           }
 242 |         ]
 243 |       }
 244 |     },
 245 |     "/calendars/groups/{groupId}": {
 246 |       "delete": {
 247 |         "operationId": "delete-group",
 248 |         "summary": "Delete Group",
 249 |         "description": "Delete Group",
 250 |         "parameters": [
 251 |           {
 252 |             "name": "Authorization",
 253 |             "in": "header",
 254 |             "description": "Access Token",
 255 |             "required": true,
 256 |             "schema": {
 257 |               "type": "string",
 258 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 259 |             }
 260 |           },
 261 |           {
 262 |             "name": "Version",
 263 |             "in": "header",
 264 |             "description": "API Version",
 265 |             "required": true,
 266 |             "schema": {
 267 |               "type": "string",
 268 |               "enum": [
 269 |                 "2021-04-15"
 270 |               ]
 271 |             }
 272 |           },
 273 |           {
 274 |             "name": "groupId",
 275 |             "required": true,
 276 |             "in": "path",
 277 |             "description": "Group Id",
 278 |             "example": "ocQHyuzHvysMo5N5VsXc",
 279 |             "schema": {
 280 |               "type": "string"
 281 |             }
 282 |           }
 283 |         ],
 284 |         "responses": {
 285 |           "200": {
 286 |             "description": "Successful response",
 287 |             "content": {
 288 |               "application/json": {
 289 |                 "schema": {
 290 |                   "$ref": "#/components/schemas/GroupSuccessfulResponseDTO"
 291 |                 }
 292 |               }
 293 |             }
 294 |           },
 295 |           "400": {
 296 |             "description": "Bad Request",
 297 |             "content": {
 298 |               "application/json": {
 299 |                 "schema": {
 300 |                   "$ref": "#/components/schemas/BadRequestDTO"
 301 |                 }
 302 |               }
 303 |             }
 304 |           },
 305 |           "401": {
 306 |             "description": "Unauthorized",
 307 |             "content": {
 308 |               "application/json": {
 309 |                 "schema": {
 310 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 311 |                 }
 312 |               }
 313 |             }
 314 |           }
 315 |         },
 316 |         "tags": [
 317 |           "Calendar Groups"
 318 |         ],
 319 |         "security": [
 320 |           {
 321 |             "bearer": []
 322 |           }
 323 |         ]
 324 |       },
 325 |       "put": {
 326 |         "operationId": "edit-group",
 327 |         "summary": "Update Group",
 328 |         "description": "Update Group by group ID",
 329 |         "parameters": [
 330 |           {
 331 |             "name": "Authorization",
 332 |             "in": "header",
 333 |             "description": "Access Token",
 334 |             "required": true,
 335 |             "schema": {
 336 |               "type": "string",
 337 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 338 |             }
 339 |           },
 340 |           {
 341 |             "name": "Version",
 342 |             "in": "header",
 343 |             "description": "API Version",
 344 |             "required": true,
 345 |             "schema": {
 346 |               "type": "string",
 347 |               "enum": [
 348 |                 "2021-04-15"
 349 |               ]
 350 |             }
 351 |           },
 352 |           {
 353 |             "name": "groupId",
 354 |             "required": true,
 355 |             "in": "path",
 356 |             "description": "Group Id",
 357 |             "example": "ocQHyuzHvysMo5N5VsXc",
 358 |             "schema": {
 359 |               "type": "string"
 360 |             }
 361 |           }
 362 |         ],
 363 |         "requestBody": {
 364 |           "required": true,
 365 |           "content": {
 366 |             "application/json": {
 367 |               "schema": {
 368 |                 "$ref": "#/components/schemas/GroupUpdateDTO"
 369 |               }
 370 |             }
 371 |           }
 372 |         },
 373 |         "responses": {
 374 |           "200": {
 375 |             "description": "Successful response",
 376 |             "content": {
 377 |               "application/json": {
 378 |                 "schema": {
 379 |                   "$ref": "#/components/schemas/GroupCreateSuccessfulResponseDTO"
 380 |                 }
 381 |               }
 382 |             }
 383 |           },
 384 |           "400": {
 385 |             "description": "Bad Request",
 386 |             "content": {
 387 |               "application/json": {
 388 |                 "schema": {
 389 |                   "$ref": "#/components/schemas/BadRequestDTO"
 390 |                 }
 391 |               }
 392 |             }
 393 |           },
 394 |           "401": {
 395 |             "description": "Unauthorized",
 396 |             "content": {
 397 |               "application/json": {
 398 |                 "schema": {
 399 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 400 |                 }
 401 |               }
 402 |             }
 403 |           }
 404 |         },
 405 |         "tags": [
 406 |           "Calendar Groups"
 407 |         ],
 408 |         "security": [
 409 |           {
 410 |             "bearer": []
 411 |           }
 412 |         ]
 413 |       }
 414 |     },
 415 |     "/calendars/groups/{groupId}/status": {
 416 |       "put": {
 417 |         "operationId": "disable-group",
 418 |         "summary": "Disable Group",
 419 |         "description": "Disable Group",
 420 |         "parameters": [
 421 |           {
 422 |             "name": "Authorization",
 423 |             "in": "header",
 424 |             "description": "Access Token",
 425 |             "required": true,
 426 |             "schema": {
 427 |               "type": "string",
 428 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 429 |             }
 430 |           },
 431 |           {
 432 |             "name": "Version",
 433 |             "in": "header",
 434 |             "description": "API Version",
 435 |             "required": true,
 436 |             "schema": {
 437 |               "type": "string",
 438 |               "enum": [
 439 |                 "2021-04-15"
 440 |               ]
 441 |             }
 442 |           },
 443 |           {
 444 |             "name": "groupId",
 445 |             "required": true,
 446 |             "in": "path",
 447 |             "description": "Group Id",
 448 |             "example": "ocQHyuzHvysMo5N5VsXc",
 449 |             "schema": {
 450 |               "type": "string"
 451 |             }
 452 |           }
 453 |         ],
 454 |         "requestBody": {
 455 |           "required": true,
 456 |           "content": {
 457 |             "application/json": {
 458 |               "schema": {
 459 |                 "$ref": "#/components/schemas/GroupStatusUpdateParams"
 460 |               }
 461 |             }
 462 |           }
 463 |         },
 464 |         "responses": {
 465 |           "200": {
 466 |             "description": "Successful response",
 467 |             "content": {
 468 |               "application/json": {
 469 |                 "schema": {
 470 |                   "$ref": "#/components/schemas/GroupSuccessfulResponseDTO"
 471 |                 }
 472 |               }
 473 |             }
 474 |           },
 475 |           "400": {
 476 |             "description": "Bad Request",
 477 |             "content": {
 478 |               "application/json": {
 479 |                 "schema": {
 480 |                   "$ref": "#/components/schemas/BadRequestDTO"
 481 |                 }
 482 |               }
 483 |             }
 484 |           },
 485 |           "401": {
 486 |             "description": "Unauthorized",
 487 |             "content": {
 488 |               "application/json": {
 489 |                 "schema": {
 490 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 491 |                 }
 492 |               }
 493 |             }
 494 |           }
 495 |         },
 496 |         "tags": [
 497 |           "Calendar Groups"
 498 |         ],
 499 |         "security": [
 500 |           {
 501 |             "bearer": []
 502 |           }
 503 |         ]
 504 |       }
 505 |     },
 506 |     "/calendars/events": {
 507 |       "get": {
 508 |         "operationId": "get-calendar-events",
 509 |         "summary": "Get Calendar Events",
 510 |         "description": "Get Calendar Events",
 511 |         "parameters": [
 512 |           {
 513 |             "name": "Authorization",
 514 |             "in": "header",
 515 |             "description": "Access Token",
 516 |             "required": true,
 517 |             "schema": {
 518 |               "type": "string",
 519 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 520 |             }
 521 |           },
 522 |           {
 523 |             "name": "Version",
 524 |             "in": "header",
 525 |             "description": "API Version",
 526 |             "required": true,
 527 |             "schema": {
 528 |               "type": "string",
 529 |               "enum": [
 530 |                 "2021-04-15"
 531 |               ]
 532 |             }
 533 |           },
 534 |           {
 535 |             "name": "locationId",
 536 |             "required": true,
 537 |             "in": "query",
 538 |             "description": "Location Id",
 539 |             "example": "0007BWpSzSwfiuSl0tR2",
 540 |             "schema": {
 541 |               "type": "string"
 542 |             }
 543 |           },
 544 |           {
 545 |             "name": "userId",
 546 |             "required": false,
 547 |             "in": "query",
 548 |             "description": "User Id - Owner of an appointment. Either of userId, groupId or calendarId is required",
 549 |             "example": "CVokAlI8fgw4WYWoCtQz",
 550 |             "schema": {
 551 |               "type": "string"
 552 |             }
 553 |           },
 554 |           {
 555 |             "name": "calendarId",
 556 |             "required": false,
 557 |             "in": "query",
 558 |             "description": "Either of calendarId, userId or groupId is required",
 559 |             "example": "BqTwX8QFwXzpegMve9EQ",
 560 |             "schema": {
 561 |               "type": "string"
 562 |             }
 563 |           },
 564 |           {
 565 |             "name": "groupId",
 566 |             "required": false,
 567 |             "in": "query",
 568 |             "description": "Either of groupId, calendarId or userId is required",
 569 |             "example": "ocQHyuzHvysMo5N5VsXc",
 570 |             "schema": {
 571 |               "type": "string"
 572 |             }
 573 |           },
 574 |           {
 575 |             "name": "startTime",
 576 |             "required": true,
 577 |             "in": "query",
 578 |             "description": "Start Time (in millis)",
 579 |             "example": "1680373800000",
 580 |             "schema": {
 581 |               "type": "string"
 582 |             }
 583 |           },
 584 |           {
 585 |             "name": "endTime",
 586 |             "required": true,
 587 |             "in": "query",
 588 |             "description": "End Time (in millis)",
 589 |             "example": "1680978599999",
 590 |             "schema": {
 591 |               "type": "string"
 592 |             }
 593 |           }
 594 |         ],
 595 |         "responses": {
 596 |           "200": {
 597 |             "description": "Successful response",
 598 |             "content": {
 599 |               "application/json": {
 600 |                 "schema": {
 601 |                   "$ref": "#/components/schemas/GetCalendarEventsSuccessfulResponseDTO"
 602 |                 }
 603 |               }
 604 |             }
 605 |           },
 606 |           "400": {
 607 |             "description": "Bad Request",
 608 |             "content": {
 609 |               "application/json": {
 610 |                 "schema": {
 611 |                   "$ref": "#/components/schemas/BadRequestDTO"
 612 |                 }
 613 |               }
 614 |             }
 615 |           },
 616 |           "401": {
 617 |             "description": "Unauthorized",
 618 |             "content": {
 619 |               "application/json": {
 620 |                 "schema": {
 621 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 622 |                 }
 623 |               }
 624 |             }
 625 |           }
 626 |         },
 627 |         "tags": [
 628 |           "Calendar Events"
 629 |         ],
 630 |         "security": [
 631 |           {
 632 |             "bearer": []
 633 |           }
 634 |         ]
 635 |       }
 636 |     },
 637 |     "/calendars/blocked-slots": {
 638 |       "get": {
 639 |         "operationId": "get-blocked-slots",
 640 |         "summary": "Get Blocked Slots",
 641 |         "description": "Get Blocked Slots",
 642 |         "parameters": [
 643 |           {
 644 |             "name": "Authorization",
 645 |             "in": "header",
 646 |             "description": "Access Token",
 647 |             "required": true,
 648 |             "schema": {
 649 |               "type": "string",
 650 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 651 |             }
 652 |           },
 653 |           {
 654 |             "name": "Version",
 655 |             "in": "header",
 656 |             "description": "API Version",
 657 |             "required": true,
 658 |             "schema": {
 659 |               "type": "string",
 660 |               "enum": [
 661 |                 "2021-04-15"
 662 |               ]
 663 |             }
 664 |           },
 665 |           {
 666 |             "name": "locationId",
 667 |             "required": true,
 668 |             "in": "query",
 669 |             "description": "Location Id",
 670 |             "example": "0007BWpSzSwfiuSl0tR2",
 671 |             "schema": {
 672 |               "type": "string"
 673 |             }
 674 |           },
 675 |           {
 676 |             "name": "userId",
 677 |             "required": false,
 678 |             "in": "query",
 679 |             "description": "User Id - Owner of an appointment. Either of userId, groupId or calendarId is required",
 680 |             "example": "CVokAlI8fgw4WYWoCtQz",
 681 |             "schema": {
 682 |               "type": "string"
 683 |             }
 684 |           },
 685 |           {
 686 |             "name": "calendarId",
 687 |             "required": false,
 688 |             "in": "query",
 689 |             "description": "Either of calendarId, userId or groupId is required",
 690 |             "example": "BqTwX8QFwXzpegMve9EQ",
 691 |             "schema": {
 692 |               "type": "string"
 693 |             }
 694 |           },
 695 |           {
 696 |             "name": "groupId",
 697 |             "required": false,
 698 |             "in": "query",
 699 |             "description": "Either of groupId, calendarId or userId is required",
 700 |             "example": "ocQHyuzHvysMo5N5VsXc",
 701 |             "schema": {
 702 |               "type": "string"
 703 |             }
 704 |           },
 705 |           {
 706 |             "name": "startTime",
 707 |             "required": true,
 708 |             "in": "query",
 709 |             "description": "Start Time (in millis)",
 710 |             "example": "1680373800000",
 711 |             "schema": {
 712 |               "type": "string"
 713 |             }
 714 |           },
 715 |           {
 716 |             "name": "endTime",
 717 |             "required": true,
 718 |             "in": "query",
 719 |             "description": "End Time (in millis)",
 720 |             "schema": {
 721 |               "type": "string"
 722 |             }
 723 |           }
 724 |         ],
 725 |         "responses": {
 726 |           "200": {
 727 |             "description": "Successful response",
 728 |             "content": {
 729 |               "application/json": {
 730 |                 "schema": {
 731 |                   "$ref": "#/components/schemas/GetCalendarEventsSuccessfulResponseDTO"
 732 |                 }
 733 |               }
 734 |             }
 735 |           },
 736 |           "400": {
 737 |             "description": "Bad Request",
 738 |             "content": {
 739 |               "application/json": {
 740 |                 "schema": {
 741 |                   "$ref": "#/components/schemas/BadRequestDTO"
 742 |                 }
 743 |               }
 744 |             }
 745 |           },
 746 |           "401": {
 747 |             "description": "Unauthorized",
 748 |             "content": {
 749 |               "application/json": {
 750 |                 "schema": {
 751 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 752 |                 }
 753 |               }
 754 |             }
 755 |           }
 756 |         },
 757 |         "tags": [
 758 |           "Calendar Events"
 759 |         ],
 760 |         "security": [
 761 |           {
 762 |             "bearer": []
 763 |           }
 764 |         ]
 765 |       }
 766 |     },
 767 |     "/calendars/{calendarId}/free-slots": {
 768 |       "get": {
 769 |         "operationId": "get-slots",
 770 |         "summary": "Get Free Slots",
 771 |         "description": "Get free slots for a calendar between a date range. Optionally a consumer can also request free slots in a particular timezone and also for a particular user.",
 772 |         "parameters": [
 773 |           {
 774 |             "name": "Authorization",
 775 |             "in": "header",
 776 |             "description": "Access Token",
 777 |             "required": true,
 778 |             "schema": {
 779 |               "type": "string",
 780 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 781 |             }
 782 |           },
 783 |           {
 784 |             "name": "Version",
 785 |             "in": "header",
 786 |             "description": "API Version",
 787 |             "required": true,
 788 |             "schema": {
 789 |               "type": "string",
 790 |               "enum": [
 791 |                 "2021-04-15"
 792 |               ]
 793 |             }
 794 |           },
 795 |           {
 796 |             "name": "calendarId",
 797 |             "required": true,
 798 |             "in": "path",
 799 |             "description": "Calendar Id",
 800 |             "example": "ocQHyuzHvysMo5N5VsXc",
 801 |             "schema": {
 802 |               "type": "string"
 803 |             }
 804 |           },
 805 |           {
 806 |             "name": "startDate",
 807 |             "required": true,
 808 |             "in": "query",
 809 |             "description": "Start Date",
 810 |             "example": 1548898600000,
 811 |             "schema": {
 812 |               "type": "number"
 813 |             }
 814 |           },
 815 |           {
 816 |             "name": "endDate",
 817 |             "required": true,
 818 |             "in": "query",
 819 |             "description": "End Date",
 820 |             "example": 1601490599999,
 821 |             "schema": {
 822 |               "type": "number"
 823 |             }
 824 |           },
 825 |           {
 826 |             "name": "timezone",
 827 |             "required": false,
 828 |             "in": "query",
 829 |             "description": "The timezone in which the free slots are returned",
 830 |             "example": "America/Chihuahua",
 831 |             "schema": {
 832 |               "type": "string"
 833 |             }
 834 |           },
 835 |           {
 836 |             "name": "userId",
 837 |             "required": false,
 838 |             "in": "query",
 839 |             "description": "The user for whom the free slots are returned",
 840 |             "example": "082goXVW3lIExEQPOnd3",
 841 |             "schema": {
 842 |               "type": "string"
 843 |             }
 844 |           },
 845 |           {
 846 |             "name": "userIds",
 847 |             "required": false,
 848 |             "in": "query",
 849 |             "description": "The users for whom the free slots are returned",
 850 |             "example": "[082goXVW3lIExEQPOnd3]",
 851 |             "schema": {
 852 |               "type": "array",
 853 |               "items": {
 854 |                 "type": "string"
 855 |               }
 856 |             }
 857 |           },
 858 |           {
 859 |             "name": "enableLookBusy",
 860 |             "required": false,
 861 |             "in": "query",
 862 |             "description": "Apply Look Busy",
 863 |             "example": false,
 864 |             "schema": {
 865 |               "default": false,
 866 |               "type": "boolean"
 867 |             }
 868 |           }
 869 |         ],
 870 |         "responses": {
 871 |           "200": {
 872 |             "description": "Successful response",
 873 |             "content": {
 874 |               "application/json": {
 875 |                 "schema": {
 876 |                   "$ref": "#/components/schemas/GetSlotsSuccessfulResponseDto"
 877 |                 }
 878 |               }
 879 |             }
 880 |           },
 881 |           "400": {
 882 |             "description": "Bad Request",
 883 |             "content": {
 884 |               "application/json": {
 885 |                 "schema": {
 886 |                   "$ref": "#/components/schemas/BadRequestDTO"
 887 |                 }
 888 |               }
 889 |             }
 890 |           },
 891 |           "401": {
 892 |             "description": "Unauthorized",
 893 |             "content": {
 894 |               "application/json": {
 895 |                 "schema": {
 896 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 897 |                 }
 898 |               }
 899 |             }
 900 |           }
 901 |         },
 902 |         "tags": [
 903 |           "Calendars"
 904 |         ],
 905 |         "security": [
 906 |           {
 907 |             "bearer": []
 908 |           }
 909 |         ]
 910 |       }
 911 |     },
 912 |     "/calendars/{calendarId}": {
 913 |       "put": {
 914 |         "operationId": "update-calendar",
 915 |         "summary": "Update Calendar",
 916 |         "description": "Update calendar by ID.",
 917 |         "parameters": [
 918 |           {
 919 |             "name": "Authorization",
 920 |             "in": "header",
 921 |             "description": "Access Token",
 922 |             "required": true,
 923 |             "schema": {
 924 |               "type": "string",
 925 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 926 |             }
 927 |           },
 928 |           {
 929 |             "name": "Version",
 930 |             "in": "header",
 931 |             "description": "API Version",
 932 |             "required": true,
 933 |             "schema": {
 934 |               "type": "string",
 935 |               "enum": [
 936 |                 "2021-04-15"
 937 |               ]
 938 |             }
 939 |           },
 940 |           {
 941 |             "name": "calendarId",
 942 |             "required": true,
 943 |             "in": "path",
 944 |             "description": "Calendar Id",
 945 |             "example": "ocQHyuzHvysMo5N5VsXc",
 946 |             "schema": {
 947 |               "type": "string"
 948 |             }
 949 |           }
 950 |         ],
 951 |         "requestBody": {
 952 |           "required": true,
 953 |           "content": {
 954 |             "application/json": {
 955 |               "schema": {
 956 |                 "$ref": "#/components/schemas/CalendarUpdateDTO"
 957 |               }
 958 |             }
 959 |           }
 960 |         },
 961 |         "responses": {
 962 |           "200": {
 963 |             "description": "Successful response",
 964 |             "content": {
 965 |               "application/json": {
 966 |                 "schema": {
 967 |                   "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
 968 |                 }
 969 |               }
 970 |             }
 971 |           },
 972 |           "400": {
 973 |             "description": "Bad Request",
 974 |             "content": {
 975 |               "application/json": {
 976 |                 "schema": {
 977 |                   "$ref": "#/components/schemas/BadRequestDTO"
 978 |                 }
 979 |               }
 980 |             }
 981 |           },
 982 |           "401": {
 983 |             "description": "Unauthorized",
 984 |             "content": {
 985 |               "application/json": {
 986 |                 "schema": {
 987 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 988 |                 }
 989 |               }
 990 |             }
 991 |           }
 992 |         },
 993 |         "tags": [
 994 |           "Calendars"
 995 |         ],
 996 |         "security": [
 997 |           {
 998 |             "bearer": []
 999 |           }
1000 |         ]
1001 |       },
1002 |       "get": {
1003 |         "operationId": "get-calendar",
1004 |         "summary": "Get Calendar",
1005 |         "description": "Get calendar by ID",
1006 |         "parameters": [
1007 |           {
1008 |             "name": "Authorization",
1009 |             "in": "header",
1010 |             "description": "Access Token",
1011 |             "required": true,
1012 |             "schema": {
1013 |               "type": "string",
1014 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1015 |             }
1016 |           },
1017 |           {
1018 |             "name": "Version",
1019 |             "in": "header",
1020 |             "description": "API Version",
1021 |             "required": true,
1022 |             "schema": {
1023 |               "type": "string",
1024 |               "enum": [
1025 |                 "2021-04-15"
1026 |               ]
1027 |             }
1028 |           },
1029 |           {
1030 |             "name": "calendarId",
1031 |             "required": true,
1032 |             "in": "path",
1033 |             "description": "Calendar Id",
1034 |             "example": "ocQHyuzHvysMo5N5VsXc",
1035 |             "schema": {
1036 |               "type": "string"
1037 |             }
1038 |           }
1039 |         ],
1040 |         "responses": {
1041 |           "200": {
1042 |             "description": "Successful response",
1043 |             "content": {
1044 |               "application/json": {
1045 |                 "schema": {
1046 |                   "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
1047 |                 }
1048 |               }
1049 |             }
1050 |           },
1051 |           "400": {
1052 |             "description": "Bad Request",
1053 |             "content": {
1054 |               "application/json": {
1055 |                 "schema": {
1056 |                   "$ref": "#/components/schemas/BadRequestDTO"
1057 |                 }
1058 |               }
1059 |             }
1060 |           },
1061 |           "401": {
1062 |             "description": "Unauthorized",
1063 |             "content": {
1064 |               "application/json": {
1065 |                 "schema": {
1066 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1067 |                 }
1068 |               }
1069 |             }
1070 |           }
1071 |         },
1072 |         "tags": [
1073 |           "Calendars"
1074 |         ],
1075 |         "security": [
1076 |           {
1077 |             "bearer": []
1078 |           }
1079 |         ]
1080 |       },
1081 |       "delete": {
1082 |         "operationId": "delete-calendar",
1083 |         "summary": "Delete Calendar",
1084 |         "description": "Delete calendar by ID",
1085 |         "parameters": [
1086 |           {
1087 |             "name": "Authorization",
1088 |             "in": "header",
1089 |             "description": "Access Token",
1090 |             "required": true,
1091 |             "schema": {
1092 |               "type": "string",
1093 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1094 |             }
1095 |           },
1096 |           {
1097 |             "name": "Version",
1098 |             "in": "header",
1099 |             "description": "API Version",
1100 |             "required": true,
1101 |             "schema": {
1102 |               "type": "string",
1103 |               "enum": [
1104 |                 "2021-04-15"
1105 |               ]
1106 |             }
1107 |           },
1108 |           {
1109 |             "name": "calendarId",
1110 |             "required": true,
1111 |             "in": "path",
1112 |             "description": "Calendar Id",
1113 |             "example": "ocQHyuzHvysMo5N5VsXc",
1114 |             "schema": {
1115 |               "type": "string"
1116 |             }
1117 |           }
1118 |         ],
1119 |         "responses": {
1120 |           "200": {
1121 |             "description": "Successful response",
1122 |             "content": {
1123 |               "application/json": {
1124 |                 "schema": {
1125 |                   "$ref": "#/components/schemas/CalendarDeleteSuccessfulResponseDTO"
1126 |                 }
1127 |               }
1128 |             }
1129 |           },
1130 |           "400": {
1131 |             "description": "Bad Request",
1132 |             "content": {
1133 |               "application/json": {
1134 |                 "schema": {
1135 |                   "$ref": "#/components/schemas/BadRequestDTO"
1136 |                 }
1137 |               }
1138 |             }
1139 |           },
1140 |           "401": {
1141 |             "description": "Unauthorized",
1142 |             "content": {
1143 |               "application/json": {
1144 |                 "schema": {
1145 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1146 |                 }
1147 |               }
1148 |             }
1149 |           }
1150 |         },
1151 |         "tags": [
1152 |           "Calendars"
1153 |         ],
1154 |         "security": [
1155 |           {
1156 |             "bearer": []
1157 |           }
1158 |         ]
1159 |       }
1160 |     },
1161 |     "/calendars/events/appointments/{eventId}": {
1162 |       "get": {
1163 |         "operationId": "get-appointment",
1164 |         "summary": "Get Appointment",
1165 |         "description": "Get appointment by ID",
1166 |         "parameters": [
1167 |           {
1168 |             "name": "Authorization",
1169 |             "in": "header",
1170 |             "description": "Access Token",
1171 |             "required": true,
1172 |             "schema": {
1173 |               "type": "string",
1174 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1175 |             }
1176 |           },
1177 |           {
1178 |             "name": "Version",
1179 |             "in": "header",
1180 |             "description": "API Version",
1181 |             "required": true,
1182 |             "schema": {
1183 |               "type": "string",
1184 |               "enum": [
1185 |                 "2021-04-15"
1186 |               ]
1187 |             }
1188 |           },
1189 |           {
1190 |             "name": "eventId",
1191 |             "required": true,
1192 |             "in": "path",
1193 |             "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
1194 |             "examples": {
1195 |               "example1": {
1196 |                 "summary": "Event ID",
1197 |                 "value": "ocQHyuzHvysMo5N5VsXc"
1198 |               },
1199 |               "example2": {
1200 |                 "summary": "Recurring Instance ID",
1201 |                 "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
1202 |               }
1203 |             },
1204 |             "schema": {
1205 |               "type": "string"
1206 |             }
1207 |           }
1208 |         ],
1209 |         "responses": {
1210 |           "200": {
1211 |             "description": "Successful response",
1212 |             "content": {
1213 |               "application/json": {
1214 |                 "schema": {
1215 |                   "$ref": "#/components/schemas/GetCalendarEventSuccessfulResponseDTO"
1216 |                 }
1217 |               }
1218 |             }
1219 |           },
1220 |           "400": {
1221 |             "description": "Bad Request",
1222 |             "content": {
1223 |               "application/json": {
1224 |                 "schema": {
1225 |                   "$ref": "#/components/schemas/BadRequestDTO"
1226 |                 }
1227 |               }
1228 |             }
1229 |           },
1230 |           "401": {
1231 |             "description": "Unauthorized",
1232 |             "content": {
1233 |               "application/json": {
1234 |                 "schema": {
1235 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1236 |                 }
1237 |               }
1238 |             }
1239 |           }
1240 |         },
1241 |         "tags": [
1242 |           "Calendar Events"
1243 |         ],
1244 |         "security": [
1245 |           {
1246 |             "bearer": []
1247 |           }
1248 |         ]
1249 |       },
1250 |       "put": {
1251 |         "operationId": "edit-appointment",
1252 |         "summary": "Update Appointment",
1253 |         "description": "Update appointment by ID",
1254 |         "parameters": [
1255 |           {
1256 |             "name": "Authorization",
1257 |             "in": "header",
1258 |             "description": "Access Token",
1259 |             "required": true,
1260 |             "schema": {
1261 |               "type": "string",
1262 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1263 |             }
1264 |           },
1265 |           {
1266 |             "name": "Version",
1267 |             "in": "header",
1268 |             "description": "API Version",
1269 |             "required": true,
1270 |             "schema": {
1271 |               "type": "string",
1272 |               "enum": [
1273 |                 "2021-04-15"
1274 |               ]
1275 |             }
1276 |           },
1277 |           {
1278 |             "name": "eventId",
1279 |             "required": true,
1280 |             "in": "path",
1281 |             "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
1282 |             "examples": {
1283 |               "example1": {
1284 |                 "summary": "Event ID",
1285 |                 "value": "ocQHyuzHvysMo5N5VsXc"
1286 |               },
1287 |               "example2": {
1288 |                 "summary": "Recurring Instance ID",
1289 |                 "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
1290 |               }
1291 |             },
1292 |             "schema": {
1293 |               "type": "string"
1294 |             }
1295 |           }
1296 |         ],
1297 |         "requestBody": {
1298 |           "required": true,
1299 |           "content": {
1300 |             "application/json": {
1301 |               "schema": {
1302 |                 "$ref": "#/components/schemas/AppointmentEditSchema"
1303 |               }
1304 |             }
1305 |           }
1306 |         },
1307 |         "responses": {
1308 |           "200": {
1309 |             "description": "Successful response",
1310 |             "content": {
1311 |               "application/json": {
1312 |                 "schema": {
1313 |                   "$ref": "#/components/schemas/AppointmentSchemaResponse"
1314 |                 }
1315 |               }
1316 |             }
1317 |           },
1318 |           "400": {
1319 |             "description": "Bad Request",
1320 |             "content": {
1321 |               "application/json": {
1322 |                 "schema": {
1323 |                   "$ref": "#/components/schemas/BadRequestDTO"
1324 |                 }
1325 |               }
1326 |             }
1327 |           },
1328 |           "401": {
1329 |             "description": "Unauthorized",
1330 |             "content": {
1331 |               "application/json": {
1332 |                 "schema": {
1333 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1334 |                 }
1335 |               }
1336 |             }
1337 |           }
1338 |         },
1339 |         "tags": [
1340 |           "Calendar Events"
1341 |         ],
1342 |         "security": [
1343 |           {
1344 |             "bearer": []
1345 |           }
1346 |         ]
1347 |       }
1348 |     },
1349 |     "/calendars/events/appointments": {
1350 |       "post": {
1351 |         "operationId": "create-appointment",
1352 |         "summary": "Create Appointment",
1353 |         "description": "Create appointment",
1354 |         "parameters": [
1355 |           {
1356 |             "name": "Authorization",
1357 |             "in": "header",
1358 |             "description": "Access Token",
1359 |             "required": true,
1360 |             "schema": {
1361 |               "type": "string",
1362 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1363 |             }
1364 |           },
1365 |           {
1366 |             "name": "Version",
1367 |             "in": "header",
1368 |             "description": "API Version",
1369 |             "required": true,
1370 |             "schema": {
1371 |               "type": "string",
1372 |               "enum": [
1373 |                 "2021-04-15"
1374 |               ]
1375 |             }
1376 |           }
1377 |         ],
1378 |         "requestBody": {
1379 |           "required": true,
1380 |           "content": {
1381 |             "application/json": {
1382 |               "schema": {
1383 |                 "$ref": "#/components/schemas/AppointmentCreateSchema"
1384 |               }
1385 |             }
1386 |           }
1387 |         },
1388 |         "responses": {
1389 |           "201": {
1390 |             "description": "Successful response",
1391 |             "content": {
1392 |               "application/json": {
1393 |                 "schema": {
1394 |                   "$ref": "#/components/schemas/AppointmentSchemaResponse"
1395 |                 }
1396 |               }
1397 |             }
1398 |           },
1399 |           "400": {
1400 |             "description": "Bad Request",
1401 |             "content": {
1402 |               "application/json": {
1403 |                 "schema": {
1404 |                   "$ref": "#/components/schemas/BadRequestDTO"
1405 |                 }
1406 |               }
1407 |             }
1408 |           },
1409 |           "401": {
1410 |             "description": "Unauthorized",
1411 |             "content": {
1412 |               "application/json": {
1413 |                 "schema": {
1414 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1415 |                 }
1416 |               }
1417 |             }
1418 |           }
1419 |         },
1420 |         "tags": [
1421 |           "Calendar Events"
1422 |         ],
1423 |         "security": [
1424 |           {
1425 |             "bearer": []
1426 |           }
1427 |         ]
1428 |       }
1429 |     },
1430 |     "/calendars/events/block-slots": {
1431 |       "post": {
1432 |         "operationId": "create-block-slot",
1433 |         "summary": "Create Block Slot",
1434 |         "description": "Create block slot",
1435 |         "parameters": [
1436 |           {
1437 |             "name": "Authorization",
1438 |             "in": "header",
1439 |             "description": "Access Token",
1440 |             "required": true,
1441 |             "schema": {
1442 |               "type": "string",
1443 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1444 |             }
1445 |           },
1446 |           {
1447 |             "name": "Version",
1448 |             "in": "header",
1449 |             "description": "API Version",
1450 |             "required": true,
1451 |             "schema": {
1452 |               "type": "string",
1453 |               "enum": [
1454 |                 "2021-04-15"
1455 |               ]
1456 |             }
1457 |           }
1458 |         ],
1459 |         "requestBody": {
1460 |           "required": true,
1461 |           "content": {
1462 |             "application/json": {
1463 |               "schema": {
1464 |                 "$ref": "#/components/schemas/BlockSlotCreateSchema"
1465 |               }
1466 |             }
1467 |           }
1468 |         },
1469 |         "responses": {
1470 |           "201": {
1471 |             "description": "Successful response",
1472 |             "content": {
1473 |               "application/json": {
1474 |                 "schema": {
1475 |                   "$ref": "#/components/schemas/CreateBookedSlotSuccessfulResponseDto"
1476 |                 }
1477 |               }
1478 |             }
1479 |           },
1480 |           "400": {
1481 |             "description": "Bad Request",
1482 |             "content": {
1483 |               "application/json": {
1484 |                 "schema": {
1485 |                   "$ref": "#/components/schemas/BadRequestDTO"
1486 |                 }
1487 |               }
1488 |             }
1489 |           },
1490 |           "401": {
1491 |             "description": "Unauthorized",
1492 |             "content": {
1493 |               "application/json": {
1494 |                 "schema": {
1495 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1496 |                 }
1497 |               }
1498 |             }
1499 |           }
1500 |         },
1501 |         "tags": [
1502 |           "Calendars"
1503 |         ],
1504 |         "security": [
1505 |           {
1506 |             "bearer": []
1507 |           }
1508 |         ]
1509 |       }
1510 |     },
1511 |     "/calendars/events/block-slots/{eventId}": {
1512 |       "put": {
1513 |         "operationId": "edit-block-slot",
1514 |         "summary": "Update Block Slot",
1515 |         "description": "Update block slot by ID",
1516 |         "parameters": [
1517 |           {
1518 |             "name": "Authorization",
1519 |             "in": "header",
1520 |             "description": "Access Token",
1521 |             "required": true,
1522 |             "schema": {
1523 |               "type": "string",
1524 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1525 |             }
1526 |           },
1527 |           {
1528 |             "name": "Version",
1529 |             "in": "header",
1530 |             "description": "API Version",
1531 |             "required": true,
1532 |             "schema": {
1533 |               "type": "string",
1534 |               "enum": [
1535 |                 "2021-04-15"
1536 |               ]
1537 |             }
1538 |           },
1539 |           {
1540 |             "name": "eventId",
1541 |             "required": true,
1542 |             "in": "path",
1543 |             "description": "Event Id",
1544 |             "example": "ocQHyuzHvysMo5N5VsXc",
1545 |             "schema": {
1546 |               "type": "string"
1547 |             }
1548 |           }
1549 |         ],
1550 |         "requestBody": {
1551 |           "required": true,
1552 |           "content": {
1553 |             "application/json": {
1554 |               "schema": {
1555 |                 "$ref": "#/components/schemas/BlockSlotEditSchema"
1556 |               }
1557 |             }
1558 |           }
1559 |         },
1560 |         "responses": {
1561 |           "201": {
1562 |             "description": "Successful response",
1563 |             "content": {
1564 |               "application/json": {
1565 |                 "schema": {
1566 |                   "$ref": "#/components/schemas/CreateBookedSlotSuccessfulResponseDto"
1567 |                 }
1568 |               }
1569 |             }
1570 |           },
1571 |           "400": {
1572 |             "description": "Bad Request",
1573 |             "content": {
1574 |               "application/json": {
1575 |                 "schema": {
1576 |                   "$ref": "#/components/schemas/BadRequestDTO"
1577 |                 }
1578 |               }
1579 |             }
1580 |           },
1581 |           "401": {
1582 |             "description": "Unauthorized",
1583 |             "content": {
1584 |               "application/json": {
1585 |                 "schema": {
1586 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1587 |                 }
1588 |               }
1589 |             }
1590 |           }
1591 |         },
1592 |         "tags": [
1593 |           "Calendar Events"
1594 |         ],
1595 |         "security": [
1596 |           {
1597 |             "bearer": []
1598 |           }
1599 |         ]
1600 |       }
1601 |     },
1602 |     "/calendars/events/{eventId}": {
1603 |       "delete": {
1604 |         "operationId": "delete-event",
1605 |         "summary": "Delete Event",
1606 |         "description": "Delete event by ID",
1607 |         "parameters": [
1608 |           {
1609 |             "name": "Authorization",
1610 |             "in": "header",
1611 |             "description": "Access Token",
1612 |             "required": true,
1613 |             "schema": {
1614 |               "type": "string",
1615 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1616 |             }
1617 |           },
1618 |           {
1619 |             "name": "Version",
1620 |             "in": "header",
1621 |             "description": "API Version",
1622 |             "required": true,
1623 |             "schema": {
1624 |               "type": "string",
1625 |               "enum": [
1626 |                 "2021-04-15"
1627 |               ]
1628 |             }
1629 |           },
1630 |           {
1631 |             "name": "eventId",
1632 |             "required": true,
1633 |             "in": "path",
1634 |             "description": "Event Id or Instance id. For recurring appointments send masterEventId to modify original series.",
1635 |             "examples": {
1636 |               "example1": {
1637 |                 "summary": "Event ID",
1638 |                 "value": "ocQHyuzHvysMo5N5VsXc"
1639 |               },
1640 |               "example2": {
1641 |                 "summary": "Recurring Instance ID",
1642 |                 "value": "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
1643 |               }
1644 |             },
1645 |             "schema": {
1646 |               "type": "string"
1647 |             }
1648 |           }
1649 |         ],
1650 |         "requestBody": {
1651 |           "required": true,
1652 |           "content": {
1653 |             "application/json": {
1654 |               "schema": {
1655 |                 "$ref": "#/components/schemas/DeleteAppointmentSchema"
1656 |               }
1657 |             }
1658 |           }
1659 |         },
1660 |         "responses": {
1661 |           "201": {
1662 |             "description": "Successful response",
1663 |             "content": {
1664 |               "application/json": {
1665 |                 "schema": {
1666 |                   "$ref": "#/components/schemas/DeleteEventSuccessfulResponseDto"
1667 |                 }
1668 |               }
1669 |             }
1670 |           },
1671 |           "400": {
1672 |             "description": "Bad Request",
1673 |             "content": {
1674 |               "application/json": {
1675 |                 "schema": {
1676 |                   "$ref": "#/components/schemas/BadRequestDTO"
1677 |                 }
1678 |               }
1679 |             }
1680 |           },
1681 |           "401": {
1682 |             "description": "Unauthorized",
1683 |             "content": {
1684 |               "application/json": {
1685 |                 "schema": {
1686 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1687 |                 }
1688 |               }
1689 |             }
1690 |           }
1691 |         },
1692 |         "tags": [
1693 |           "Calendar Events"
1694 |         ],
1695 |         "security": [
1696 |           {
1697 |             "bearer": []
1698 |           }
1699 |         ]
1700 |       }
1701 |     },
1702 |     "/calendars/appointments/{appointmentId}/notes": {
1703 |       "get": {
1704 |         "operationId": "get-appointment-notes",
1705 |         "summary": "Get Notes",
1706 |         "description": "Get Appointment Notes",
1707 |         "parameters": [
1708 |           {
1709 |             "name": "Authorization",
1710 |             "in": "header",
1711 |             "description": "Access Token",
1712 |             "required": true,
1713 |             "schema": {
1714 |               "type": "string",
1715 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1716 |             }
1717 |           },
1718 |           {
1719 |             "name": "Version",
1720 |             "in": "header",
1721 |             "description": "API Version",
1722 |             "required": true,
1723 |             "schema": {
1724 |               "type": "string",
1725 |               "enum": [
1726 |                 "2021-04-15"
1727 |               ]
1728 |             }
1729 |           },
1730 |           {
1731 |             "name": "limit",
1732 |             "required": true,
1733 |             "in": "query",
1734 |             "description": "Limit of notes to fetch",
1735 |             "example": 10,
1736 |             "schema": {
1737 |               "maximum": 20,
1738 |               "type": "number"
1739 |             }
1740 |           },
1741 |           {
1742 |             "name": "offset",
1743 |             "required": true,
1744 |             "in": "query",
1745 |             "description": "Offset of notes to fetch",
1746 |             "example": 0,
1747 |             "schema": {
1748 |               "minimum": 0,
1749 |               "type": "number"
1750 |             }
1751 |           },
1752 |           {
1753 |             "name": "appointmentId",
1754 |             "required": true,
1755 |             "in": "path",
1756 |             "description": "Appointment ID",
1757 |             "schema": {
1758 |               "type": "string"
1759 |             }
1760 |           }
1761 |         ],
1762 |         "responses": {
1763 |           "200": {
1764 |             "description": "Successful response",
1765 |             "content": {
1766 |               "application/json": {
1767 |                 "schema": {
1768 |                   "$ref": "#/components/schemas/GetNotesListSuccessfulResponseDto"
1769 |                 }
1770 |               }
1771 |             }
1772 |           },
1773 |           "400": {
1774 |             "description": "Bad Request",
1775 |             "content": {
1776 |               "application/json": {
1777 |                 "schema": {
1778 |                   "$ref": "#/components/schemas/BadRequestDTO"
1779 |                 }
1780 |               }
1781 |             }
1782 |           },
1783 |           "401": {
1784 |             "description": "Unauthorized",
1785 |             "content": {
1786 |               "application/json": {
1787 |                 "schema": {
1788 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1789 |                 }
1790 |               }
1791 |             }
1792 |           }
1793 |         },
1794 |         "tags": [
1795 |           "Appointment Notes"
1796 |         ],
1797 |         "security": [
1798 |           {
1799 |             "bearer": []
1800 |           }
1801 |         ]
1802 |       },
1803 |       "post": {
1804 |         "operationId": "create-appointment-note",
1805 |         "summary": "Create Note",
1806 |         "description": "Create Note",
1807 |         "parameters": [
1808 |           {
1809 |             "name": "Authorization",
1810 |             "in": "header",
1811 |             "description": "Access Token",
1812 |             "required": true,
1813 |             "schema": {
1814 |               "type": "string",
1815 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1816 |             }
1817 |           },
1818 |           {
1819 |             "name": "Version",
1820 |             "in": "header",
1821 |             "description": "API Version",
1822 |             "required": true,
1823 |             "schema": {
1824 |               "type": "string",
1825 |               "enum": [
1826 |                 "2021-04-15"
1827 |               ]
1828 |             }
1829 |           },
1830 |           {
1831 |             "name": "appointmentId",
1832 |             "required": true,
1833 |             "in": "path",
1834 |             "description": "Appointment ID",
1835 |             "schema": {
1836 |               "type": "string"
1837 |             }
1838 |           }
1839 |         ],
1840 |         "requestBody": {
1841 |           "required": true,
1842 |           "content": {
1843 |             "application/json": {
1844 |               "schema": {
1845 |                 "$ref": "#/components/schemas/NotesDTO"
1846 |               }
1847 |             }
1848 |           }
1849 |         },
1850 |         "responses": {
1851 |           "201": {
1852 |             "description": "Successful response",
1853 |             "content": {
1854 |               "application/json": {
1855 |                 "schema": {
1856 |                   "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
1857 |                 }
1858 |               }
1859 |             }
1860 |           },
1861 |           "400": {
1862 |             "description": "Bad Request",
1863 |             "content": {
1864 |               "application/json": {
1865 |                 "schema": {
1866 |                   "$ref": "#/components/schemas/BadRequestDTO"
1867 |                 }
1868 |               }
1869 |             }
1870 |           },
1871 |           "401": {
1872 |             "description": "Unauthorized",
1873 |             "content": {
1874 |               "application/json": {
1875 |                 "schema": {
1876 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1877 |                 }
1878 |               }
1879 |             }
1880 |           }
1881 |         },
1882 |         "tags": [
1883 |           "Appointment Notes"
1884 |         ],
1885 |         "security": [
1886 |           {
1887 |             "bearer": []
1888 |           }
1889 |         ]
1890 |       }
1891 |     },
1892 |     "/calendars/appointments/{appointmentId}/notes/{noteId}": {
1893 |       "put": {
1894 |         "operationId": "update-appointment-note",
1895 |         "summary": "Update Note",
1896 |         "description": "Update Note",
1897 |         "parameters": [
1898 |           {
1899 |             "name": "Authorization",
1900 |             "in": "header",
1901 |             "description": "Access Token",
1902 |             "required": true,
1903 |             "schema": {
1904 |               "type": "string",
1905 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1906 |             }
1907 |           },
1908 |           {
1909 |             "name": "Version",
1910 |             "in": "header",
1911 |             "description": "API Version",
1912 |             "required": true,
1913 |             "schema": {
1914 |               "type": "string",
1915 |               "enum": [
1916 |                 "2021-04-15"
1917 |               ]
1918 |             }
1919 |           },
1920 |           {
1921 |             "name": "appointmentId",
1922 |             "required": true,
1923 |             "in": "path",
1924 |             "description": "Appointment ID",
1925 |             "schema": {
1926 |               "type": "string"
1927 |             }
1928 |           }
1929 |         ],
1930 |         "requestBody": {
1931 |           "required": true,
1932 |           "content": {
1933 |             "application/json": {
1934 |               "schema": {
1935 |                 "$ref": "#/components/schemas/NotesDTO"
1936 |               }
1937 |             }
1938 |           }
1939 |         },
1940 |         "responses": {
1941 |           "200": {
1942 |             "description": "Successful response",
1943 |             "content": {
1944 |               "application/json": {
1945 |                 "schema": {
1946 |                   "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
1947 |                 }
1948 |               }
1949 |             }
1950 |           },
1951 |           "400": {
1952 |             "description": "Bad Request",
1953 |             "content": {
1954 |               "application/json": {
1955 |                 "schema": {
1956 |                   "$ref": "#/components/schemas/BadRequestDTO"
1957 |                 }
1958 |               }
1959 |             }
1960 |           },
1961 |           "401": {
1962 |             "description": "Unauthorized",
1963 |             "content": {
1964 |               "application/json": {
1965 |                 "schema": {
1966 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1967 |                 }
1968 |               }
1969 |             }
1970 |           }
1971 |         },
1972 |         "tags": [
1973 |           "Appointment Notes"
1974 |         ],
1975 |         "security": [
1976 |           {
1977 |             "bearer": []
1978 |           }
1979 |         ]
1980 |       },
1981 |       "delete": {
1982 |         "operationId": "delete-appointment-note",
1983 |         "summary": "Delete Note",
1984 |         "description": "Delete Note",
1985 |         "parameters": [
1986 |           {
1987 |             "name": "Authorization",
1988 |             "in": "header",
1989 |             "description": "Access Token",
1990 |             "required": true,
1991 |             "schema": {
1992 |               "type": "string",
1993 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1994 |             }
1995 |           },
1996 |           {
1997 |             "name": "Version",
1998 |             "in": "header",
1999 |             "description": "API Version",
2000 |             "required": true,
2001 |             "schema": {
2002 |               "type": "string",
2003 |               "enum": [
2004 |                 "2021-04-15"
2005 |               ]
2006 |             }
2007 |           },
2008 |           {
2009 |             "name": "appointmentId",
2010 |             "required": true,
2011 |             "in": "path",
2012 |             "description": "Appointment ID",
2013 |             "schema": {
2014 |               "type": "string"
2015 |             }
2016 |           }
2017 |         ],
2018 |         "responses": {
2019 |           "200": {
2020 |             "description": "Successful response",
2021 |             "content": {
2022 |               "application/json": {
2023 |                 "schema": {
2024 |                   "$ref": "#/components/schemas/DeleteNoteSuccessfulResponseDto"
2025 |                 }
2026 |               }
2027 |             }
2028 |           },
2029 |           "400": {
2030 |             "description": "Bad Request",
2031 |             "content": {
2032 |               "application/json": {
2033 |                 "schema": {
2034 |                   "$ref": "#/components/schemas/BadRequestDTO"
2035 |                 }
2036 |               }
2037 |             }
2038 |           },
2039 |           "401": {
2040 |             "description": "Unauthorized",
2041 |             "content": {
2042 |               "application/json": {
2043 |                 "schema": {
2044 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2045 |                 }
2046 |               }
2047 |             }
2048 |           }
2049 |         },
2050 |         "tags": [
2051 |           "Appointment Notes"
2052 |         ],
2053 |         "security": [
2054 |           {
2055 |             "bearer": []
2056 |           }
2057 |         ]
2058 |       }
2059 |     },
2060 |     "/calendars/resources/{resourceType}/{id}": {
2061 |       "get": {
2062 |         "operationId": "get-calendar-resource",
2063 |         "summary": "Get Calendar Resource",
2064 |         "description": "Get calendar resource by ID",
2065 |         "parameters": [
2066 |           {
2067 |             "name": "Authorization",
2068 |             "in": "header",
2069 |             "description": "Access Token",
2070 |             "required": true,
2071 |             "schema": {
2072 |               "type": "string",
2073 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2074 |             }
2075 |           },
2076 |           {
2077 |             "name": "Version",
2078 |             "in": "header",
2079 |             "description": "API Version",
2080 |             "required": true,
2081 |             "schema": {
2082 |               "type": "string",
2083 |               "enum": [
2084 |                 "2021-04-15"
2085 |               ]
2086 |             }
2087 |           },
2088 |           {
2089 |             "name": "resourceType",
2090 |             "required": true,
2091 |             "in": "path",
2092 |             "description": "Calendar Resource Type",
2093 |             "schema": {
2094 |               "enum": [
2095 |                 "equipments",
2096 |                 "rooms"
2097 |               ],
2098 |               "type": "string"
2099 |             }
2100 |           },
2101 |           {
2102 |             "name": "id",
2103 |             "required": true,
2104 |             "in": "path",
2105 |             "description": "Calendar Resource ID",
2106 |             "schema": {
2107 |               "type": "string"
2108 |             }
2109 |           }
2110 |         ],
2111 |         "responses": {
2112 |           "200": {
2113 |             "description": "Calendar resource fetched",
2114 |             "content": {
2115 |               "application/json": {
2116 |                 "schema": {
2117 |                   "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
2118 |                 }
2119 |               }
2120 |             }
2121 |           },
2122 |           "400": {
2123 |             "description": "Bad Request",
2124 |             "content": {
2125 |               "application/json": {
2126 |                 "schema": {
2127 |                   "$ref": "#/components/schemas/BadRequestDTO"
2128 |                 }
2129 |               }
2130 |             }
2131 |           },
2132 |           "401": {
2133 |             "description": "Unauthorized",
2134 |             "content": {
2135 |               "application/json": {
2136 |                 "schema": {
2137 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2138 |                 }
2139 |               }
2140 |             }
2141 |           }
2142 |         },
2143 |         "tags": [
2144 |           "Calendar Resources: Rooms & Equipments"
2145 |         ],
2146 |         "security": [
2147 |           {
2148 |             "Location-Access": []
2149 |           }
2150 |         ]
2151 |       },
2152 |       "put": {
2153 |         "operationId": "update-calendar-resource",
2154 |         "summary": "Update Calendar Resource",
2155 |         "description": "Update calendar resource by ID",
2156 |         "parameters": [
2157 |           {
2158 |             "name": "Authorization",
2159 |             "in": "header",
2160 |             "description": "Access Token",
2161 |             "required": true,
2162 |             "schema": {
2163 |               "type": "string",
2164 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2165 |             }
2166 |           },
2167 |           {
2168 |             "name": "Version",
2169 |             "in": "header",
2170 |             "description": "API Version",
2171 |             "required": true,
2172 |             "schema": {
2173 |               "type": "string",
2174 |               "enum": [
2175 |                 "2021-04-15"
2176 |               ]
2177 |             }
2178 |           },
2179 |           {
2180 |             "name": "resourceType",
2181 |             "required": true,
2182 |             "in": "path",
2183 |             "description": "Calendar Resource Type",
2184 |             "schema": {
2185 |               "enum": [
2186 |                 "equipments",
2187 |                 "rooms"
2188 |               ],
2189 |               "type": "string"
2190 |             }
2191 |           },
2192 |           {
2193 |             "name": "id",
2194 |             "required": true,
2195 |             "in": "path",
2196 |             "description": "Calendar Resource ID",
2197 |             "schema": {
2198 |               "type": "string"
2199 |             }
2200 |           }
2201 |         ],
2202 |         "requestBody": {
2203 |           "required": true,
2204 |           "content": {
2205 |             "application/json": {
2206 |               "schema": {
2207 |                 "$ref": "#/components/schemas/UpdateCalendarResourceDTO"
2208 |               }
2209 |             }
2210 |           }
2211 |         },
2212 |         "responses": {
2213 |           "200": {
2214 |             "description": "Calendar resource updated",
2215 |             "content": {
2216 |               "application/json": {
2217 |                 "schema": {
2218 |                   "$ref": "#/components/schemas/CalendarResourceResponseDTO"
2219 |                 }
2220 |               }
2221 |             }
2222 |           },
2223 |           "400": {
2224 |             "description": "Bad Request",
2225 |             "content": {
2226 |               "application/json": {
2227 |                 "schema": {
2228 |                   "$ref": "#/components/schemas/BadRequestDTO"
2229 |                 }
2230 |               }
2231 |             }
2232 |           },
2233 |           "401": {
2234 |             "description": "Unauthorized",
2235 |             "content": {
2236 |               "application/json": {
2237 |                 "schema": {
2238 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2239 |                 }
2240 |               }
2241 |             }
2242 |           }
2243 |         },
2244 |         "tags": [
2245 |           "Calendar Resources: Rooms & Equipments"
2246 |         ],
2247 |         "security": [
2248 |           {
2249 |             "Location-Access": []
2250 |           }
2251 |         ]
2252 |       },
2253 |       "delete": {
2254 |         "operationId": "delete-calendar-resource",
2255 |         "summary": "Delete Calendar Resource",
2256 |         "description": "Delete calendar resource by ID",
2257 |         "parameters": [
2258 |           {
2259 |             "name": "Authorization",
2260 |             "in": "header",
2261 |             "description": "Access Token",
2262 |             "required": true,
2263 |             "schema": {
2264 |               "type": "string",
2265 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2266 |             }
2267 |           },
2268 |           {
2269 |             "name": "Version",
2270 |             "in": "header",
2271 |             "description": "API Version",
2272 |             "required": true,
2273 |             "schema": {
2274 |               "type": "string",
2275 |               "enum": [
2276 |                 "2021-04-15"
2277 |               ]
2278 |             }
2279 |           },
2280 |           {
2281 |             "name": "resourceType",
2282 |             "required": true,
2283 |             "in": "path",
2284 |             "description": "Calendar Resource Type",
2285 |             "schema": {
2286 |               "enum": [
2287 |                 "equipments",
2288 |                 "rooms"
2289 |               ],
2290 |               "type": "string"
2291 |             }
2292 |           },
2293 |           {
2294 |             "name": "id",
2295 |             "required": true,
2296 |             "in": "path",
2297 |             "description": "Calendar Resource ID",
2298 |             "schema": {
2299 |               "type": "string"
2300 |             }
2301 |           }
2302 |         ],
2303 |         "responses": {
2304 |           "200": {
2305 |             "description": "Calendar resource deleted",
2306 |             "content": {
2307 |               "application/json": {
2308 |                 "schema": {
2309 |                   "$ref": "#/components/schemas/ResourceDeleteResponseDTO"
2310 |                 }
2311 |               }
2312 |             }
2313 |           },
2314 |           "400": {
2315 |             "description": "Bad Request",
2316 |             "content": {
2317 |               "application/json": {
2318 |                 "schema": {
2319 |                   "$ref": "#/components/schemas/BadRequestDTO"
2320 |                 }
2321 |               }
2322 |             }
2323 |           },
2324 |           "401": {
2325 |             "description": "Unauthorized",
2326 |             "content": {
2327 |               "application/json": {
2328 |                 "schema": {
2329 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2330 |                 }
2331 |               }
2332 |             }
2333 |           }
2334 |         },
2335 |         "tags": [
2336 |           "Calendar Resources: Rooms & Equipments"
2337 |         ],
2338 |         "security": [
2339 |           {
2340 |             "Location-Access": []
2341 |           }
2342 |         ]
2343 |       }
2344 |     },
2345 |     "/calendars/resources/{resourceType}": {
2346 |       "get": {
2347 |         "operationId": "fetch-calendar-resources",
2348 |         "summary": "List Calendar Resources",
2349 |         "description": "List calendar resources by resource type and location ID",
2350 |         "parameters": [
2351 |           {
2352 |             "name": "Authorization",
2353 |             "in": "header",
2354 |             "description": "Access Token",
2355 |             "required": true,
2356 |             "schema": {
2357 |               "type": "string",
2358 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2359 |             }
2360 |           },
2361 |           {
2362 |             "name": "Version",
2363 |             "in": "header",
2364 |             "description": "API Version",
2365 |             "required": true,
2366 |             "schema": {
2367 |               "type": "string",
2368 |               "enum": [
2369 |                 "2021-04-15"
2370 |               ]
2371 |             }
2372 |           },
2373 |           {
2374 |             "name": "resourceType",
2375 |             "required": true,
2376 |             "in": "path",
2377 |             "description": "Calendar Resource Type",
2378 |             "schema": {
2379 |               "enum": [
2380 |                 "equipments",
2381 |                 "rooms"
2382 |               ],
2383 |               "type": "string"
2384 |             }
2385 |           },
2386 |           {
2387 |             "name": "locationId",
2388 |             "required": true,
2389 |             "in": "query",
2390 |             "schema": {
2391 |               "type": "string"
2392 |             }
2393 |           },
2394 |           {
2395 |             "name": "limit",
2396 |             "required": true,
2397 |             "in": "query",
2398 |             "schema": {
2399 |               "type": "number"
2400 |             }
2401 |           },
2402 |           {
2403 |             "name": "skip",
2404 |             "required": true,
2405 |             "in": "query",
2406 |             "schema": {
2407 |               "type": "number"
2408 |             }
2409 |           }
2410 |         ],
2411 |         "responses": {
2412 |           "200": {
2413 |             "description": "Calendar resources listed",
2414 |             "content": {
2415 |               "application/json": {
2416 |                 "schema": {
2417 |                   "type": "array",
2418 |                   "items": {
2419 |                     "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
2420 |                   }
2421 |                 }
2422 |               }
2423 |             }
2424 |           },
2425 |           "400": {
2426 |             "description": "Bad Request",
2427 |             "content": {
2428 |               "application/json": {
2429 |                 "schema": {
2430 |                   "$ref": "#/components/schemas/BadRequestDTO"
2431 |                 }
2432 |               }
2433 |             }
2434 |           },
2435 |           "401": {
2436 |             "description": "Unauthorized",
2437 |             "content": {
2438 |               "application/json": {
2439 |                 "schema": {
2440 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2441 |                 }
2442 |               }
2443 |             }
2444 |           }
2445 |         },
2446 |         "tags": [
2447 |           "Calendar Resources: Rooms & Equipments"
2448 |         ],
2449 |         "security": [
2450 |           {
2451 |             "Location-Access": []
2452 |           }
2453 |         ]
2454 |       },
2455 |       "post": {
2456 |         "operationId": "create-calendar-resource",
2457 |         "summary": "Create Calendar Resource",
2458 |         "description": "Create calendar resource by resource type",
2459 |         "parameters": [
2460 |           {
2461 |             "name": "Authorization",
2462 |             "in": "header",
2463 |             "description": "Access Token",
2464 |             "required": true,
2465 |             "schema": {
2466 |               "type": "string",
2467 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2468 |             }
2469 |           },
2470 |           {
2471 |             "name": "Version",
2472 |             "in": "header",
2473 |             "description": "API Version",
2474 |             "required": true,
2475 |             "schema": {
2476 |               "type": "string",
2477 |               "enum": [
2478 |                 "2021-04-15"
2479 |               ]
2480 |             }
2481 |           },
2482 |           {
2483 |             "name": "resourceType",
2484 |             "required": true,
2485 |             "in": "path",
2486 |             "description": "Calendar Resource Type",
2487 |             "schema": {
2488 |               "enum": [
2489 |                 "equipments",
2490 |                 "rooms"
2491 |               ],
2492 |               "type": "string"
2493 |             }
2494 |           }
2495 |         ],
2496 |         "requestBody": {
2497 |           "required": true,
2498 |           "content": {
2499 |             "application/json": {
2500 |               "schema": {
2501 |                 "$ref": "#/components/schemas/CreateCalendarResourceDTO"
2502 |               }
2503 |             }
2504 |           }
2505 |         },
2506 |         "responses": {
2507 |           "201": {
2508 |             "description": "Calendar resource created",
2509 |             "content": {
2510 |               "application/json": {
2511 |                 "schema": {
2512 |                   "$ref": "#/components/schemas/CalendarResourceByIdResponseDTO"
2513 |                 }
2514 |               }
2515 |             }
2516 |           },
2517 |           "400": {
2518 |             "description": "Bad Request",
2519 |             "content": {
2520 |               "application/json": {
2521 |                 "schema": {
2522 |                   "$ref": "#/components/schemas/BadRequestDTO"
2523 |                 }
2524 |               }
2525 |             }
2526 |           },
2527 |           "401": {
2528 |             "description": "Unauthorized",
2529 |             "content": {
2530 |               "application/json": {
2531 |                 "schema": {
2532 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2533 |                 }
2534 |               }
2535 |             }
2536 |           }
2537 |         },
2538 |         "tags": [
2539 |           "Calendar Resources: Rooms & Equipments"
2540 |         ],
2541 |         "security": [
2542 |           {
2543 |             "Location-Access": []
2544 |           }
2545 |         ]
2546 |       }
2547 |     },
2548 |     "/calendars/{calendarId}/notifications": {
2549 |       "get": {
2550 |         "operationId": "get-event-notification",
2551 |         "summary": "Get notifications",
2552 |         "description": "Get calendar notifications based on query",
2553 |         "parameters": [
2554 |           {
2555 |             "name": "Authorization",
2556 |             "in": "header",
2557 |             "description": "Access Token",
2558 |             "required": true,
2559 |             "schema": {
2560 |               "type": "string",
2561 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2562 |             }
2563 |           },
2564 |           {
2565 |             "name": "Version",
2566 |             "in": "header",
2567 |             "description": "API Version",
2568 |             "required": true,
2569 |             "schema": {
2570 |               "type": "string",
2571 |               "enum": [
2572 |                 "2021-04-15"
2573 |               ]
2574 |             }
2575 |           },
2576 |           {
2577 |             "name": "calendarId",
2578 |             "required": true,
2579 |             "in": "path",
2580 |             "schema": {
2581 |               "type": "string"
2582 |             }
2583 |           },
2584 |           {
2585 |             "name": "altType",
2586 |             "required": false,
2587 |             "in": "query",
2588 |             "description": "Specifies the model associated with the notification. This can be extended to support additional models in the future. For now only Calendars is supported",
2589 |             "schema": {
2590 |               "default": "calendar",
2591 |               "enum": [
2592 |                 "calendar"
2593 |               ],
2594 |               "type": "string"
2595 |             }
2596 |           },
2597 |           {
2598 |             "name": "altId",
2599 |             "required": false,
2600 |             "in": "query",
2601 |             "description": "Specifies the ID of the model associated with the notification. This can be extended to support additional models in the future.",
2602 |             "schema": {
2603 |               "type": "string"
2604 |             }
2605 |           },
2606 |           {
2607 |             "name": "isActive",
2608 |             "required": false,
2609 |             "in": "query",
2610 |             "schema": {
2611 |               "type": "boolean"
2612 |             }
2613 |           },
2614 |           {
2615 |             "name": "deleted",
2616 |             "required": false,
2617 |             "in": "query",
2618 |             "schema": {
2619 |               "type": "boolean"
2620 |             }
2621 |           },
2622 |           {
2623 |             "name": "limit",
2624 |             "required": false,
2625 |             "in": "query",
2626 |             "description": "Number of records to return",
2627 |             "schema": {
2628 |               "default": 100,
2629 |               "type": "number"
2630 |             }
2631 |           },
2632 |           {
2633 |             "name": "skip",
2634 |             "required": false,
2635 |             "in": "query",
2636 |             "description": "Number of records to skip",
2637 |             "schema": {
2638 |               "default": 0,
2639 |               "type": "number"
2640 |             }
2641 |           }
2642 |         ],
2643 |         "responses": {
2644 |           "200": {
2645 |             "description": "Successful response",
2646 |             "content": {
2647 |               "application/json": {
2648 |                 "schema": {
2649 |                   "type": "array",
2650 |                   "items": {
2651 |                     "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
2652 |                   }
2653 |                 }
2654 |               }
2655 |             }
2656 |           },
2657 |           "400": {
2658 |             "description": "Bad Request",
2659 |             "content": {
2660 |               "application/json": {
2661 |                 "schema": {
2662 |                   "$ref": "#/components/schemas/BadRequestDTO"
2663 |                 }
2664 |               }
2665 |             }
2666 |           },
2667 |           "401": {
2668 |             "description": "Unauthorized",
2669 |             "content": {
2670 |               "application/json": {
2671 |                 "schema": {
2672 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2673 |                 }
2674 |               }
2675 |             }
2676 |           }
2677 |         },
2678 |         "tags": [
2679 |           "Calendar Notifications"
2680 |         ]
2681 |       },
2682 |       "post": {
2683 |         "operationId": "create-event-notification",
2684 |         "summary": "Create notification",
2685 |         "description": "Create Calendar notifications, either one or multiple. All notification settings must be for single calendar only",
2686 |         "parameters": [
2687 |           {
2688 |             "name": "Authorization",
2689 |             "in": "header",
2690 |             "description": "Access Token",
2691 |             "required": true,
2692 |             "schema": {
2693 |               "type": "string",
2694 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2695 |             }
2696 |           },
2697 |           {
2698 |             "name": "Version",
2699 |             "in": "header",
2700 |             "description": "API Version",
2701 |             "required": true,
2702 |             "schema": {
2703 |               "type": "string",
2704 |               "enum": [
2705 |                 "2021-04-15"
2706 |               ]
2707 |             }
2708 |           },
2709 |           {
2710 |             "name": "calendarId",
2711 |             "required": true,
2712 |             "in": "path",
2713 |             "schema": {
2714 |               "type": "string"
2715 |             }
2716 |           }
2717 |         ],
2718 |         "requestBody": {
2719 |           "required": true,
2720 |           "content": {
2721 |             "application/json": {
2722 |               "schema": {
2723 |                 "type": "array",
2724 |                 "items": {
2725 |                   "$ref": "#/components/schemas/CreateCalendarNotificationDTO"
2726 |                 }
2727 |               }
2728 |             }
2729 |           }
2730 |         },
2731 |         "responses": {
2732 |           "200": {
2733 |             "description": "Successful response",
2734 |             "content": {
2735 |               "application/json": {
2736 |                 "schema": {
2737 |                   "type": "array",
2738 |                   "items": {
2739 |                     "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
2740 |                   }
2741 |                 }
2742 |               }
2743 |             }
2744 |           },
2745 |           "400": {
2746 |             "description": "Bad Request",
2747 |             "content": {
2748 |               "application/json": {
2749 |                 "schema": {
2750 |                   "$ref": "#/components/schemas/BadRequestDTO"
2751 |                 }
2752 |               }
2753 |             }
2754 |           },
2755 |           "401": {
2756 |             "description": "Unauthorized",
2757 |             "content": {
2758 |               "application/json": {
2759 |                 "schema": {
2760 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2761 |                 }
2762 |               }
2763 |             }
2764 |           }
2765 |         },
2766 |         "tags": [
2767 |           "Calendar Notifications"
2768 |         ]
2769 |       }
2770 |     },
2771 |     "/calendars/{calendarId}/notifications/{notificationId}": {
2772 |       "get": {
2773 |         "operationId": "find-event-notification",
2774 |         "summary": "Get notification",
2775 |         "description": "Find Event notification by notificationId",
2776 |         "parameters": [
2777 |           {
2778 |             "name": "Authorization",
2779 |             "in": "header",
2780 |             "description": "Access Token",
2781 |             "required": true,
2782 |             "schema": {
2783 |               "type": "string",
2784 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2785 |             }
2786 |           },
2787 |           {
2788 |             "name": "Version",
2789 |             "in": "header",
2790 |             "description": "API Version",
2791 |             "required": true,
2792 |             "schema": {
2793 |               "type": "string",
2794 |               "enum": [
2795 |                 "2021-04-15"
2796 |               ]
2797 |             }
2798 |           },
2799 |           {
2800 |             "name": "calendarId",
2801 |             "required": true,
2802 |             "in": "path",
2803 |             "schema": {
2804 |               "type": "string"
2805 |             }
2806 |           },
2807 |           {
2808 |             "name": "notificationId",
2809 |             "required": true,
2810 |             "in": "path",
2811 |             "schema": {
2812 |               "type": "string"
2813 |             }
2814 |           }
2815 |         ],
2816 |         "responses": {
2817 |           "200": {
2818 |             "description": "Successful response",
2819 |             "content": {
2820 |               "application/json": {
2821 |                 "schema": {
2822 |                   "$ref": "#/components/schemas/CalendarNotificationResponseDTO"
2823 |                 }
2824 |               }
2825 |             }
2826 |           },
2827 |           "400": {
2828 |             "description": "Bad Request",
2829 |             "content": {
2830 |               "application/json": {
2831 |                 "schema": {
2832 |                   "$ref": "#/components/schemas/BadRequestDTO"
2833 |                 }
2834 |               }
2835 |             }
2836 |           },
2837 |           "401": {
2838 |             "description": "Unauthorized",
2839 |             "content": {
2840 |               "application/json": {
2841 |                 "schema": {
2842 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2843 |                 }
2844 |               }
2845 |             }
2846 |           }
2847 |         },
2848 |         "tags": [
2849 |           "Calendar Notifications"
2850 |         ]
2851 |       },
2852 |       "put": {
2853 |         "operationId": "update-event-notification",
2854 |         "summary": "Update notification",
2855 |         "description": "Update Event notification by id",
2856 |         "parameters": [
2857 |           {
2858 |             "name": "Authorization",
2859 |             "in": "header",
2860 |             "description": "Access Token",
2861 |             "required": true,
2862 |             "schema": {
2863 |               "type": "string",
2864 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2865 |             }
2866 |           },
2867 |           {
2868 |             "name": "Version",
2869 |             "in": "header",
2870 |             "description": "API Version",
2871 |             "required": true,
2872 |             "schema": {
2873 |               "type": "string",
2874 |               "enum": [
2875 |                 "2021-04-15"
2876 |               ]
2877 |             }
2878 |           },
2879 |           {
2880 |             "name": "calendarId",
2881 |             "required": true,
2882 |             "in": "path",
2883 |             "schema": {
2884 |               "type": "string"
2885 |             }
2886 |           },
2887 |           {
2888 |             "name": "notificationId",
2889 |             "required": true,
2890 |             "in": "path",
2891 |             "schema": {
2892 |               "type": "string"
2893 |             }
2894 |           }
2895 |         ],
2896 |         "requestBody": {
2897 |           "required": true,
2898 |           "content": {
2899 |             "application/json": {
2900 |               "schema": {
2901 |                 "$ref": "#/components/schemas/UpdateCalendarNotificationsDTO"
2902 |               }
2903 |             }
2904 |           }
2905 |         },
2906 |         "responses": {
2907 |           "200": {
2908 |             "description": "Successful response",
2909 |             "content": {
2910 |               "application/json": {
2911 |                 "schema": {
2912 |                   "$ref": "#/components/schemas/CalendarNotificationDeleteResponseDTO"
2913 |                 }
2914 |               }
2915 |             }
2916 |           },
2917 |           "400": {
2918 |             "description": "Bad Request",
2919 |             "content": {
2920 |               "application/json": {
2921 |                 "schema": {
2922 |                   "$ref": "#/components/schemas/BadRequestDTO"
2923 |                 }
2924 |               }
2925 |             }
2926 |           },
2927 |           "401": {
2928 |             "description": "Unauthorized",
2929 |             "content": {
2930 |               "application/json": {
2931 |                 "schema": {
2932 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2933 |                 }
2934 |               }
2935 |             }
2936 |           }
2937 |         },
2938 |         "tags": [
2939 |           "Calendar Notifications"
2940 |         ]
2941 |       },
2942 |       "delete": {
2943 |         "operationId": "delete-event-notification",
2944 |         "summary": "",
2945 |         "description": "Delete notification",
2946 |         "parameters": [
2947 |           {
2948 |             "name": "Authorization",
2949 |             "in": "header",
2950 |             "description": "Access Token",
2951 |             "required": true,
2952 |             "schema": {
2953 |               "type": "string",
2954 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2955 |             }
2956 |           },
2957 |           {
2958 |             "name": "Version",
2959 |             "in": "header",
2960 |             "description": "API Version",
2961 |             "required": true,
2962 |             "schema": {
2963 |               "type": "string",
2964 |               "enum": [
2965 |                 "2021-04-15"
2966 |               ]
2967 |             }
2968 |           },
2969 |           {
2970 |             "name": "calendarId",
2971 |             "required": true,
2972 |             "in": "path",
2973 |             "schema": {
2974 |               "type": "string"
2975 |             }
2976 |           },
2977 |           {
2978 |             "name": "notificationId",
2979 |             "required": true,
2980 |             "in": "path",
2981 |             "schema": {
2982 |               "type": "string"
2983 |             }
2984 |           }
2985 |         ],
2986 |         "responses": {
2987 |           "200": {
2988 |             "description": "Successful response",
2989 |             "content": {
2990 |               "application/json": {
2991 |                 "schema": {
2992 |                   "$ref": "#/components/schemas/CalendarNotificationDeleteResponseDTO"
2993 |                 }
2994 |               }
2995 |             }
2996 |           },
2997 |           "400": {
2998 |             "description": "Bad Request",
2999 |             "content": {
3000 |               "application/json": {
3001 |                 "schema": {
3002 |                   "$ref": "#/components/schemas/BadRequestDTO"
3003 |                 }
3004 |               }
3005 |             }
3006 |           },
3007 |           "401": {
3008 |             "description": "Unauthorized",
3009 |             "content": {
3010 |               "application/json": {
3011 |                 "schema": {
3012 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3013 |                 }
3014 |               }
3015 |             }
3016 |           }
3017 |         },
3018 |         "tags": [
3019 |           "Calendar Notifications"
3020 |         ]
3021 |       }
3022 |     },
3023 |     "/calendars/": {
3024 |       "get": {
3025 |         "operationId": "get-calendars",
3026 |         "summary": "Get Calendars",
3027 |         "description": "Get all calendars in a location.",
3028 |         "parameters": [
3029 |           {
3030 |             "name": "Authorization",
3031 |             "in": "header",
3032 |             "description": "Access Token",
3033 |             "required": true,
3034 |             "schema": {
3035 |               "type": "string",
3036 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3037 |             }
3038 |           },
3039 |           {
3040 |             "name": "Version",
3041 |             "in": "header",
3042 |             "description": "API Version",
3043 |             "required": true,
3044 |             "schema": {
3045 |               "type": "string",
3046 |               "enum": [
3047 |                 "2021-04-15"
3048 |               ]
3049 |             }
3050 |           },
3051 |           {
3052 |             "name": "locationId",
3053 |             "required": true,
3054 |             "in": "query",
3055 |             "description": "Location Id",
3056 |             "example": "ve9EPM428h8vShlRW1KT",
3057 |             "schema": {
3058 |               "type": "string"
3059 |             }
3060 |           },
3061 |           {
3062 |             "name": "groupId",
3063 |             "required": false,
3064 |             "in": "query",
3065 |             "description": "Group Id",
3066 |             "example": "BqTwX8QFwXzpegMve9EQ",
3067 |             "schema": {
3068 |               "type": "string"
3069 |             }
3070 |           },
3071 |           {
3072 |             "name": "showDrafted",
3073 |             "required": false,
3074 |             "in": "query",
3075 |             "description": "Show drafted",
3076 |             "example": false,
3077 |             "schema": {
3078 |               "default": true,
3079 |               "type": "boolean"
3080 |             }
3081 |           }
3082 |         ],
3083 |         "responses": {
3084 |           "200": {
3085 |             "description": "Successful response",
3086 |             "content": {
3087 |               "application/json": {
3088 |                 "schema": {
3089 |                   "$ref": "#/components/schemas/CalendarsGetSuccessfulResponseDTO"
3090 |                 }
3091 |               }
3092 |             }
3093 |           },
3094 |           "400": {
3095 |             "description": "Bad Request",
3096 |             "content": {
3097 |               "application/json": {
3098 |                 "schema": {
3099 |                   "$ref": "#/components/schemas/BadRequestDTO"
3100 |                 }
3101 |               }
3102 |             }
3103 |           },
3104 |           "401": {
3105 |             "description": "Unauthorized",
3106 |             "content": {
3107 |               "application/json": {
3108 |                 "schema": {
3109 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3110 |                 }
3111 |               }
3112 |             }
3113 |           }
3114 |         },
3115 |         "tags": [
3116 |           "Calendars"
3117 |         ],
3118 |         "security": [
3119 |           {
3120 |             "bearer": []
3121 |           }
3122 |         ]
3123 |       },
3124 |       "post": {
3125 |         "operationId": "create-calendar",
3126 |         "summary": "Create Calendar",
3127 |         "description": "Create calendar in a location.",
3128 |         "parameters": [
3129 |           {
3130 |             "name": "Authorization",
3131 |             "in": "header",
3132 |             "description": "Access Token",
3133 |             "required": true,
3134 |             "schema": {
3135 |               "type": "string",
3136 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3137 |             }
3138 |           },
3139 |           {
3140 |             "name": "Version",
3141 |             "in": "header",
3142 |             "description": "API Version",
3143 |             "required": true,
3144 |             "schema": {
3145 |               "type": "string",
3146 |               "enum": [
3147 |                 "2021-04-15"
3148 |               ]
3149 |             }
3150 |           }
3151 |         ],
3152 |         "requestBody": {
3153 |           "required": true,
3154 |           "content": {
3155 |             "application/json": {
3156 |               "schema": {
3157 |                 "$ref": "#/components/schemas/CalendarCreateDTO"
3158 |               }
3159 |             }
3160 |           }
3161 |         },
3162 |         "responses": {
3163 |           "200": {
3164 |             "description": "Successful response",
3165 |             "content": {
3166 |               "application/json": {
3167 |                 "schema": {
3168 |                   "$ref": "#/components/schemas/CalendarByIdSuccessfulResponseDTO"
3169 |                 }
3170 |               }
3171 |             }
3172 |           },
3173 |           "400": {
3174 |             "description": "Bad Request",
3175 |             "content": {
3176 |               "application/json": {
3177 |                 "schema": {
3178 |                   "$ref": "#/components/schemas/BadRequestDTO"
3179 |                 }
3180 |               }
3181 |             }
3182 |           },
3183 |           "401": {
3184 |             "description": "Unauthorized",
3185 |             "content": {
3186 |               "application/json": {
3187 |                 "schema": {
3188 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3189 |                 }
3190 |               }
3191 |             }
3192 |           }
3193 |         },
3194 |         "tags": [
3195 |           "Calendars"
3196 |         ],
3197 |         "security": [
3198 |           {
3199 |             "bearer": []
3200 |           }
3201 |         ]
3202 |       }
3203 |     }
3204 |   },
3205 |   "info": {
3206 |     "title": "Calendars API",
3207 |     "description": "Documentation for Calendars API",
3208 |     "version": "1.0",
3209 |     "contact": {}
3210 |   },
3211 |   "tags": [
3212 |     {
3213 |       "name": "Calendars",
3214 |       "description": "Documentation for Calendars API"
3215 |     }
3216 |   ],
3217 |   "servers": [
3218 |     {
3219 |       "url": "https://services.leadconnectorhq.com"
3220 |     }
3221 |   ],
3222 |   "components": {
3223 |     "securitySchemes": {
3224 |       "bearer": {
3225 |         "scheme": "bearer",
3226 |         "bearerFormat": "JWT",
3227 |         "name": "Authorization",
3228 |         "in": "header",
3229 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
3230 |         "type": "http"
3231 |       },
3232 |       "Location-Access": {
3233 |         "scheme": "bearer",
3234 |         "bearerFormat": "JWT",
3235 |         "name": "Authorization",
3236 |         "in": "header",
3237 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
3238 |         "type": "http"
3239 |       },
3240 |       "Agency-Access": {
3241 |         "scheme": "bearer",
3242 |         "bearerFormat": "JWT",
3243 |         "name": "Authorization",
3244 |         "in": "header",
3245 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
3246 |         "type": "http"
3247 |       }
3248 |     },
3249 |     "schemas": {
3250 |       "BadRequestDTO": {
3251 |         "type": "object",
3252 |         "properties": {
3253 |           "statusCode": {
3254 |             "type": "number",
3255 |             "example": 400
3256 |           },
3257 |           "message": {
3258 |             "type": "string",
3259 |             "example": "Bad Request"
3260 |           }
3261 |         }
3262 |       },
3263 |       "UnauthorizedDTO": {
3264 |         "type": "object",
3265 |         "properties": {
3266 |           "statusCode": {
3267 |             "type": "number",
3268 |             "example": 401
3269 |           },
3270 |           "message": {
3271 |             "type": "string",
3272 |             "example": "Invalid token: access token is invalid"
3273 |           },
3274 |           "error": {
3275 |             "type": "string",
3276 |             "example": "Unauthorized"
3277 |           }
3278 |         }
3279 |       },
3280 |       "GroupDTO": {
3281 |         "type": "object",
3282 |         "properties": {
3283 |           "locationId": {
3284 |             "type": "string",
3285 |             "example": "ocQHyuzHvysMo5N5VsXc"
3286 |           },
3287 |           "name": {
3288 |             "type": "string",
3289 |             "example": "group a"
3290 |           },
3291 |           "description": {
3292 |             "type": "string",
3293 |             "example": "group description"
3294 |           },
3295 |           "slug": {
3296 |             "type": "string",
3297 |             "example": "15-mins"
3298 |           },
3299 |           "isActive": {
3300 |             "type": "boolean",
3301 |             "example": true
3302 |           },
3303 |           "id": {
3304 |             "type": "string",
3305 |             "example": "ocQHyuzHvysMo5N5VsXc"
3306 |           }
3307 |         },
3308 |         "required": [
3309 |           "locationId",
3310 |           "name",
3311 |           "description",
3312 |           "slug"
3313 |         ]
3314 |       },
3315 |       "AllGroupsSuccessfulResponseDTO": {
3316 |         "type": "object",
3317 |         "properties": {
3318 |           "groups": {
3319 |             "type": "array",
3320 |             "items": {
3321 |               "$ref": "#/components/schemas/GroupDTO"
3322 |             }
3323 |           }
3324 |         }
3325 |       },
3326 |       "ValidateGroupSlugPostBody": {
3327 |         "type": "object",
3328 |         "properties": {
3329 |           "locationId": {
3330 |             "type": "string",
3331 |             "description": "Location Id",
3332 |             "example": "ve9EPM428h8vShlRW1KT"
3333 |           },
3334 |           "slug": {
3335 |             "type": "string",
3336 |             "description": "Slug",
3337 |             "example": "calendar-1"
3338 |           }
3339 |         },
3340 |         "required": [
3341 |           "locationId",
3342 |           "slug"
3343 |         ]
3344 |       },
3345 |       "ValidateGroupSlugSuccessResponseDTO": {
3346 |         "type": "object",
3347 |         "properties": {
3348 |           "available": {
3349 |             "type": "boolean"
3350 |           }
3351 |         },
3352 |         "required": [
3353 |           "available"
3354 |         ]
3355 |       },
3356 |       "GroupCreateDTO": {
3357 |         "type": "object",
3358 |         "properties": {
3359 |           "locationId": {
3360 |             "type": "string",
3361 |             "example": "ocQHyuzHvysMo5N5VsXc"
3362 |           },
3363 |           "name": {
3364 |             "type": "string",
3365 |             "example": "group a"
3366 |           },
3367 |           "description": {
3368 |             "type": "string",
3369 |             "example": "group description"
3370 |           },
3371 |           "slug": {
3372 |             "type": "string",
3373 |             "example": "15-mins"
3374 |           },
3375 |           "isActive": {
3376 |             "type": "boolean",
3377 |             "example": true
3378 |           }
3379 |         },
3380 |         "required": [
3381 |           "locationId",
3382 |           "name",
3383 |           "description",
3384 |           "slug"
3385 |         ]
3386 |       },
3387 |       "GroupCreateSuccessfulResponseDTO": {
3388 |         "type": "object",
3389 |         "properties": {
3390 |           "group": {
3391 |             "$ref": "#/components/schemas/GroupDTO"
3392 |           }
3393 |         }
3394 |       },
3395 |       "GroupSuccessfulResponseDTO": {
3396 |         "type": "object",
3397 |         "properties": {
3398 |           "success": {
3399 |             "type": "boolean",
3400 |             "description": "Success",
3401 |             "example": "true"
3402 |           }
3403 |         }
3404 |       },
3405 |       "GroupStatusUpdateParams": {
3406 |         "type": "object",
3407 |         "properties": {
3408 |           "isActive": {
3409 |             "type": "boolean",
3410 |             "description": "Is Active?",
3411 |             "example": true
3412 |           }
3413 |         },
3414 |         "required": [
3415 |           "isActive"
3416 |         ]
3417 |       },
3418 |       "GroupUpdateDTO": {
3419 |         "type": "object",
3420 |         "properties": {
3421 |           "name": {
3422 |             "type": "string",
3423 |             "example": "group a"
3424 |           },
3425 |           "description": {
3426 |             "type": "string",
3427 |             "example": "group description"
3428 |           },
3429 |           "slug": {
3430 |             "type": "string",
3431 |             "example": "15-mins"
3432 |           }
3433 |         },
3434 |         "required": [
3435 |           "name",
3436 |           "description",
3437 |           "slug"
3438 |         ]
3439 |       },
3440 |       "AppointmentCreateSchema": {
3441 |         "type": "object",
3442 |         "properties": {
3443 |           "title": {
3444 |             "type": "string",
3445 |             "description": "Title",
3446 |             "example": "Test Event"
3447 |           },
3448 |           "meetingLocationType": {
3449 |             "type": "string",
3450 |             "description": "Meeting location type. \n- If `address` is provided in the request body, the `meetingLocationType` defaults to **custom**.",
3451 |             "example": "custom",
3452 |             "enum": [
3453 |               "custom",
3454 |               "zoom",
3455 |               "gmeet",
3456 |               "phone",
3457 |               "address",
3458 |               "ms_teams",
3459 |               "google"
3460 |             ]
3461 |           },
3462 |           "meetingLocationId": {
3463 |             "type": "string",
3464 |             "description": "The unique identifier for the meeting location.\n- This value can be found in `calendar.locationConfigurations`or `calendar.teamMembers[].locationConfigurations`",
3465 |             "example": "custom_0",
3466 |             "default": "default"
3467 |           },
3468 |           "overrideLocationConfig": {
3469 |             "type": "boolean",
3470 |             "description": "Flag to override location config\n- **false** - If only `meetingLocationId` is provided\n- **true** - If only `meetingLocationType` is provided\n",
3471 |             "example": true
3472 |           },
3473 |           "appointmentStatus": {
3474 |             "type": "string",
3475 |             "example": "confirmed",
3476 |             "enum": [
3477 |               "new",
3478 |               "confirmed",
3479 |               "cancelled",
3480 |               "showed",
3481 |               "noshow",
3482 |               "invalid"
3483 |             ]
3484 |           },
3485 |           "assignedUserId": {
3486 |             "type": "string",
3487 |             "description": "Assigned User Id",
3488 |             "example": "0007BWpSzSwfiuSl0tR2"
3489 |           },
3490 |           "address": {
3491 |             "type": "string",
3492 |             "description": "Appointment Address",
3493 |             "example": "Zoom"
3494 |           },
3495 |           "ignoreDateRange": {
3496 |             "type": "boolean",
3497 |             "description": "If set to true, the minimum scheduling notice and date range would be ignored",
3498 |             "example": false
3499 |           },
3500 |           "toNotify": {
3501 |             "type": "boolean",
3502 |             "description": "If set to false, the automations will not run",
3503 |             "example": false
3504 |           },
3505 |           "ignoreFreeSlotValidation": {
3506 |             "type": "boolean",
3507 |             "description": "If true the time slot validation would be avoided for any appointment creation (even the ignoreDateRange)",
3508 |             "example": true
3509 |           },
3510 |           "rrule": {
3511 |             "type": "string",
3512 |             "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event. The rrule only be applied if ignoreFreeSlotValidation is true.",
3513 |             "examples": [
3514 |               "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
3515 |               "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
3516 |             ]
3517 |           },
3518 |           "calendarId": {
3519 |             "type": "string",
3520 |             "description": "Calendar Id",
3521 |             "example": "CVokAlI8fgw4WYWoCtQz"
3522 |           },
3523 |           "locationId": {
3524 |             "type": "string",
3525 |             "description": "Location Id",
3526 |             "example": "C2QujeCh8ZnC7al2InWR"
3527 |           },
3528 |           "contactId": {
3529 |             "type": "string",
3530 |             "description": "Contact Id",
3531 |             "example": "0007BWpSzSwfiuSl0tR2"
3532 |           },
3533 |           "startTime": {
3534 |             "type": "string",
3535 |             "description": "Start Time",
3536 |             "example": "2021-06-23T03:30:00+05:30"
3537 |           },
3538 |           "endTime": {
3539 |             "type": "string",
3540 |             "description": "End Time",
3541 |             "example": "2021-06-23T04:30:00+05:30"
3542 |           }
3543 |         },
3544 |         "required": [
3545 |           "calendarId",
3546 |           "locationId",
3547 |           "contactId",
3548 |           "startTime"
3549 |         ]
3550 |       },
3551 |       "AppointmentSchemaResponse": {
3552 |         "type": "object",
3553 |         "properties": {
3554 |           "calendarId": {
3555 |             "type": "string",
3556 |             "description": "Calendar Id",
3557 |             "example": "CVokAlI8fgw4WYWoCtQz"
3558 |           },
3559 |           "locationId": {
3560 |             "type": "string",
3561 |             "description": "Location Id",
3562 |             "example": "C2QujeCh8ZnC7al2InWR"
3563 |           },
3564 |           "contactId": {
3565 |             "type": "string",
3566 |             "description": "Contact Id",
3567 |             "example": "0007BWpSzSwfiuSl0tR2"
3568 |           },
3569 |           "startTime": {
3570 |             "type": "string",
3571 |             "description": "Start Time",
3572 |             "example": "2021-06-23T03:30:00+05:30"
3573 |           },
3574 |           "endTime": {
3575 |             "type": "string",
3576 |             "description": "End Time",
3577 |             "example": "2021-06-23T04:30:00+05:30"
3578 |           },
3579 |           "title": {
3580 |             "type": "string",
3581 |             "description": "Title",
3582 |             "example": "Test Event"
3583 |           },
3584 |           "meetingLocationType": {
3585 |             "type": "string",
3586 |             "description": "Meeting Location Type",
3587 |             "example": "custom",
3588 |             "default": "default"
3589 |           },
3590 |           "appointmentStatus": {
3591 |             "type": "string",
3592 |             "example": "confirmed",
3593 |             "enum": [
3594 |               "new",
3595 |               "confirmed",
3596 |               "cancelled",
3597 |               "showed",
3598 |               "noshow",
3599 |               "invalid"
3600 |             ]
3601 |           },
3602 |           "assignedUserId": {
3603 |             "type": "string",
3604 |             "description": "Assigned User Id",
3605 |             "example": "0007BWpSzSwfiuSl0tR2"
3606 |           },
3607 |           "address": {
3608 |             "type": "string",
3609 |             "description": "Appointment Address",
3610 |             "example": "Zoom"
3611 |           },
3612 |           "isRecurring": {
3613 |             "type": "boolean",
3614 |             "description": "true if the event is recurring otherwise false",
3615 |             "example": "true"
3616 |           },
3617 |           "rrule": {
3618 |             "type": "string",
3619 |             "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events",
3620 |             "examples": [
3621 |               "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
3622 |               "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
3623 |             ]
3624 |           },
3625 |           "id": {
3626 |             "type": "string",
3627 |             "description": "Id",
3628 |             "example": "0TkCdp9PfvLeWKYRRvIz"
3629 |           }
3630 |         },
3631 |         "required": [
3632 |           "calendarId",
3633 |           "locationId",
3634 |           "contactId",
3635 |           "id"
3636 |         ]
3637 |       },
3638 |       "AppointmentEditSchema": {
3639 |         "type": "object",
3640 |         "properties": {
3641 |           "title": {
3642 |             "type": "string",
3643 |             "description": "Title",
3644 |             "example": "Test Event"
3645 |           },
3646 |           "meetingLocationType": {
3647 |             "type": "string",
3648 |             "description": "Meeting location type. \n- If `address` is provided in the request body, the `meetingLocationType` defaults to **custom**.",
3649 |             "example": "custom",
3650 |             "enum": [
3651 |               "custom",
3652 |               "zoom",
3653 |               "gmeet",
3654 |               "phone",
3655 |               "address",
3656 |               "ms_teams",
3657 |               "google"
3658 |             ]
3659 |           },
3660 |           "meetingLocationId": {
3661 |             "type": "string",
3662 |             "description": "The unique identifier for the meeting location.\n- This value can be found in `calendar.locationConfigurations`or `calendar.teamMembers[].locationConfigurations`",
3663 |             "example": "custom_0",
3664 |             "default": "default"
3665 |           },
3666 |           "overrideLocationConfig": {
3667 |             "type": "boolean",
3668 |             "description": "Flag to override location config\n- **false** - If only `meetingLocationId` is provided\n- **true** - If only `meetingLocationType` is provided\n",
3669 |             "example": true
3670 |           },
3671 |           "appointmentStatus": {
3672 |             "type": "string",
3673 |             "example": "confirmed",
3674 |             "enum": [
3675 |               "new",
3676 |               "confirmed",
3677 |               "cancelled",
3678 |               "showed",
3679 |               "noshow",
3680 |               "invalid"
3681 |             ]
3682 |           },
3683 |           "assignedUserId": {
3684 |             "type": "string",
3685 |             "description": "Assigned User Id",
3686 |             "example": "0007BWpSzSwfiuSl0tR2"
3687 |           },
3688 |           "address": {
3689 |             "type": "string",
3690 |             "description": "Appointment Address",
3691 |             "example": "Zoom"
3692 |           },
3693 |           "ignoreDateRange": {
3694 |             "type": "boolean",
3695 |             "description": "If set to true, the minimum scheduling notice and date range would be ignored",
3696 |             "example": false
3697 |           },
3698 |           "toNotify": {
3699 |             "type": "boolean",
3700 |             "description": "If set to false, the automations will not run",
3701 |             "example": false
3702 |           },
3703 |           "ignoreFreeSlotValidation": {
3704 |             "type": "boolean",
3705 |             "description": "If true the time slot validation would be avoided for any appointment creation (even the ignoreDateRange)",
3706 |             "example": true
3707 |           },
3708 |           "rrule": {
3709 |             "type": "string",
3710 |             "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event. The rrule only be applied if ignoreFreeSlotValidation is true.",
3711 |             "examples": [
3712 |               "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
3713 |               "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
3714 |             ]
3715 |           },
3716 |           "calendarId": {
3717 |             "type": "string",
3718 |             "description": "Calendar Id",
3719 |             "example": "CVokAlI8fgw4WYWoCtQz"
3720 |           },
3721 |           "startTime": {
3722 |             "type": "string",
3723 |             "description": "Start Time",
3724 |             "example": "2021-06-23T03:30:00+05:30"
3725 |           },
3726 |           "endTime": {
3727 |             "type": "string",
3728 |             "description": "End Time",
3729 |             "example": "2021-06-23T04:30:00+05:30"
3730 |           }
3731 |         }
3732 |       },
3733 |       "CreatedOrUpdatedBy": {
3734 |         "type": "object",
3735 |         "properties": {
3736 |           "userId": {
3737 |             "type": "string",
3738 |             "description": "The ID of the user who created or updated the appointment"
3739 |           },
3740 |           "source": {
3741 |             "type": "string",
3742 |             "description": "The source of the appointment"
3743 |           }
3744 |         },
3745 |         "required": [
3746 |           "source"
3747 |         ]
3748 |       },
3749 |       "CalendarEventDTO": {
3750 |         "type": "object",
3751 |         "properties": {
3752 |           "id": {
3753 |             "type": "string",
3754 |             "description": "Event Id or Instance id for a recurring event",
3755 |             "examples": [
3756 |               "ocQHyuzHvysMo5N5VsXc",
3757 |               "ocQHyuzHvysMo5N5VsXc_1729821600000_1800"
3758 |             ]
3759 |           },
3760 |           "address": {
3761 |             "type": "string",
3762 |             "description": "Calendar Event address",
3763 |             "example": "https://meet.google.com/yqp-gogr-wve"
3764 |           },
3765 |           "title": {
3766 |             "type": "string",
3767 |             "description": "Calendar Event title",
3768 |             "example": "Appointment with GHL Dev team"
3769 |           },
3770 |           "calendarId": {
3771 |             "type": "string",
3772 |             "description": "Calendar ID",
3773 |             "example": "BqTwX8QFwXzpegMve9EQ"
3774 |           },
3775 |           "locationId": {
3776 |             "type": "string",
3777 |             "description": "Location ID",
3778 |             "example": "0007BWpSzSwfiuSl0tR2"
3779 |           },
3780 |           "contactId": {
3781 |             "type": "string",
3782 |             "description": "Contact ID",
3783 |             "example": "9NkT25Vor1v4aQatFsv2"
3784 |           },
3785 |           "groupId": {
3786 |             "type": "string",
3787 |             "description": "Group ID",
3788 |             "example": "9NkT25Vor1v4aQatFsv2"
3789 |           },
3790 |           "appointmentStatus": {
3791 |             "type": "string",
3792 |             "description": "Appointment Status",
3793 |             "example": "confirmed"
3794 |           },
3795 |           "assignedUserId": {
3796 |             "type": "string",
3797 |             "description": "AssignedUser - the primary owner of an appointment",
3798 |             "example": "YlWd2wuCAZQzh2cH1fVZ"
3799 |           },
3800 |           "users": {
3801 |             "description": "Users - the secondary owners of an appointment.",
3802 |             "example": [
3803 |               "YlWd2wuCAZQzh2cH1fVZ",
3804 |               "9NkT25Vor1v4aQatFsv2"
3805 |             ],
3806 |             "type": "array",
3807 |             "items": {
3808 |               "type": "string"
3809 |             }
3810 |           },
3811 |           "notes": {
3812 |             "type": "string",
3813 |             "description": "Notes",
3814 |             "example": "Some dummy note"
3815 |           },
3816 |           "isRecurring": {
3817 |             "type": "boolean",
3818 |             "description": "true if the event is recurring otherwise false",
3819 |             "example": "true"
3820 |           },
3821 |           "rrule": {
3822 |             "type": "string",
3823 |             "description": "RRULE as per the iCalendar (RFC 5545) specification for recurring events. DTSTART is not required, instance ids are calculated on the basis of startTime of the event.",
3824 |             "examples": [
3825 |               "RRULE:FREQ=DAILY;INTERVAL=1;COUNT=5",
3826 |               "RRULE:FREQ=DAILY;INTERVAL=1;UNTIL=20210623T043000Z\nEXDATE:20211105T040000Z,20211105T040000Z"
3827 |             ]
3828 |           },
3829 |           "startTime": {
3830 |             "type": "object",
3831 |             "description": "Start Time",
3832 |             "example": "2023-09-25T16:00:00+05:30"
3833 |           },
3834 |           "endTime": {
3835 |             "type": "object",
3836 |             "description": "End Time",
3837 |             "example": "2023-09-25T16:00:00+05:30"
3838 |           },
3839 |           "dateAdded": {
3840 |             "type": "object",
3841 |             "description": "Date Added",
3842 |             "example": "2023-09-25T16:00:00+05:30"
3843 |           },
3844 |           "dateUpdated": {
3845 |             "type": "object",
3846 |             "description": "Date Updated",
3847 |             "example": "2023-09-25T16:00:00+05:30"
3848 |           },
3849 |           "assignedResources": {
3850 |             "description": "Ids of associated resources rooms and/or equipments",
3851 |             "type": "array",
3852 |             "items": {
3853 |               "type": "string"
3854 |             }
3855 |           },
3856 |           "createdBy": {
3857 |             "description": "Appointment booked by metadata",
3858 |             "allOf": [
3859 |               {
3860 |                 "$ref": "#/components/schemas/CreatedOrUpdatedBy"
3861 |               }
3862 |             ]
3863 |           },
3864 |           "masterEventId": {
3865 |             "type": "string",
3866 |             "description": "Master event id for a recurring instance",
3867 |             "example": "ocWd2wuBGAQzh2cH1fSZ"
3868 |           }
3869 |         },
3870 |         "required": [
3871 |           "id",
3872 |           "title",
3873 |           "calendarId",
3874 |           "locationId",
3875 |           "contactId",
3876 |           "groupId",
3877 |           "appointmentStatus",
3878 |           "assignedUserId",
3879 |           "users",
3880 |           "startTime",
3881 |           "endTime",
3882 |           "dateAdded",
3883 |           "dateUpdated"
3884 |         ]
3885 |       },
3886 |       "GetCalendarEventsSuccessfulResponseDTO": {
3887 |         "type": "object",
3888 |         "properties": {
3889 |           "events": {
3890 |             "type": "array",
3891 |             "items": {
3892 |               "$ref": "#/components/schemas/CalendarEventDTO"
3893 |             }
3894 |           }
3895 |         }
3896 |       },
3897 |       "SlotsSchema": {
3898 |         "type": "object",
3899 |         "properties": {
3900 |           "slots": {
3901 |             "type": "array",
3902 |             "items": {
3903 |               "type": "string"
3904 |             }
3905 |           }
3906 |         },
3907 |         "required": [
3908 |           "slots"
3909 |         ]
3910 |       },
3911 |       "GetSlotsSuccessfulResponseDto": {
3912 |         "type": "object",
3913 |         "properties": {
3914 |           "_dates_": {
3915 |             "$ref": "#/components/schemas/SlotsSchema"
3916 |           }
3917 |         },
3918 |         "required": [
3919 |           "_dates_"
3920 |         ]
3921 |       },
3922 |       "CalendarNotification": {
3923 |         "type": "object",
3924 |         "properties": {
3925 |           "type": {
3926 |             "type": "string",
3927 |             "description": "Calendar Notification",
3928 |             "example": "email",
3929 |             "enum": [
3930 |               "email"
3931 |             ],
3932 |             "default": "email"
3933 |           },
3934 |           "shouldSendToContact": {
3935 |             "type": "boolean"
3936 |           },
3937 |           "shouldSendToGuest": {
3938 |             "type": "boolean"
3939 |           },
3940 |           "shouldSendToUser": {
3941 |             "type": "boolean"
3942 |           },
3943 |           "shouldSendToSelectedUsers": {
3944 |             "type": "boolean"
3945 |           },
3946 |           "selectedUsers": {
3947 |             "type": "string",
3948 |             "description": "Comma separated emails",
3949 |             "example": "user1@testemail.com,user2@testemail.com"
3950 |           }
3951 |         },
3952 |         "required": [
3953 |           "shouldSendToContact",
3954 |           "shouldSendToGuest",
3955 |           "shouldSendToUser",
3956 |           "shouldSendToSelectedUsers",
3957 |           "selectedUsers"
3958 |         ]
3959 |       },
3960 |       "LocationConfiguration": {
3961 |         "type": "object",
3962 |         "properties": {
3963 |           "kind": {
3964 |             "type": "string",
3965 |             "description": "Type of meeting location. zoom_conference/google_conference/ms_teams_conference is not supported in event calendar type",
3966 |             "example": "custom",
3967 |             "enum": [
3968 |               "custom",
3969 |               "zoom_conference",
3970 |               "google_conference",
3971 |               "inbound_call",
3972 |               "outbound_call",
3973 |               "physical",
3974 |               "booker",
3975 |               "ms_teams_conference"
3976 |             ]
3977 |           },
3978 |           "location": {
3979 |             "type": "string",
3980 |             "description": "Address for meeting location. Not applicable on \"zoom_conference\", \"google_conference\" and \"ms_teams_conference\" kind",
3981 |             "examples": [
3982 |               "+14455550132",
3983 |               "http://meet.google.com/your-meeting-location"
3984 |             ]
3985 |           }
3986 |         },
3987 |         "required": [
3988 |           "kind"
3989 |         ]
3990 |       },
3991 |       "TeamMember": {
3992 |         "type": "object",
3993 |         "properties": {
3994 |           "userId": {
3995 |             "type": "string",
3996 |             "example": "ocQHyuzHvysMo5N5VsXc"
3997 |           },
3998 |           "priority": {
3999 |             "type": "number",
4000 |             "default": 0.5,
4001 |             "enum": [
4002 |               0,
4003 |               0.5,
4004 |               1
4005 |             ]
4006 |           },
4007 |           "meetingLocationType": {
4008 |             "type": "string",
4009 |             "description": "🚨 Deprecated! Use `locationConfigurations.kind` instead.",
4010 |             "deprecated": true,
4011 |             "example": "custom",
4012 |             "default": "custom",
4013 |             "readOnly": true,
4014 |             "enum": [
4015 |               "custom",
4016 |               "zoom",
4017 |               "gmeet",
4018 |               "phone",
4019 |               "address",
4020 |               "teams",
4021 |               "booker"
4022 |             ]
4023 |           },
4024 |           "meetingLocation": {
4025 |             "type": "string",
4026 |             "description": "🚨 Deprecated! Use `locationConfigurations.location` instead.",
4027 |             "deprecated": true,
4028 |             "readOnly": true
4029 |           },
4030 |           "isPrimary": {
4031 |             "type": "boolean",
4032 |             "description": "Marks a user as primary. This property is required in case of collective booking calendars. Only one user can be primary."
4033 |           },
4034 |           "locationConfigurations": {
4035 |             "description": "Meeting location configuration for event calendar.\n- *Multiple locations are allowed only when one team member is selected.*\n- *For **Class booking** and **Collective** calendars, only one location configuration is allowed for each team member.*",
4036 |             "type": "array",
4037 |             "items": {
4038 |               "$ref": "#/components/schemas/LocationConfiguration"
4039 |             }
4040 |           }
4041 |         },
4042 |         "required": [
4043 |           "userId"
4044 |         ]
4045 |       },
4046 |       "Hour": {
4047 |         "type": "object",
4048 |         "properties": {
4049 |           "openHour": {
4050 |             "type": "number",
4051 |             "minimum": 0,
4052 |             "maximum": 23
4053 |           },
4054 |           "openMinute": {
4055 |             "type": "number",
4056 |             "minimum": 0,
4057 |             "maximum": 60
4058 |           },
4059 |           "closeHour": {
4060 |             "type": "number",
4061 |             "minimum": 0,
4062 |             "maximum": 23
4063 |           },
4064 |           "closeMinute": {
4065 |             "type": "number",
4066 |             "minimum": 0,
4067 |             "maximum": 60
4068 |           }
4069 |         },
4070 |         "required": [
4071 |           "openHour",
4072 |           "openMinute",
4073 |           "closeHour",
4074 |           "closeMinute"
4075 |         ]
4076 |       },
4077 |       "OpenHour": {
4078 |         "type": "object",
4079 |         "properties": {
4080 |           "daysOfTheWeek": {
4081 |             "type": "array",
4082 |             "items": {
4083 |               "type": "number",
4084 |               "maximum": 6,
4085 |               "minimum": 0
4086 |             }
4087 |           },
4088 |           "hours": {
4089 |             "type": "array",
4090 |             "items": {
4091 |               "$ref": "#/components/schemas/Hour"
4092 |             }
4093 |           }
4094 |         },
4095 |         "required": [
4096 |           "daysOfTheWeek",
4097 |           "hours"
4098 |         ]
4099 |       },
4100 |       "Recurring": {
4101 |         "type": "object",
4102 |         "properties": {
4103 |           "freq": {
4104 |             "type": "string",
4105 |             "enum": [
4106 |               "DAILY",
4107 |               "WEEKLY",
4108 |               "MONTHLY"
4109 |             ]
4110 |           },
4111 |           "count": {
4112 |             "type": "number",
4113 |             "description": "Number of recurrences",
4114 |             "maximum": 24
4115 |           },
4116 |           "bookingOption": {
4117 |             "type": "string",
4118 |             "description": "This setting contols what to do incase a recurring slot is unavailable",
4119 |             "enum": [
4120 |               "skip",
4121 |               "continue",
4122 |               "book_next"
4123 |             ]
4124 |           },
4125 |           "bookingOverlapDefaultStatus": {
4126 |             "type": "string",
4127 |             "description": "This setting contols what to do incase a recurring slot is unavailable",
4128 |             "enum": [
4129 |               "confirmed",
4130 |               "new"
4131 |             ]
4132 |           }
4133 |         }
4134 |       },
4135 |       "Availability": {
4136 |         "type": "object",
4137 |         "properties": {
4138 |           "date": {
4139 |             "type": "string",
4140 |             "description": "Formulate the date string in the format of `<YYYY-MM-DD in local timezone>T00:00:00.000Z`.",
4141 |             "example": "2023-09-24T00:00:00.000Z"
4142 |           },
4143 |           "hours": {
4144 |             "type": "array",
4145 |             "items": {
4146 |               "$ref": "#/components/schemas/Hour"
4147 |             }
4148 |           },
4149 |           "deleted": {
4150 |             "type": "boolean",
4151 |             "default": false
4152 |           }
4153 |         },
4154 |         "required": [
4155 |           "date",
4156 |           "hours"
4157 |         ]
4158 |       },
4159 |       "LookBusyConfiguration": {
4160 |         "type": "object",
4161 |         "properties": {
4162 |           "enabled": {
4163 |             "type": "boolean",
4164 |             "description": "Apply Look Busy",
4165 |             "example": true,
4166 |             "default": false
4167 |           },
4168 |           "LookBusyPercentage": {
4169 |             "type": "number",
4170 |             "description": "Percentage of slots that will be hidden"
4171 |           }
4172 |         },
4173 |         "required": [
4174 |           "enabled",
4175 |           "LookBusyPercentage"
4176 |         ]
4177 |       },
4178 |       "CalendarCreateDTO": {
4179 |         "type": "object",
4180 |         "properties": {
4181 |           "isActive": {
4182 |             "type": "boolean",
4183 |             "description": "Should the created calendar be active or draft",
4184 |             "default": true
4185 |           },
4186 |           "notifications": {
4187 |             "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
4188 |             "deprecated": true,
4189 |             "type": "array",
4190 |             "items": {
4191 |               "$ref": "#/components/schemas/CalendarNotification"
4192 |             }
4193 |           },
4194 |           "locationId": {
4195 |             "type": "string",
4196 |             "example": "ocQHyuzHvysMo5N5VsXc"
4197 |           },
4198 |           "groupId": {
4199 |             "type": "string",
4200 |             "description": "Group Id",
4201 |             "example": "BqTwX8QFwXzpegMve9EQ"
4202 |           },
4203 |           "teamMembers": {
4204 |             "description": "Team members are required for calendars of type: Round Robin, Collective, Class, Service.",
4205 |             "type": "array",
4206 |             "items": {
4207 |               "$ref": "#/components/schemas/TeamMember"
4208 |             }
4209 |           },
4210 |           "eventType": {
4211 |             "type": "string",
4212 |             "enum": [
4213 |               "RoundRobin_OptimizeForAvailability",
4214 |               "RoundRobin_OptimizeForEqualDistribution"
4215 |             ],
4216 |             "default": "RoundRobin_OptimizeForAvailability"
4217 |           },
4218 |           "name": {
4219 |             "type": "string",
4220 |             "example": "test calendar"
4221 |           },
4222 |           "description": {
4223 |             "type": "string",
4224 |             "example": "this is used for testing"
4225 |           },
4226 |           "slug": {
4227 |             "type": "string",
4228 |             "example": "test1"
4229 |           },
4230 |           "widgetSlug": {
4231 |             "type": "string",
4232 |             "example": "test1"
4233 |           },
4234 |           "calendarType": {
4235 |             "type": "string",
4236 |             "enum": [
4237 |               "round_robin",
4238 |               "event",
4239 |               "class_booking",
4240 |               "collective",
4241 |               "service_booking",
4242 |               "personal"
4243 |             ]
4244 |           },
4245 |           "widgetType": {
4246 |             "type": "string",
4247 |             "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
4248 |             "example": "classic",
4249 |             "enum": [
4250 |               "default",
4251 |               "classic"
4252 |             ],
4253 |             "default": "classic"
4254 |           },
4255 |           "eventTitle": {
4256 |             "type": "string",
4257 |             "default": "{{contact.name}}"
4258 |           },
4259 |           "eventColor": {
4260 |             "type": "string",
4261 |             "default": "#039be5"
4262 |           },
4263 |           "meetingLocation": {
4264 |             "type": "string",
4265 |             "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
4266 |             "deprecated": true,
4267 |             "readOnly": true
4268 |           },
4269 |           "locationConfigurations": {
4270 |             "description": "Meeting location configuration for event calendar",
4271 |             "type": "array",
4272 |             "items": {
4273 |               "$ref": "#/components/schemas/LocationConfiguration"
4274 |             }
4275 |           },
4276 |           "slotDuration": {
4277 |             "type": "number",
4278 |             "description": "This controls the duration of the meeting",
4279 |             "default": 30
4280 |           },
4281 |           "slotDurationUnit": {
4282 |             "type": "string",
4283 |             "description": "Unit for slot duration.",
4284 |             "enum": [
4285 |               "mins",
4286 |               "hours"
4287 |             ]
4288 |           },
4289 |           "slotInterval": {
4290 |             "type": "number",
4291 |             "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
4292 |             "default": 30
4293 |           },
4294 |           "slotIntervalUnit": {
4295 |             "type": "string",
4296 |             "description": "Unit for slot interval.",
4297 |             "enum": [
4298 |               "mins",
4299 |               "hours"
4300 |             ]
4301 |           },
4302 |           "slotBuffer": {
4303 |             "type": "number",
4304 |             "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up"
4305 |           },
4306 |           "slotBufferUnit": {
4307 |             "type": "string",
4308 |             "description": "Unit for slot buffer.",
4309 |             "enum": [
4310 |               "mins",
4311 |               "hours"
4312 |             ]
4313 |           },
4314 |           "preBuffer": {
4315 |             "type": "number",
4316 |             "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready"
4317 |           },
4318 |           "preBufferUnit": {
4319 |             "type": "string",
4320 |             "description": "Unit for pre-buffer.",
4321 |             "enum": [
4322 |               "mins",
4323 |               "hours"
4324 |             ]
4325 |           },
4326 |           "appoinmentPerSlot": {
4327 |             "type": "number",
4328 |             "default": 1,
4329 |             "description": "Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar."
4330 |           },
4331 |           "appoinmentPerDay": {
4332 |             "type": "number",
4333 |             "description": "Number of appointments that can be booked for a given day"
4334 |           },
4335 |           "allowBookingAfter": {
4336 |             "type": "number",
4337 |             "description": "Minimum scheduling notice for events"
4338 |           },
4339 |           "allowBookingAfterUnit": {
4340 |             "type": "string",
4341 |             "description": "Unit for minimum scheduling notice",
4342 |             "enum": [
4343 |               "hours",
4344 |               "days",
4345 |               "weeks",
4346 |               "months"
4347 |             ],
4348 |             "example": "days"
4349 |           },
4350 |           "allowBookingFor": {
4351 |             "type": "number",
4352 |             "description": "Minimum number of days/weeks/months for which to allow booking events"
4353 |           },
4354 |           "allowBookingForUnit": {
4355 |             "type": "string",
4356 |             "description": "Unit for controlling the duration for which booking would be allowed for",
4357 |             "enum": [
4358 |               "days",
4359 |               "weeks",
4360 |               "months"
4361 |             ],
4362 |             "example": "days"
4363 |           },
4364 |           "openHours": {
4365 |             "description": "This is only to set the standard availability. For custom availability, use the availabilities property",
4366 |             "type": "array",
4367 |             "items": {
4368 |               "$ref": "#/components/schemas/OpenHour"
4369 |             }
4370 |           },
4371 |           "enableRecurring": {
4372 |             "type": "boolean",
4373 |             "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
4374 |             "default": false
4375 |           },
4376 |           "recurring": {
4377 |             "$ref": "#/components/schemas/Recurring"
4378 |           },
4379 |           "formId": {
4380 |             "type": "string"
4381 |           },
4382 |           "stickyContact": {
4383 |             "type": "boolean"
4384 |           },
4385 |           "isLivePaymentMode": {
4386 |             "type": "boolean"
4387 |           },
4388 |           "autoConfirm": {
4389 |             "type": "boolean",
4390 |             "default": true
4391 |           },
4392 |           "shouldSendAlertEmailsToAssignedMember": {
4393 |             "type": "boolean"
4394 |           },
4395 |           "alertEmail": {
4396 |             "type": "string"
4397 |           },
4398 |           "googleInvitationEmails": {
4399 |             "type": "boolean",
4400 |             "default": false
4401 |           },
4402 |           "allowReschedule": {
4403 |             "type": "boolean",
4404 |             "default": true
4405 |           },
4406 |           "allowCancellation": {
4407 |             "type": "boolean",
4408 |             "default": true
4409 |           },
4410 |           "shouldAssignContactToTeamMember": {
4411 |             "type": "boolean"
4412 |           },
4413 |           "shouldSkipAssigningContactForExisting": {
4414 |             "type": "boolean"
4415 |           },
4416 |           "notes": {
4417 |             "type": "string"
4418 |           },
4419 |           "pixelId": {
4420 |             "type": "string"
4421 |           },
4422 |           "formSubmitType": {
4423 |             "type": "string",
4424 |             "default": "ThankYouMessage",
4425 |             "enum": [
4426 |               "RedirectURL",
4427 |               "ThankYouMessage"
4428 |             ]
4429 |           },
4430 |           "formSubmitRedirectURL": {
4431 |             "type": "string"
4432 |           },
4433 |           "formSubmitThanksMessage": {
4434 |             "type": "string"
4435 |           },
4436 |           "availabilityType": {
4437 |             "type": "number",
4438 |             "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both custom availabilities and open hours will be considered.",
4439 |             "enum": [
4440 |               0,
4441 |               1
4442 |             ]
4443 |           },
4444 |           "availabilities": {
4445 |             "description": "This is only to set the custom availability. For standard availability, use the openHours property",
4446 |             "type": "array",
4447 |             "items": {
4448 |               "$ref": "#/components/schemas/Availability"
4449 |             }
4450 |           },
4451 |           "guestType": {
4452 |             "type": "string",
4453 |             "enum": [
4454 |               "count_only",
4455 |               "collect_detail"
4456 |             ]
4457 |           },
4458 |           "consentLabel": {
4459 |             "type": "string"
4460 |           },
4461 |           "calendarCoverImage": {
4462 |             "type": "string",
4463 |             "example": "https://path-to-image.com"
4464 |           },
4465 |           "lookBusyConfig": {
4466 |             "description": "Look Busy Configuration",
4467 |             "allOf": [
4468 |               {
4469 |                 "$ref": "#/components/schemas/LookBusyConfiguration"
4470 |               }
4471 |             ]
4472 |           }
4473 |         },
4474 |         "required": [
4475 |           "locationId",
4476 |           "name"
4477 |         ]
4478 |       },
4479 |       "LocationConfigurationResponse": {
4480 |         "type": "object",
4481 |         "properties": {
4482 |           "kind": {
4483 |             "type": "string",
4484 |             "description": "Type of meeting location. zoom_conference/google_conference/ms_teams_conference is not supported in event calendar type",
4485 |             "example": "custom",
4486 |             "enum": [
4487 |               "custom",
4488 |               "zoom_conference",
4489 |               "google_conference",
4490 |               "inbound_call",
4491 |               "outbound_call",
4492 |               "physical",
4493 |               "booker",
4494 |               "ms_teams_conference"
4495 |             ]
4496 |           },
4497 |           "location": {
4498 |             "type": "string",
4499 |             "description": "Address for meeting location. Not applicable on \"zoom_conference\", \"google_conference\" and \"ms_teams_conference\" kind",
4500 |             "examples": [
4501 |               "+14455550132",
4502 |               "http://meet.google.com/your-meeting-location"
4503 |             ]
4504 |           },
4505 |           "meetingId": {
4506 |             "type": "string",
4507 |             "description": "Unique ID used to select a specific meeting location",
4508 |             "example": "my_conference_id"
4509 |           }
4510 |         },
4511 |         "required": [
4512 |           "kind"
4513 |         ]
4514 |       },
4515 |       "TeamMemberResponse": {
4516 |         "type": "object",
4517 |         "properties": {
4518 |           "userId": {
4519 |             "type": "string",
4520 |             "example": "ocQHyuzHvysMo5N5VsXc"
4521 |           },
4522 |           "priority": {
4523 |             "type": "number",
4524 |             "default": 0.5,
4525 |             "enum": [
4526 |               0,
4527 |               0.5,
4528 |               1
4529 |             ]
4530 |           },
4531 |           "meetingLocationType": {
4532 |             "type": "string",
4533 |             "description": "🚨 Deprecated! Use `locationConfigurations.kind` instead.",
4534 |             "deprecated": true,
4535 |             "example": "custom",
4536 |             "default": "custom",
4537 |             "readOnly": true,
4538 |             "enum": [
4539 |               "custom",
4540 |               "zoom",
4541 |               "gmeet",
4542 |               "phone",
4543 |               "address",
4544 |               "teams",
4545 |               "booker"
4546 |             ]
4547 |           },
4548 |           "meetingLocation": {
4549 |             "type": "string",
4550 |             "description": "🚨 Deprecated! Use `locationConfigurations.location` instead.",
4551 |             "deprecated": true,
4552 |             "readOnly": true
4553 |           },
4554 |           "isPrimary": {
4555 |             "type": "boolean",
4556 |             "description": "Marks a user as primary. This property is required in case of collective booking calendars. Only one user can be primary."
4557 |           },
4558 |           "locationConfigurations": {
4559 |             "description": "Meeting location configurations",
4560 |             "type": "array",
4561 |             "items": {
4562 |               "$ref": "#/components/schemas/LocationConfigurationResponse"
4563 |             }
4564 |           }
4565 |         },
4566 |         "required": [
4567 |           "userId"
4568 |         ]
4569 |       },
4570 |       "CalendarDTO": {
4571 |         "type": "object",
4572 |         "properties": {
4573 |           "isActive": {
4574 |             "type": "boolean",
4575 |             "description": "Should the created calendar be active or draft",
4576 |             "default": true
4577 |           },
4578 |           "notifications": {
4579 |             "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
4580 |             "deprecated": true,
4581 |             "type": "array",
4582 |             "items": {
4583 |               "$ref": "#/components/schemas/CalendarNotification"
4584 |             }
4585 |           },
4586 |           "locationId": {
4587 |             "type": "string",
4588 |             "example": "ocQHyuzHvysMo5N5VsXc"
4589 |           },
4590 |           "groupId": {
4591 |             "type": "string",
4592 |             "description": "Group Id",
4593 |             "example": "BqTwX8QFwXzpegMve9EQ"
4594 |           },
4595 |           "teamMembers": {
4596 |             "description": "Team members are for calendars of type: Round Robin, Collective, Class, Service.",
4597 |             "type": "array",
4598 |             "items": {
4599 |               "$ref": "#/components/schemas/TeamMemberResponse"
4600 |             }
4601 |           },
4602 |           "eventType": {
4603 |             "type": "string",
4604 |             "enum": [
4605 |               "RoundRobin_OptimizeForAvailability",
4606 |               "RoundRobin_OptimizeForEqualDistribution"
4607 |             ],
4608 |             "default": "RoundRobin_OptimizeForAvailability"
4609 |           },
4610 |           "name": {
4611 |             "type": "string",
4612 |             "example": "test calendar"
4613 |           },
4614 |           "description": {
4615 |             "type": "string",
4616 |             "example": "this is used for testing"
4617 |           },
4618 |           "slug": {
4619 |             "type": "string",
4620 |             "example": "test1"
4621 |           },
4622 |           "widgetSlug": {
4623 |             "type": "string",
4624 |             "example": "test1"
4625 |           },
4626 |           "calendarType": {
4627 |             "type": "string",
4628 |             "enum": [
4629 |               "round_robin",
4630 |               "event",
4631 |               "class_booking",
4632 |               "collective",
4633 |               "service_booking",
4634 |               "personal"
4635 |             ]
4636 |           },
4637 |           "widgetType": {
4638 |             "type": "string",
4639 |             "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
4640 |             "example": "classic",
4641 |             "enum": [
4642 |               "default",
4643 |               "classic"
4644 |             ],
4645 |             "default": "classic"
4646 |           },
4647 |           "eventTitle": {
4648 |             "type": "string",
4649 |             "default": "{{contact.name}}"
4650 |           },
4651 |           "eventColor": {
4652 |             "type": "string",
4653 |             "default": "#039be5"
4654 |           },
4655 |           "meetingLocation": {
4656 |             "type": "string",
4657 |             "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
4658 |             "deprecated": true,
4659 |             "readOnly": true
4660 |           },
4661 |           "locationConfigurations": {
4662 |             "description": "Meeting location configuration for event calendar",
4663 |             "type": "array",
4664 |             "items": {
4665 |               "$ref": "#/components/schemas/LocationConfigurationResponse"
4666 |             }
4667 |           },
4668 |           "slotDuration": {
4669 |             "type": "number",
4670 |             "description": "This controls the duration of the meeting",
4671 |             "default": 30
4672 |           },
4673 |           "slotDurationUnit": {
4674 |             "type": "string",
4675 |             "description": "Unit for slot duration.",
4676 |             "enum": [
4677 |               "mins",
4678 |               "hours"
4679 |             ]
4680 |           },
4681 |           "slotInterval": {
4682 |             "type": "number",
4683 |             "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
4684 |             "default": 30
4685 |           },
4686 |           "slotIntervalUnit": {
4687 |             "type": "string",
4688 |             "description": "Unit for slot interval.",
4689 |             "enum": [
4690 |               "mins",
4691 |               "hours"
4692 |             ]
4693 |           },
4694 |           "slotBuffer": {
4695 |             "type": "number",
4696 |             "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up"
4697 |           },
4698 |           "slotBufferUnit": {
4699 |             "type": "string",
4700 |             "description": "Unit for slot buffer.",
4701 |             "enum": [
4702 |               "mins",
4703 |               "hours"
4704 |             ]
4705 |           },
4706 |           "preBuffer": {
4707 |             "type": "number",
4708 |             "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready"
4709 |           },
4710 |           "preBufferUnit": {
4711 |             "type": "string",
4712 |             "description": "Unit for pre-buffer.",
4713 |             "enum": [
4714 |               "mins",
4715 |               "hours"
4716 |             ]
4717 |           },
4718 |           "appoinmentPerSlot": {
4719 |             "type": "number",
4720 |             "default": 1,
4721 |             "description": "Maximum bookings per slot (per user). Maximum seats per slot in case of Class Booking Calendar."
4722 |           },
4723 |           "appoinmentPerDay": {
4724 |             "type": "number",
4725 |             "description": "Number of appointments that can be booked for a given day"
4726 |           },
4727 |           "allowBookingAfter": {
4728 |             "type": "number",
4729 |             "description": "Minimum scheduling notice for events"
4730 |           },
4731 |           "allowBookingAfterUnit": {
4732 |             "type": "string",
4733 |             "description": "Unit for minimum scheduling notice",
4734 |             "enum": [
4735 |               "hours",
4736 |               "days",
4737 |               "weeks",
4738 |               "months"
4739 |             ],
4740 |             "example": "days"
4741 |           },
4742 |           "allowBookingFor": {
4743 |             "type": "number",
4744 |             "description": "Minimum number of days/weeks/months for which to allow booking events"
4745 |           },
4746 |           "allowBookingForUnit": {
4747 |             "type": "string",
4748 |             "description": "Unit for controlling the duration for which booking would be allowed for",
4749 |             "enum": [
4750 |               "days",
4751 |               "weeks",
4752 |               "months"
4753 |             ],
4754 |             "example": "days"
4755 |           },
4756 |           "openHours": {
4757 |             "description": "This is only to set the standard availability. For custom availability, use the availabilities property",
4758 |             "type": "array",
4759 |             "items": {
4760 |               "$ref": "#/components/schemas/OpenHour"
4761 |             }
4762 |           },
4763 |           "enableRecurring": {
4764 |             "type": "boolean",
4765 |             "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
4766 |             "default": false
4767 |           },
4768 |           "recurring": {
4769 |             "$ref": "#/components/schemas/Recurring"
4770 |           },
4771 |           "formId": {
4772 |             "type": "string"
4773 |           },
4774 |           "stickyContact": {
4775 |             "type": "boolean"
4776 |           },
4777 |           "isLivePaymentMode": {
4778 |             "type": "boolean"
4779 |           },
4780 |           "autoConfirm": {
4781 |             "type": "boolean",
4782 |             "default": true
4783 |           },
4784 |           "shouldSendAlertEmailsToAssignedMember": {
4785 |             "type": "boolean"
4786 |           },
4787 |           "alertEmail": {
4788 |             "type": "string"
4789 |           },
4790 |           "googleInvitationEmails": {
4791 |             "type": "boolean",
4792 |             "default": false
4793 |           },
4794 |           "allowReschedule": {
4795 |             "type": "boolean",
4796 |             "default": true
4797 |           },
4798 |           "allowCancellation": {
4799 |             "type": "boolean",
4800 |             "default": true
4801 |           },
4802 |           "shouldAssignContactToTeamMember": {
4803 |             "type": "boolean"
4804 |           },
4805 |           "shouldSkipAssigningContactForExisting": {
4806 |             "type": "boolean"
4807 |           },
4808 |           "notes": {
4809 |             "type": "string"
4810 |           },
4811 |           "pixelId": {
4812 |             "type": "string"
4813 |           },
4814 |           "formSubmitType": {
4815 |             "type": "string",
4816 |             "default": "ThankYouMessage",
4817 |             "enum": [
4818 |               "RedirectURL",
4819 |               "ThankYouMessage"
4820 |             ]
4821 |           },
4822 |           "formSubmitRedirectURL": {
4823 |             "type": "string"
4824 |           },
4825 |           "formSubmitThanksMessage": {
4826 |             "type": "string"
4827 |           },
4828 |           "availabilityType": {
4829 |             "type": "number",
4830 |             "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both custom availabilities and open hours will be considered.",
4831 |             "enum": [
4832 |               0,
4833 |               1
4834 |             ]
4835 |           },
4836 |           "availabilities": {
4837 |             "description": "This is only to set the custom availability. For standard availability, use the openHours property",
4838 |             "type": "array",
4839 |             "items": {
4840 |               "$ref": "#/components/schemas/Availability"
4841 |             }
4842 |           },
4843 |           "guestType": {
4844 |             "type": "string",
4845 |             "enum": [
4846 |               "count_only",
4847 |               "collect_detail"
4848 |             ]
4849 |           },
4850 |           "consentLabel": {
4851 |             "type": "string"
4852 |           },
4853 |           "calendarCoverImage": {
4854 |             "type": "string",
4855 |             "example": "https://path-to-image.com"
4856 |           },
4857 |           "lookBusyConfig": {
4858 |             "description": "Look Busy Configuration",
4859 |             "allOf": [
4860 |               {
4861 |                 "$ref": "#/components/schemas/LookBusyConfiguration"
4862 |               }
4863 |             ]
4864 |           },
4865 |           "id": {
4866 |             "type": "string",
4867 |             "example": "0TkCdp9PfvLeWKYRRvIz"
4868 |           }
4869 |         },
4870 |         "required": [
4871 |           "locationId",
4872 |           "name",
4873 |           "id"
4874 |         ]
4875 |       },
4876 |       "CalendarsGetSuccessfulResponseDTO": {
4877 |         "type": "object",
4878 |         "properties": {
4879 |           "calendars": {
4880 |             "type": "array",
4881 |             "items": {
4882 |               "$ref": "#/components/schemas/CalendarDTO"
4883 |             }
4884 |           }
4885 |         }
4886 |       },
4887 |       "CalendarByIdSuccessfulResponseDTO": {
4888 |         "type": "object",
4889 |         "properties": {
4890 |           "calendar": {
4891 |             "$ref": "#/components/schemas/CalendarDTO"
4892 |           }
4893 |         },
4894 |         "required": [
4895 |           "calendar"
4896 |         ]
4897 |       },
4898 |       "UpdateAvailability": {
4899 |         "type": "object",
4900 |         "properties": {
4901 |           "date": {
4902 |             "type": "string",
4903 |             "description": "Formulate the date string in the format of `<YYYY-MM-DD in local timezone>T00:00:00.000Z`.",
4904 |             "example": "2023-09-24T00:00:00.000Z"
4905 |           },
4906 |           "hours": {
4907 |             "type": "array",
4908 |             "items": {
4909 |               "$ref": "#/components/schemas/Hour"
4910 |             }
4911 |           },
4912 |           "deleted": {
4913 |             "type": "boolean",
4914 |             "default": false
4915 |           },
4916 |           "id": {
4917 |             "type": "string",
4918 |             "description": "The ID of the custom availability object. It is required while updating or deleting the existing custom date availability"
4919 |           }
4920 |         },
4921 |         "required": [
4922 |           "date",
4923 |           "hours"
4924 |         ]
4925 |       },
4926 |       "CalendarUpdateDTO": {
4927 |         "type": "object",
4928 |         "properties": {
4929 |           "notifications": {
4930 |             "description": "🚨 Deprecated! Please use 'Calendar Notifications APIs' instead.",
4931 |             "deprecated": true,
4932 |             "type": "array",
4933 |             "items": {
4934 |               "$ref": "#/components/schemas/CalendarNotification"
4935 |             }
4936 |           },
4937 |           "groupId": {
4938 |             "type": "string",
4939 |             "description": "Group Id",
4940 |             "example": "BqTwX8QFwXzpegMve9EQ"
4941 |           },
4942 |           "teamMembers": {
4943 |             "description": "Team members",
4944 |             "type": "array",
4945 |             "items": {
4946 |               "$ref": "#/components/schemas/TeamMember"
4947 |             }
4948 |           },
4949 |           "eventType": {
4950 |             "type": "string",
4951 |             "enum": [
4952 |               "RoundRobin_OptimizeForAvailability",
4953 |               "RoundRobin_OptimizeForEqualDistribution"
4954 |             ]
4955 |           },
4956 |           "name": {
4957 |             "type": "string",
4958 |             "example": "test calendar"
4959 |           },
4960 |           "description": {
4961 |             "type": "string",
4962 |             "example": "this is used for testing"
4963 |           },
4964 |           "slug": {
4965 |             "type": "string",
4966 |             "example": "test1"
4967 |           },
4968 |           "widgetSlug": {
4969 |             "type": "string",
4970 |             "example": "test1"
4971 |           },
4972 |           "widgetType": {
4973 |             "type": "string",
4974 |             "description": "Calendar widget type. Choose \"default\" for \"neo\" and \"classic\" for \"classic\" layout.",
4975 |             "example": "classic",
4976 |             "enum": [
4977 |               "default",
4978 |               "classic"
4979 |             ],
4980 |             "default": "classic"
4981 |           },
4982 |           "eventTitle": {
4983 |             "type": "string"
4984 |           },
4985 |           "eventColor": {
4986 |             "type": "string",
4987 |             "default": "#039be5"
4988 |           },
4989 |           "locationConfigurations": {
4990 |             "description": "Meeting location configuration for event calendar",
4991 |             "type": "array",
4992 |             "items": {
4993 |               "$ref": "#/components/schemas/LocationConfiguration"
4994 |             }
4995 |           },
4996 |           "meetingLocation": {
4997 |             "type": "string",
4998 |             "description": "🚨 Deprecated! Use `locationConfigurations.location` or `teamMembers[].locationConfigurations.location` instead.",
4999 |             "deprecated": true,
5000 |             "readOnly": true
5001 |           },
5002 |           "slotDuration": {
5003 |             "type": "number",
5004 |             "description": "This controls the duration of the meeting",
5005 |             "default": 30
5006 |           },
5007 |           "slotDurationUnit": {
5008 |             "type": "string",
5009 |             "description": "Unit for slot duration.",
5010 |             "enum": [
5011 |               "mins",
5012 |               "hours"
5013 |             ]
5014 |           },
5015 |           "preBufferUnit": {
5016 |             "type": "string",
5017 |             "description": "Unit for pre-buffer.",
5018 |             "enum": [
5019 |               "mins",
5020 |               "hours"
5021 |             ]
5022 |           },
5023 |           "slotInterval": {
5024 |             "type": "number",
5025 |             "description": "Slot interval reflects the amount of time the between booking slots that will be shown in the calendar.",
5026 |             "default": 30
5027 |           },
5028 |           "slotIntervalUnit": {
5029 |             "type": "string",
5030 |             "description": "Unit for slot interval.",
5031 |             "enum": [
5032 |               "mins",
5033 |               "hours"
5034 |             ]
5035 |           },
5036 |           "slotBuffer": {
5037 |             "type": "number",
5038 |             "description": "Slot-Buffer is additional time that can be added after an appointment, allowing for extra time to wrap up"
5039 |           },
5040 |           "preBuffer": {
5041 |             "type": "number",
5042 |             "description": "Pre-Buffer is additional time that can be added before an appointment, allowing for extra time to get ready"
5043 |           },
5044 |           "appoinmentPerSlot": {
5045 |             "type": "number"
5046 |           },
5047 |           "appoinmentPerDay": {
5048 |             "type": "number",
5049 |             "description": "Number of appointments that can be booked for a given day"
5050 |           },
5051 |           "allowBookingAfter": {
5052 |             "type": "number",
5053 |             "description": "Minimum scheduling notice for events"
5054 |           },
5055 |           "allowBookingAfterUnit": {
5056 |             "type": "string",
5057 |             "description": "Unit for minimum scheduling notice",
5058 |             "enum": [
5059 |               "hours",
5060 |               "days",
5061 |               "weeks",
5062 |               "months"
5063 |             ],
5064 |             "example": "days"
5065 |           },
5066 |           "allowBookingFor": {
5067 |             "type": "number",
5068 |             "description": "Minimum number of days/weeks/months for which to allow booking events"
5069 |           },
5070 |           "allowBookingForUnit": {
5071 |             "type": "string",
5072 |             "description": "Unit for controlling the duration for which booking would be allowed for",
5073 |             "enum": [
5074 |               "days",
5075 |               "weeks",
5076 |               "months"
5077 |             ],
5078 |             "example": "days"
5079 |           },
5080 |           "openHours": {
5081 |             "type": "array",
5082 |             "items": {
5083 |               "$ref": "#/components/schemas/OpenHour"
5084 |             }
5085 |           },
5086 |           "enableRecurring": {
5087 |             "type": "boolean",
5088 |             "description": "Enable recurring appointments for the calendars. Please note that only one member should be added in the calendar to enable this",
5089 |             "default": false
5090 |           },
5091 |           "recurring": {
5092 |             "$ref": "#/components/schemas/Recurring"
5093 |           },
5094 |           "formId": {
5095 |             "type": "string"
5096 |           },
5097 |           "stickyContact": {
5098 |             "type": "boolean"
5099 |           },
5100 |           "isLivePaymentMode": {
5101 |             "type": "boolean"
5102 |           },
5103 |           "autoConfirm": {
5104 |             "type": "boolean"
5105 |           },
5106 |           "shouldSendAlertEmailsToAssignedMember": {
5107 |             "type": "boolean"
5108 |           },
5109 |           "alertEmail": {
5110 |             "type": "string"
5111 |           },
5112 |           "googleInvitationEmails": {
5113 |             "type": "boolean"
5114 |           },
5115 |           "allowReschedule": {
5116 |             "type": "boolean"
5117 |           },
5118 |           "allowCancellation": {
5119 |             "type": "boolean"
5120 |           },
5121 |           "shouldAssignContactToTeamMember": {
5122 |             "type": "boolean"
5123 |           },
5124 |           "shouldSkipAssigningContactForExisting": {
5125 |             "type": "boolean"
5126 |           },
5127 |           "notes": {
5128 |             "type": "string"
5129 |           },
5130 |           "pixelId": {
5131 |             "type": "string"
5132 |           },
5133 |           "formSubmitType": {
5134 |             "type": "string",
5135 |             "default": "ThankYouMessage",
5136 |             "enum": [
5137 |               "RedirectURL",
5138 |               "ThankYouMessage"
5139 |             ]
5140 |           },
5141 |           "formSubmitRedirectURL": {
5142 |             "type": "string"
5143 |           },
5144 |           "formSubmitThanksMessage": {
5145 |             "type": "string"
5146 |           },
5147 |           "availabilityType": {
5148 |             "type": "number",
5149 |             "description": "Determines which availability type to consider:\n- **1**: Only custom availabilities will be used.\n- **0**: Only open hours will be used.\n- **null**: Both the custom availabilities and open hours will be considered.",
5150 |             "enum": [
5151 |               0,
5152 |               1
5153 |             ]
5154 |           },
5155 |           "availabilities": {
5156 |             "description": "This is only to set the custom availability. For standard availability, use the openHours property",
5157 |             "type": "array",
5158 |             "items": {
5159 |               "$ref": "#/components/schemas/UpdateAvailability"
5160 |             }
5161 |           },
5162 |           "guestType": {
5163 |             "type": "string",
5164 |             "enum": [
5165 |               "count_only",
5166 |               "collect_detail"
5167 |             ]
5168 |           },
5169 |           "consentLabel": {
5170 |             "type": "string"
5171 |           },
5172 |           "calendarCoverImage": {
5173 |             "type": "string"
5174 |           },
5175 |           "lookBusyConfig": {
5176 |             "description": "Look Busy Configuration",
5177 |             "allOf": [
5178 |               {
5179 |                 "$ref": "#/components/schemas/LookBusyConfiguration"
5180 |               }
5181 |             ]
5182 |           },
5183 |           "isActive": {
5184 |             "type": "boolean"
5185 |           }
5186 |         }
5187 |       },
5188 |       "CalendarDeleteSuccessfulResponseDTO": {
5189 |         "type": "object",
5190 |         "properties": {
5191 |           "success": {
5192 |             "type": "boolean",
5193 |             "description": "Success",
5194 |             "example": "true"
5195 |           }
5196 |         },
5197 |         "required": [
5198 |           "success"
5199 |         ]
5200 |       },
5201 |       "GetCalendarEventSuccessfulResponseDTO": {
5202 |         "type": "object",
5203 |         "properties": {
5204 |           "event": {
5205 |             "$ref": "#/components/schemas/CalendarEventDTO"
5206 |           }
5207 |         }
5208 |       },
5209 |       "BlockSlotCreateSchema": {
5210 |         "type": "object",
5211 |         "properties": {
5212 |           "calendarId": {
5213 |             "type": "string",
5214 |             "description": "Calendar Id (Block Slot can only be created on simple/event calendars)",
5215 |             "example": "CVokAlI8fgw4WYWoCtQz"
5216 |           },
5217 |           "locationId": {
5218 |             "type": "string",
5219 |             "description": "Location Id",
5220 |             "example": "C2QujeCh8ZnC7al2InWR"
5221 |           },
5222 |           "startTime": {
5223 |             "type": "string",
5224 |             "description": "Start Time",
5225 |             "example": "2021-06-23T03:30:00+05:30"
5226 |           },
5227 |           "endTime": {
5228 |             "type": "string",
5229 |             "description": "End Time",
5230 |             "example": "2021-06-23T04:30:00+05:30"
5231 |           },
5232 |           "title": {
5233 |             "type": "string",
5234 |             "description": "Title",
5235 |             "example": "Test Event"
5236 |           },
5237 |           "assignedUserId": {
5238 |             "type": "string",
5239 |             "description": "Assigned User Id",
5240 |             "example": "CVokAlI8fgw4WYWoCtQz"
5241 |           }
5242 |         },
5243 |         "required": [
5244 |           "locationId",
5245 |           "startTime",
5246 |           "endTime"
5247 |         ]
5248 |       },
5249 |       "CreateBookedSlotSuccessfulResponseDto": {
5250 |         "type": "object",
5251 |         "properties": {
5252 |           "id": {
5253 |             "type": "string",
5254 |             "description": "Id",
5255 |             "example": "0TkCdp9PfvLeWKYRRvIz"
5256 |           },
5257 |           "locationId": {
5258 |             "type": "string",
5259 |             "description": "Location Id",
5260 |             "example": "C2QujeCh8ZnC7al2InWR"
5261 |           },
5262 |           "title": {
5263 |             "type": "string",
5264 |             "description": "Title",
5265 |             "example": "My event"
5266 |           },
5267 |           "startTime": {
5268 |             "type": "string",
5269 |             "description": "Start Time",
5270 |             "example": "2021-06-23T03:30:00+05:30"
5271 |           },
5272 |           "endTime": {
5273 |             "type": "string",
5274 |             "description": "End Time",
5275 |             "example": "2021-06-23T04:30:00+05:30"
5276 |           },
5277 |           "calendarId": {
5278 |             "type": "string",
5279 |             "description": "Calendar id",
5280 |             "example": "CVokAlI8fgw4WYWoCtQz"
5281 |           },
5282 |           "assignedUserId": {
5283 |             "type": "string",
5284 |             "description": "Assigned User Id",
5285 |             "example": "0007BWpSzSwfiuSl0tR2"
5286 |           }
5287 |         },
5288 |         "required": [
5289 |           "id",
5290 |           "locationId",
5291 |           "title",
5292 |           "startTime",
5293 |           "endTime"
5294 |         ]
5295 |       },
5296 |       "BlockSlotEditSchema": {
5297 |         "type": "object",
5298 |         "properties": {
5299 |           "calendarId": {
5300 |             "type": "string",
5301 |             "description": "Calendar Id",
5302 |             "example": "CVokAlI8fgw4WYWoCtQz"
5303 |           },
5304 |           "startTime": {
5305 |             "type": "string",
5306 |             "description": "Start Time",
5307 |             "example": "2021-06-23T03:30:00+05:30"
5308 |           },
5309 |           "endTime": {
5310 |             "type": "string",
5311 |             "description": "End Time",
5312 |             "example": "2021-06-23T04:30:00+05:30"
5313 |           },
5314 |           "title": {
5315 |             "type": "string",
5316 |             "description": "Title",
5317 |             "example": "Test Event"
5318 |           },
5319 |           "assignedUserId": {
5320 |             "type": "string",
5321 |             "description": "Assigned User Id",
5322 |             "example": "CVokAlI8fgw4WYWoCtQz"
5323 |           }
5324 |         }
5325 |       },
5326 |       "DeleteAppointmentSchema": {
5327 |         "type": "object",
5328 |         "properties": {}
5329 |       },
5330 |       "DeleteEventSuccessfulResponseDto": {
5331 |         "type": "object",
5332 |         "properties": {
5333 |           "succeeded": {
5334 |             "type": "boolean",
5335 |             "example": true
5336 |           }
5337 |         }
5338 |       },
5339 |       "NoteCreatedBySchema": {
5340 |         "type": "object",
5341 |         "properties": {
5342 |           "id": {
5343 |             "type": "string",
5344 |             "example": "TUcmRxWr"
5345 |           },
5346 |           "name": {
5347 |             "type": "string",
5348 |             "example": "John Doe"
5349 |           }
5350 |         }
5351 |       },
5352 |       "GetNoteSchema": {
5353 |         "type": "object",
5354 |         "properties": {
5355 |           "id": {
5356 |             "type": "string",
5357 |             "example": "HGPcayliwcdoUFzvbTok"
5358 |           },
5359 |           "body": {
5360 |             "type": "string",
5361 |             "example": "lorem ipsum"
5362 |           },
5363 |           "userId": {
5364 |             "type": "string",
5365 |             "example": "TUcmRxWrjqzJS8EjkxNK"
5366 |           },
5367 |           "dateAdded": {
5368 |             "type": "string",
5369 |             "example": "2021-07-08T12:02:11.285Z"
5370 |           },
5371 |           "contactId": {
5372 |             "type": "string",
5373 |             "example": "TUcmRxWrjqzJS8EjkxNK"
5374 |           },
5375 |           "createdBy": {
5376 |             "$ref": "#/components/schemas/NoteCreatedBySchema"
5377 |           }
5378 |         }
5379 |       },
5380 |       "GetNotesListSuccessfulResponseDto": {
5381 |         "type": "object",
5382 |         "properties": {
5383 |           "notes": {
5384 |             "type": "array",
5385 |             "items": {
5386 |               "$ref": "#/components/schemas/GetNoteSchema"
5387 |             }
5388 |           },
5389 |           "hasMore": {
5390 |             "type": "boolean",
5391 |             "example": true
5392 |           }
5393 |         }
5394 |       },
5395 |       "NotesDTO": {
5396 |         "type": "object",
5397 |         "properties": {
5398 |           "userId": {
5399 |             "type": "string",
5400 |             "example": "GCs5KuzPqTls7vWclkEV"
5401 |           },
5402 |           "body": {
5403 |             "type": "string",
5404 |             "example": "lorem ipsum",
5405 |             "description": "Note body",
5406 |             "maxLength": 5000
5407 |           }
5408 |         },
5409 |         "required": [
5410 |           "body"
5411 |         ]
5412 |       },
5413 |       "GetCreateUpdateNoteSuccessfulResponseDto": {
5414 |         "type": "object",
5415 |         "properties": {
5416 |           "note": {
5417 |             "$ref": "#/components/schemas/GetNoteSchema"
5418 |           }
5419 |         }
5420 |       },
5421 |       "DeleteNoteSuccessfulResponseDto": {
5422 |         "type": "object",
5423 |         "properties": {
5424 |           "success": {
5425 |             "type": "boolean",
5426 |             "example": true
5427 |           }
5428 |         }
5429 |       },
5430 |       "CalendarResourceByIdResponseDTO": {
5431 |         "type": "object",
5432 |         "properties": {
5433 |           "locationId": {
5434 |             "type": "string",
5435 |             "description": "Location ID of the resource"
5436 |           },
5437 |           "name": {
5438 |             "type": "string",
5439 |             "description": "Name of the resource",
5440 |             "example": "yoga room"
5441 |           },
5442 |           "resourceType": {
5443 |             "type": "string",
5444 |             "enum": [
5445 |               "equipments",
5446 |               "rooms"
5447 |             ]
5448 |           },
5449 |           "isActive": {
5450 |             "type": "boolean",
5451 |             "description": "Whether the resource is active"
5452 |           },
5453 |           "description": {
5454 |             "type": "string",
5455 |             "description": "Description of the resource"
5456 |           },
5457 |           "quantity": {
5458 |             "type": "number",
5459 |             "description": "Quantity of the resource"
5460 |           },
5461 |           "outOfService": {
5462 |             "type": "number",
5463 |             "description": "Indicates if the resource is out of service",
5464 |             "example": 0
5465 |           },
5466 |           "capacity": {
5467 |             "type": "number",
5468 |             "description": "Capacity of the resource",
5469 |             "example": 85
5470 |           },
5471 |           "calendarIds": {
5472 |             "description": "Calendar IDs",
5473 |             "example": [
5474 |               "Jsj0xnlDDjw0SuvX1J13",
5475 |               "oCM5feFC86FAAbcO7lJK"
5476 |             ],
5477 |             "type": "array",
5478 |             "items": {
5479 |               "type": "string"
5480 |             }
5481 |           }
5482 |         },
5483 |         "required": [
5484 |           "locationId",
5485 |           "name",
5486 |           "resourceType",
5487 |           "isActive",
5488 |           "calendarIds"
5489 |         ]
5490 |       },
5491 |       "UpdateCalendarResourceDTO": {
5492 |         "type": "object",
5493 |         "properties": {
5494 |           "locationId": {
5495 |             "type": "string"
5496 |           },
5497 |           "name": {
5498 |             "type": "string"
5499 |           },
5500 |           "description": {
5501 |             "type": "string"
5502 |           },
5503 |           "quantity": {
5504 |             "type": "number",
5505 |             "description": "Quantity of the equipment."
5506 |           },
5507 |           "outOfService": {
5508 |             "type": "number",
5509 |             "description": "Quantity of the out of service equipment."
5510 |           },
5511 |           "capacity": {
5512 |             "type": "number",
5513 |             "description": "Capacity of the room."
5514 |           },
5515 |           "calendarIds": {
5516 |             "description": "Service calendar IDs to be mapped with the resource.\n\n    One equipment can only be mapped with one service calendar.\n    \nOne room can be mapped with multiple service calendars.",
5517 |             "maxItems": 100,
5518 |             "type": "array",
5519 |             "items": {
5520 |               "type": "string"
5521 |             }
5522 |           },
5523 |           "isActive": {
5524 |             "type": "boolean"
5525 |           }
5526 |         }
5527 |       },
5528 |       "CalendarResourceResponseDTO": {
5529 |         "type": "object",
5530 |         "properties": {
5531 |           "locationId": {
5532 |             "type": "string",
5533 |             "description": "Location ID of the resource"
5534 |           },
5535 |           "name": {
5536 |             "type": "string",
5537 |             "description": "Name of the resource",
5538 |             "example": "yoga room"
5539 |           },
5540 |           "resourceType": {
5541 |             "type": "string",
5542 |             "enum": [
5543 |               "equipments",
5544 |               "rooms"
5545 |             ]
5546 |           },
5547 |           "isActive": {
5548 |             "type": "boolean",
5549 |             "description": "Whether the resource is active"
5550 |           },
5551 |           "description": {
5552 |             "type": "string",
5553 |             "description": "Description of the resource"
5554 |           },
5555 |           "quantity": {
5556 |             "type": "number",
5557 |             "description": "Quantity of the resource"
5558 |           },
5559 |           "outOfService": {
5560 |             "type": "number",
5561 |             "description": "Indicates if the resource is out of service",
5562 |             "example": 0
5563 |           },
5564 |           "capacity": {
5565 |             "type": "number",
5566 |             "description": "Capacity of the resource",
5567 |             "example": 85
5568 |           }
5569 |         },
5570 |         "required": [
5571 |           "locationId",
5572 |           "name",
5573 |           "resourceType",
5574 |           "isActive"
5575 |         ]
5576 |       },
5577 |       "ResourceDeleteResponseDTO": {
5578 |         "type": "object",
5579 |         "properties": {
5580 |           "success": {
5581 |             "type": "boolean",
5582 |             "description": "Success",
5583 |             "example": "true"
5584 |           }
5585 |         }
5586 |       },
5587 |       "CreateCalendarResourceDTO": {
5588 |         "type": "object",
5589 |         "properties": {
5590 |           "locationId": {
5591 |             "type": "string"
5592 |           },
5593 |           "name": {
5594 |             "type": "string"
5595 |           },
5596 |           "description": {
5597 |             "type": "string"
5598 |           },
5599 |           "quantity": {
5600 |             "type": "number",
5601 |             "description": "Quantity of the equipment."
5602 |           },
5603 |           "outOfService": {
5604 |             "type": "number",
5605 |             "description": "Quantity of the out of service equipment."
5606 |           },
5607 |           "capacity": {
5608 |             "type": "number",
5609 |             "description": "Capacity of the room."
5610 |           },
5611 |           "calendarIds": {
5612 |             "description": "Service calendar IDs to be mapped with the resource.\n\n    One equipment can only be mapped with one service calendar.\n    \nOne room can be mapped with multiple service calendars.",
5613 |             "maxItems": 100,
5614 |             "type": "array",
5615 |             "items": {
5616 |               "type": "string"
5617 |             }
5618 |           }
5619 |         },
5620 |         "required": [
5621 |           "locationId",
5622 |           "name",
5623 |           "description",
5624 |           "quantity",
5625 |           "outOfService",
5626 |           "capacity",
5627 |           "calendarIds"
5628 |         ]
5629 |       },
5630 |       "SchedulesDTO": {
5631 |         "type": "object",
5632 |         "properties": {
5633 |           "timeOffset": {
5634 |             "type": "number"
5635 |           },
5636 |           "unit": {
5637 |             "type": "string"
5638 |           }
5639 |         }
5640 |       },
5641 |       "CalendarNotificationResponseDTO": {
5642 |         "type": "object",
5643 |         "properties": {
5644 |           "_id": {
5645 |             "type": "string",
5646 |             "description": "Notification ID"
5647 |           },
5648 |           "altType": {
5649 |             "type": "string",
5650 |             "example": "calendar",
5651 |             "enum": [
5652 |               "calendar"
5653 |             ]
5654 |           },
5655 |           "calendarId": {
5656 |             "type": "string",
5657 |             "example": "0as9d8as0d"
5658 |           },
5659 |           "receiverType": {
5660 |             "type": "string",
5661 |             "example": "contact",
5662 |             "enum": [
5663 |               "contact",
5664 |               "guest",
5665 |               "assignedUser",
5666 |               "emails"
5667 |             ]
5668 |           },
5669 |           "additionalEmailIds": {
5670 |             "example": [
5671 |               "example1@email.com",
5672 |               "example2@email.com"
5673 |             ],
5674 |             "type": "array",
5675 |             "items": {
5676 |               "type": "string"
5677 |             }
5678 |           },
5679 |           "channel": {
5680 |             "type": "string",
5681 |             "example": "email",
5682 |             "enum": [
5683 |               "email",
5684 |               "inApp"
5685 |             ]
5686 |           },
5687 |           "notificationType": {
5688 |             "type": "string",
5689 |             "example": "confirmation",
5690 |             "enum": [
5691 |               "booked",
5692 |               "confirmation",
5693 |               "cancellation",
5694 |               "reminder",
5695 |               "followup",
5696 |               "reschedule"
5697 |             ]
5698 |           },
5699 |           "isActive": {
5700 |             "type": "boolean",
5701 |             "example": true
5702 |           },
5703 |           "templateId": {
5704 |             "type": "string",
5705 |             "example": "0as9d8as0d"
5706 |           },
5707 |           "body": {
5708 |             "type": "string",
5709 |             "example": "This is a test notification"
5710 |           },
5711 |           "subject": {
5712 |             "type": "string",
5713 |             "example": "Test Notification"
5714 |           },
5715 |           "afterTime": {
5716 |             "example": [
5717 |               {
5718 |                 "timeOffset": 1,
5719 |                 "unit": "hours"
5720 |               }
5721 |             ],
5722 |             "type": "array",
5723 |             "items": {
5724 |               "$ref": "#/components/schemas/SchedulesDTO"
5725 |             }
5726 |           },
5727 |           "beforeTime": {
5728 |             "example": [
5729 |               {
5730 |                 "timeOffset": 1,
5731 |                 "unit": "hours"
5732 |               }
5733 |             ],
5734 |             "type": "array",
5735 |             "items": {
5736 |               "$ref": "#/components/schemas/SchedulesDTO"
5737 |             }
5738 |           },
5739 |           "selectedUsers": {
5740 |             "example": [
5741 |               "user1",
5742 |               "user2"
5743 |             ],
5744 |             "type": "array",
5745 |             "items": {
5746 |               "type": "string"
5747 |             }
5748 |           },
5749 |           "deleted": {
5750 |             "type": "boolean",
5751 |             "example": false
5752 |           }
5753 |         }
5754 |       },
5755 |       "CreateCalendarNotificationDTO": {
5756 |         "type": "object",
5757 |         "properties": {
5758 |           "receiverType": {
5759 |             "type": "string",
5760 |             "description": "notification recipient type",
5761 |             "enum": [
5762 |               "contact",
5763 |               "guest",
5764 |               "assignedUser",
5765 |               "emails"
5766 |             ]
5767 |           },
5768 |           "channel": {
5769 |             "type": "string",
5770 |             "description": "Notification channel",
5771 |             "enum": [
5772 |               "email",
5773 |               "inApp"
5774 |             ]
5775 |           },
5776 |           "notificationType": {
5777 |             "type": "string",
5778 |             "description": "Notification type",
5779 |             "enum": [
5780 |               "booked",
5781 |               "confirmation",
5782 |               "cancellation",
5783 |               "reminder",
5784 |               "followup",
5785 |               "reschedule"
5786 |             ]
5787 |           },
5788 |           "isActive": {
5789 |             "type": "boolean",
5790 |             "description": "Is the notification active",
5791 |             "default": true
5792 |           },
5793 |           "templateId": {
5794 |             "type": "string",
5795 |             "description": "Template ID for email notification. Not necessary for in-App notification"
5796 |           },
5797 |           "body": {
5798 |             "type": "string",
5799 |             "description": "Body  for email notification. Not necessary for in-App notification"
5800 |           },
5801 |           "subject": {
5802 |             "type": "string",
5803 |             "description": "Subject  for email notification. Not necessary for in-App notification"
5804 |           },
5805 |           "afterTime": {
5806 |             "description": "Specifies the time after which the follow-up notification should be sent. This is not required for other notification types.",
5807 |             "example": [
5808 |               {
5809 |                 "timeOffset": 1,
5810 |                 "unit": "hours"
5811 |               }
5812 |             ],
5813 |             "type": "array",
5814 |             "items": {
5815 |               "$ref": "#/components/schemas/SchedulesDTO"
5816 |             }
5817 |           },
5818 |           "beforeTime": {
5819 |             "description": "Specifies the time before which the reminder notification should be sent. This is not required for other notification types.",
5820 |             "example": [
5821 |               {
5822 |                 "timeOffset": 1,
5823 |                 "unit": "hours"
5824 |               }
5825 |             ],
5826 |             "type": "array",
5827 |             "items": {
5828 |               "$ref": "#/components/schemas/SchedulesDTO"
5829 |             }
5830 |           },
5831 |           "additionalEmailIds": {
5832 |             "description": "Additional email addresses to receive notifications.",
5833 |             "example": [
5834 |               "example1@email.com",
5835 |               "example2@email.com"
5836 |             ],
5837 |             "type": "array",
5838 |             "items": {
5839 |               "type": "string"
5840 |             }
5841 |           },
5842 |           "selectedUsers": {
5843 |             "description": "selected user for in-App notification",
5844 |             "type": "array",
5845 |             "items": {
5846 |               "type": "string"
5847 |             }
5848 |           },
5849 |           "fromAddress": {
5850 |             "type": "string",
5851 |             "description": "from address for email notification"
5852 |           },
5853 |           "fromName": {
5854 |             "type": "string",
5855 |             "description": "from name for email notification"
5856 |           }
5857 |         },
5858 |         "required": [
5859 |           "receiverType",
5860 |           "channel",
5861 |           "notificationType"
5862 |         ]
5863 |       },
5864 |       "UpdateCalendarNotificationsDTO": {
5865 |         "type": "object",
5866 |         "properties": {
5867 |           "altType": {
5868 |             "type": "string",
5869 |             "default": "calendar",
5870 |             "description": "Specifies the model associated with the notification. This can be extended to support additional models in the future. For now only Calendars is supported",
5871 |             "enum": [
5872 |               "calendar"
5873 |             ]
5874 |           },
5875 |           "altId": {
5876 |             "type": "string",
5877 |             "description": "Specifies the ID of the model associated with the notification. This can be extended to support additional models in the future.",
5878 |             "example": "D7JP6b67AgWqTtfGaQcw"
5879 |           },
5880 |           "receiverType": {
5881 |             "type": "string",
5882 |             "description": "Notification recipient type",
5883 |             "enum": [
5884 |               "contact",
5885 |               "guest",
5886 |               "assignedUser",
5887 |               "emails"
5888 |             ]
5889 |           },
5890 |           "additionalEmailIds": {
5891 |             "description": "Additional email addresses to receive notifications.",
5892 |             "example": [
5893 |               "example1@email.com",
5894 |               "example2@email.com"
5895 |             ],
5896 |             "type": "array",
5897 |             "items": {
5898 |               "type": "string"
5899 |             }
5900 |           },
5901 |           "channel": {
5902 |             "type": "string",
5903 |             "description": "Notification channel",
5904 |             "enum": [
5905 |               "email",
5906 |               "inApp"
5907 |             ]
5908 |           },
5909 |           "notificationType": {
5910 |             "type": "string",
5911 |             "description": "Notification type",
5912 |             "enum": [
5913 |               "booked",
5914 |               "confirmation",
5915 |               "cancellation",
5916 |               "reminder",
5917 |               "followup",
5918 |               "reschedule"
5919 |             ]
5920 |           },
5921 |           "isActive": {
5922 |             "type": "boolean",
5923 |             "description": "Is the notification active",
5924 |             "default": true
5925 |           },
5926 |           "deleted": {
5927 |             "type": "boolean",
5928 |             "description": "Marks the notification as deleted (soft delete)",
5929 |             "default": false
5930 |           },
5931 |           "templateId": {
5932 |             "type": "string",
5933 |             "description": "Template ID for email notification"
5934 |           },
5935 |           "body": {
5936 |             "type": "string",
5937 |             "description": "Body  for email notification. Not necessary for in-App notification"
5938 |           },
5939 |           "subject": {
5940 |             "type": "string",
5941 |             "description": "Subject  for email notification. Not necessary for in-App notification"
5942 |           },
5943 |           "afterTime": {
5944 |             "description": "Specifies the time after which the follow-up notification should be sent.",
5945 |             "example": [
5946 |               {
5947 |                 "timeOffset": 1,
5948 |                 "unit": "hours"
5949 |               }
5950 |             ],
5951 |             "type": "array",
5952 |             "items": {
5953 |               "$ref": "#/components/schemas/SchedulesDTO"
5954 |             }
5955 |           },
5956 |           "beforeTime": {
5957 |             "description": "Specifies the time before which the reminder notification should be sent.",
5958 |             "example": [
5959 |               {
5960 |                 "timeOffset": 1,
5961 |                 "unit": "hours"
5962 |               }
5963 |             ],
5964 |             "type": "array",
5965 |             "items": {
5966 |               "$ref": "#/components/schemas/SchedulesDTO"
5967 |             }
5968 |           },
5969 |           "fromAddress": {
5970 |             "type": "string",
5971 |             "description": "From address for email notification"
5972 |           },
5973 |           "fromName": {
5974 |             "type": "string",
5975 |             "description": "From name for email notification"
5976 |           }
5977 |         }
5978 |       },
5979 |       "CalendarNotificationDeleteResponseDTO": {
5980 |         "type": "object",
5981 |         "properties": {
5982 |           "message": {
5983 |             "type": "string",
5984 |             "description": "Result of delete/update operation"
5985 |           }
5986 |         },
5987 |         "required": [
5988 |           "message"
5989 |         ]
5990 |       }
5991 |     }
5992 |   }
5993 | }


--------------------------------------------------------------------------------
/campaigns/campaigns.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/campaigns/": {
  5 |       "get": {
  6 |         "operationId": "get-campaigns",
  7 |         "summary": "Get Campaigns",
  8 |         "description": "Get Campaigns",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "locationId",
 34 |             "required": true,
 35 |             "in": "query",
 36 |             "example": "ve9EPM428h8vShlRW1KT",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           },
 41 |           {
 42 |             "name": "status",
 43 |             "required": false,
 44 |             "in": "query",
 45 |             "example": "draft",
 46 |             "schema": {
 47 |               "type": "string"
 48 |             }
 49 |           }
 50 |         ],
 51 |         "responses": {
 52 |           "200": {
 53 |             "description": "Successful response",
 54 |             "content": {
 55 |               "application/json": {
 56 |                 "schema": {
 57 |                   "$ref": "#/components/schemas/CampaignsSuccessfulResponseDto"
 58 |                 }
 59 |               }
 60 |             }
 61 |           },
 62 |           "400": {
 63 |             "description": "Bad Request",
 64 |             "content": {
 65 |               "application/json": {
 66 |                 "schema": {
 67 |                   "$ref": "#/components/schemas/BadRequestDTO"
 68 |                 }
 69 |               }
 70 |             }
 71 |           },
 72 |           "401": {
 73 |             "description": "Unauthorized",
 74 |             "content": {
 75 |               "application/json": {
 76 |                 "schema": {
 77 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 78 |                 }
 79 |               }
 80 |             }
 81 |           },
 82 |           "422": {
 83 |             "description": "Unprocessable Entity",
 84 |             "content": {
 85 |               "application/json": {
 86 |                 "schema": {
 87 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 88 |                 }
 89 |               }
 90 |             }
 91 |           }
 92 |         },
 93 |         "tags": [
 94 |           "Campaigns"
 95 |         ],
 96 |         "security": [
 97 |           {
 98 |             "bearer": []
 99 |           }
100 |         ]
101 |       }
102 |     }
103 |   },
104 |   "info": {
105 |     "title": "Campaigns API",
106 |     "description": "Documentation for campaigns API",
107 |     "version": "1.0",
108 |     "contact": {}
109 |   },
110 |   "tags": [
111 |     {
112 |       "name": "Campaigns",
113 |       "description": "Documentation for campaigns API"
114 |     }
115 |   ],
116 |   "servers": [
117 |     {
118 |       "url": "https://services.leadconnectorhq.com"
119 |     }
120 |   ],
121 |   "components": {
122 |     "securitySchemes": {
123 |       "bearer": {
124 |         "scheme": "bearer",
125 |         "bearerFormat": "JWT",
126 |         "name": "Authorization",
127 |         "in": "header",
128 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
129 |         "type": "http"
130 |       },
131 |       "Location-Access": {
132 |         "scheme": "bearer",
133 |         "bearerFormat": "JWT",
134 |         "name": "Authorization",
135 |         "in": "header",
136 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
137 |         "type": "http"
138 |       },
139 |       "Agency-Access": {
140 |         "scheme": "bearer",
141 |         "bearerFormat": "JWT",
142 |         "name": "Authorization",
143 |         "in": "header",
144 |         "description": "Use the Access Token generated with user type as Agency.",
145 |         "type": "http"
146 |       }
147 |     },
148 |     "schemas": {
149 |       "BadRequestDTO": {
150 |         "type": "object",
151 |         "properties": {
152 |           "statusCode": {
153 |             "type": "number",
154 |             "example": 400
155 |           },
156 |           "message": {
157 |             "type": "string",
158 |             "example": "Bad Request"
159 |           }
160 |         }
161 |       },
162 |       "UnauthorizedDTO": {
163 |         "type": "object",
164 |         "properties": {
165 |           "statusCode": {
166 |             "type": "number",
167 |             "example": 401
168 |           },
169 |           "message": {
170 |             "type": "string",
171 |             "example": "Invalid token: access token is invalid"
172 |           },
173 |           "error": {
174 |             "type": "string",
175 |             "example": "Unauthorized"
176 |           }
177 |         }
178 |       },
179 |       "UnprocessableDTO": {
180 |         "type": "object",
181 |         "properties": {
182 |           "statusCode": {
183 |             "type": "number",
184 |             "example": 422
185 |           },
186 |           "message": {
187 |             "example": [
188 |               "Unprocessable Entity"
189 |             ],
190 |             "type": "array",
191 |             "items": {
192 |               "type": "string"
193 |             }
194 |           },
195 |           "error": {
196 |             "type": "string",
197 |             "example": "Unprocessable Entity"
198 |           }
199 |         }
200 |       },
201 |       "campaignsSchema": {
202 |         "type": "object",
203 |         "properties": {
204 |           "id": {
205 |             "type": "string",
206 |             "example": "mIVALPYuTD7YjUHnFEx4"
207 |           },
208 |           "name": {
209 |             "type": "string",
210 |             "example": "test"
211 |           },
212 |           "status": {
213 |             "type": "string",
214 |             "example": "published"
215 |           },
216 |           "locationId": {
217 |             "type": "string",
218 |             "example": "ve9EPM428h8vShlRW1KT"
219 |           }
220 |         }
221 |       },
222 |       "CampaignsSuccessfulResponseDto": {
223 |         "type": "object",
224 |         "properties": {
225 |           "campaigns": {
226 |             "type": "array",
227 |             "items": {
228 |               "$ref": "#/components/schemas/campaignsSchema"
229 |             }
230 |           }
231 |         }
232 |       }
233 |     }
234 |   }
235 | }


--------------------------------------------------------------------------------
/companies/companies.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/companies/{companyId}": {
  5 |       "get": {
  6 |         "operationId": "get-company",
  7 |         "summary": "Get Company",
  8 |         "description": "Get Comapny",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "companyId",
 34 |             "required": true,
 35 |             "in": "path",
 36 |             "example": "ve9EPM428h8vShlRW1KT",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           }
 41 |         ],
 42 |         "responses": {
 43 |           "200": {
 44 |             "description": "Successful response",
 45 |             "content": {
 46 |               "application/json": {
 47 |                 "schema": {
 48 |                   "$ref": "#/components/schemas/GetCompanyByIdSuccessfulResponseDto"
 49 |                 }
 50 |               }
 51 |             }
 52 |           },
 53 |           "400": {
 54 |             "description": "Bad Request",
 55 |             "content": {
 56 |               "application/json": {
 57 |                 "schema": {
 58 |                   "$ref": "#/components/schemas/BadRequestDTO"
 59 |                 }
 60 |               }
 61 |             }
 62 |           },
 63 |           "401": {
 64 |             "description": "Unauthorized",
 65 |             "content": {
 66 |               "application/json": {
 67 |                 "schema": {
 68 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 69 |                 }
 70 |               }
 71 |             }
 72 |           },
 73 |           "422": {
 74 |             "description": "Unprocessable Entity",
 75 |             "content": {
 76 |               "application/json": {
 77 |                 "schema": {
 78 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 79 |                 }
 80 |               }
 81 |             }
 82 |           }
 83 |         },
 84 |         "tags": [
 85 |           "Companies"
 86 |         ],
 87 |         "security": [
 88 |           {
 89 |             "bearer": []
 90 |           },
 91 |           {
 92 |             "Agency-Access": []
 93 |           }
 94 |         ]
 95 |       }
 96 |     }
 97 |   },
 98 |   "info": {
 99 |     "title": "Companies API",
100 |     "description": "Documentation for Companies API",
101 |     "version": "1.0",
102 |     "contact": {}
103 |   },
104 |   "tags": [
105 |     {
106 |       "name": "Companies",
107 |       "description": "Documentation for Companies API"
108 |     }
109 |   ],
110 |   "servers": [
111 |     {
112 |       "url": "https://services.leadconnectorhq.com"
113 |     }
114 |   ],
115 |   "components": {
116 |     "securitySchemes": {
117 |       "bearer": {
118 |         "scheme": "bearer",
119 |         "bearerFormat": "JWT",
120 |         "name": "Authorization",
121 |         "in": "header",
122 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
123 |         "type": "http"
124 |       },
125 |       "Location-Access": {
126 |         "scheme": "bearer",
127 |         "bearerFormat": "JWT",
128 |         "name": "Authorization",
129 |         "in": "header",
130 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
131 |         "type": "http"
132 |       },
133 |       "Agency-Access": {
134 |         "scheme": "bearer",
135 |         "bearerFormat": "JWT",
136 |         "name": "Authorization",
137 |         "in": "header",
138 |         "description": "Use the Access Token generated with user type as Agency.",
139 |         "type": "http"
140 |       }
141 |     },
142 |     "schemas": {
143 |       "BadRequestDTO": {
144 |         "type": "object",
145 |         "properties": {
146 |           "statusCode": {
147 |             "type": "number",
148 |             "example": 400
149 |           },
150 |           "message": {
151 |             "type": "string",
152 |             "example": "Bad Request"
153 |           }
154 |         }
155 |       },
156 |       "UnauthorizedDTO": {
157 |         "type": "object",
158 |         "properties": {
159 |           "statusCode": {
160 |             "type": "number",
161 |             "example": 401
162 |           },
163 |           "message": {
164 |             "type": "string",
165 |             "example": "Invalid token: access token is invalid"
166 |           },
167 |           "error": {
168 |             "type": "string",
169 |             "example": "Unauthorized"
170 |           }
171 |         }
172 |       },
173 |       "UnprocessableDTO": {
174 |         "type": "object",
175 |         "properties": {
176 |           "statusCode": {
177 |             "type": "number",
178 |             "example": 422
179 |           },
180 |           "message": {
181 |             "example": [
182 |               "Unprocessable Entity"
183 |             ],
184 |             "type": "array",
185 |             "items": {
186 |               "type": "string"
187 |             }
188 |           },
189 |           "error": {
190 |             "type": "string",
191 |             "example": "Unprocessable Entity"
192 |           }
193 |         }
194 |       },
195 |       "IOnboardingDto": {
196 |         "type": "object",
197 |         "properties": {
198 |           "pending": {
199 |             "type": "boolean",
200 |             "example": "true"
201 |           },
202 |           "haveWebsite": {
203 |             "type": "boolean",
204 |             "example": ""
205 |           },
206 |           "websiteUrl": {
207 |             "type": "string",
208 |             "example": ""
209 |           },
210 |           "industryServed": {
211 |             "type": "string",
212 |             "example": ""
213 |           },
214 |           "customerCount": {
215 |             "type": "string",
216 |             "example": ""
217 |           },
218 |           "tools": {
219 |             "example": "",
220 |             "type": "array",
221 |             "items": {
222 |               "type": "string"
223 |             }
224 |           },
225 |           "location": {
226 |             "type": "boolean",
227 |             "example": ""
228 |           },
229 |           "conversationDemo": {
230 |             "type": "boolean",
231 |             "example": ""
232 |           },
233 |           "locationId": {
234 |             "type": "string",
235 |             "example": ""
236 |           },
237 |           "snapshotId": {
238 |             "type": "string",
239 |             "example": ""
240 |           }
241 |         },
242 |         "required": [
243 |           "pending"
244 |         ]
245 |       },
246 |       "EndTrialDto": {
247 |         "type": "object",
248 |         "properties": {
249 |           "trial_end_req_by": {
250 |             "type": "string",
251 |             "example": ""
252 |           },
253 |           "trial_ended_on": {
254 |             "format": "date-time",
255 |             "type": "string",
256 |             "example": "2023-08-02T00:00:00.000Z"
257 |           }
258 |         },
259 |         "required": [
260 |           "trial_end_req_by",
261 |           "trial_ended_on"
262 |         ]
263 |       },
264 |       "AgencyProAddOnDto": {
265 |         "type": "object",
266 |         "properties": {
267 |           "is_active": {
268 |             "type": "boolean",
269 |             "example": true
270 |           },
271 |           "agency_pro_addon_subscription_id": {
272 |             "type": "string",
273 |             "example": "price_a21hvDAS456asc"
274 |           },
275 |           "agency_pro_addon_active_plan": {
276 |             "type": "string",
277 |             "enum": [
278 |               "reviews_monthly_150",
279 |               "listing_monthly_50",
280 |               "conversations_monthly_100",
281 |               "priority-support_monthly_300",
282 |               "priority-support_annual_300",
283 |               "priority-support_monthly_300_legacy",
284 |               "priority-support_annual_300_legacy",
285 |               "priority-support_monthly_240_july",
286 |               "hipaa_monthly_297",
287 |               "hipaa_annual_297",
288 |               "hipaa_monthly_297_legacy",
289 |               "agency-pro-plus_monthly_399",
290 |               "agency-pro-plus_annual_399"
291 |             ],
292 |             "example": "agency-pro-plus_monthly_399"
293 |           }
294 |         },
295 |         "required": [
296 |           "is_active",
297 |           "agency_pro_addon_subscription_id",
298 |           "agency_pro_addon_active_plan"
299 |         ]
300 |       },
301 |       "ReactivationAttemptDto": {
302 |         "type": "object",
303 |         "properties": {
304 |           "attempted_on": {
305 |             "format": "date-time",
306 |             "type": "string",
307 |             "example": "2023-08-02T00:00:00.000Z"
308 |           },
309 |           "attempted_by": {
310 |             "type": "string",
311 |             "example": "john.doe@example.com"
312 |           },
313 |           "invoice_id": {
314 |             "type": "string",
315 |             "example": "in_1NZoVqFpU9DlKp7RclfCqtIF"
316 |           }
317 |         },
318 |         "required": [
319 |           "attempted_on",
320 |           "attempted_by",
321 |           "invoice_id"
322 |         ]
323 |       },
324 |       "DowngradeDto": {
325 |         "type": "object",
326 |         "properties": {
327 |           "attempted_on": {
328 |             "format": "date-time",
329 |             "type": "string",
330 |             "example": "2023-08-02T00:00:00.000Z"
331 |           },
332 |           "attempted_by": {
333 |             "type": "string",
334 |             "example": "john.doe@example.com"
335 |           },
336 |           "previous_plan": {
337 |             "type": "string",
338 |             "example": "$497 / month"
339 |           },
340 |           "current_plan": {
341 |             "type": "string",
342 |             "example": "$297 / month"
343 |           },
344 |           "reason": {
345 |             "type": "string",
346 |             "example": "Expensive"
347 |           }
348 |         },
349 |         "required": [
350 |           "attempted_on",
351 |           "attempted_by",
352 |           "previous_plan",
353 |           "current_plan",
354 |           "reason"
355 |         ]
356 |       },
357 |       "PauseSubscriptionInfoDto": {
358 |         "type": "object",
359 |         "properties": {
360 |           "requested_on": {
361 |             "format": "date-time",
362 |             "type": "string",
363 |             "example": "2023-08-02T00:00:00.000Z"
364 |           },
365 |           "req_by": {
366 |             "type": "string",
367 |             "example": "request by"
368 |           },
369 |           "reason": {
370 |             "type": "string",
371 |             "example": "Expensive"
372 |           },
373 |           "status": {
374 |             "type": "string",
375 |             "enum": [
376 |               "pending",
377 |               "approved",
378 |               "rejected"
379 |             ],
380 |             "example": "pending"
381 |           },
382 |           "processed_on": {
383 |             "format": "date-time",
384 |             "type": "string",
385 |             "example": "2023-08-02T00:00:00.000Z"
386 |           }
387 |         },
388 |         "required": [
389 |           "requested_on",
390 |           "req_by",
391 |           "reason",
392 |           "status",
393 |           "processed_on"
394 |         ]
395 |       },
396 |       "BillingInfoDto": {
397 |         "type": "object",
398 |         "properties": {
399 |           "first_trial_extension_processed_on": {
400 |             "format": "date-time",
401 |             "type": "string",
402 |             "example": "2023-08-02T00:00:00.000Z"
403 |           },
404 |           "first_trial_extension_reason": {
405 |             "type": "string",
406 |             "example": "Some reason for extending trial"
407 |           },
408 |           "second_trial_extension_processed_on": {
409 |             "format": "date-time",
410 |             "type": "string",
411 |             "example": "2023-08-02T00:00:00.000Z"
412 |           },
413 |           "second_trial_extension_reason": {
414 |             "type": "string",
415 |             "example": "Some reason for extending trial"
416 |           },
417 |           "pause_subscription_requested_on": {
418 |             "format": "date-time",
419 |             "type": "string",
420 |             "example": "2023-08-02T00:00:00.000Z"
421 |           },
422 |           "pause_subscription_reason": {
423 |             "type": "string",
424 |             "example": "Some reason for pausing subscription"
425 |           },
426 |           "pause_subscription_status": {
427 |             "type": "string",
428 |             "enum": [
429 |               "pending",
430 |               "approved",
431 |               "rejected"
432 |             ],
433 |             "example": "pending"
434 |           },
435 |           "pause_subscription_req_processed_on": {
436 |             "format": "date-time",
437 |             "type": "string",
438 |             "example": "2023-08-02T00:00:00.000Z"
439 |           },
440 |           "pause_subscription_req_by": {
441 |             "type": "string",
442 |             "example": "john.doe@example.com"
443 |           },
444 |           "end_trial_early": {
445 |             "$ref": "#/components/schemas/EndTrialDto"
446 |           },
447 |           "agency_pro_addon": {
448 |             "$ref": "#/components/schemas/AgencyProAddOnDto"
449 |           },
450 |           "coupons_added": {
451 |             "type": "array",
452 |             "items": {
453 |               "type": "string"
454 |             }
455 |           },
456 |           "reactivation_attempt": {
457 |             "$ref": "#/components/schemas/ReactivationAttemptDto"
458 |           },
459 |           "downgrade": {
460 |             "$ref": "#/components/schemas/DowngradeDto"
461 |           },
462 |           "first_payment_date": {
463 |             "format": "date-time",
464 |             "type": "string",
465 |             "example": "2023-08-02T00:00:00.000Z"
466 |           },
467 |           "pause_subscription_info": {
468 |             "$ref": "#/components/schemas/PauseSubscriptionInfoDto"
469 |           }
470 |         }
471 |       },
472 |       "GetCompanyByIdSchema": {
473 |         "type": "object",
474 |         "properties": {
475 |           "id": {
476 |             "type": "string",
477 |             "example": "seD4PfOuKoVMLkEZqohJ"
478 |           },
479 |           "name": {
480 |             "type": "string",
481 |             "example": "Tesla inc"
482 |           },
483 |           "email": {
484 |             "type": "string",
485 |             "example": "john@deo.com"
486 |           },
487 |           "logoUrl": {
488 |             "type": "string",
489 |             "example": "https://firebasestorage.googleapis.com/v0/b/highlevel-staging.appspot.com/o/companyPhotos%2F5DP4iH6HLkQsiKESj6rh.gif?alt=media&token=2aec9720-59a7-46af-a187-d4a2774ee873"
490 |           },
491 |           "phone": {
492 |             "type": "string",
493 |             "example": "+1202-555-0107"
494 |           },
495 |           "website": {
496 |             "type": "string",
497 |             "example": "https://www.tesla.com"
498 |           },
499 |           "domain": {
500 |             "type": "string",
501 |             "example": "https://app.myawesomedomain.com"
502 |           },
503 |           "spareDomain": {
504 |             "type": "string",
505 |             "example": "link.msgsndr.com"
506 |           },
507 |           "privacyPolicy": {
508 |             "type": "string",
509 |             "example": "https://app.gohighlevel.com/privacy_policy"
510 |           },
511 |           "termsConditions": {
512 |             "type": "string",
513 |             "example": "https://app.gohighlevel.com/terms-of-service"
514 |           },
515 |           "theme": {
516 |             "type": "string",
517 |             "example": "default-dark-v1"
518 |           },
519 |           "address": {
520 |             "type": "string",
521 |             "example": "3500 Deer Creek Road"
522 |           },
523 |           "city": {
524 |             "type": "string",
525 |             "example": "Palo Alto"
526 |           },
527 |           "postalCode": {
528 |             "type": "string",
529 |             "example": "94304"
530 |           },
531 |           "country": {
532 |             "type": "string",
533 |             "example": "US"
534 |           },
535 |           "state": {
536 |             "type": "string",
537 |             "example": "CA"
538 |           },
539 |           "timezone": {
540 |             "type": "string",
541 |             "example": "US/Central"
542 |           },
543 |           "relationshipNumber": {
544 |             "type": "string",
545 |             "example": "x-xxx-xxx"
546 |           },
547 |           "faviconUrl": {
548 |             "type": "string",
549 |             "example": "https://firebasestorage.googleapis.com/v0/b/highlevel-staging.appspot.com/o/companyPhotos%2F5DP4iH6HLkQsiKESj6rh.gif?alt=media&token=2aec9720-59a7-46af-a187-d4a2774ee873"
550 |           },
551 |           "subdomain": {
552 |             "type": "string",
553 |             "example": "https://app.myawesomedomain.com/subdomain"
554 |           },
555 |           "plan": {
556 |             "type": "number",
557 |             "example": 1
558 |           },
559 |           "currency": {
560 |             "type": "string",
561 |             "example": ""
562 |           },
563 |           "customerType": {
564 |             "type": "string",
565 |             "example": "agency"
566 |           },
567 |           "termsOfServiceVersion": {
568 |             "type": "string",
569 |             "example": "06/01/2022"
570 |           },
571 |           "termsOfServiceAcceptedBy": {
572 |             "type": "string",
573 |             "example": "SDfdf355Dfggdee"
574 |           },
575 |           "twilioTrialMode": {
576 |             "type": "boolean",
577 |             "example": true
578 |           },
579 |           "twilioFreeCredits": {
580 |             "type": "number",
581 |             "example": 100
582 |           },
583 |           "termsOfServiceAcceptedDate": {
584 |             "type": "string",
585 |             "example": ""
586 |           },
587 |           "privacyPolicyVersion": {
588 |             "type": "string",
589 |             "example": "06/01/2022"
590 |           },
591 |           "privacyPolicyAcceptedBy": {
592 |             "type": "string",
593 |             "example": "SDfdf355Dfggdee"
594 |           },
595 |           "privacyPolicyAcceptedDate": {
596 |             "type": "string",
597 |             "example": ""
598 |           },
599 |           "affiliatePolicyVersion": {
600 |             "type": "string",
601 |             "example": "06/01/2022"
602 |           },
603 |           "affiliatePolicyAcceptedBy": {
604 |             "type": "string",
605 |             "example": "SDfdf355Dfggdee"
606 |           },
607 |           "affiliatePolicyAcceptedDate": {
608 |             "type": "string",
609 |             "example": ""
610 |           },
611 |           "isReselling": {
612 |             "type": "boolean",
613 |             "example": true
614 |           },
615 |           "onboardingInfo": {
616 |             "example": "",
617 |             "allOf": [
618 |               {
619 |                 "$ref": "#/components/schemas/IOnboardingDto"
620 |               }
621 |             ]
622 |           },
623 |           "stripeId": {
624 |             "type": "string",
625 |             "example": ""
626 |           },
627 |           "upgradeEnabledForClients": {
628 |             "type": "boolean",
629 |             "example": true,
630 |             "description": "Flag to set if upgrade plan is enabled"
631 |           },
632 |           "cancelEnabledForClients": {
633 |             "type": "boolean",
634 |             "example": true,
635 |             "description": "Flag to set if cancel plan is enabled"
636 |           },
637 |           "autoSuspendEnabled": {
638 |             "type": "boolean",
639 |             "example": true,
640 |             "description": "Flag to set if auto suspend is enabled"
641 |           },
642 |           "saasSettings": {
643 |             "type": "object",
644 |             "example": {
645 |               "agencyDashboardVisibleTo": "string",
646 |               "stripeConnectInitiatedBy": "string"
647 |             },
648 |             "description": "Saas Settings"
649 |           },
650 |           "stripeActivePlan": {
651 |             "type": "string",
652 |             "example": "agency_monthly_297"
653 |           },
654 |           "stripeConnectId": {
655 |             "type": "string",
656 |             "example": ""
657 |           },
658 |           "enableDepreciatedFeatures": {
659 |             "type": "boolean",
660 |             "example": true
661 |           },
662 |           "premiumUpgraded": {
663 |             "type": "boolean",
664 |             "description": "If you want to enable / disable Priority Support for any agency. Default value is false.",
665 |             "example": false,
666 |             "default": false
667 |           },
668 |           "status": {
669 |             "type": "string",
670 |             "example": "active-trial"
671 |           },
672 |           "locationCount": {
673 |             "type": "number",
674 |             "example": 10
675 |           },
676 |           "disableEmailService": {
677 |             "type": "boolean",
678 |             "example": false
679 |           },
680 |           "billingInfo": {
681 |             "$ref": "#/components/schemas/BillingInfoDto"
682 |           }
683 |         }
684 |       },
685 |       "GetCompanyByIdSuccessfulResponseDto": {
686 |         "type": "object",
687 |         "properties": {
688 |           "company": {
689 |             "$ref": "#/components/schemas/GetCompanyByIdSchema"
690 |           }
691 |         }
692 |       }
693 |     }
694 |   }
695 | }


--------------------------------------------------------------------------------
/contacts/contacts.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/contacts/search": {
   5 |       "post": {
   6 |         "operationId": "search-contacts-advanced",
   7 |         "summary": "Search Contacts",
   8 |         "description": "Search contacts based on combinations of advanced filters. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-158396/6e629989abe7fad",
   9 |         "externalDocs": {
  10 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-158396/6e629989abe7fad",
  11 |           "description": "Click here for more information"
  12 |         },
  13 |         "parameters": [
  14 |           {
  15 |             "name": "Authorization",
  16 |             "in": "header",
  17 |             "description": "Access Token",
  18 |             "required": true,
  19 |             "schema": {
  20 |               "type": "string",
  21 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  22 |             }
  23 |           },
  24 |           {
  25 |             "name": "Version",
  26 |             "in": "header",
  27 |             "description": "API Version",
  28 |             "required": true,
  29 |             "schema": {
  30 |               "type": "string",
  31 |               "enum": [
  32 |                 "2021-07-28"
  33 |               ]
  34 |             }
  35 |           }
  36 |         ],
  37 |         "requestBody": {
  38 |           "required": true,
  39 |           "content": {
  40 |             "application/json": {
  41 |               "schema": {
  42 |                 "$ref": "#/components/schemas/SearchBodyV2DTO"
  43 |               }
  44 |             }
  45 |           }
  46 |         },
  47 |         "responses": {
  48 |           "200": {
  49 |             "description": "Successful response",
  50 |             "content": {
  51 |               "application/json": {
  52 |                 "schema": {
  53 |                   "$ref": "#/components/schemas/SearchContactSuccessResponseDto"
  54 |                 }
  55 |               }
  56 |             }
  57 |           },
  58 |           "400": {
  59 |             "description": "Bad Request",
  60 |             "content": {
  61 |               "application/json": {
  62 |                 "schema": {
  63 |                   "$ref": "#/components/schemas/BadRequestDTO"
  64 |                 }
  65 |               }
  66 |             }
  67 |           },
  68 |           "401": {
  69 |             "description": "Unauthorized",
  70 |             "content": {
  71 |               "application/json": {
  72 |                 "schema": {
  73 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  74 |                 }
  75 |               }
  76 |             }
  77 |           }
  78 |         },
  79 |         "tags": [
  80 |           "Search"
  81 |         ],
  82 |         "security": [
  83 |           {
  84 |             "bearer": []
  85 |           }
  86 |         ]
  87 |       }
  88 |     },
  89 |     "/contacts/search/duplicate": {
  90 |       "get": {
  91 |         "operationId": "get-duplicate-contact",
  92 |         "summary": "Get Duplicate Contact",
  93 |         "description": "Get Duplicate Contact.<br><br>If `Allow Duplicate Contact` is disabled under Settings, the global unique identifier will be used for searching the contact. If the setting is enabled, first priority for search is `email` and the second priority will be `phone`.",
  94 |         "parameters": [
  95 |           {
  96 |             "name": "Authorization",
  97 |             "in": "header",
  98 |             "description": "Access Token",
  99 |             "required": true,
 100 |             "schema": {
 101 |               "type": "string",
 102 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 103 |             }
 104 |           },
 105 |           {
 106 |             "name": "Version",
 107 |             "in": "header",
 108 |             "description": "API Version",
 109 |             "required": true,
 110 |             "schema": {
 111 |               "type": "string",
 112 |               "enum": [
 113 |                 "2021-07-28"
 114 |               ]
 115 |             }
 116 |           },
 117 |           {
 118 |             "name": "locationId",
 119 |             "required": true,
 120 |             "in": "query",
 121 |             "example": "sadadya1u12basyhasd",
 122 |             "description": "Location Id",
 123 |             "schema": {
 124 |               "type": "string"
 125 |             }
 126 |           },
 127 |           {
 128 |             "name": "number",
 129 |             "required": false,
 130 |             "in": "query",
 131 |             "example": "+1423164516",
 132 |             "description": "Phone Number - Pass in URL Encoded form. i.e +1423164516 will become `%2B1423164516`",
 133 |             "schema": {
 134 |               "type": "string"
 135 |             }
 136 |           },
 137 |           {
 138 |             "name": "email",
 139 |             "required": false,
 140 |             "in": "query",
 141 |             "example": "abc@abc.com",
 142 |             "description": "Email - Pass in URL Encoded form. i.e test+abc@gmail.com will become `test%2Babc%40gmail.com`",
 143 |             "schema": {
 144 |               "type": "string"
 145 |             }
 146 |           }
 147 |         ],
 148 |         "responses": {
 149 |           "200": {
 150 |             "description": ""
 151 |           },
 152 |           "400": {
 153 |             "description": "Bad Request",
 154 |             "content": {
 155 |               "application/json": {
 156 |                 "schema": {
 157 |                   "$ref": "#/components/schemas/BadRequestDTO"
 158 |                 }
 159 |               }
 160 |             }
 161 |           },
 162 |           "401": {
 163 |             "description": "Unauthorized",
 164 |             "content": {
 165 |               "application/json": {
 166 |                 "schema": {
 167 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 168 |                 }
 169 |               }
 170 |             }
 171 |           }
 172 |         },
 173 |         "tags": [
 174 |           "Search"
 175 |         ],
 176 |         "security": [
 177 |           {
 178 |             "bearer": []
 179 |           }
 180 |         ]
 181 |       }
 182 |     },
 183 |     "/contacts/{contactId}/tasks": {
 184 |       "get": {
 185 |         "operationId": "get-all-tasks",
 186 |         "summary": "Get all Tasks",
 187 |         "description": "Get all Tasks",
 188 |         "parameters": [
 189 |           {
 190 |             "name": "Authorization",
 191 |             "in": "header",
 192 |             "description": "Access Token",
 193 |             "required": true,
 194 |             "schema": {
 195 |               "type": "string",
 196 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 197 |             }
 198 |           },
 199 |           {
 200 |             "name": "Version",
 201 |             "in": "header",
 202 |             "description": "API Version",
 203 |             "required": true,
 204 |             "schema": {
 205 |               "type": "string",
 206 |               "enum": [
 207 |                 "2021-07-28"
 208 |               ]
 209 |             }
 210 |           },
 211 |           {
 212 |             "name": "contactId",
 213 |             "required": true,
 214 |             "in": "path",
 215 |             "description": "Contact Id",
 216 |             "example": "sx6wyHhbFdRXh302LLNR",
 217 |             "schema": {
 218 |               "type": "string"
 219 |             }
 220 |           }
 221 |         ],
 222 |         "responses": {
 223 |           "200": {
 224 |             "description": "Successful response",
 225 |             "content": {
 226 |               "application/json": {
 227 |                 "schema": {
 228 |                   "$ref": "#/components/schemas/TasksListSuccessfulResponseDto"
 229 |                 }
 230 |               }
 231 |             }
 232 |           },
 233 |           "400": {
 234 |             "description": "Bad Request",
 235 |             "content": {
 236 |               "application/json": {
 237 |                 "schema": {
 238 |                   "$ref": "#/components/schemas/BadRequestDTO"
 239 |                 }
 240 |               }
 241 |             }
 242 |           },
 243 |           "401": {
 244 |             "description": "Unauthorized",
 245 |             "content": {
 246 |               "application/json": {
 247 |                 "schema": {
 248 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 249 |                 }
 250 |               }
 251 |             }
 252 |           }
 253 |         },
 254 |         "tags": [
 255 |           "Tasks"
 256 |         ],
 257 |         "security": [
 258 |           {
 259 |             "bearer": []
 260 |           }
 261 |         ]
 262 |       },
 263 |       "post": {
 264 |         "operationId": "create-task",
 265 |         "summary": "Create Task",
 266 |         "description": "Create Task",
 267 |         "parameters": [
 268 |           {
 269 |             "name": "Authorization",
 270 |             "in": "header",
 271 |             "description": "Access Token",
 272 |             "required": true,
 273 |             "schema": {
 274 |               "type": "string",
 275 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 276 |             }
 277 |           },
 278 |           {
 279 |             "name": "Version",
 280 |             "in": "header",
 281 |             "description": "API Version",
 282 |             "required": true,
 283 |             "schema": {
 284 |               "type": "string",
 285 |               "enum": [
 286 |                 "2021-07-28"
 287 |               ]
 288 |             }
 289 |           },
 290 |           {
 291 |             "name": "contactId",
 292 |             "required": true,
 293 |             "in": "path",
 294 |             "description": "Contact Id",
 295 |             "example": "sx6wyHhbFdRXh302LLNR",
 296 |             "schema": {
 297 |               "type": "string"
 298 |             }
 299 |           }
 300 |         ],
 301 |         "requestBody": {
 302 |           "required": true,
 303 |           "content": {
 304 |             "application/json": {
 305 |               "schema": {
 306 |                 "$ref": "#/components/schemas/CreateTaskParams"
 307 |               }
 308 |             }
 309 |           }
 310 |         },
 311 |         "responses": {
 312 |           "201": {
 313 |             "description": "Successful response",
 314 |             "content": {
 315 |               "application/json": {
 316 |                 "schema": {
 317 |                   "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
 318 |                 }
 319 |               }
 320 |             }
 321 |           },
 322 |           "400": {
 323 |             "description": "Bad Request",
 324 |             "content": {
 325 |               "application/json": {
 326 |                 "schema": {
 327 |                   "$ref": "#/components/schemas/BadRequestDTO"
 328 |                 }
 329 |               }
 330 |             }
 331 |           },
 332 |           "401": {
 333 |             "description": "Unauthorized",
 334 |             "content": {
 335 |               "application/json": {
 336 |                 "schema": {
 337 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 338 |                 }
 339 |               }
 340 |             }
 341 |           },
 342 |           "422": {
 343 |             "description": "Unprocessable Entity",
 344 |             "content": {
 345 |               "application/json": {
 346 |                 "schema": {
 347 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 348 |                 }
 349 |               }
 350 |             }
 351 |           }
 352 |         },
 353 |         "tags": [
 354 |           "Tasks"
 355 |         ],
 356 |         "security": [
 357 |           {
 358 |             "bearer": []
 359 |           }
 360 |         ]
 361 |       }
 362 |     },
 363 |     "/contacts/{contactId}/tasks/{taskId}": {
 364 |       "get": {
 365 |         "operationId": "get-task",
 366 |         "summary": "Get Task",
 367 |         "description": "Get Task",
 368 |         "parameters": [
 369 |           {
 370 |             "name": "Authorization",
 371 |             "in": "header",
 372 |             "description": "Access Token",
 373 |             "required": true,
 374 |             "schema": {
 375 |               "type": "string",
 376 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 377 |             }
 378 |           },
 379 |           {
 380 |             "name": "Version",
 381 |             "in": "header",
 382 |             "description": "API Version",
 383 |             "required": true,
 384 |             "schema": {
 385 |               "type": "string",
 386 |               "enum": [
 387 |                 "2021-07-28"
 388 |               ]
 389 |             }
 390 |           },
 391 |           {
 392 |             "name": "contactId",
 393 |             "required": true,
 394 |             "in": "path",
 395 |             "description": "Contact Id",
 396 |             "example": "sx6wyHhbFdRXh302LLNR",
 397 |             "schema": {
 398 |               "type": "string"
 399 |             }
 400 |           },
 401 |           {
 402 |             "name": "taskId",
 403 |             "required": true,
 404 |             "in": "path",
 405 |             "description": "Task Id",
 406 |             "example": "ocQHyuzHvysMo5N5VsXc",
 407 |             "schema": {
 408 |               "type": "string"
 409 |             }
 410 |           }
 411 |         ],
 412 |         "responses": {
 413 |           "200": {
 414 |             "description": "Successful response",
 415 |             "content": {
 416 |               "application/json": {
 417 |                 "schema": {
 418 |                   "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
 419 |                 }
 420 |               }
 421 |             }
 422 |           },
 423 |           "400": {
 424 |             "description": "Bad Request",
 425 |             "content": {
 426 |               "application/json": {
 427 |                 "schema": {
 428 |                   "$ref": "#/components/schemas/BadRequestDTO"
 429 |                 }
 430 |               }
 431 |             }
 432 |           },
 433 |           "401": {
 434 |             "description": "Unauthorized",
 435 |             "content": {
 436 |               "application/json": {
 437 |                 "schema": {
 438 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 439 |                 }
 440 |               }
 441 |             }
 442 |           }
 443 |         },
 444 |         "tags": [
 445 |           "Tasks"
 446 |         ],
 447 |         "security": [
 448 |           {
 449 |             "bearer": []
 450 |           }
 451 |         ]
 452 |       },
 453 |       "put": {
 454 |         "operationId": "update-task",
 455 |         "summary": "Update Task",
 456 |         "description": "Update Task",
 457 |         "parameters": [
 458 |           {
 459 |             "name": "Authorization",
 460 |             "in": "header",
 461 |             "description": "Access Token",
 462 |             "required": true,
 463 |             "schema": {
 464 |               "type": "string",
 465 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 466 |             }
 467 |           },
 468 |           {
 469 |             "name": "Version",
 470 |             "in": "header",
 471 |             "description": "API Version",
 472 |             "required": true,
 473 |             "schema": {
 474 |               "type": "string",
 475 |               "enum": [
 476 |                 "2021-07-28"
 477 |               ]
 478 |             }
 479 |           },
 480 |           {
 481 |             "name": "contactId",
 482 |             "required": true,
 483 |             "in": "path",
 484 |             "description": "Contact Id",
 485 |             "example": "sx6wyHhbFdRXh302LLNR",
 486 |             "schema": {
 487 |               "type": "string"
 488 |             }
 489 |           },
 490 |           {
 491 |             "name": "taskId",
 492 |             "required": true,
 493 |             "in": "path",
 494 |             "description": "Task Id",
 495 |             "example": "ocQHyuzHvysMo5N5VsXc",
 496 |             "schema": {
 497 |               "type": "string"
 498 |             }
 499 |           }
 500 |         ],
 501 |         "requestBody": {
 502 |           "required": true,
 503 |           "content": {
 504 |             "application/json": {
 505 |               "schema": {
 506 |                 "$ref": "#/components/schemas/UpdateTaskBody"
 507 |               }
 508 |             }
 509 |           }
 510 |         },
 511 |         "responses": {
 512 |           "200": {
 513 |             "description": "Successful response",
 514 |             "content": {
 515 |               "application/json": {
 516 |                 "schema": {
 517 |                   "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
 518 |                 }
 519 |               }
 520 |             }
 521 |           },
 522 |           "400": {
 523 |             "description": "Bad Request",
 524 |             "content": {
 525 |               "application/json": {
 526 |                 "schema": {
 527 |                   "$ref": "#/components/schemas/BadRequestDTO"
 528 |                 }
 529 |               }
 530 |             }
 531 |           },
 532 |           "401": {
 533 |             "description": "Unauthorized",
 534 |             "content": {
 535 |               "application/json": {
 536 |                 "schema": {
 537 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 538 |                 }
 539 |               }
 540 |             }
 541 |           },
 542 |           "422": {
 543 |             "description": "Unprocessable Entity",
 544 |             "content": {
 545 |               "application/json": {
 546 |                 "schema": {
 547 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 548 |                 }
 549 |               }
 550 |             }
 551 |           }
 552 |         },
 553 |         "tags": [
 554 |           "Tasks"
 555 |         ],
 556 |         "security": [
 557 |           {
 558 |             "bearer": []
 559 |           }
 560 |         ]
 561 |       },
 562 |       "delete": {
 563 |         "operationId": "delete-task",
 564 |         "summary": "Delete Task",
 565 |         "description": "Delete Task",
 566 |         "parameters": [
 567 |           {
 568 |             "name": "Authorization",
 569 |             "in": "header",
 570 |             "description": "Access Token",
 571 |             "required": true,
 572 |             "schema": {
 573 |               "type": "string",
 574 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 575 |             }
 576 |           },
 577 |           {
 578 |             "name": "Version",
 579 |             "in": "header",
 580 |             "description": "API Version",
 581 |             "required": true,
 582 |             "schema": {
 583 |               "type": "string",
 584 |               "enum": [
 585 |                 "2021-07-28"
 586 |               ]
 587 |             }
 588 |           },
 589 |           {
 590 |             "name": "contactId",
 591 |             "required": true,
 592 |             "in": "path",
 593 |             "description": "Contact Id",
 594 |             "example": "sx6wyHhbFdRXh302LLNR",
 595 |             "schema": {
 596 |               "type": "string"
 597 |             }
 598 |           },
 599 |           {
 600 |             "name": "taskId",
 601 |             "required": true,
 602 |             "in": "path",
 603 |             "description": "Task Id",
 604 |             "example": "ocQHyuzHvysMo5N5VsXc",
 605 |             "schema": {
 606 |               "type": "string"
 607 |             }
 608 |           }
 609 |         ],
 610 |         "responses": {
 611 |           "200": {
 612 |             "description": "Successful response",
 613 |             "content": {
 614 |               "application/json": {
 615 |                 "schema": {
 616 |                   "$ref": "#/components/schemas/DeleteTaskSuccessfulResponseDto"
 617 |                 }
 618 |               }
 619 |             }
 620 |           },
 621 |           "400": {
 622 |             "description": "Bad Request",
 623 |             "content": {
 624 |               "application/json": {
 625 |                 "schema": {
 626 |                   "$ref": "#/components/schemas/BadRequestDTO"
 627 |                 }
 628 |               }
 629 |             }
 630 |           },
 631 |           "401": {
 632 |             "description": "Unauthorized",
 633 |             "content": {
 634 |               "application/json": {
 635 |                 "schema": {
 636 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 637 |                 }
 638 |               }
 639 |             }
 640 |           }
 641 |         },
 642 |         "tags": [
 643 |           "Tasks"
 644 |         ],
 645 |         "security": [
 646 |           {
 647 |             "bearer": []
 648 |           }
 649 |         ]
 650 |       }
 651 |     },
 652 |     "/contacts/{contactId}/tasks/{taskId}/completed": {
 653 |       "put": {
 654 |         "operationId": "update-task-completed",
 655 |         "summary": "Update Task Completed",
 656 |         "description": "Update Task Completed",
 657 |         "parameters": [
 658 |           {
 659 |             "name": "Authorization",
 660 |             "in": "header",
 661 |             "description": "Access Token",
 662 |             "required": true,
 663 |             "schema": {
 664 |               "type": "string",
 665 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 666 |             }
 667 |           },
 668 |           {
 669 |             "name": "Version",
 670 |             "in": "header",
 671 |             "description": "API Version",
 672 |             "required": true,
 673 |             "schema": {
 674 |               "type": "string",
 675 |               "enum": [
 676 |                 "2021-07-28"
 677 |               ]
 678 |             }
 679 |           },
 680 |           {
 681 |             "name": "contactId",
 682 |             "required": true,
 683 |             "in": "path",
 684 |             "description": "Contact Id",
 685 |             "example": "sx6wyHhbFdRXh302LLNR",
 686 |             "schema": {
 687 |               "type": "string"
 688 |             }
 689 |           },
 690 |           {
 691 |             "name": "taskId",
 692 |             "required": true,
 693 |             "in": "path",
 694 |             "description": "Task Id",
 695 |             "example": "ocQHyuzHvysMo5N5VsXc",
 696 |             "schema": {
 697 |               "type": "string"
 698 |             }
 699 |           }
 700 |         ],
 701 |         "requestBody": {
 702 |           "required": true,
 703 |           "content": {
 704 |             "application/json": {
 705 |               "schema": {
 706 |                 "$ref": "#/components/schemas/UpdateTaskStatusParams"
 707 |               }
 708 |             }
 709 |           }
 710 |         },
 711 |         "responses": {
 712 |           "200": {
 713 |             "description": "Successful response",
 714 |             "content": {
 715 |               "application/json": {
 716 |                 "schema": {
 717 |                   "$ref": "#/components/schemas/TaskByIsSuccessfulResponseDto"
 718 |                 }
 719 |               }
 720 |             }
 721 |           },
 722 |           "400": {
 723 |             "description": "Bad Request",
 724 |             "content": {
 725 |               "application/json": {
 726 |                 "schema": {
 727 |                   "$ref": "#/components/schemas/BadRequestDTO"
 728 |                 }
 729 |               }
 730 |             }
 731 |           },
 732 |           "401": {
 733 |             "description": "Unauthorized",
 734 |             "content": {
 735 |               "application/json": {
 736 |                 "schema": {
 737 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 738 |                 }
 739 |               }
 740 |             }
 741 |           },
 742 |           "422": {
 743 |             "description": "Unprocessable Entity",
 744 |             "content": {
 745 |               "application/json": {
 746 |                 "schema": {
 747 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 748 |                 }
 749 |               }
 750 |             }
 751 |           }
 752 |         },
 753 |         "tags": [
 754 |           "Tasks"
 755 |         ],
 756 |         "security": [
 757 |           {
 758 |             "bearer": []
 759 |           }
 760 |         ]
 761 |       }
 762 |     },
 763 |     "/contacts/{contactId}/appointments": {
 764 |       "get": {
 765 |         "operationId": "get-appointments-for-contact",
 766 |         "summary": "Get Appointments for Contact",
 767 |         "description": "Get Appointments for Contact",
 768 |         "parameters": [
 769 |           {
 770 |             "name": "Authorization",
 771 |             "in": "header",
 772 |             "description": "Access Token",
 773 |             "required": true,
 774 |             "schema": {
 775 |               "type": "string",
 776 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 777 |             }
 778 |           },
 779 |           {
 780 |             "name": "Version",
 781 |             "in": "header",
 782 |             "description": "API Version",
 783 |             "required": true,
 784 |             "schema": {
 785 |               "type": "string",
 786 |               "enum": [
 787 |                 "2021-07-28"
 788 |               ]
 789 |             }
 790 |           },
 791 |           {
 792 |             "name": "contactId",
 793 |             "required": true,
 794 |             "in": "path",
 795 |             "description": "Contact Id",
 796 |             "example": "sx6wyHhbFdRXh302LLNR",
 797 |             "schema": {
 798 |               "type": "string"
 799 |             }
 800 |           }
 801 |         ],
 802 |         "responses": {
 803 |           "200": {
 804 |             "description": "Successful response",
 805 |             "content": {
 806 |               "application/json": {
 807 |                 "schema": {
 808 |                   "$ref": "#/components/schemas/GetEventsSuccessfulResponseDto"
 809 |                 }
 810 |               }
 811 |             }
 812 |           },
 813 |           "400": {
 814 |             "description": "Bad Request",
 815 |             "content": {
 816 |               "application/json": {
 817 |                 "schema": {
 818 |                   "$ref": "#/components/schemas/BadRequestDTO"
 819 |                 }
 820 |               }
 821 |             }
 822 |           },
 823 |           "401": {
 824 |             "description": "Unauthorized",
 825 |             "content": {
 826 |               "application/json": {
 827 |                 "schema": {
 828 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 829 |                 }
 830 |               }
 831 |             }
 832 |           },
 833 |           "422": {
 834 |             "description": "Unprocessable Entity",
 835 |             "content": {
 836 |               "application/json": {
 837 |                 "schema": {
 838 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 839 |                 }
 840 |               }
 841 |             }
 842 |           }
 843 |         },
 844 |         "tags": [
 845 |           "Appointments"
 846 |         ],
 847 |         "security": [
 848 |           {
 849 |             "bearer": []
 850 |           }
 851 |         ]
 852 |       }
 853 |     },
 854 |     "/contacts/{contactId}/tags": {
 855 |       "post": {
 856 |         "operationId": "add-tags",
 857 |         "summary": "Add Tags",
 858 |         "description": "Add Tags",
 859 |         "parameters": [
 860 |           {
 861 |             "name": "Authorization",
 862 |             "in": "header",
 863 |             "description": "Access Token",
 864 |             "required": true,
 865 |             "schema": {
 866 |               "type": "string",
 867 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 868 |             }
 869 |           },
 870 |           {
 871 |             "name": "Version",
 872 |             "in": "header",
 873 |             "description": "API Version",
 874 |             "required": true,
 875 |             "schema": {
 876 |               "type": "string",
 877 |               "enum": [
 878 |                 "2021-07-28"
 879 |               ]
 880 |             }
 881 |           },
 882 |           {
 883 |             "name": "contactId",
 884 |             "required": true,
 885 |             "in": "path",
 886 |             "description": "Contact Id",
 887 |             "example": "sx6wyHhbFdRXh302LLNR",
 888 |             "schema": {
 889 |               "type": "string"
 890 |             }
 891 |           }
 892 |         ],
 893 |         "requestBody": {
 894 |           "required": true,
 895 |           "content": {
 896 |             "application/json": {
 897 |               "schema": {
 898 |                 "$ref": "#/components/schemas/TagsDTO"
 899 |               }
 900 |             }
 901 |           }
 902 |         },
 903 |         "responses": {
 904 |           "201": {
 905 |             "description": "Successful response",
 906 |             "content": {
 907 |               "application/json": {
 908 |                 "schema": {
 909 |                   "$ref": "#/components/schemas/CreateAddTagSuccessfulResponseDto"
 910 |                 }
 911 |               }
 912 |             }
 913 |           },
 914 |           "400": {
 915 |             "description": "Bad Request",
 916 |             "content": {
 917 |               "application/json": {
 918 |                 "schema": {
 919 |                   "$ref": "#/components/schemas/BadRequestDTO"
 920 |                 }
 921 |               }
 922 |             }
 923 |           },
 924 |           "401": {
 925 |             "description": "Unauthorized",
 926 |             "content": {
 927 |               "application/json": {
 928 |                 "schema": {
 929 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 930 |                 }
 931 |               }
 932 |             }
 933 |           },
 934 |           "422": {
 935 |             "description": "Unprocessable Entity",
 936 |             "content": {
 937 |               "application/json": {
 938 |                 "schema": {
 939 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 940 |                 }
 941 |               }
 942 |             }
 943 |           }
 944 |         },
 945 |         "tags": [
 946 |           "Tags"
 947 |         ],
 948 |         "security": [
 949 |           {
 950 |             "bearer": []
 951 |           }
 952 |         ]
 953 |       },
 954 |       "delete": {
 955 |         "operationId": "remove-tags",
 956 |         "summary": "Remove Tags",
 957 |         "description": "Remove Tags",
 958 |         "parameters": [
 959 |           {
 960 |             "name": "Authorization",
 961 |             "in": "header",
 962 |             "description": "Access Token",
 963 |             "required": true,
 964 |             "schema": {
 965 |               "type": "string",
 966 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 967 |             }
 968 |           },
 969 |           {
 970 |             "name": "Version",
 971 |             "in": "header",
 972 |             "description": "API Version",
 973 |             "required": true,
 974 |             "schema": {
 975 |               "type": "string",
 976 |               "enum": [
 977 |                 "2021-07-28"
 978 |               ]
 979 |             }
 980 |           },
 981 |           {
 982 |             "name": "contactId",
 983 |             "required": true,
 984 |             "in": "path",
 985 |             "description": "Contact Id",
 986 |             "example": "sx6wyHhbFdRXh302LLNR",
 987 |             "schema": {
 988 |               "type": "string"
 989 |             }
 990 |           }
 991 |         ],
 992 |         "requestBody": {
 993 |           "required": true,
 994 |           "content": {
 995 |             "application/json": {
 996 |               "schema": {
 997 |                 "$ref": "#/components/schemas/TagsDTO"
 998 |               }
 999 |             }
1000 |           }
1001 |         },
1002 |         "responses": {
1003 |           "200": {
1004 |             "description": "Successful response",
1005 |             "content": {
1006 |               "application/json": {
1007 |                 "schema": {
1008 |                   "$ref": "#/components/schemas/CreateDeleteTagSuccessfulResponseDto"
1009 |                 }
1010 |               }
1011 |             }
1012 |           },
1013 |           "400": {
1014 |             "description": "Bad Request",
1015 |             "content": {
1016 |               "application/json": {
1017 |                 "schema": {
1018 |                   "$ref": "#/components/schemas/BadRequestDTO"
1019 |                 }
1020 |               }
1021 |             }
1022 |           },
1023 |           "401": {
1024 |             "description": "Unauthorized",
1025 |             "content": {
1026 |               "application/json": {
1027 |                 "schema": {
1028 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1029 |                 }
1030 |               }
1031 |             }
1032 |           },
1033 |           "422": {
1034 |             "description": "Unprocessable Entity",
1035 |             "content": {
1036 |               "application/json": {
1037 |                 "schema": {
1038 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1039 |                 }
1040 |               }
1041 |             }
1042 |           }
1043 |         },
1044 |         "tags": [
1045 |           "Tags"
1046 |         ],
1047 |         "security": [
1048 |           {
1049 |             "bearer": []
1050 |           }
1051 |         ]
1052 |       }
1053 |     },
1054 |     "/contacts/{contactId}/notes": {
1055 |       "get": {
1056 |         "operationId": "get-all-notes",
1057 |         "summary": "Get All Notes",
1058 |         "description": "Get All Notes",
1059 |         "parameters": [
1060 |           {
1061 |             "name": "Authorization",
1062 |             "in": "header",
1063 |             "description": "Access Token",
1064 |             "required": true,
1065 |             "schema": {
1066 |               "type": "string",
1067 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1068 |             }
1069 |           },
1070 |           {
1071 |             "name": "Version",
1072 |             "in": "header",
1073 |             "description": "API Version",
1074 |             "required": true,
1075 |             "schema": {
1076 |               "type": "string",
1077 |               "enum": [
1078 |                 "2021-07-28"
1079 |               ]
1080 |             }
1081 |           },
1082 |           {
1083 |             "name": "contactId",
1084 |             "required": true,
1085 |             "in": "path",
1086 |             "description": "Contact Id",
1087 |             "example": "sx6wyHhbFdRXh302LLNR",
1088 |             "schema": {
1089 |               "type": "string"
1090 |             }
1091 |           }
1092 |         ],
1093 |         "responses": {
1094 |           "200": {
1095 |             "description": "Successful response",
1096 |             "content": {
1097 |               "application/json": {
1098 |                 "schema": {
1099 |                   "$ref": "#/components/schemas/GetNotesListSuccessfulResponseDto"
1100 |                 }
1101 |               }
1102 |             }
1103 |           },
1104 |           "400": {
1105 |             "description": "Bad Request",
1106 |             "content": {
1107 |               "application/json": {
1108 |                 "schema": {
1109 |                   "$ref": "#/components/schemas/BadRequestDTO"
1110 |                 }
1111 |               }
1112 |             }
1113 |           },
1114 |           "401": {
1115 |             "description": "Unauthorized",
1116 |             "content": {
1117 |               "application/json": {
1118 |                 "schema": {
1119 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1120 |                 }
1121 |               }
1122 |             }
1123 |           }
1124 |         },
1125 |         "tags": [
1126 |           "Notes"
1127 |         ],
1128 |         "security": [
1129 |           {
1130 |             "bearer": []
1131 |           }
1132 |         ]
1133 |       },
1134 |       "post": {
1135 |         "operationId": "create-note",
1136 |         "summary": "Create Note",
1137 |         "description": "Create Note",
1138 |         "parameters": [
1139 |           {
1140 |             "name": "Authorization",
1141 |             "in": "header",
1142 |             "description": "Access Token",
1143 |             "required": true,
1144 |             "schema": {
1145 |               "type": "string",
1146 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1147 |             }
1148 |           },
1149 |           {
1150 |             "name": "Version",
1151 |             "in": "header",
1152 |             "description": "API Version",
1153 |             "required": true,
1154 |             "schema": {
1155 |               "type": "string",
1156 |               "enum": [
1157 |                 "2021-07-28"
1158 |               ]
1159 |             }
1160 |           },
1161 |           {
1162 |             "name": "contactId",
1163 |             "required": true,
1164 |             "in": "path",
1165 |             "description": "Contact Id",
1166 |             "example": "sx6wyHhbFdRXh302LLNR",
1167 |             "schema": {
1168 |               "type": "string"
1169 |             }
1170 |           }
1171 |         ],
1172 |         "requestBody": {
1173 |           "required": true,
1174 |           "content": {
1175 |             "application/json": {
1176 |               "schema": {
1177 |                 "$ref": "#/components/schemas/NotesDTO"
1178 |               }
1179 |             }
1180 |           }
1181 |         },
1182 |         "responses": {
1183 |           "201": {
1184 |             "description": "Successful response",
1185 |             "content": {
1186 |               "application/json": {
1187 |                 "schema": {
1188 |                   "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
1189 |                 }
1190 |               }
1191 |             }
1192 |           },
1193 |           "400": {
1194 |             "description": "Bad Request",
1195 |             "content": {
1196 |               "application/json": {
1197 |                 "schema": {
1198 |                   "$ref": "#/components/schemas/BadRequestDTO"
1199 |                 }
1200 |               }
1201 |             }
1202 |           },
1203 |           "401": {
1204 |             "description": "Unauthorized",
1205 |             "content": {
1206 |               "application/json": {
1207 |                 "schema": {
1208 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1209 |                 }
1210 |               }
1211 |             }
1212 |           },
1213 |           "422": {
1214 |             "description": "Unprocessable Entity",
1215 |             "content": {
1216 |               "application/json": {
1217 |                 "schema": {
1218 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1219 |                 }
1220 |               }
1221 |             }
1222 |           }
1223 |         },
1224 |         "tags": [
1225 |           "Notes"
1226 |         ],
1227 |         "security": [
1228 |           {
1229 |             "bearer": []
1230 |           }
1231 |         ]
1232 |       }
1233 |     },
1234 |     "/contacts/{contactId}/notes/{id}": {
1235 |       "get": {
1236 |         "operationId": "get-note",
1237 |         "summary": "Get Note",
1238 |         "description": "Get Note",
1239 |         "parameters": [
1240 |           {
1241 |             "name": "Authorization",
1242 |             "in": "header",
1243 |             "description": "Access Token",
1244 |             "required": true,
1245 |             "schema": {
1246 |               "type": "string",
1247 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1248 |             }
1249 |           },
1250 |           {
1251 |             "name": "Version",
1252 |             "in": "header",
1253 |             "description": "API Version",
1254 |             "required": true,
1255 |             "schema": {
1256 |               "type": "string",
1257 |               "enum": [
1258 |                 "2021-07-28"
1259 |               ]
1260 |             }
1261 |           },
1262 |           {
1263 |             "name": "contactId",
1264 |             "required": true,
1265 |             "in": "path",
1266 |             "description": "Contact Id",
1267 |             "example": "sx6wyHhbFdRXh302LLNR",
1268 |             "schema": {
1269 |               "type": "string"
1270 |             }
1271 |           },
1272 |           {
1273 |             "name": "id",
1274 |             "required": true,
1275 |             "in": "path",
1276 |             "description": "Note Id",
1277 |             "example": "ocQHyuzHvysMo5N5VsXc",
1278 |             "schema": {
1279 |               "type": "string"
1280 |             }
1281 |           }
1282 |         ],
1283 |         "responses": {
1284 |           "200": {
1285 |             "description": "Successful response",
1286 |             "content": {
1287 |               "application/json": {
1288 |                 "schema": {
1289 |                   "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
1290 |                 }
1291 |               }
1292 |             }
1293 |           },
1294 |           "400": {
1295 |             "description": "Bad Request",
1296 |             "content": {
1297 |               "application/json": {
1298 |                 "schema": {
1299 |                   "$ref": "#/components/schemas/BadRequestDTO"
1300 |                 }
1301 |               }
1302 |             }
1303 |           },
1304 |           "401": {
1305 |             "description": "Unauthorized",
1306 |             "content": {
1307 |               "application/json": {
1308 |                 "schema": {
1309 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1310 |                 }
1311 |               }
1312 |             }
1313 |           },
1314 |           "422": {
1315 |             "description": "Unprocessable Entity",
1316 |             "content": {
1317 |               "application/json": {
1318 |                 "schema": {
1319 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1320 |                 }
1321 |               }
1322 |             }
1323 |           }
1324 |         },
1325 |         "tags": [
1326 |           "Notes"
1327 |         ],
1328 |         "security": [
1329 |           {
1330 |             "bearer": []
1331 |           }
1332 |         ]
1333 |       },
1334 |       "put": {
1335 |         "operationId": "update-note",
1336 |         "summary": "Update Note",
1337 |         "description": "Update Note",
1338 |         "parameters": [
1339 |           {
1340 |             "name": "Authorization",
1341 |             "in": "header",
1342 |             "description": "Access Token",
1343 |             "required": true,
1344 |             "schema": {
1345 |               "type": "string",
1346 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1347 |             }
1348 |           },
1349 |           {
1350 |             "name": "Version",
1351 |             "in": "header",
1352 |             "description": "API Version",
1353 |             "required": true,
1354 |             "schema": {
1355 |               "type": "string",
1356 |               "enum": [
1357 |                 "2021-07-28"
1358 |               ]
1359 |             }
1360 |           },
1361 |           {
1362 |             "name": "contactId",
1363 |             "required": true,
1364 |             "in": "path",
1365 |             "description": "Contact Id",
1366 |             "example": "sx6wyHhbFdRXh302LLNR",
1367 |             "schema": {
1368 |               "type": "string"
1369 |             }
1370 |           },
1371 |           {
1372 |             "name": "id",
1373 |             "required": true,
1374 |             "in": "path",
1375 |             "description": "Note Id",
1376 |             "example": "ocQHyuzHvysMo5N5VsXc",
1377 |             "schema": {
1378 |               "type": "string"
1379 |             }
1380 |           }
1381 |         ],
1382 |         "requestBody": {
1383 |           "required": true,
1384 |           "content": {
1385 |             "application/json": {
1386 |               "schema": {
1387 |                 "$ref": "#/components/schemas/NotesDTO"
1388 |               }
1389 |             }
1390 |           }
1391 |         },
1392 |         "responses": {
1393 |           "200": {
1394 |             "description": "Successful response",
1395 |             "content": {
1396 |               "application/json": {
1397 |                 "schema": {
1398 |                   "$ref": "#/components/schemas/GetCreateUpdateNoteSuccessfulResponseDto"
1399 |                 }
1400 |               }
1401 |             }
1402 |           },
1403 |           "400": {
1404 |             "description": "Bad Request",
1405 |             "content": {
1406 |               "application/json": {
1407 |                 "schema": {
1408 |                   "$ref": "#/components/schemas/BadRequestDTO"
1409 |                 }
1410 |               }
1411 |             }
1412 |           },
1413 |           "401": {
1414 |             "description": "Unauthorized",
1415 |             "content": {
1416 |               "application/json": {
1417 |                 "schema": {
1418 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1419 |                 }
1420 |               }
1421 |             }
1422 |           },
1423 |           "422": {
1424 |             "description": "Unprocessable Entity",
1425 |             "content": {
1426 |               "application/json": {
1427 |                 "schema": {
1428 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1429 |                 }
1430 |               }
1431 |             }
1432 |           }
1433 |         },
1434 |         "tags": [
1435 |           "Notes"
1436 |         ],
1437 |         "security": [
1438 |           {
1439 |             "bearer": []
1440 |           }
1441 |         ]
1442 |       },
1443 |       "delete": {
1444 |         "operationId": "delete-note",
1445 |         "summary": "Delete Note",
1446 |         "description": "Delete Note",
1447 |         "parameters": [
1448 |           {
1449 |             "name": "Authorization",
1450 |             "in": "header",
1451 |             "description": "Access Token",
1452 |             "required": true,
1453 |             "schema": {
1454 |               "type": "string",
1455 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1456 |             }
1457 |           },
1458 |           {
1459 |             "name": "Version",
1460 |             "in": "header",
1461 |             "description": "API Version",
1462 |             "required": true,
1463 |             "schema": {
1464 |               "type": "string",
1465 |               "enum": [
1466 |                 "2021-07-28"
1467 |               ]
1468 |             }
1469 |           },
1470 |           {
1471 |             "name": "contactId",
1472 |             "required": true,
1473 |             "in": "path",
1474 |             "description": "Contact Id",
1475 |             "example": "sx6wyHhbFdRXh302LLNR",
1476 |             "schema": {
1477 |               "type": "string"
1478 |             }
1479 |           },
1480 |           {
1481 |             "name": "id",
1482 |             "required": true,
1483 |             "in": "path",
1484 |             "description": "Note Id",
1485 |             "example": "ocQHyuzHvysMo5N5VsXc",
1486 |             "schema": {
1487 |               "type": "string"
1488 |             }
1489 |           }
1490 |         ],
1491 |         "responses": {
1492 |           "200": {
1493 |             "description": "Successful response",
1494 |             "content": {
1495 |               "application/json": {
1496 |                 "schema": {
1497 |                   "$ref": "#/components/schemas/DeleteNoteSuccessfulResponseDto"
1498 |                 }
1499 |               }
1500 |             }
1501 |           },
1502 |           "400": {
1503 |             "description": "Bad Request",
1504 |             "content": {
1505 |               "application/json": {
1506 |                 "schema": {
1507 |                   "$ref": "#/components/schemas/BadRequestDTO"
1508 |                 }
1509 |               }
1510 |             }
1511 |           },
1512 |           "401": {
1513 |             "description": "Unauthorized",
1514 |             "content": {
1515 |               "application/json": {
1516 |                 "schema": {
1517 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1518 |                 }
1519 |               }
1520 |             }
1521 |           },
1522 |           "422": {
1523 |             "description": "Unprocessable Entity",
1524 |             "content": {
1525 |               "application/json": {
1526 |                 "schema": {
1527 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1528 |                 }
1529 |               }
1530 |             }
1531 |           }
1532 |         },
1533 |         "tags": [
1534 |           "Notes"
1535 |         ],
1536 |         "security": [
1537 |           {
1538 |             "bearer": []
1539 |           }
1540 |         ]
1541 |       }
1542 |     },
1543 |     "/contacts/bulk/tags/update/{type}": {
1544 |       "post": {
1545 |         "operationId": "create-association",
1546 |         "summary": "Update Contacts Tags",
1547 |         "description": "Allows you to update tags to multiple contacts at once, you can add or remove tags from the contacts",
1548 |         "parameters": [
1549 |           {
1550 |             "name": "Authorization",
1551 |             "in": "header",
1552 |             "description": "Access Token",
1553 |             "required": true,
1554 |             "schema": {
1555 |               "type": "string",
1556 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1557 |             }
1558 |           },
1559 |           {
1560 |             "name": "Version",
1561 |             "in": "header",
1562 |             "description": "API Version",
1563 |             "required": true,
1564 |             "schema": {
1565 |               "type": "string",
1566 |               "enum": [
1567 |                 "2021-07-28"
1568 |               ]
1569 |             }
1570 |           },
1571 |           {
1572 |             "name": "type",
1573 |             "required": true,
1574 |             "in": "path",
1575 |             "description": "Tags operation type",
1576 |             "example": "add",
1577 |             "schema": {
1578 |               "type": "string",
1579 |               "enum": [
1580 |                 "add",
1581 |                 "remove"
1582 |               ]
1583 |             }
1584 |           }
1585 |         ],
1586 |         "requestBody": {
1587 |           "required": true,
1588 |           "content": {
1589 |             "application/json": {
1590 |               "schema": {
1591 |                 "$ref": "#/components/schemas/UpdateTagsDTO"
1592 |               }
1593 |             }
1594 |           }
1595 |         },
1596 |         "responses": {
1597 |           "201": {
1598 |             "description": "Successful response",
1599 |             "content": {
1600 |               "application/json": {
1601 |                 "schema": {
1602 |                   "$ref": "#/components/schemas/UpdateTagsResponseDTO"
1603 |                 }
1604 |               }
1605 |             }
1606 |           },
1607 |           "422": {
1608 |             "description": "Unprocessable Entity",
1609 |             "content": {
1610 |               "application/json": {
1611 |                 "schema": {
1612 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1613 |                 }
1614 |               }
1615 |             }
1616 |           },
1617 |           "400": {
1618 |             "description": "Bad Request",
1619 |             "content": {
1620 |               "application/json": {
1621 |                 "schema": {
1622 |                   "$ref": "#/components/schemas/BadRequestDTO"
1623 |                 }
1624 |               }
1625 |             }
1626 |           }
1627 |         },
1628 |         "tags": [
1629 |           "Bulk"
1630 |         ],
1631 |         "security": [
1632 |           {
1633 |             "Location-Access": []
1634 |           }
1635 |         ]
1636 |       }
1637 |     },
1638 |     "/contacts/bulk/business": {
1639 |       "post": {
1640 |         "operationId": "add-remove-contact-from-business",
1641 |         "summary": "Add/Remove Contacts From Business",
1642 |         "description": "Add/Remove Contacts From Business",
1643 |         "parameters": [
1644 |           {
1645 |             "name": "Authorization",
1646 |             "in": "header",
1647 |             "description": "Access Token",
1648 |             "required": true,
1649 |             "schema": {
1650 |               "type": "string",
1651 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1652 |             }
1653 |           },
1654 |           {
1655 |             "name": "Version",
1656 |             "in": "header",
1657 |             "description": "API Version",
1658 |             "required": true,
1659 |             "schema": {
1660 |               "type": "string",
1661 |               "enum": [
1662 |                 "2021-07-28"
1663 |               ]
1664 |             }
1665 |           }
1666 |         ],
1667 |         "requestBody": {
1668 |           "required": true,
1669 |           "content": {
1670 |             "application/json": {
1671 |               "schema": {
1672 |                 "$ref": "#/components/schemas/ContactsBusinessUpdate"
1673 |               }
1674 |             }
1675 |           }
1676 |         },
1677 |         "responses": {
1678 |           "200": {
1679 |             "description": "Successful response",
1680 |             "content": {
1681 |               "application/json": {
1682 |                 "schema": {
1683 |                   "$ref": "#/components/schemas/ContactsBulkUpateResponse"
1684 |                 }
1685 |               }
1686 |             }
1687 |           },
1688 |           "422": {
1689 |             "description": "Unprocessable Entity",
1690 |             "content": {
1691 |               "application/json": {
1692 |                 "schema": {
1693 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1694 |                 }
1695 |               }
1696 |             }
1697 |           }
1698 |         },
1699 |         "tags": [
1700 |           "Bulk"
1701 |         ]
1702 |       }
1703 |     },
1704 |     "/contacts/{contactId}": {
1705 |       "get": {
1706 |         "operationId": "get-contact",
1707 |         "summary": "Get Contact",
1708 |         "description": "Get Contact",
1709 |         "parameters": [
1710 |           {
1711 |             "name": "Authorization",
1712 |             "in": "header",
1713 |             "description": "Access Token",
1714 |             "required": true,
1715 |             "schema": {
1716 |               "type": "string",
1717 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1718 |             }
1719 |           },
1720 |           {
1721 |             "name": "Version",
1722 |             "in": "header",
1723 |             "description": "API Version",
1724 |             "required": true,
1725 |             "schema": {
1726 |               "type": "string",
1727 |               "enum": [
1728 |                 "2021-07-28"
1729 |               ]
1730 |             }
1731 |           },
1732 |           {
1733 |             "name": "contactId",
1734 |             "required": true,
1735 |             "in": "path",
1736 |             "description": "Contact Id",
1737 |             "example": "ocQHyuzHvysMo5N5VsXc",
1738 |             "schema": {
1739 |               "type": "string"
1740 |             }
1741 |           }
1742 |         ],
1743 |         "responses": {
1744 |           "200": {
1745 |             "description": "Successful response",
1746 |             "content": {
1747 |               "application/json": {
1748 |                 "schema": {
1749 |                   "$ref": "#/components/schemas/ContactsByIdSuccessfulResponseDto"
1750 |                 }
1751 |               }
1752 |             }
1753 |           },
1754 |           "400": {
1755 |             "description": "Bad Request",
1756 |             "content": {
1757 |               "application/json": {
1758 |                 "schema": {
1759 |                   "$ref": "#/components/schemas/BadRequestDTO"
1760 |                 }
1761 |               }
1762 |             }
1763 |           },
1764 |           "401": {
1765 |             "description": "Unauthorized",
1766 |             "content": {
1767 |               "application/json": {
1768 |                 "schema": {
1769 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1770 |                 }
1771 |               }
1772 |             }
1773 |           },
1774 |           "422": {
1775 |             "description": "Unprocessable Entity",
1776 |             "content": {
1777 |               "application/json": {
1778 |                 "schema": {
1779 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1780 |                 }
1781 |               }
1782 |             }
1783 |           }
1784 |         },
1785 |         "tags": [
1786 |           "Contacts"
1787 |         ],
1788 |         "security": [
1789 |           {
1790 |             "bearer": []
1791 |           }
1792 |         ]
1793 |       },
1794 |       "put": {
1795 |         "operationId": "update-contact",
1796 |         "summary": "Update Contact",
1797 |         "description": "Please find the list of acceptable values for the `country` field  <a href=\"https://highlevel.stoplight.io/docs/integrations/ZG9jOjI4MzUzNDIy-country-list\" target=\"_blank\">here</a>",
1798 |         "parameters": [
1799 |           {
1800 |             "name": "Authorization",
1801 |             "in": "header",
1802 |             "description": "Access Token",
1803 |             "required": true,
1804 |             "schema": {
1805 |               "type": "string",
1806 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1807 |             }
1808 |           },
1809 |           {
1810 |             "name": "Version",
1811 |             "in": "header",
1812 |             "description": "API Version",
1813 |             "required": true,
1814 |             "schema": {
1815 |               "type": "string",
1816 |               "enum": [
1817 |                 "2021-07-28"
1818 |               ]
1819 |             }
1820 |           },
1821 |           {
1822 |             "name": "contactId",
1823 |             "required": true,
1824 |             "in": "path",
1825 |             "description": "Contact Id",
1826 |             "example": "ocQHyuzHvysMo5N5VsXc",
1827 |             "schema": {
1828 |               "type": "string"
1829 |             }
1830 |           }
1831 |         ],
1832 |         "requestBody": {
1833 |           "required": true,
1834 |           "content": {
1835 |             "application/json": {
1836 |               "schema": {
1837 |                 "$ref": "#/components/schemas/UpdateContactDto"
1838 |               }
1839 |             }
1840 |           }
1841 |         },
1842 |         "responses": {
1843 |           "200": {
1844 |             "description": "Successful response",
1845 |             "content": {
1846 |               "application/json": {
1847 |                 "schema": {
1848 |                   "$ref": "#/components/schemas/UpdateContactsSuccessfulResponseDto"
1849 |                 }
1850 |               }
1851 |             }
1852 |           },
1853 |           "400": {
1854 |             "description": "Bad Request",
1855 |             "content": {
1856 |               "application/json": {
1857 |                 "schema": {
1858 |                   "$ref": "#/components/schemas/BadRequestDTO"
1859 |                 }
1860 |               }
1861 |             }
1862 |           },
1863 |           "401": {
1864 |             "description": "Unauthorized",
1865 |             "content": {
1866 |               "application/json": {
1867 |                 "schema": {
1868 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1869 |                 }
1870 |               }
1871 |             }
1872 |           },
1873 |           "422": {
1874 |             "description": "Unprocessable Entity",
1875 |             "content": {
1876 |               "application/json": {
1877 |                 "schema": {
1878 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1879 |                 }
1880 |               }
1881 |             }
1882 |           }
1883 |         },
1884 |         "tags": [
1885 |           "Contacts"
1886 |         ],
1887 |         "security": [
1888 |           {
1889 |             "bearer": []
1890 |           }
1891 |         ]
1892 |       },
1893 |       "delete": {
1894 |         "operationId": "delete-contact",
1895 |         "summary": "Delete Contact",
1896 |         "description": "Delete Contact",
1897 |         "parameters": [
1898 |           {
1899 |             "name": "Authorization",
1900 |             "in": "header",
1901 |             "description": "Access Token",
1902 |             "required": true,
1903 |             "schema": {
1904 |               "type": "string",
1905 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1906 |             }
1907 |           },
1908 |           {
1909 |             "name": "Version",
1910 |             "in": "header",
1911 |             "description": "API Version",
1912 |             "required": true,
1913 |             "schema": {
1914 |               "type": "string",
1915 |               "enum": [
1916 |                 "2021-07-28"
1917 |               ]
1918 |             }
1919 |           },
1920 |           {
1921 |             "name": "contactId",
1922 |             "required": true,
1923 |             "in": "path",
1924 |             "description": "Contact Id",
1925 |             "example": "ocQHyuzHvysMo5N5VsXc",
1926 |             "schema": {
1927 |               "type": "string"
1928 |             }
1929 |           }
1930 |         ],
1931 |         "responses": {
1932 |           "200": {
1933 |             "description": "Successful response",
1934 |             "content": {
1935 |               "application/json": {
1936 |                 "schema": {
1937 |                   "$ref": "#/components/schemas/DeleteContactsSuccessfulResponseDto"
1938 |                 }
1939 |               }
1940 |             }
1941 |           },
1942 |           "400": {
1943 |             "description": "Bad Request",
1944 |             "content": {
1945 |               "application/json": {
1946 |                 "schema": {
1947 |                   "$ref": "#/components/schemas/BadRequestDTO"
1948 |                 }
1949 |               }
1950 |             }
1951 |           },
1952 |           "401": {
1953 |             "description": "Unauthorized",
1954 |             "content": {
1955 |               "application/json": {
1956 |                 "schema": {
1957 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1958 |                 }
1959 |               }
1960 |             }
1961 |           },
1962 |           "422": {
1963 |             "description": "Unprocessable Entity",
1964 |             "content": {
1965 |               "application/json": {
1966 |                 "schema": {
1967 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1968 |                 }
1969 |               }
1970 |             }
1971 |           }
1972 |         },
1973 |         "tags": [
1974 |           "Contacts"
1975 |         ],
1976 |         "security": [
1977 |           {
1978 |             "bearer": []
1979 |           }
1980 |         ]
1981 |       }
1982 |     },
1983 |     "/contacts/upsert": {
1984 |       "post": {
1985 |         "operationId": "upsert-contact",
1986 |         "summary": "Upsert Contact",
1987 |         "description": "Please find the list of acceptable values for the `country` field  <a href=\"https://highlevel.stoplight.io/docs/integrations/ZG9jOjI4MzUzNDIy-country-list\" target=\"_blank\">here</a><br><br>If `Allow Duplicate Contact` is disabled under Settings, the global unique identifier will be used for de-duplication. If the setting is enabled, a new contact will get created with the shared details.",
1988 |         "parameters": [
1989 |           {
1990 |             "name": "Authorization",
1991 |             "in": "header",
1992 |             "description": "Access Token",
1993 |             "required": true,
1994 |             "schema": {
1995 |               "type": "string",
1996 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1997 |             }
1998 |           },
1999 |           {
2000 |             "name": "Version",
2001 |             "in": "header",
2002 |             "description": "API Version",
2003 |             "required": true,
2004 |             "schema": {
2005 |               "type": "string",
2006 |               "enum": [
2007 |                 "2021-07-28"
2008 |               ]
2009 |             }
2010 |           }
2011 |         ],
2012 |         "requestBody": {
2013 |           "required": true,
2014 |           "content": {
2015 |             "application/json": {
2016 |               "schema": {
2017 |                 "$ref": "#/components/schemas/UpsertContactDto"
2018 |               }
2019 |             }
2020 |           }
2021 |         },
2022 |         "responses": {
2023 |           "200": {
2024 |             "description": "Successful response",
2025 |             "content": {
2026 |               "application/json": {
2027 |                 "schema": {
2028 |                   "$ref": "#/components/schemas/UpsertContactsSuccessfulResponseDto"
2029 |                 }
2030 |               }
2031 |             }
2032 |           },
2033 |           "400": {
2034 |             "description": "Bad Request",
2035 |             "content": {
2036 |               "application/json": {
2037 |                 "schema": {
2038 |                   "$ref": "#/components/schemas/BadRequestDTO"
2039 |                 }
2040 |               }
2041 |             }
2042 |           },
2043 |           "401": {
2044 |             "description": "Unauthorized",
2045 |             "content": {
2046 |               "application/json": {
2047 |                 "schema": {
2048 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2049 |                 }
2050 |               }
2051 |             }
2052 |           },
2053 |           "422": {
2054 |             "description": "Unprocessable Entity",
2055 |             "content": {
2056 |               "application/json": {
2057 |                 "schema": {
2058 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2059 |                 }
2060 |               }
2061 |             }
2062 |           }
2063 |         },
2064 |         "tags": [
2065 |           "Contacts"
2066 |         ],
2067 |         "security": [
2068 |           {
2069 |             "bearer": []
2070 |           }
2071 |         ]
2072 |       }
2073 |     },
2074 |     "/contacts/business/{businessId}": {
2075 |       "get": {
2076 |         "operationId": "get-contacts-by-businessId",
2077 |         "summary": "Get Contacts By BusinessId",
2078 |         "description": "Get Contacts By BusinessId",
2079 |         "parameters": [
2080 |           {
2081 |             "name": "Authorization",
2082 |             "in": "header",
2083 |             "description": "Access Token",
2084 |             "required": true,
2085 |             "schema": {
2086 |               "type": "string",
2087 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2088 |             }
2089 |           },
2090 |           {
2091 |             "name": "Version",
2092 |             "in": "header",
2093 |             "description": "API Version",
2094 |             "required": true,
2095 |             "schema": {
2096 |               "type": "string",
2097 |               "enum": [
2098 |                 "2021-07-28"
2099 |               ]
2100 |             }
2101 |           },
2102 |           {
2103 |             "name": "businessId",
2104 |             "required": true,
2105 |             "in": "path",
2106 |             "schema": {
2107 |               "type": "string"
2108 |             }
2109 |           },
2110 |           {
2111 |             "name": "limit",
2112 |             "required": false,
2113 |             "in": "query",
2114 |             "example": "10",
2115 |             "schema": {
2116 |               "default": "25",
2117 |               "type": "string"
2118 |             }
2119 |           },
2120 |           {
2121 |             "name": "locationId",
2122 |             "required": true,
2123 |             "in": "query",
2124 |             "example": "5DP4iH6HLkQsiKESj6rh",
2125 |             "schema": {
2126 |               "type": "string"
2127 |             }
2128 |           },
2129 |           {
2130 |             "name": "skip",
2131 |             "required": false,
2132 |             "in": "query",
2133 |             "example": "10",
2134 |             "schema": {
2135 |               "default": "0",
2136 |               "type": "string"
2137 |             }
2138 |           },
2139 |           {
2140 |             "name": "query",
2141 |             "required": false,
2142 |             "in": "query",
2143 |             "example": "contact name",
2144 |             "schema": {
2145 |               "type": "string"
2146 |             }
2147 |           }
2148 |         ],
2149 |         "responses": {
2150 |           "200": {
2151 |             "description": "Successful response",
2152 |             "content": {
2153 |               "application/json": {
2154 |                 "schema": {
2155 |                   "$ref": "#/components/schemas/ContactsSearchSuccessfulResponseDto"
2156 |                 }
2157 |               }
2158 |             }
2159 |           },
2160 |           "400": {
2161 |             "description": "Bad Request",
2162 |             "content": {
2163 |               "application/json": {
2164 |                 "schema": {
2165 |                   "$ref": "#/components/schemas/BadRequestDTO"
2166 |                 }
2167 |               }
2168 |             }
2169 |           },
2170 |           "401": {
2171 |             "description": "Unauthorized",
2172 |             "content": {
2173 |               "application/json": {
2174 |                 "schema": {
2175 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2176 |                 }
2177 |               }
2178 |             }
2179 |           },
2180 |           "422": {
2181 |             "description": "Unprocessable Entity",
2182 |             "content": {
2183 |               "application/json": {
2184 |                 "schema": {
2185 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2186 |                 }
2187 |               }
2188 |             }
2189 |           }
2190 |         },
2191 |         "tags": [
2192 |           "Contacts"
2193 |         ],
2194 |         "security": [
2195 |           {
2196 |             "bearer": []
2197 |           }
2198 |         ]
2199 |       }
2200 |     },
2201 |     "/contacts/{contactId}/followers": {
2202 |       "post": {
2203 |         "operationId": "add-followers-contact",
2204 |         "summary": "Add Followers",
2205 |         "description": "Add Followers",
2206 |         "parameters": [
2207 |           {
2208 |             "name": "Authorization",
2209 |             "in": "header",
2210 |             "description": "Access Token",
2211 |             "required": true,
2212 |             "schema": {
2213 |               "type": "string",
2214 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2215 |             }
2216 |           },
2217 |           {
2218 |             "name": "Version",
2219 |             "in": "header",
2220 |             "description": "API Version",
2221 |             "required": true,
2222 |             "schema": {
2223 |               "type": "string",
2224 |               "enum": [
2225 |                 "2021-07-28"
2226 |               ]
2227 |             }
2228 |           },
2229 |           {
2230 |             "name": "contactId",
2231 |             "required": true,
2232 |             "in": "path",
2233 |             "description": "Contact Id",
2234 |             "example": "sx6wyHhbFdRXh302Lunr",
2235 |             "schema": {
2236 |               "type": "string"
2237 |             }
2238 |           }
2239 |         ],
2240 |         "requestBody": {
2241 |           "required": true,
2242 |           "content": {
2243 |             "application/json": {
2244 |               "schema": {
2245 |                 "$ref": "#/components/schemas/FollowersDTO"
2246 |               }
2247 |             }
2248 |           }
2249 |         },
2250 |         "responses": {
2251 |           "201": {
2252 |             "description": "Successful response",
2253 |             "content": {
2254 |               "application/json": {
2255 |                 "schema": {
2256 |                   "$ref": "#/components/schemas/CreateAddFollowersSuccessfulResponseDto"
2257 |                 }
2258 |               }
2259 |             }
2260 |           },
2261 |           "400": {
2262 |             "description": "Bad Request",
2263 |             "content": {
2264 |               "application/json": {
2265 |                 "schema": {
2266 |                   "$ref": "#/components/schemas/BadRequestDTO"
2267 |                 }
2268 |               }
2269 |             }
2270 |           },
2271 |           "401": {
2272 |             "description": "Unauthorized",
2273 |             "content": {
2274 |               "application/json": {
2275 |                 "schema": {
2276 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2277 |                 }
2278 |               }
2279 |             }
2280 |           },
2281 |           "422": {
2282 |             "description": "Unprocessable Entity",
2283 |             "content": {
2284 |               "application/json": {
2285 |                 "schema": {
2286 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2287 |                 }
2288 |               }
2289 |             }
2290 |           }
2291 |         },
2292 |         "tags": [
2293 |           "Followers"
2294 |         ],
2295 |         "security": [
2296 |           {
2297 |             "bearer": []
2298 |           }
2299 |         ]
2300 |       },
2301 |       "delete": {
2302 |         "operationId": "remove-followers-contact",
2303 |         "summary": "Remove Followers",
2304 |         "description": "Remove Followers",
2305 |         "parameters": [
2306 |           {
2307 |             "name": "Authorization",
2308 |             "in": "header",
2309 |             "description": "Access Token",
2310 |             "required": true,
2311 |             "schema": {
2312 |               "type": "string",
2313 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2314 |             }
2315 |           },
2316 |           {
2317 |             "name": "Version",
2318 |             "in": "header",
2319 |             "description": "API Version",
2320 |             "required": true,
2321 |             "schema": {
2322 |               "type": "string",
2323 |               "enum": [
2324 |                 "2021-07-28"
2325 |               ]
2326 |             }
2327 |           },
2328 |           {
2329 |             "name": "contactId",
2330 |             "required": true,
2331 |             "in": "path",
2332 |             "description": "Contact Id",
2333 |             "example": "sx6wyHhbFdRXh302Lunr",
2334 |             "schema": {
2335 |               "type": "string"
2336 |             }
2337 |           }
2338 |         ],
2339 |         "requestBody": {
2340 |           "required": true,
2341 |           "content": {
2342 |             "application/json": {
2343 |               "schema": {
2344 |                 "$ref": "#/components/schemas/FollowersDTO"
2345 |               }
2346 |             }
2347 |           }
2348 |         },
2349 |         "responses": {
2350 |           "200": {
2351 |             "description": "Successful response",
2352 |             "content": {
2353 |               "application/json": {
2354 |                 "schema": {
2355 |                   "$ref": "#/components/schemas/DeleteFollowersSuccessfulResponseDto"
2356 |                 }
2357 |               }
2358 |             }
2359 |           },
2360 |           "400": {
2361 |             "description": "Bad Request",
2362 |             "content": {
2363 |               "application/json": {
2364 |                 "schema": {
2365 |                   "$ref": "#/components/schemas/BadRequestDTO"
2366 |                 }
2367 |               }
2368 |             }
2369 |           },
2370 |           "401": {
2371 |             "description": "Unauthorized",
2372 |             "content": {
2373 |               "application/json": {
2374 |                 "schema": {
2375 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2376 |                 }
2377 |               }
2378 |             }
2379 |           },
2380 |           "422": {
2381 |             "description": "Unprocessable Entity",
2382 |             "content": {
2383 |               "application/json": {
2384 |                 "schema": {
2385 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2386 |                 }
2387 |               }
2388 |             }
2389 |           }
2390 |         },
2391 |         "tags": [
2392 |           "Followers"
2393 |         ],
2394 |         "security": [
2395 |           {
2396 |             "bearer": []
2397 |           }
2398 |         ]
2399 |       }
2400 |     },
2401 |     "/contacts/{contactId}/campaigns/{campaignId}": {
2402 |       "post": {
2403 |         "operationId": "add-contact-to-campaign",
2404 |         "summary": "Add Contact to Campaign",
2405 |         "description": "Add contact to Campaign",
2406 |         "parameters": [
2407 |           {
2408 |             "name": "Authorization",
2409 |             "in": "header",
2410 |             "description": "Access Token",
2411 |             "required": true,
2412 |             "schema": {
2413 |               "type": "string",
2414 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2415 |             }
2416 |           },
2417 |           {
2418 |             "name": "Version",
2419 |             "in": "header",
2420 |             "description": "API Version",
2421 |             "required": true,
2422 |             "schema": {
2423 |               "type": "string",
2424 |               "enum": [
2425 |                 "2021-07-28"
2426 |               ]
2427 |             }
2428 |           },
2429 |           {
2430 |             "name": "contactId",
2431 |             "required": true,
2432 |             "in": "path",
2433 |             "description": "Contact Id",
2434 |             "example": "3bZD1nQzbul0MCancbQD",
2435 |             "schema": {
2436 |               "type": "string"
2437 |             }
2438 |           },
2439 |           {
2440 |             "name": "campaignId",
2441 |             "required": true,
2442 |             "in": "path",
2443 |             "description": "Campaigns Id",
2444 |             "example": "Y2I9XM7aO1hncuSOlc9L",
2445 |             "schema": {
2446 |               "type": "string"
2447 |             }
2448 |           }
2449 |         ],
2450 |         "requestBody": {
2451 |           "required": true,
2452 |           "content": {
2453 |             "application/json": {
2454 |               "schema": {
2455 |                 "$ref": "#/components/schemas/AddContactToCampaignDto"
2456 |               }
2457 |             }
2458 |           }
2459 |         },
2460 |         "responses": {
2461 |           "201": {
2462 |             "description": "Successful response",
2463 |             "content": {
2464 |               "application/json": {
2465 |                 "schema": {
2466 |                   "$ref": "#/components/schemas/CreateDeleteCantactsCampaignsSuccessfulResponseDto"
2467 |                 }
2468 |               }
2469 |             }
2470 |           },
2471 |           "400": {
2472 |             "description": "Bad Request",
2473 |             "content": {
2474 |               "application/json": {
2475 |                 "schema": {
2476 |                   "$ref": "#/components/schemas/BadRequestDTO"
2477 |                 }
2478 |               }
2479 |             }
2480 |           },
2481 |           "401": {
2482 |             "description": "Unauthorized",
2483 |             "content": {
2484 |               "application/json": {
2485 |                 "schema": {
2486 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2487 |                 }
2488 |               }
2489 |             }
2490 |           },
2491 |           "422": {
2492 |             "description": "Unprocessable Entity",
2493 |             "content": {
2494 |               "application/json": {
2495 |                 "schema": {
2496 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2497 |                 }
2498 |               }
2499 |             }
2500 |           }
2501 |         },
2502 |         "tags": [
2503 |           "Campaigns"
2504 |         ],
2505 |         "security": [
2506 |           {
2507 |             "bearer": []
2508 |           }
2509 |         ]
2510 |       },
2511 |       "delete": {
2512 |         "operationId": "remove-contact-from-campaign",
2513 |         "summary": "Remove Contact From Campaign",
2514 |         "description": "Remove Contact From Campaign",
2515 |         "parameters": [
2516 |           {
2517 |             "name": "Authorization",
2518 |             "in": "header",
2519 |             "description": "Access Token",
2520 |             "required": true,
2521 |             "schema": {
2522 |               "type": "string",
2523 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2524 |             }
2525 |           },
2526 |           {
2527 |             "name": "Version",
2528 |             "in": "header",
2529 |             "description": "API Version",
2530 |             "required": true,
2531 |             "schema": {
2532 |               "type": "string",
2533 |               "enum": [
2534 |                 "2021-07-28"
2535 |               ]
2536 |             }
2537 |           },
2538 |           {
2539 |             "name": "contactId",
2540 |             "required": true,
2541 |             "in": "path",
2542 |             "description": "Contact Id",
2543 |             "example": "3bZD1nQzbul0MCancbQD",
2544 |             "schema": {
2545 |               "type": "string"
2546 |             }
2547 |           },
2548 |           {
2549 |             "name": "campaignId",
2550 |             "required": true,
2551 |             "in": "path",
2552 |             "description": "Campaigns Id",
2553 |             "example": "Y2I9XM7aO1hncuSOlc9L",
2554 |             "schema": {
2555 |               "type": "string"
2556 |             }
2557 |           }
2558 |         ],
2559 |         "responses": {
2560 |           "200": {
2561 |             "description": "Successful response",
2562 |             "content": {
2563 |               "application/json": {
2564 |                 "schema": {
2565 |                   "$ref": "#/components/schemas/CreateDeleteCantactsCampaignsSuccessfulResponseDto"
2566 |                 }
2567 |               }
2568 |             }
2569 |           },
2570 |           "400": {
2571 |             "description": "Bad Request",
2572 |             "content": {
2573 |               "application/json": {
2574 |                 "schema": {
2575 |                   "$ref": "#/components/schemas/BadRequestDTO"
2576 |                 }
2577 |               }
2578 |             }
2579 |           },
2580 |           "401": {
2581 |             "description": "Unauthorized",
2582 |             "content": {
2583 |               "application/json": {
2584 |                 "schema": {
2585 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2586 |                 }
2587 |               }
2588 |             }
2589 |           },
2590 |           "422": {
2591 |             "description": "Unprocessable Entity",
2592 |             "content": {
2593 |               "application/json": {
2594 |                 "schema": {
2595 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2596 |                 }
2597 |               }
2598 |             }
2599 |           }
2600 |         },
2601 |         "tags": [
2602 |           "Campaigns"
2603 |         ],
2604 |         "security": [
2605 |           {
2606 |             "bearer": []
2607 |           }
2608 |         ]
2609 |       }
2610 |     },
2611 |     "/contacts/{contactId}/campaigns/removeAll": {
2612 |       "delete": {
2613 |         "operationId": "remove-contact-from-every-campaign",
2614 |         "summary": "Remove Contact From Every Campaign",
2615 |         "description": "Remove Contact From Every Campaign",
2616 |         "parameters": [
2617 |           {
2618 |             "name": "Authorization",
2619 |             "in": "header",
2620 |             "description": "Access Token",
2621 |             "required": true,
2622 |             "schema": {
2623 |               "type": "string",
2624 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2625 |             }
2626 |           },
2627 |           {
2628 |             "name": "Version",
2629 |             "in": "header",
2630 |             "description": "API Version",
2631 |             "required": true,
2632 |             "schema": {
2633 |               "type": "string",
2634 |               "enum": [
2635 |                 "2021-07-28"
2636 |               ]
2637 |             }
2638 |           },
2639 |           {
2640 |             "name": "contactId",
2641 |             "required": true,
2642 |             "in": "path",
2643 |             "description": "Contact Id",
2644 |             "example": "3bZD1nQzbul0MCancbQD",
2645 |             "schema": {
2646 |               "type": "string"
2647 |             }
2648 |           }
2649 |         ],
2650 |         "responses": {
2651 |           "200": {
2652 |             "description": "Successful response",
2653 |             "content": {
2654 |               "application/json": {
2655 |                 "schema": {
2656 |                   "$ref": "#/components/schemas/CreateDeleteCantactsCampaignsSuccessfulResponseDto"
2657 |                 }
2658 |               }
2659 |             }
2660 |           },
2661 |           "400": {
2662 |             "description": "Bad Request",
2663 |             "content": {
2664 |               "application/json": {
2665 |                 "schema": {
2666 |                   "$ref": "#/components/schemas/BadRequestDTO"
2667 |                 }
2668 |               }
2669 |             }
2670 |           },
2671 |           "401": {
2672 |             "description": "Unauthorized",
2673 |             "content": {
2674 |               "application/json": {
2675 |                 "schema": {
2676 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2677 |                 }
2678 |               }
2679 |             }
2680 |           },
2681 |           "422": {
2682 |             "description": "Unprocessable Entity",
2683 |             "content": {
2684 |               "application/json": {
2685 |                 "schema": {
2686 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2687 |                 }
2688 |               }
2689 |             }
2690 |           }
2691 |         },
2692 |         "tags": [
2693 |           "Campaigns"
2694 |         ],
2695 |         "security": [
2696 |           {
2697 |             "bearer": []
2698 |           }
2699 |         ]
2700 |       }
2701 |     },
2702 |     "/contacts/{contactId}/workflow/{workflowId}": {
2703 |       "post": {
2704 |         "operationId": "add-contact-to-workflow",
2705 |         "summary": "Add Contact to Workflow",
2706 |         "description": "Add Contact to Workflow",
2707 |         "parameters": [
2708 |           {
2709 |             "name": "Authorization",
2710 |             "in": "header",
2711 |             "description": "Access Token",
2712 |             "required": true,
2713 |             "schema": {
2714 |               "type": "string",
2715 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2716 |             }
2717 |           },
2718 |           {
2719 |             "name": "Version",
2720 |             "in": "header",
2721 |             "description": "API Version",
2722 |             "required": true,
2723 |             "schema": {
2724 |               "type": "string",
2725 |               "enum": [
2726 |                 "2021-07-28"
2727 |               ]
2728 |             }
2729 |           },
2730 |           {
2731 |             "name": "contactId",
2732 |             "required": true,
2733 |             "in": "path",
2734 |             "description": "Contact Id",
2735 |             "example": "sx6wyHhbFdRXh302LLNR",
2736 |             "schema": {
2737 |               "type": "string"
2738 |             }
2739 |           },
2740 |           {
2741 |             "name": "workflowId",
2742 |             "required": true,
2743 |             "in": "path",
2744 |             "description": "Workflow Id",
2745 |             "example": "sx6wyHhbFdRXh302LLNR",
2746 |             "schema": {
2747 |               "type": "string"
2748 |             }
2749 |           }
2750 |         ],
2751 |         "requestBody": {
2752 |           "required": true,
2753 |           "content": {
2754 |             "application/json": {
2755 |               "schema": {
2756 |                 "$ref": "#/components/schemas/CreateWorkflowDto"
2757 |               }
2758 |             }
2759 |           }
2760 |         },
2761 |         "responses": {
2762 |           "200": {
2763 |             "description": "Successful response",
2764 |             "content": {
2765 |               "application/json": {
2766 |                 "schema": {
2767 |                   "$ref": "#/components/schemas/ContactsWorkflowSuccessfulResponseDto"
2768 |                 }
2769 |               }
2770 |             }
2771 |           },
2772 |           "400": {
2773 |             "description": "Bad Request",
2774 |             "content": {
2775 |               "application/json": {
2776 |                 "schema": {
2777 |                   "$ref": "#/components/schemas/BadRequestDTO"
2778 |                 }
2779 |               }
2780 |             }
2781 |           },
2782 |           "401": {
2783 |             "description": "Unauthorized",
2784 |             "content": {
2785 |               "application/json": {
2786 |                 "schema": {
2787 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2788 |                 }
2789 |               }
2790 |             }
2791 |           },
2792 |           "422": {
2793 |             "description": "Unprocessable Entity",
2794 |             "content": {
2795 |               "application/json": {
2796 |                 "schema": {
2797 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2798 |                 }
2799 |               }
2800 |             }
2801 |           }
2802 |         },
2803 |         "tags": [
2804 |           "Workflow"
2805 |         ],
2806 |         "security": [
2807 |           {
2808 |             "bearer": []
2809 |           }
2810 |         ]
2811 |       },
2812 |       "delete": {
2813 |         "operationId": "delete-contact-to-workflow",
2814 |         "summary": "Delete Contact to Workflow",
2815 |         "description": "Delete Contact to Workflow",
2816 |         "parameters": [
2817 |           {
2818 |             "name": "Authorization",
2819 |             "in": "header",
2820 |             "description": "Access Token",
2821 |             "required": true,
2822 |             "schema": {
2823 |               "type": "string",
2824 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2825 |             }
2826 |           },
2827 |           {
2828 |             "name": "Version",
2829 |             "in": "header",
2830 |             "description": "API Version",
2831 |             "required": true,
2832 |             "schema": {
2833 |               "type": "string",
2834 |               "enum": [
2835 |                 "2021-07-28"
2836 |               ]
2837 |             }
2838 |           },
2839 |           {
2840 |             "name": "contactId",
2841 |             "required": true,
2842 |             "in": "path",
2843 |             "description": "Contact Id",
2844 |             "example": "sx6wyHhbFdRXh302LLNR",
2845 |             "schema": {
2846 |               "type": "string"
2847 |             }
2848 |           },
2849 |           {
2850 |             "name": "workflowId",
2851 |             "required": true,
2852 |             "in": "path",
2853 |             "description": "Workflow Id",
2854 |             "example": "sx6wyHhbFdRXh302LLNR",
2855 |             "schema": {
2856 |               "type": "string"
2857 |             }
2858 |           }
2859 |         ],
2860 |         "requestBody": {
2861 |           "required": true,
2862 |           "content": {
2863 |             "application/json": {
2864 |               "schema": {
2865 |                 "$ref": "#/components/schemas/CreateWorkflowDto"
2866 |               }
2867 |             }
2868 |           }
2869 |         },
2870 |         "responses": {
2871 |           "200": {
2872 |             "description": "Successful response",
2873 |             "content": {
2874 |               "application/json": {
2875 |                 "schema": {
2876 |                   "$ref": "#/components/schemas/ContactsWorkflowSuccessfulResponseDto"
2877 |                 }
2878 |               }
2879 |             }
2880 |           },
2881 |           "400": {
2882 |             "description": "Bad Request",
2883 |             "content": {
2884 |               "application/json": {
2885 |                 "schema": {
2886 |                   "$ref": "#/components/schemas/BadRequestDTO"
2887 |                 }
2888 |               }
2889 |             }
2890 |           },
2891 |           "401": {
2892 |             "description": "Unauthorized",
2893 |             "content": {
2894 |               "application/json": {
2895 |                 "schema": {
2896 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2897 |                 }
2898 |               }
2899 |             }
2900 |           },
2901 |           "422": {
2902 |             "description": "Unprocessable Entity",
2903 |             "content": {
2904 |               "application/json": {
2905 |                 "schema": {
2906 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2907 |                 }
2908 |               }
2909 |             }
2910 |           }
2911 |         },
2912 |         "tags": [
2913 |           "Workflow"
2914 |         ],
2915 |         "security": [
2916 |           {
2917 |             "bearer": []
2918 |           }
2919 |         ]
2920 |       }
2921 |     },
2922 |     "/contacts/": {
2923 |       "post": {
2924 |         "operationId": "create-contact",
2925 |         "summary": "Create Contact",
2926 |         "description": "Please find the list of acceptable values for the `country` field  <a href=\"https://highlevel.stoplight.io/docs/integrations/ZG9jOjI4MzUzNDIy-country-list\" target=\"_blank\">here</a>",
2927 |         "parameters": [
2928 |           {
2929 |             "name": "Authorization",
2930 |             "in": "header",
2931 |             "description": "Access Token",
2932 |             "required": true,
2933 |             "schema": {
2934 |               "type": "string",
2935 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2936 |             }
2937 |           },
2938 |           {
2939 |             "name": "Version",
2940 |             "in": "header",
2941 |             "description": "API Version",
2942 |             "required": true,
2943 |             "schema": {
2944 |               "type": "string",
2945 |               "enum": [
2946 |                 "2021-07-28"
2947 |               ]
2948 |             }
2949 |           }
2950 |         ],
2951 |         "requestBody": {
2952 |           "required": true,
2953 |           "content": {
2954 |             "application/json": {
2955 |               "schema": {
2956 |                 "$ref": "#/components/schemas/CreateContactDto"
2957 |               }
2958 |             }
2959 |           }
2960 |         },
2961 |         "responses": {
2962 |           "201": {
2963 |             "description": "Successful response",
2964 |             "content": {
2965 |               "application/json": {
2966 |                 "schema": {
2967 |                   "$ref": "#/components/schemas/CreateContactsSuccessfulResponseDto"
2968 |                 }
2969 |               }
2970 |             }
2971 |           },
2972 |           "400": {
2973 |             "description": "Bad Request",
2974 |             "content": {
2975 |               "application/json": {
2976 |                 "schema": {
2977 |                   "$ref": "#/components/schemas/BadRequestDTO"
2978 |                 }
2979 |               }
2980 |             }
2981 |           },
2982 |           "401": {
2983 |             "description": "Unauthorized",
2984 |             "content": {
2985 |               "application/json": {
2986 |                 "schema": {
2987 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2988 |                 }
2989 |               }
2990 |             }
2991 |           },
2992 |           "422": {
2993 |             "description": "Unprocessable Entity",
2994 |             "content": {
2995 |               "application/json": {
2996 |                 "schema": {
2997 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2998 |                 }
2999 |               }
3000 |             }
3001 |           }
3002 |         },
3003 |         "tags": [
3004 |           "Contacts"
3005 |         ],
3006 |         "security": [
3007 |           {
3008 |             "bearer": []
3009 |           }
3010 |         ]
3011 |       },
3012 |       "get": {
3013 |         "operationId": "get-contacts",
3014 |         "summary": "Get Contacts",
3015 |         "description": "Get Contacts\n\n **Note:** This API endpoint is deprecated. Please use the [Search Contacts](https://highlevel.stoplight.io/docs/integrations/dbe4f3a00a106-search-contacts) endpoint instead.",
3016 |         "deprecated": true,
3017 |         "parameters": [
3018 |           {
3019 |             "name": "Authorization",
3020 |             "in": "header",
3021 |             "description": "Access Token",
3022 |             "required": true,
3023 |             "schema": {
3024 |               "type": "string",
3025 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3026 |             }
3027 |           },
3028 |           {
3029 |             "name": "Version",
3030 |             "in": "header",
3031 |             "description": "API Version",
3032 |             "required": true,
3033 |             "schema": {
3034 |               "type": "string",
3035 |               "enum": [
3036 |                 "2021-07-28"
3037 |               ]
3038 |             }
3039 |           },
3040 |           {
3041 |             "name": "locationId",
3042 |             "required": true,
3043 |             "in": "query",
3044 |             "description": "Location Id",
3045 |             "example": "ve9EPM428h8vShlRW1KT",
3046 |             "schema": {
3047 |               "type": "string"
3048 |             }
3049 |           },
3050 |           {
3051 |             "name": "startAfterId",
3052 |             "required": false,
3053 |             "in": "query",
3054 |             "description": "Start After Id",
3055 |             "example": "UIaE1WjAwWKdlyD7osQI",
3056 |             "schema": {
3057 |               "type": "string"
3058 |             }
3059 |           },
3060 |           {
3061 |             "name": "startAfter",
3062 |             "required": false,
3063 |             "in": "query",
3064 |             "description": "Start Afte",
3065 |             "example": 1603870249758,
3066 |             "schema": {
3067 |               "type": "number"
3068 |             }
3069 |           },
3070 |           {
3071 |             "name": "query",
3072 |             "required": false,
3073 |             "in": "query",
3074 |             "description": "Contact Query",
3075 |             "example": "John",
3076 |             "schema": {
3077 |               "type": "string"
3078 |             }
3079 |           },
3080 |           {
3081 |             "name": "limit",
3082 |             "required": false,
3083 |             "in": "query",
3084 |             "example": 20,
3085 |             "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
3086 |             "schema": {
3087 |               "default": 20,
3088 |               "type": "number"
3089 |             }
3090 |           }
3091 |         ],
3092 |         "responses": {
3093 |           "200": {
3094 |             "description": "Successful response",
3095 |             "content": {
3096 |               "application/json": {
3097 |                 "schema": {
3098 |                   "$ref": "#/components/schemas/ContactsSearchSuccessfulResponseDto"
3099 |                 }
3100 |               }
3101 |             }
3102 |           },
3103 |           "400": {
3104 |             "description": "Bad Request",
3105 |             "content": {
3106 |               "application/json": {
3107 |                 "schema": {
3108 |                   "$ref": "#/components/schemas/BadRequestDTO"
3109 |                 }
3110 |               }
3111 |             }
3112 |           },
3113 |           "401": {
3114 |             "description": "Unauthorized",
3115 |             "content": {
3116 |               "application/json": {
3117 |                 "schema": {
3118 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3119 |                 }
3120 |               }
3121 |             }
3122 |           },
3123 |           "422": {
3124 |             "description": "Unprocessable Entity",
3125 |             "content": {
3126 |               "application/json": {
3127 |                 "schema": {
3128 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3129 |                 }
3130 |               }
3131 |             }
3132 |           }
3133 |         },
3134 |         "tags": [
3135 |           "Contacts"
3136 |         ],
3137 |         "security": [
3138 |           {
3139 |             "bearer": []
3140 |           }
3141 |         ]
3142 |       }
3143 |     }
3144 |   },
3145 |   "info": {
3146 |     "title": "Contacts API",
3147 |     "description": "Documentation for Contacts API",
3148 |     "version": "1.0",
3149 |     "contact": {}
3150 |   },
3151 |   "tags": [
3152 |     {
3153 |       "name": "Contacts",
3154 |       "description": "Documentation for Contacts API"
3155 |     },
3156 |     {
3157 |       "name": "Tasks",
3158 |       "description": "Documentation for Contacts API"
3159 |     },
3160 |     {
3161 |       "name": "Appointments",
3162 |       "description": "Documentation for Contacts API"
3163 |     },
3164 |     {
3165 |       "name": "Tags",
3166 |       "description": "Documentation for Contacts API"
3167 |     },
3168 |     {
3169 |       "name": "Notes",
3170 |       "description": "Documentation for Contacts API"
3171 |     },
3172 |     {
3173 |       "name": "Campaigns",
3174 |       "description": "Documentation for Contacts API"
3175 |     },
3176 |     {
3177 |       "name": "Workflow",
3178 |       "description": "Documentation for Contacts API"
3179 |     },
3180 |     {
3181 |       "name": "Bulk",
3182 |       "description": "Documentation for Contacts API"
3183 |     },
3184 |     {
3185 |       "name": "Search",
3186 |       "description": "Documentation for Contacts API"
3187 |     }
3188 |   ],
3189 |   "servers": [
3190 |     {
3191 |       "url": "https://services.leadconnectorhq.com"
3192 |     }
3193 |   ],
3194 |   "components": {
3195 |     "securitySchemes": {
3196 |       "bearer": {
3197 |         "scheme": "bearer",
3198 |         "bearerFormat": "JWT",
3199 |         "name": "Authorization",
3200 |         "in": "header",
3201 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
3202 |         "type": "http"
3203 |       },
3204 |       "Location-Access": {
3205 |         "scheme": "bearer",
3206 |         "bearerFormat": "JWT",
3207 |         "name": "Authorization",
3208 |         "in": "header",
3209 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
3210 |         "type": "http"
3211 |       },
3212 |       "Agency-Access": {
3213 |         "scheme": "bearer",
3214 |         "bearerFormat": "JWT",
3215 |         "name": "Authorization",
3216 |         "in": "header",
3217 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
3218 |         "type": "http"
3219 |       }
3220 |     },
3221 |     "schemas": {
3222 |       "BadRequestDTO": {
3223 |         "type": "object",
3224 |         "properties": {
3225 |           "statusCode": {
3226 |             "type": "number",
3227 |             "example": 400
3228 |           },
3229 |           "message": {
3230 |             "type": "string",
3231 |             "example": "Bad Request"
3232 |           }
3233 |         }
3234 |       },
3235 |       "UnauthorizedDTO": {
3236 |         "type": "object",
3237 |         "properties": {
3238 |           "statusCode": {
3239 |             "type": "number",
3240 |             "example": 401
3241 |           },
3242 |           "message": {
3243 |             "type": "string",
3244 |             "example": "Invalid token: access token is invalid"
3245 |           },
3246 |           "error": {
3247 |             "type": "string",
3248 |             "example": "Unauthorized"
3249 |           }
3250 |         }
3251 |       },
3252 |       "SearchBodyV2DTO": {
3253 |         "type": "object",
3254 |         "properties": {}
3255 |       },
3256 |       "ContactOpportunity": {
3257 |         "type": "object",
3258 |         "properties": {
3259 |           "id": {
3260 |             "type": "string",
3261 |             "example": "1a2b3c4d5e6f7g8h9i0j"
3262 |           },
3263 |           "pipeline_id": {
3264 |             "type": "string",
3265 |             "example": "pipeline123"
3266 |           },
3267 |           "pipeline_stage_id": {
3268 |             "type": "string",
3269 |             "example": "stage456"
3270 |           },
3271 |           "monetary_value": {
3272 |             "type": "number",
3273 |             "example": 10000
3274 |           },
3275 |           "status": {
3276 |             "type": "string",
3277 |             "example": "open"
3278 |           }
3279 |         },
3280 |         "required": [
3281 |           "id",
3282 |           "pipeline_id",
3283 |           "pipeline_stage_id",
3284 |           "monetary_value",
3285 |           "status"
3286 |         ]
3287 |       },
3288 |       "Contact": {
3289 |         "type": "object",
3290 |         "properties": {
3291 |           "id": {
3292 |             "type": "string",
3293 |             "example": "102goXVW3lIExEQPOnd3"
3294 |           },
3295 |           "phoneLabel": {
3296 |             "type": "string",
3297 |             "example": "Mobile"
3298 |           },
3299 |           "country": {
3300 |             "type": "string",
3301 |             "example": "United States"
3302 |           },
3303 |           "address": {
3304 |             "type": "string",
3305 |             "example": "123 Main Street"
3306 |           },
3307 |           "source": {
3308 |             "type": "string",
3309 |             "example": "Website"
3310 |           },
3311 |           "type": {
3312 |             "type": "string",
3313 |             "example": "lead"
3314 |           },
3315 |           "locationId": {
3316 |             "type": "string",
3317 |             "example": "502goXVW3lIExEQPOnd3"
3318 |           },
3319 |           "dnd": {
3320 |             "type": "boolean",
3321 |             "example": false
3322 |           },
3323 |           "state": {
3324 |             "type": "string",
3325 |             "example": "California"
3326 |           },
3327 |           "businessName": {
3328 |             "type": "string",
3329 |             "example": "Acme Corporation"
3330 |           },
3331 |           "customFields": {
3332 |             "type": "array",
3333 |             "items": {
3334 |               "$ref": "#/components/schemas/CustomFieldSchema"
3335 |             }
3336 |           },
3337 |           "tags": {
3338 |             "example": [
3339 |               "tag-1",
3340 |               "tag-2"
3341 |             ],
3342 |             "type": "array",
3343 |             "items": {
3344 |               "type": "string"
3345 |             }
3346 |           },
3347 |           "dateAdded": {
3348 |             "type": "string",
3349 |             "example": "2024-06-06T18:54:57.221Z"
3350 |           },
3351 |           "additionalEmails": {
3352 |             "example": [
3353 |               "john@example.com",
3354 |               "jane@example.com"
3355 |             ],
3356 |             "type": "array",
3357 |             "items": {
3358 |               "type": "string"
3359 |             }
3360 |           },
3361 |           "phone": {
3362 |             "type": "string",
3363 |             "example": "+123456789"
3364 |           },
3365 |           "companyName": {
3366 |             "type": "string",
3367 |             "example": "XYZ Corp"
3368 |           },
3369 |           "additionalPhones": {
3370 |             "example": [
3371 |               "123456789",
3372 |               "987654321"
3373 |             ],
3374 |             "type": "array",
3375 |             "items": {
3376 |               "type": "string"
3377 |             }
3378 |           },
3379 |           "dateUpdated": {
3380 |             "type": "string",
3381 |             "example": "2024-06-06T18:54:57.221Z"
3382 |           },
3383 |           "city": {
3384 |             "type": "string",
3385 |             "example": "New York"
3386 |           },
3387 |           "dateOfBirth": {
3388 |             "type": "string",
3389 |             "example": "1990-01-01"
3390 |           },
3391 |           "firstNameLowerCase": {
3392 |             "type": "string",
3393 |             "example": "john"
3394 |           },
3395 |           "lastNameLowerCase": {
3396 |             "type": "string",
3397 |             "example": "doe"
3398 |           },
3399 |           "email": {
3400 |             "type": "string",
3401 |             "example": "john@example.com"
3402 |           },
3403 |           "assignedTo": {
3404 |             "type": "string",
3405 |             "example": "182goXVW3lIExEQPOnd3"
3406 |           },
3407 |           "followers": {
3408 |             "example": [
3409 |               "682goXVW3lIExEQPOnd3",
3410 |               "582goXVW3lIExEQPOnd3"
3411 |             ],
3412 |             "type": "array",
3413 |             "items": {
3414 |               "type": "string"
3415 |             }
3416 |           },
3417 |           "validEmail": {
3418 |             "type": "boolean",
3419 |             "example": true
3420 |           },
3421 |           "dndSettings": {
3422 |             "$ref": "#/components/schemas/DndSettingsSchema"
3423 |           },
3424 |           "opportunities": {
3425 |             "type": "array",
3426 |             "items": {
3427 |               "$ref": "#/components/schemas/ContactOpportunity"
3428 |             }
3429 |           },
3430 |           "postalCode": {
3431 |             "type": "string",
3432 |             "example": "12345"
3433 |           },
3434 |           "businessId": {
3435 |             "type": "string",
3436 |             "example": "282goXVW3lIExEQPOnd3"
3437 |           },
3438 |           "searchAfter": {
3439 |             "example": [
3440 |               1234,
3441 |               "102goXVW3lIExEQPOnd3"
3442 |             ],
3443 |             "type": "array",
3444 |             "items": {
3445 |               "type": "string"
3446 |             }
3447 |           }
3448 |         }
3449 |       },
3450 |       "SearchContactSuccessResponseDto": {
3451 |         "type": "object",
3452 |         "properties": {
3453 |           "contacts": {
3454 |             "type": "array",
3455 |             "items": {
3456 |               "$ref": "#/components/schemas/Contact"
3457 |             }
3458 |           },
3459 |           "total": {
3460 |             "type": "number",
3461 |             "example": 120
3462 |           }
3463 |         },
3464 |         "required": [
3465 |           "contacts",
3466 |           "total"
3467 |         ]
3468 |       },
3469 |       "TaskSchema": {
3470 |         "type": "object",
3471 |         "properties": {
3472 |           "id": {
3473 |             "type": "string",
3474 |             "example": "lJpzYrWdpkC2hX6t2yue"
3475 |           },
3476 |           "title": {
3477 |             "type": "string",
3478 |             "example": "test"
3479 |           },
3480 |           "body": {
3481 |             "type": "string",
3482 |             "example": "testing"
3483 |           },
3484 |           "assignedTo": {
3485 |             "type": "string",
3486 |             "example": "tesTUcmRxWrjqzJS8EjkxNKting"
3487 |           },
3488 |           "dueDate": {
3489 |             "type": "string",
3490 |             "example": "2021-07-08T02:30:00.000Z"
3491 |           },
3492 |           "completed": {
3493 |             "type": "boolean",
3494 |             "example": true
3495 |           },
3496 |           "contactId": {
3497 |             "type": "string",
3498 |             "example": "lJpzYrWdpkC2hX6t2yue"
3499 |           }
3500 |         }
3501 |       },
3502 |       "TasksListSuccessfulResponseDto": {
3503 |         "type": "object",
3504 |         "properties": {
3505 |           "tasks": {
3506 |             "type": "array",
3507 |             "items": {
3508 |               "$ref": "#/components/schemas/TaskSchema"
3509 |             }
3510 |           }
3511 |         }
3512 |       },
3513 |       "TaskByIsSuccessfulResponseDto": {
3514 |         "type": "object",
3515 |         "properties": {
3516 |           "task": {
3517 |             "$ref": "#/components/schemas/TaskSchema"
3518 |           }
3519 |         }
3520 |       },
3521 |       "CreateTaskParams": {
3522 |         "type": "object",
3523 |         "properties": {
3524 |           "title": {
3525 |             "type": "string",
3526 |             "example": "First Task"
3527 |           },
3528 |           "body": {
3529 |             "type": "string",
3530 |             "example": "loram ipsum"
3531 |           },
3532 |           "dueDate": {
3533 |             "type": "string",
3534 |             "example": "2020-10-25T11:00:00Z"
3535 |           },
3536 |           "completed": {
3537 |             "type": "boolean",
3538 |             "example": true
3539 |           },
3540 |           "assignedTo": {
3541 |             "type": "string",
3542 |             "example": "hxHGVRb1YJUscrCB8eXK"
3543 |           }
3544 |         },
3545 |         "required": [
3546 |           "title",
3547 |           "dueDate",
3548 |           "completed"
3549 |         ]
3550 |       },
3551 |       "UnprocessableDTO": {
3552 |         "type": "object",
3553 |         "properties": {
3554 |           "statusCode": {
3555 |             "type": "number",
3556 |             "example": 422
3557 |           },
3558 |           "message": {
3559 |             "example": [
3560 |               "Unprocessable Entity"
3561 |             ],
3562 |             "type": "array",
3563 |             "items": {
3564 |               "type": "string"
3565 |             }
3566 |           },
3567 |           "error": {
3568 |             "type": "string",
3569 |             "example": "Unprocessable Entity"
3570 |           }
3571 |         }
3572 |       },
3573 |       "UpdateTaskBody": {
3574 |         "type": "object",
3575 |         "properties": {
3576 |           "title": {
3577 |             "type": "string",
3578 |             "example": "First Task"
3579 |           },
3580 |           "body": {
3581 |             "type": "string",
3582 |             "example": "loram ipsum"
3583 |           },
3584 |           "dueDate": {
3585 |             "type": "string",
3586 |             "example": "2020-10-25T11:00:00Z"
3587 |           },
3588 |           "completed": {
3589 |             "type": "boolean",
3590 |             "example": true
3591 |           },
3592 |           "assignedTo": {
3593 |             "type": "string",
3594 |             "example": "hxHGVRb1YJUscrCB8eXK"
3595 |           }
3596 |         }
3597 |       },
3598 |       "UpdateTaskStatusParams": {
3599 |         "type": "object",
3600 |         "properties": {
3601 |           "completed": {
3602 |             "type": "boolean",
3603 |             "example": true
3604 |           }
3605 |         },
3606 |         "required": [
3607 |           "completed"
3608 |         ]
3609 |       },
3610 |       "DeleteTaskSuccessfulResponseDto": {
3611 |         "type": "object",
3612 |         "properties": {
3613 |           "succeded": {
3614 |             "type": "boolean",
3615 |             "example": true
3616 |           }
3617 |         }
3618 |       },
3619 |       "GetEventSchema": {
3620 |         "type": "object",
3621 |         "properties": {
3622 |           "id": {
3623 |             "type": "string",
3624 |             "example": "YS3jaqqeehkR2Is80miy"
3625 |           },
3626 |           "calendarId": {
3627 |             "type": "string",
3628 |             "example": "YlWd2wuCAZQzh2cH1fVZ"
3629 |           },
3630 |           "status": {
3631 |             "type": "string",
3632 |             "example": "booked"
3633 |           },
3634 |           "title": {
3635 |             "type": "string",
3636 |             "example": "Test"
3637 |           },
3638 |           "appoinmentStatus": {
3639 |             "type": "string",
3640 |             "example": "confirmed"
3641 |           },
3642 |           "assignedUserId": {
3643 |             "type": "string",
3644 |             "example": "YlWd2wuCAZQzh2cH1fVZ"
3645 |           },
3646 |           "notes": {
3647 |             "type": "string",
3648 |             "example": "test"
3649 |           },
3650 |           "startTime": {
3651 |             "type": "string",
3652 |             "example": "2021-07-16 11:00:00"
3653 |           },
3654 |           "endTime": {
3655 |             "type": "string",
3656 |             "example": "2021-07-16 11:30:00"
3657 |           },
3658 |           "address": {
3659 |             "type": "string",
3660 |             "example": "Address"
3661 |           },
3662 |           "locationId": {
3663 |             "type": "string",
3664 |             "example": "YlWd2wuCAZQzh2cH1fVZ"
3665 |           },
3666 |           "contactId": {
3667 |             "type": "string",
3668 |             "example": "YlWd2wuCAZQzh2cH1fVZ"
3669 |           },
3670 |           "groupId": {
3671 |             "type": "string",
3672 |             "example": "YlWd2wuCAZQzh2cH1fVZ"
3673 |           },
3674 |           "appointmentStatus": {
3675 |             "type": "string",
3676 |             "example": "booked"
3677 |           },
3678 |           "users": {
3679 |             "example": [
3680 |               "YlWd2wuCAZQzh2cH1fVZ",
3681 |               "YlWd2wuCAZQzh2cH1fVZ"
3682 |             ],
3683 |             "type": "array",
3684 |             "items": {
3685 |               "type": "string"
3686 |             }
3687 |           },
3688 |           "dateAdded": {
3689 |             "type": "string",
3690 |             "example": "2021-07-16 11:00:00"
3691 |           },
3692 |           "dateUpdated": {
3693 |             "type": "string",
3694 |             "example": "2021-07-16 11:30:00"
3695 |           },
3696 |           "assignedResources": {
3697 |             "example": [
3698 |               "YlWd2wuCAZQzh2cH1fVZ",
3699 |               "YlWd2wuCAZQzh2cH1fVZ"
3700 |             ],
3701 |             "type": "array",
3702 |             "items": {
3703 |               "type": "string"
3704 |             }
3705 |           }
3706 |         }
3707 |       },
3708 |       "GetEventsSuccessfulResponseDto": {
3709 |         "type": "object",
3710 |         "properties": {
3711 |           "events": {
3712 |             "type": "array",
3713 |             "items": {
3714 |               "$ref": "#/components/schemas/GetEventSchema"
3715 |             }
3716 |           }
3717 |         }
3718 |       },
3719 |       "TagsDTO": {
3720 |         "type": "object",
3721 |         "properties": {
3722 |           "tags": {
3723 |             "example": [
3724 |               "minim",
3725 |               "velit magna"
3726 |             ],
3727 |             "type": "array",
3728 |             "items": {
3729 |               "type": "string"
3730 |             }
3731 |           }
3732 |         },
3733 |         "required": [
3734 |           "tags"
3735 |         ]
3736 |       },
3737 |       "CreateAddTagSuccessfulResponseDto": {
3738 |         "type": "object",
3739 |         "properties": {
3740 |           "tags": {
3741 |             "example": [
3742 |               "minim",
3743 |               "velit magna"
3744 |             ],
3745 |             "type": "array",
3746 |             "items": {
3747 |               "type": "string"
3748 |             }
3749 |           }
3750 |         }
3751 |       },
3752 |       "CreateDeleteTagSuccessfulResponseDto": {
3753 |         "type": "object",
3754 |         "properties": {
3755 |           "tags": {
3756 |             "example": [
3757 |               "minim",
3758 |               "velit magna"
3759 |             ],
3760 |             "type": "array",
3761 |             "items": {
3762 |               "type": "string"
3763 |             }
3764 |           }
3765 |         }
3766 |       },
3767 |       "GetNoteSchema": {
3768 |         "type": "object",
3769 |         "properties": {
3770 |           "id": {
3771 |             "type": "string",
3772 |             "example": "HGPcayliwcdoUFzvbTok"
3773 |           },
3774 |           "body": {
3775 |             "type": "string",
3776 |             "example": "lorem ipsum"
3777 |           },
3778 |           "userId": {
3779 |             "type": "string",
3780 |             "example": "TUcmRxWrjqzJS8EjkxNK"
3781 |           },
3782 |           "dateAdded": {
3783 |             "type": "string",
3784 |             "example": "2021-07-08T12:02:11.285Z"
3785 |           },
3786 |           "contactId": {
3787 |             "type": "string",
3788 |             "example": "TUcmRxWrjqzJS8EjkxNK"
3789 |           }
3790 |         }
3791 |       },
3792 |       "GetNotesListSuccessfulResponseDto": {
3793 |         "type": "object",
3794 |         "properties": {
3795 |           "notes": {
3796 |             "type": "array",
3797 |             "items": {
3798 |               "$ref": "#/components/schemas/GetNoteSchema"
3799 |             }
3800 |           }
3801 |         }
3802 |       },
3803 |       "NotesDTO": {
3804 |         "type": "object",
3805 |         "properties": {
3806 |           "userId": {
3807 |             "type": "string",
3808 |             "example": "GCs5KuzPqTls7vWclkEV"
3809 |           },
3810 |           "body": {
3811 |             "type": "string",
3812 |             "example": "lorem ipsum"
3813 |           }
3814 |         },
3815 |         "required": [
3816 |           "body"
3817 |         ]
3818 |       },
3819 |       "GetCreateUpdateNoteSuccessfulResponseDto": {
3820 |         "type": "object",
3821 |         "properties": {
3822 |           "note": {
3823 |             "$ref": "#/components/schemas/GetNoteSchema"
3824 |           }
3825 |         }
3826 |       },
3827 |       "DeleteNoteSuccessfulResponseDto": {
3828 |         "type": "object",
3829 |         "properties": {
3830 |           "succeded": {
3831 |             "type": "boolean",
3832 |             "example": true
3833 |           }
3834 |         }
3835 |       },
3836 |       "UpdateTagsDTO": {
3837 |         "type": "object",
3838 |         "properties": {
3839 |           "contacts": {
3840 |             "description": "list of contact ids to be processed",
3841 |             "example": [
3842 |               "qFSqySFkVvNzOSqgGqFi",
3843 |               "abcdef",
3844 |               "qFSqySFkVvNzOSqgGqFi",
3845 |               "3ualbhnV7j3n3a9r2moD"
3846 |             ],
3847 |             "type": "array",
3848 |             "items": {
3849 |               "type": "string"
3850 |             },
3851 |             "maxItems": 500
3852 |           },
3853 |           "tags": {
3854 |             "description": "list of tags to be added or removed",
3855 |             "example": [
3856 |               "tag1",
3857 |               "tag2"
3858 |             ],
3859 |             "type": "array",
3860 |             "items": {
3861 |               "type": "string"
3862 |             },
3863 |             "maxItems": 50
3864 |           },
3865 |           "locationId": {
3866 |             "type": "string",
3867 |             "description": "location id from where the bulk request is executed",
3868 |             "example": "asdrwHvLUxlfw5SqKVCN"
3869 |           },
3870 |           "removeAllTags": {
3871 |             "type": "boolean",
3872 |             "description": "Option to implement remove all tags. If true, all tags will be removed from the contacts. Can only be used with remove type.",
3873 |             "example": false
3874 |           }
3875 |         },
3876 |         "required": [
3877 |           "contacts",
3878 |           "tags",
3879 |           "locationId"
3880 |         ]
3881 |       },
3882 |       "UpdateTagsResponseDTO": {
3883 |         "type": "object",
3884 |         "properties": {
3885 |           "succeded": {
3886 |             "type": "boolean",
3887 |             "description": "Indicates if the operation was successful",
3888 |             "example": true
3889 |           },
3890 |           "errorCount": {
3891 |             "type": "number",
3892 |             "description": "Number of errors encountered during the operation",
3893 |             "example": 3
3894 |           },
3895 |           "responses": {
3896 |             "description": "Responses for each contact processed",
3897 |             "example": [
3898 |               {
3899 |                 "contactId": "qFSqySFkVvNzOSqgGqFi",
3900 |                 "message": "Tags updated",
3901 |                 "type": "success",
3902 |                 "oldTags": [
3903 |                   "tag-1",
3904 |                   "tag-2"
3905 |                 ],
3906 |                 "tagsAdded": [],
3907 |                 "tagsRemoved": []
3908 |               },
3909 |               {
3910 |                 "contactId": "abcdef",
3911 |                 "message": "contact id is not a valid firebase id",
3912 |                 "type": "error"
3913 |               },
3914 |               {
3915 |                 "contactId": "qFSqySFkVvNzOSqgGqFi",
3916 |                 "message": "contact is deleted",
3917 |                 "type": "error"
3918 |               },
3919 |               {
3920 |                 "contactId": "3ualbhnV7j3n3a9r2moD",
3921 |                 "message": "contact does not belong to location",
3922 |                 "type": "error"
3923 |               }
3924 |             ],
3925 |             "type": "array",
3926 |             "items": {
3927 |               "type": "string"
3928 |             }
3929 |           }
3930 |         },
3931 |         "required": [
3932 |           "succeded",
3933 |           "errorCount",
3934 |           "responses"
3935 |         ]
3936 |       },
3937 |       "ContactsBusinessUpdate": {
3938 |         "type": "object",
3939 |         "properties": {
3940 |           "locationId": {
3941 |             "type": "string",
3942 |             "example": "PX8m5VwxEbcpFlzYEPVG"
3943 |           },
3944 |           "ids": {
3945 |             "example": [
3946 |               "IDqvFHGColiyK6jiatuz",
3947 |               "pOC0uJ97VYOKH2m3fkMD"
3948 |             ],
3949 |             "type": "array",
3950 |             "items": {
3951 |               "type": "string",
3952 |               "maxLength": 50
3953 |             }
3954 |           },
3955 |           "businessId": {
3956 |             "type": "string",
3957 |             "example": "63b7ec34ea409a9a8bd2a4ff",
3958 |             "nullable": true
3959 |           }
3960 |         },
3961 |         "required": [
3962 |           "locationId",
3963 |           "ids",
3964 |           "businessId"
3965 |         ]
3966 |       },
3967 |       "ContactsBulkUpateResponse": {
3968 |         "type": "object",
3969 |         "properties": {
3970 |           "success": {
3971 |             "type": "boolean",
3972 |             "example": true
3973 |           },
3974 |           "ids": {
3975 |             "example": [
3976 |               "pOC0uJ97VYOKH2m3fkMD"
3977 |             ],
3978 |             "type": "array",
3979 |             "items": {
3980 |               "type": "string"
3981 |             }
3982 |           }
3983 |         },
3984 |         "required": [
3985 |           "success",
3986 |           "ids"
3987 |         ]
3988 |       },
3989 |       "DndSettingSchema": {
3990 |         "type": "object",
3991 |         "properties": {
3992 |           "status": {
3993 |             "type": "string",
3994 |             "enum": [
3995 |               "active",
3996 |               "inactive",
3997 |               "permanent"
3998 |             ]
3999 |           },
4000 |           "message": {
4001 |             "type": "string"
4002 |           },
4003 |           "code": {
4004 |             "type": "string"
4005 |           }
4006 |         },
4007 |         "required": [
4008 |           "status"
4009 |         ]
4010 |       },
4011 |       "DndSettingsSchema": {
4012 |         "type": "object",
4013 |         "properties": {
4014 |           "Call": {
4015 |             "$ref": "#/components/schemas/DndSettingSchema"
4016 |           },
4017 |           "Email": {
4018 |             "$ref": "#/components/schemas/DndSettingSchema"
4019 |           },
4020 |           "SMS": {
4021 |             "$ref": "#/components/schemas/DndSettingSchema"
4022 |           },
4023 |           "WhatsApp": {
4024 |             "$ref": "#/components/schemas/DndSettingSchema"
4025 |           },
4026 |           "GMB": {
4027 |             "$ref": "#/components/schemas/DndSettingSchema"
4028 |           },
4029 |           "FB": {
4030 |             "$ref": "#/components/schemas/DndSettingSchema"
4031 |           }
4032 |         }
4033 |       },
4034 |       "CustomFieldSchema": {
4035 |         "type": "object",
4036 |         "properties": {
4037 |           "id": {
4038 |             "type": "string",
4039 |             "example": "MgobCB14YMVKuE4Ka8p1"
4040 |           },
4041 |           "value": {
4042 |             "type": "string",
4043 |             "example": "name"
4044 |           }
4045 |         }
4046 |       },
4047 |       "AttributionSource": {
4048 |         "type": "object",
4049 |         "properties": {
4050 |           "url": {
4051 |             "type": "string",
4052 |             "example": "Trigger Link"
4053 |           },
4054 |           "campaign": {
4055 |             "type": "string",
4056 |             "nullable": true
4057 |           },
4058 |           "utmSource": {
4059 |             "type": "string",
4060 |             "nullable": true
4061 |           },
4062 |           "utmMedium": {
4063 |             "type": "string",
4064 |             "nullable": true
4065 |           },
4066 |           "utmContent": {
4067 |             "type": "string",
4068 |             "nullable": true
4069 |           },
4070 |           "referrer": {
4071 |             "type": "string",
4072 |             "example": "https: //www.google.com",
4073 |             "nullable": true
4074 |           },
4075 |           "campaignId": {
4076 |             "type": "string",
4077 |             "nullable": true
4078 |           },
4079 |           "fbclid": {
4080 |             "type": "string",
4081 |             "nullable": true
4082 |           },
4083 |           "gclid": {
4084 |             "type": "string",
4085 |             "example": "CjOKCQjwnNyUBhCZARISAI9AYIFtNnIcWcYGIOQINz_ZoFI5SSLRRugSoPZoiEu27IZBY£1-MAIWmEaAo2VEALW_WCB",
4086 |             "nullable": true
4087 |           },
4088 |           "msclikid": {
4089 |             "type": "string",
4090 |             "nullable": true
4091 |           },
4092 |           "dclid": {
4093 |             "type": "string",
4094 |             "nullable": true
4095 |           },
4096 |           "fbc": {
4097 |             "type": "string",
4098 |             "nullable": true
4099 |           },
4100 |           "fbp": {
4101 |             "type": "string",
4102 |             "example": "fb. 1.1674748390986.1171287961",
4103 |             "nullable": true
4104 |           },
4105 |           "fbEventId": {
4106 |             "type": "string",
4107 |             "example": "Mozilla/5.0",
4108 |             "nullable": true
4109 |           },
4110 |           "userAgent": {
4111 |             "type": "string",
4112 |             "example": "Mozilla/5.0",
4113 |             "nullable": true
4114 |           },
4115 |           "ip": {
4116 |             "type": "string",
4117 |             "example": "58.111.106.198",
4118 |             "nullable": true
4119 |           },
4120 |           "medium": {
4121 |             "type": "string",
4122 |             "example": "survey",
4123 |             "nullable": true
4124 |           },
4125 |           "mediumId": {
4126 |             "type": "string",
4127 |             "example": "FglfHAn30PRwsZVyQlKp",
4128 |             "nullable": true
4129 |           }
4130 |         },
4131 |         "required": [
4132 |           "url"
4133 |         ]
4134 |       },
4135 |       "GetContectByIdSchema": {
4136 |         "type": "object",
4137 |         "properties": {
4138 |           "id": {
4139 |             "type": "string",
4140 |             "example": "seD4PfOuKoVMLkEZqohJ"
4141 |           },
4142 |           "name": {
4143 |             "type": "string",
4144 |             "example": "rubika deo"
4145 |           },
4146 |           "locationId": {
4147 |             "type": "string",
4148 |             "example": "ve9EPM428h8vShlRW1KT"
4149 |           },
4150 |           "firstName": {
4151 |             "type": "string",
4152 |             "example": "rubika"
4153 |           },
4154 |           "lastName": {
4155 |             "type": "string",
4156 |             "example": "Deo"
4157 |           },
4158 |           "email": {
4159 |             "type": "string",
4160 |             "example": "rubika@deos.com"
4161 |           },
4162 |           "emailLowerCase": {
4163 |             "type": "string",
4164 |             "example": "rubika@deos.com"
4165 |           },
4166 |           "timezone": {
4167 |             "type": "string",
4168 |             "example": ""
4169 |           },
4170 |           "companyName": {
4171 |             "type": "string",
4172 |             "example": "DGS VolMAX"
4173 |           },
4174 |           "phone": {
4175 |             "type": "string",
4176 |             "example": "+18832327657"
4177 |           },
4178 |           "dnd": {
4179 |             "type": "boolean",
4180 |             "example": true
4181 |           },
4182 |           "dndSettings": {
4183 |             "$ref": "#/components/schemas/DndSettingsSchema"
4184 |           },
4185 |           "type": {
4186 |             "type": "string",
4187 |             "example": "read"
4188 |           },
4189 |           "source": {
4190 |             "type": "string",
4191 |             "example": "public api"
4192 |           },
4193 |           "assignedTo": {
4194 |             "type": "string",
4195 |             "example": "ve9EPM428h8vShlRW1KT"
4196 |           },
4197 |           "address1": {
4198 |             "type": "string",
4199 |             "example": "3535 1st St N"
4200 |           },
4201 |           "city": {
4202 |             "type": "string",
4203 |             "example": "ruDolomitebika"
4204 |           },
4205 |           "state": {
4206 |             "type": "string",
4207 |             "example": "AL"
4208 |           },
4209 |           "country": {
4210 |             "type": "string",
4211 |             "example": "US"
4212 |           },
4213 |           "postalCode": {
4214 |             "type": "string",
4215 |             "example": "35061"
4216 |           },
4217 |           "website": {
4218 |             "type": "string",
4219 |             "example": "https://www.tesla.com"
4220 |           },
4221 |           "tags": {
4222 |             "example": [
4223 |               "nisi sint commodo amet",
4224 |               "consequat"
4225 |             ],
4226 |             "type": "array",
4227 |             "items": {
4228 |               "type": "string"
4229 |             }
4230 |           },
4231 |           "dateOfBirth": {
4232 |             "type": "string",
4233 |             "example": "1990-09-25T00:00:00.000Z"
4234 |           },
4235 |           "dateAdded": {
4236 |             "type": "string",
4237 |             "example": "2021-07-02T05:18:26.704Z"
4238 |           },
4239 |           "dateUpdated": {
4240 |             "type": "string",
4241 |             "example": "2021-07-02T05:18:26.704Z"
4242 |           },
4243 |           "attachments": {
4244 |             "type": "string"
4245 |           },
4246 |           "ssn": {
4247 |             "type": "string"
4248 |           },
4249 |           "keyword": {
4250 |             "type": "string",
4251 |             "example": "test"
4252 |           },
4253 |           "firstNameLowerCase": {
4254 |             "type": "string",
4255 |             "example": "rubika"
4256 |           },
4257 |           "fullNameLowerCase": {
4258 |             "type": "string",
4259 |             "example": "rubika deo"
4260 |           },
4261 |           "lastNameLowerCase": {
4262 |             "type": "string",
4263 |             "example": "deo"
4264 |           },
4265 |           "lastActivity": {
4266 |             "type": "string",
4267 |             "example": "2021-07-16T11:39:30.564Z"
4268 |           },
4269 |           "customFields": {
4270 |             "type": "array",
4271 |             "items": {
4272 |               "$ref": "#/components/schemas/CustomFieldSchema"
4273 |             }
4274 |           },
4275 |           "businessId": {
4276 |             "type": "string",
4277 |             "example": "641c094001436dbc2081e642"
4278 |           },
4279 |           "attributionSource": {
4280 |             "$ref": "#/components/schemas/AttributionSource"
4281 |           },
4282 |           "lastAttributionSource": {
4283 |             "$ref": "#/components/schemas/AttributionSource"
4284 |           },
4285 |           "visitorId": {
4286 |             "type": "string",
4287 |             "description": "visitorId is the Unique ID assigned to each Live chat visitor.",
4288 |             "example": "ve9EPM428h8vShlRW1KT"
4289 |           }
4290 |         }
4291 |       },
4292 |       "ContactsByIdSuccessfulResponseDto": {
4293 |         "type": "object",
4294 |         "properties": {
4295 |           "contact": {
4296 |             "$ref": "#/components/schemas/GetContectByIdSchema"
4297 |           }
4298 |         }
4299 |       },
4300 |       "customFieldsInputArraySchema": {
4301 |         "type": "object",
4302 |         "properties": {
4303 |           "id": {
4304 |             "type": "string",
4305 |             "example": "6dvNaf7VhkQ9snc5vnjJ"
4306 |           },
4307 |           "key": {
4308 |             "type": "string",
4309 |             "example": "my_custom_field"
4310 |           },
4311 |           "field_value": {
4312 |             "example": [
4313 |               "test",
4314 |               "test2"
4315 |             ],
4316 |             "type": "array",
4317 |             "items": {
4318 |               "type": "string"
4319 |             }
4320 |           }
4321 |         },
4322 |         "required": [
4323 |           "id"
4324 |         ]
4325 |       },
4326 |       "customFieldsInputObjectSchema": {
4327 |         "type": "object",
4328 |         "properties": {
4329 |           "id": {
4330 |             "type": "string",
4331 |             "example": "6dvNaf7VhkQ9snc5vnjJ"
4332 |           },
4333 |           "key": {
4334 |             "type": "string",
4335 |             "example": "my_custom_field"
4336 |           },
4337 |           "field_value": {
4338 |             "type": "object",
4339 |             "example": {}
4340 |           }
4341 |         },
4342 |         "required": [
4343 |           "id"
4344 |         ]
4345 |       },
4346 |       "customFieldsInputStringSchema": {
4347 |         "type": "object",
4348 |         "properties": {
4349 |           "id": {
4350 |             "type": "string",
4351 |             "example": "6dvNaf7VhkQ9snc5vnjJ",
4352 |             "description": "Pass either `id` or `key` of custom field"
4353 |           },
4354 |           "key": {
4355 |             "type": "string",
4356 |             "example": "my_custom_field",
4357 |             "description": "Pass either `id` or `key` of custom field"
4358 |           },
4359 |           "field_value": {
4360 |             "type": "string",
4361 |             "example": "9039160788"
4362 |           }
4363 |         }
4364 |       },
4365 |       "InboundDndSettingSchema": {
4366 |         "type": "object",
4367 |         "properties": {
4368 |           "status": {
4369 |             "type": "string",
4370 |             "enum": [
4371 |               "active",
4372 |               "inactive"
4373 |             ]
4374 |           },
4375 |           "message": {
4376 |             "type": "string"
4377 |           }
4378 |         },
4379 |         "required": [
4380 |           "status"
4381 |         ]
4382 |       },
4383 |       "InboundDndSettingsSchema": {
4384 |         "type": "object",
4385 |         "properties": {
4386 |           "all": {
4387 |             "$ref": "#/components/schemas/InboundDndSettingSchema"
4388 |           }
4389 |         }
4390 |       },
4391 |       "CreateContactDto": {
4392 |         "type": "object",
4393 |         "properties": {
4394 |           "firstName": {
4395 |             "type": "string",
4396 |             "example": "Rosan",
4397 |             "nullable": true
4398 |           },
4399 |           "lastName": {
4400 |             "type": "string",
4401 |             "example": "Deo",
4402 |             "nullable": true
4403 |           },
4404 |           "name": {
4405 |             "type": "string",
4406 |             "example": "Rosan Deo",
4407 |             "nullable": true
4408 |           },
4409 |           "email": {
4410 |             "type": "string",
4411 |             "example": "rosan@deos.com",
4412 |             "nullable": true
4413 |           },
4414 |           "locationId": {
4415 |             "type": "string",
4416 |             "example": "ve9EPM428h8vShlRW1KT"
4417 |           },
4418 |           "gender": {
4419 |             "type": "string",
4420 |             "example": "male"
4421 |           },
4422 |           "phone": {
4423 |             "type": "string",
4424 |             "example": "+1 888-888-8888",
4425 |             "nullable": true
4426 |           },
4427 |           "address1": {
4428 |             "type": "string",
4429 |             "example": "3535 1st St N",
4430 |             "nullable": true
4431 |           },
4432 |           "city": {
4433 |             "type": "string",
4434 |             "example": "Dolomite",
4435 |             "nullable": true
4436 |           },
4437 |           "state": {
4438 |             "type": "string",
4439 |             "example": "AL",
4440 |             "nullable": true
4441 |           },
4442 |           "postalCode": {
4443 |             "type": "string",
4444 |             "example": "35061"
4445 |           },
4446 |           "website": {
4447 |             "type": "string",
4448 |             "example": "https://www.tesla.com",
4449 |             "nullable": true
4450 |           },
4451 |           "timezone": {
4452 |             "type": "string",
4453 |             "example": "America/Chihuahua",
4454 |             "nullable": true
4455 |           },
4456 |           "dnd": {
4457 |             "type": "boolean",
4458 |             "example": true
4459 |           },
4460 |           "dndSettings": {
4461 |             "$ref": "#/components/schemas/DndSettingsSchema"
4462 |           },
4463 |           "inboundDndSettings": {
4464 |             "$ref": "#/components/schemas/InboundDndSettingsSchema"
4465 |           },
4466 |           "tags": {
4467 |             "example": [
4468 |               "nisi sint commodo amet",
4469 |               "consequat"
4470 |             ],
4471 |             "type": "array",
4472 |             "items": {
4473 |               "type": "string"
4474 |             }
4475 |           },
4476 |           "customFields": {
4477 |             "type": "array",
4478 |             "items": {
4479 |               "anyOf": [
4480 |                 {
4481 |                   "$ref": "#/components/schemas/customFieldsInputStringSchema"
4482 |                 },
4483 |                 {
4484 |                   "$ref": "#/components/schemas/customFieldsInputArraySchema"
4485 |                 },
4486 |                 {
4487 |                   "$ref": "#/components/schemas/customFieldsInputObjectSchema"
4488 |                 }
4489 |               ]
4490 |             }
4491 |           },
4492 |           "source": {
4493 |             "type": "string",
4494 |             "example": "public api"
4495 |           },
4496 |           "country": {
4497 |             "type": "string",
4498 |             "example": "US"
4499 |           },
4500 |           "companyName": {
4501 |             "type": "string",
4502 |             "example": "DGS VolMAX",
4503 |             "nullable": true
4504 |           },
4505 |           "assignedTo": {
4506 |             "type": "string",
4507 |             "example": "y0BeYjuRIlDwsDcOHOJo",
4508 |             "description": "User's Id"
4509 |           }
4510 |         },
4511 |         "required": [
4512 |           "locationId"
4513 |         ]
4514 |       },
4515 |       "CreateContactSchema": {
4516 |         "type": "object",
4517 |         "properties": {
4518 |           "id": {
4519 |             "type": "string",
4520 |             "example": "seD4PfOuKoVMLkEZqohJ"
4521 |           },
4522 |           "dateAdded": {
4523 |             "type": "string",
4524 |             "example": "2021-08-31T09:59:41.937Z"
4525 |           },
4526 |           "dateUpdated": {
4527 |             "type": "string",
4528 |             "example": "2021-08-31T09:59:41.937Z"
4529 |           },
4530 |           "deleted": {
4531 |             "type": "boolean",
4532 |             "example": false
4533 |           },
4534 |           "tags": {
4535 |             "example": [
4536 |               "nisi sint commodo amet",
4537 |               "consequat"
4538 |             ],
4539 |             "type": "array",
4540 |             "items": {
4541 |               "type": "string"
4542 |             }
4543 |           },
4544 |           "type": {
4545 |             "type": "string",
4546 |             "example": "read"
4547 |           },
4548 |           "customFields": {
4549 |             "type": "array",
4550 |             "items": {
4551 |               "$ref": "#/components/schemas/CustomFieldSchema"
4552 |             }
4553 |           },
4554 |           "locationId": {
4555 |             "type": "string",
4556 |             "example": "ve9EPM428h8vShlRW1KT"
4557 |           },
4558 |           "firstName": {
4559 |             "type": "string",
4560 |             "example": "rubika"
4561 |           },
4562 |           "firstNameLowerCase": {
4563 |             "type": "string",
4564 |             "example": "rubika"
4565 |           },
4566 |           "fullNameLowerCase": {
4567 |             "type": "string",
4568 |             "example": "rubika deo"
4569 |           },
4570 |           "lastName": {
4571 |             "type": "string",
4572 |             "example": "Deo"
4573 |           },
4574 |           "lastNameLowerCase": {
4575 |             "type": "string",
4576 |             "example": "deo"
4577 |           },
4578 |           "email": {
4579 |             "type": "string",
4580 |             "example": "rubika@deos.com"
4581 |           },
4582 |           "emailLowerCase": {
4583 |             "type": "string",
4584 |             "example": "rubika@deos.com"
4585 |           },
4586 |           "bounceEmail": {
4587 |             "type": "boolean",
4588 |             "example": false
4589 |           },
4590 |           "unsubscribeEmail": {
4591 |             "type": "boolean",
4592 |             "example": false
4593 |           },
4594 |           "dnd": {
4595 |             "type": "boolean",
4596 |             "example": true
4597 |           },
4598 |           "dndSettings": {
4599 |             "$ref": "#/components/schemas/DndSettingsSchema"
4600 |           },
4601 |           "phone": {
4602 |             "type": "string",
4603 |             "example": "+18832327657"
4604 |           },
4605 |           "address1": {
4606 |             "type": "string",
4607 |             "example": "3535 1st St N"
4608 |           },
4609 |           "city": {
4610 |             "type": "string",
4611 |             "example": "ruDolomitebika"
4612 |           },
4613 |           "state": {
4614 |             "type": "string",
4615 |             "example": "AL"
4616 |           },
4617 |           "country": {
4618 |             "type": "string",
4619 |             "example": "US"
4620 |           },
4621 |           "postalCode": {
4622 |             "type": "string",
4623 |             "example": "35061"
4624 |           },
4625 |           "website": {
4626 |             "type": "string",
4627 |             "example": "https://www.tesla.com"
4628 |           },
4629 |           "source": {
4630 |             "type": "string",
4631 |             "example": "public api"
4632 |           },
4633 |           "companyName": {
4634 |             "type": "string",
4635 |             "example": "DGS VolMAX"
4636 |           },
4637 |           "dateOfBirth": {
4638 |             "type": "string",
4639 |             "example": "1990-09-25T00:00:00.000Z"
4640 |           },
4641 |           "birthMonth": {
4642 |             "type": "number",
4643 |             "example": 8
4644 |           },
4645 |           "birthDay": {
4646 |             "type": "number",
4647 |             "example": 25
4648 |           },
4649 |           "lastSessionActivityAt": {
4650 |             "type": "string",
4651 |             "example": "2021-07-16T11:39:30.564Z"
4652 |           },
4653 |           "offers": {
4654 |             "example": [],
4655 |             "type": "array",
4656 |             "items": {
4657 |               "type": "string"
4658 |             }
4659 |           },
4660 |           "products": {
4661 |             "example": [],
4662 |             "type": "array",
4663 |             "items": {
4664 |               "type": "string"
4665 |             }
4666 |           },
4667 |           "businessId": {
4668 |             "type": "string",
4669 |             "example": "641c094001436dbc2081e642"
4670 |           },
4671 |           "assignedTo": {
4672 |             "type": "string",
4673 |             "example": "y0BeYjuRIlDwsDcOHOJo",
4674 |             "description": "User's Id"
4675 |           }
4676 |         }
4677 |       },
4678 |       "CreateContactsSuccessfulResponseDto": {
4679 |         "type": "object",
4680 |         "properties": {
4681 |           "contact": {
4682 |             "$ref": "#/components/schemas/CreateContactSchema"
4683 |           }
4684 |         }
4685 |       },
4686 |       "UpdateContactDto": {
4687 |         "type": "object",
4688 |         "properties": {
4689 |           "firstName": {
4690 |             "type": "string",
4691 |             "example": "rosan",
4692 |             "nullable": true
4693 |           },
4694 |           "lastName": {
4695 |             "type": "string",
4696 |             "example": "Deo",
4697 |             "nullable": true
4698 |           },
4699 |           "name": {
4700 |             "type": "string",
4701 |             "example": "rosan Deo",
4702 |             "nullable": true
4703 |           },
4704 |           "email": {
4705 |             "type": "string",
4706 |             "example": "rosan@deos.com",
4707 |             "nullable": true
4708 |           },
4709 |           "phone": {
4710 |             "type": "string",
4711 |             "example": "+1 888-888-8888",
4712 |             "nullable": true
4713 |           },
4714 |           "address1": {
4715 |             "type": "string",
4716 |             "example": "3535 1st St N",
4717 |             "nullable": true
4718 |           },
4719 |           "city": {
4720 |             "type": "string",
4721 |             "example": "Dolomite",
4722 |             "nullable": true
4723 |           },
4724 |           "state": {
4725 |             "type": "string",
4726 |             "example": "AL",
4727 |             "nullable": true
4728 |           },
4729 |           "postalCode": {
4730 |             "type": "string",
4731 |             "example": "35061"
4732 |           },
4733 |           "website": {
4734 |             "type": "string",
4735 |             "example": "https://www.tesla.com",
4736 |             "nullable": true
4737 |           },
4738 |           "timezone": {
4739 |             "type": "string",
4740 |             "example": "America/Chihuahua",
4741 |             "nullable": true
4742 |           },
4743 |           "dnd": {
4744 |             "type": "boolean",
4745 |             "example": true
4746 |           },
4747 |           "dndSettings": {
4748 |             "$ref": "#/components/schemas/DndSettingsSchema"
4749 |           },
4750 |           "inboundDndSettings": {
4751 |             "$ref": "#/components/schemas/InboundDndSettingsSchema"
4752 |           },
4753 |           "tags": {
4754 |             "example": [
4755 |               "nisi sint commodo amet",
4756 |               "consequat"
4757 |             ],
4758 |             "description": "This field will overwrite all current tags associated with the contact. To update a tags, it is recommended to use the Add Tag or Remove Tag API instead.",
4759 |             "type": "array",
4760 |             "items": {
4761 |               "type": "string"
4762 |             }
4763 |           },
4764 |           "customFields": {
4765 |             "type": "array",
4766 |             "items": {
4767 |               "anyOf": [
4768 |                 {
4769 |                   "$ref": "#/components/schemas/customFieldsInputStringSchema"
4770 |                 },
4771 |                 {
4772 |                   "$ref": "#/components/schemas/customFieldsInputArraySchema"
4773 |                 },
4774 |                 {
4775 |                   "$ref": "#/components/schemas/customFieldsInputObjectSchema"
4776 |                 }
4777 |               ]
4778 |             }
4779 |           },
4780 |           "source": {
4781 |             "type": "string",
4782 |             "example": "public api",
4783 |             "nullable": true
4784 |           },
4785 |           "country": {
4786 |             "type": "string",
4787 |             "example": "US"
4788 |           },
4789 |           "assignedTo": {
4790 |             "type": "string",
4791 |             "example": "y0BeYjuRIlDwsDcOHOJo",
4792 |             "description": "User's Id",
4793 |             "nullable": true
4794 |           }
4795 |         }
4796 |       },
4797 |       "UpdateContactsSuccessfulResponseDto": {
4798 |         "type": "object",
4799 |         "properties": {
4800 |           "succeded": {
4801 |             "type": "boolean",
4802 |             "example": true
4803 |           },
4804 |           "contact": {
4805 |             "$ref": "#/components/schemas/GetContectByIdSchema"
4806 |           }
4807 |         }
4808 |       },
4809 |       "UpsertContactDto": {
4810 |         "type": "object",
4811 |         "properties": {
4812 |           "firstName": {
4813 |             "type": "string",
4814 |             "example": "Rosan",
4815 |             "nullable": true
4816 |           },
4817 |           "lastName": {
4818 |             "type": "string",
4819 |             "example": "Deo",
4820 |             "nullable": true
4821 |           },
4822 |           "name": {
4823 |             "type": "string",
4824 |             "example": "Rosan Deo",
4825 |             "nullable": true
4826 |           },
4827 |           "email": {
4828 |             "type": "string",
4829 |             "example": "rosan@deos.com",
4830 |             "nullable": true
4831 |           },
4832 |           "locationId": {
4833 |             "type": "string",
4834 |             "example": "ve9EPM428h8vShlRW1KT"
4835 |           },
4836 |           "gender": {
4837 |             "type": "string",
4838 |             "example": "male"
4839 |           },
4840 |           "phone": {
4841 |             "type": "string",
4842 |             "example": "+1 888-888-8888",
4843 |             "nullable": true
4844 |           },
4845 |           "address1": {
4846 |             "type": "string",
4847 |             "example": "3535 1st St N",
4848 |             "nullable": true
4849 |           },
4850 |           "city": {
4851 |             "type": "string",
4852 |             "example": "Dolomite",
4853 |             "nullable": true
4854 |           },
4855 |           "state": {
4856 |             "type": "string",
4857 |             "example": "AL",
4858 |             "nullable": true
4859 |           },
4860 |           "postalCode": {
4861 |             "type": "string",
4862 |             "example": "35061"
4863 |           },
4864 |           "website": {
4865 |             "type": "string",
4866 |             "example": "https://www.tesla.com",
4867 |             "nullable": true
4868 |           },
4869 |           "timezone": {
4870 |             "type": "string",
4871 |             "example": "America/Chihuahua",
4872 |             "nullable": true
4873 |           },
4874 |           "dnd": {
4875 |             "type": "boolean",
4876 |             "example": true
4877 |           },
4878 |           "dndSettings": {
4879 |             "$ref": "#/components/schemas/DndSettingsSchema"
4880 |           },
4881 |           "inboundDndSettings": {
4882 |             "$ref": "#/components/schemas/InboundDndSettingsSchema"
4883 |           },
4884 |           "tags": {
4885 |             "example": [
4886 |               "nisi sint commodo amet",
4887 |               "consequat"
4888 |             ],
4889 |             "description": "This field will overwrite all current tags associated with the contact. To update a tags, it is recommended to use the Add Tag or Remove Tag API instead.",
4890 |             "type": "array",
4891 |             "items": {
4892 |               "type": "string"
4893 |             }
4894 |           },
4895 |           "customFields": {
4896 |             "type": "array",
4897 |             "items": {
4898 |               "anyOf": [
4899 |                 {
4900 |                   "$ref": "#/components/schemas/customFieldsInputStringSchema"
4901 |                 },
4902 |                 {
4903 |                   "$ref": "#/components/schemas/customFieldsInputArraySchema"
4904 |                 },
4905 |                 {
4906 |                   "$ref": "#/components/schemas/customFieldsInputObjectSchema"
4907 |                 }
4908 |               ]
4909 |             }
4910 |           },
4911 |           "source": {
4912 |             "type": "string",
4913 |             "example": "public api"
4914 |           },
4915 |           "country": {
4916 |             "type": "string",
4917 |             "example": "US"
4918 |           },
4919 |           "companyName": {
4920 |             "type": "string",
4921 |             "example": "DGS VolMAX",
4922 |             "nullable": true
4923 |           },
4924 |           "assignedTo": {
4925 |             "type": "string",
4926 |             "example": "y0BeYjuRIlDwsDcOHOJo",
4927 |             "description": "User's Id"
4928 |           }
4929 |         },
4930 |         "required": [
4931 |           "locationId"
4932 |         ]
4933 |       },
4934 |       "UpsertContactsSuccessfulResponseDto": {
4935 |         "type": "object",
4936 |         "properties": {
4937 |           "new": {
4938 |             "type": "boolean",
4939 |             "example": true
4940 |           },
4941 |           "contact": {
4942 |             "$ref": "#/components/schemas/GetContectByIdSchema"
4943 |           },
4944 |           "traceId": {
4945 |             "type": "string"
4946 |           }
4947 |         }
4948 |       },
4949 |       "DeleteContactsSuccessfulResponseDto": {
4950 |         "type": "object",
4951 |         "properties": {
4952 |           "succeded": {
4953 |             "type": "boolean",
4954 |             "example": true
4955 |           }
4956 |         }
4957 |       },
4958 |       "ContactsSearchSchema": {
4959 |         "type": "object",
4960 |         "properties": {
4961 |           "id": {
4962 |             "type": "string",
4963 |             "example": "ocQHyuzHvysMo5N5VsXc"
4964 |           },
4965 |           "locationId": {
4966 |             "type": "string",
4967 |             "example": "C2QujeCh8ZnC7al2InWR"
4968 |           },
4969 |           "email": {
4970 |             "type": "string",
4971 |             "example": "JohnDeo@gmail.com"
4972 |           },
4973 |           "timezone": {
4974 |             "type": "string",
4975 |             "example": "Asia/Calcutta"
4976 |           },
4977 |           "country": {
4978 |             "type": "string",
4979 |             "example": "DE"
4980 |           },
4981 |           "source": {
4982 |             "type": "string",
4983 |             "example": "xyz form"
4984 |           },
4985 |           "dateAdded": {
4986 |             "type": "string",
4987 |             "example": "2020-10-29T09:31:30.255Z"
4988 |           },
4989 |           "customFields": {
4990 |             "type": "array",
4991 |             "items": {
4992 |               "$ref": "#/components/schemas/CustomFieldSchema"
4993 |             }
4994 |           },
4995 |           "tags": {
4996 |             "example": [
4997 |               "nisi sint commodo amet",
4998 |               "consequat"
4999 |             ],
5000 |             "type": "array",
5001 |             "items": {
5002 |               "type": "string"
5003 |             }
5004 |           },
5005 |           "businessId": {
5006 |             "type": "string",
5007 |             "example": "641c094001436dbc2081e642"
5008 |           },
5009 |           "attributions": {
5010 |             "type": "array",
5011 |             "items": {
5012 |               "$ref": "#/components/schemas/AttributionSource"
5013 |             }
5014 |           },
5015 |           "followers": {
5016 |             "example": "641c094001436dbc2081e642",
5017 |             "type": "array",
5018 |             "items": {
5019 |               "type": "string"
5020 |             }
5021 |           }
5022 |         }
5023 |       },
5024 |       "ContactsMetaSchema": {
5025 |         "type": "object",
5026 |         "properties": {
5027 |           "total": {
5028 |             "type": "number",
5029 |             "example": 50
5030 |           },
5031 |           "nextPageUrl": {
5032 |             "type": "string",
5033 |             "example": "http://localhost:5058/contacts/?locationId=ve9EPM428h8vShlRW1KT&startAfter=1631087949919&startAfterId=yd0jdjOavGk2o6Nh5Ndb"
5034 |           },
5035 |           "startAfterId": {
5036 |             "type": "string",
5037 |             "example": "yd0jdjOavGk2o6Nh5Ndb"
5038 |           },
5039 |           "startAfter": {
5040 |             "type": "number",
5041 |             "example": 1631087949919
5042 |           },
5043 |           "currentPage": {
5044 |             "type": "number",
5045 |             "example": 2
5046 |           },
5047 |           "nextPage": {
5048 |             "type": "number",
5049 |             "example": 3
5050 |           },
5051 |           "prevPage": {
5052 |             "type": "number",
5053 |             "example": 1,
5054 |             "nullable": true
5055 |           }
5056 |         }
5057 |       },
5058 |       "ContactsSearchSuccessfulResponseDto": {
5059 |         "type": "object",
5060 |         "properties": {
5061 |           "contacts": {
5062 |             "type": "array",
5063 |             "items": {
5064 |               "$ref": "#/components/schemas/ContactsSearchSchema"
5065 |             }
5066 |           },
5067 |           "count": {
5068 |             "type": "number",
5069 |             "example": 10
5070 |           }
5071 |         }
5072 |       },
5073 |       "FollowersDTO": {
5074 |         "type": "object",
5075 |         "properties": {
5076 |           "followers": {
5077 |             "example": [
5078 |               "sx6wyHhbFdRXh302Lunr",
5079 |               "sx6wyHhbFdRXh302Lunr"
5080 |             ],
5081 |             "type": "array",
5082 |             "items": {
5083 |               "type": "string"
5084 |             }
5085 |           }
5086 |         },
5087 |         "required": [
5088 |           "followers"
5089 |         ]
5090 |       },
5091 |       "CreateAddFollowersSuccessfulResponseDto": {
5092 |         "type": "object",
5093 |         "properties": {
5094 |           "followers": {
5095 |             "example": [
5096 |               "sx6wyHhbFdRXh302Lunr",
5097 |               "sx6wyHhbFdRXh302LLss"
5098 |             ],
5099 |             "type": "array",
5100 |             "items": {
5101 |               "type": "string"
5102 |             }
5103 |           },
5104 |           "followersAdded": {
5105 |             "example": [
5106 |               "Mx6wyHhbFdRXh302Luer",
5107 |               "Ka6wyHhbFdRXh302LLsAm"
5108 |             ],
5109 |             "type": "array",
5110 |             "items": {
5111 |               "type": "string"
5112 |             }
5113 |           }
5114 |         }
5115 |       },
5116 |       "DeleteFollowersSuccessfulResponseDto": {
5117 |         "type": "object",
5118 |         "properties": {
5119 |           "followers": {
5120 |             "example": [
5121 |               "sx6wyHhbFdRXh302Lunr",
5122 |               "sx6wyHhbFdRXh302LLss"
5123 |             ],
5124 |             "type": "array",
5125 |             "items": {
5126 |               "type": "string"
5127 |             }
5128 |           },
5129 |           "followersRemoved": {
5130 |             "example": [
5131 |               "Mx6wyHhbFdRXh302Luer",
5132 |               "Ka6wyHhbFdRXh302LLsAm"
5133 |             ],
5134 |             "type": "array",
5135 |             "items": {
5136 |               "type": "string"
5137 |             }
5138 |           }
5139 |         }
5140 |       },
5141 |       "AddContactToCampaignDto": {
5142 |         "type": "object",
5143 |         "properties": {}
5144 |       },
5145 |       "CreateDeleteCantactsCampaignsSuccessfulResponseDto": {
5146 |         "type": "object",
5147 |         "properties": {
5148 |           "succeded": {
5149 |             "type": "boolean",
5150 |             "example": true
5151 |           }
5152 |         }
5153 |       },
5154 |       "CreateWorkflowDto": {
5155 |         "type": "object",
5156 |         "properties": {
5157 |           "eventStartTime": {
5158 |             "type": "string",
5159 |             "example": "2021-06-23T03:30:00+01:00"
5160 |           }
5161 |         }
5162 |       },
5163 |       "ContactsWorkflowSuccessfulResponseDto": {
5164 |         "type": "object",
5165 |         "properties": {
5166 |           "succeded": {
5167 |             "type": "boolean",
5168 |             "example": true
5169 |           }
5170 |         }
5171 |       }
5172 |     }
5173 |   }
5174 | }
5175 | 


--------------------------------------------------------------------------------
/conversations/conversations.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/conversations/search": {
   5 |       "get": {
   6 |         "operationId": "search-conversation",
   7 |         "summary": "Search Conversations",
   8 |         "description": "Returns a list of all conversations matching the search criteria along with the sort and filter options selected.",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-04-15"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "locationId",
  34 |             "required": true,
  35 |             "in": "query",
  36 |             "description": "Location Id",
  37 |             "schema": {
  38 |               "example": "ABCHkzuJQ8ZMd4Te84GK",
  39 |               "type": "string"
  40 |             }
  41 |           },
  42 |           {
  43 |             "name": "contactId",
  44 |             "required": false,
  45 |             "in": "query",
  46 |             "description": "Contact Id",
  47 |             "schema": {
  48 |               "example": "9VEmS0si86GW6gXWU89b",
  49 |               "type": "string"
  50 |             }
  51 |           },
  52 |           {
  53 |             "name": "assignedTo",
  54 |             "required": false,
  55 |             "in": "query",
  56 |             "description": "User IDs that conversations are assigned to. Multiple IDs can be provided as comma-separated values. Use \"unassigned\" to fetch conversations not assigned to any user.",
  57 |             "schema": {
  58 |               "example": "ABCHkzuJQ8ZMd4Te84GK,fGiae4CHkzoskh8thsik",
  59 |               "type": "string"
  60 |             }
  61 |           },
  62 |           {
  63 |             "name": "followers",
  64 |             "required": false,
  65 |             "in": "query",
  66 |             "description": "User IDs of followers to filter conversations by. Multiple IDs can be provided as comma-separated values.",
  67 |             "schema": {
  68 |               "example": "ABCHkzuJQ8ZMd4Te84GK,fGiae4CHkzoskh8thsik",
  69 |               "type": "string"
  70 |             }
  71 |           },
  72 |           {
  73 |             "name": "mentions",
  74 |             "required": false,
  75 |             "in": "query",
  76 |             "description": "User Id of the mention. Multiple values are comma separated.",
  77 |             "schema": {
  78 |               "example": "ABCHkzuJQ8ZMd4Te84GK,fGiae4CHkzoskh8thsik",
  79 |               "type": "string"
  80 |             }
  81 |           },
  82 |           {
  83 |             "name": "query",
  84 |             "required": false,
  85 |             "in": "query",
  86 |             "description": "Search paramater as a string",
  87 |             "schema": {
  88 |               "example": "Search string",
  89 |               "type": "string"
  90 |             }
  91 |           },
  92 |           {
  93 |             "name": "sort",
  94 |             "required": false,
  95 |             "in": "query",
  96 |             "description": "Sort paramater - asc or desc",
  97 |             "schema": {
  98 |               "example": "asc",
  99 |               "enum": [
 100 |                 "asc",
 101 |                 "desc"
 102 |               ],
 103 |               "type": "string"
 104 |             }
 105 |           },
 106 |           {
 107 |             "name": "startAfterDate",
 108 |             "required": false,
 109 |             "in": "query",
 110 |             "description": "Search to begin after the specified date - should contain the sort value of the last document",
 111 |             "anyOf": [
 112 |               {
 113 |                 "$ref": "#/components/schemas/StartAfterNumberSchema"
 114 |               },
 115 |               {
 116 |                 "$ref": "#/components/schemas/StartAfterArrayNumberSchema"
 117 |               }
 118 |             ],
 119 |             "schema": {
 120 |               "example": 1600854,
 121 |               "type": "any"
 122 |             }
 123 |           },
 124 |           {
 125 |             "name": "id",
 126 |             "required": false,
 127 |             "in": "query",
 128 |             "description": "Id of the conversation",
 129 |             "schema": {
 130 |               "example": "ABCHkzuJQ8ZMd4Te84GK",
 131 |               "type": "string"
 132 |             }
 133 |           },
 134 |           {
 135 |             "name": "limit",
 136 |             "required": false,
 137 |             "in": "query",
 138 |             "description": "Limit of conversations - Default is 20",
 139 |             "schema": {
 140 |               "example": 20,
 141 |               "type": "number"
 142 |             }
 143 |           },
 144 |           {
 145 |             "name": "lastMessageType",
 146 |             "required": false,
 147 |             "in": "query",
 148 |             "description": "Type of the last message in the conversation as a string",
 149 |             "schema": {
 150 |               "example": "TYPE_SMS",
 151 |               "enum": [
 152 |                 "TYPE_CALL",
 153 |                 "TYPE_SMS",
 154 |                 "TYPE_EMAIL",
 155 |                 "TYPE_SMS_REVIEW_REQUEST",
 156 |                 "TYPE_WEBCHAT",
 157 |                 "TYPE_SMS_NO_SHOW_REQUEST",
 158 |                 "TYPE_CAMPAIGN_SMS",
 159 |                 "TYPE_CAMPAIGN_CALL",
 160 |                 "TYPE_CAMPAIGN_EMAIL",
 161 |                 "TYPE_CAMPAIGN_VOICEMAIL",
 162 |                 "TYPE_FACEBOOK",
 163 |                 "TYPE_CAMPAIGN_FACEBOOK",
 164 |                 "TYPE_CAMPAIGN_MANUAL_CALL",
 165 |                 "TYPE_CAMPAIGN_MANUAL_SMS",
 166 |                 "TYPE_GMB",
 167 |                 "TYPE_CAMPAIGN_GMB",
 168 |                 "TYPE_REVIEW",
 169 |                 "TYPE_INSTAGRAM",
 170 |                 "TYPE_WHATSAPP",
 171 |                 "TYPE_CUSTOM_SMS",
 172 |                 "TYPE_CUSTOM_EMAIL",
 173 |                 "TYPE_CUSTOM_PROVIDER_SMS",
 174 |                 "TYPE_CUSTOM_PROVIDER_EMAIL",
 175 |                 "TYPE_IVR_CALL",
 176 |                 "TYPE_ACTIVITY_CONTACT",
 177 |                 "TYPE_ACTIVITY_INVOICE",
 178 |                 "TYPE_ACTIVITY_PAYMENT",
 179 |                 "TYPE_ACTIVITY_OPPORTUNITY",
 180 |                 "TYPE_LIVE_CHAT",
 181 |                 "TYPE_LIVE_CHAT_INFO_MESSAGE",
 182 |                 "TYPE_ACTIVITY_APPOINTMENT",
 183 |                 "TYPE_FACEBOOK_COMMENT",
 184 |                 "TYPE_INSTAGRAM_COMMENT",
 185 |                 "TYPE_CUSTOM_CALL",
 186 |                 "TYPE_INTERNAL_COMMENT"
 187 |               ],
 188 |               "type": "string"
 189 |             }
 190 |           },
 191 |           {
 192 |             "name": "lastMessageAction",
 193 |             "required": false,
 194 |             "in": "query",
 195 |             "description": "Action of the last outbound message in the conversation as string.",
 196 |             "schema": {
 197 |               "example": "manual",
 198 |               "enum": [
 199 |                 "automated",
 200 |                 "manual"
 201 |               ],
 202 |               "type": "string"
 203 |             }
 204 |           },
 205 |           {
 206 |             "name": "lastMessageDirection",
 207 |             "required": false,
 208 |             "in": "query",
 209 |             "description": "Direction of the last message in the conversation as string.",
 210 |             "schema": {
 211 |               "example": "inbound",
 212 |               "enum": [
 213 |                 "inbound",
 214 |                 "outbound"
 215 |               ],
 216 |               "type": "string"
 217 |             }
 218 |           },
 219 |           {
 220 |             "name": "status",
 221 |             "required": false,
 222 |             "in": "query",
 223 |             "description": "The status of the conversation to be filtered - all, read, unread, starred ",
 224 |             "schema": {
 225 |               "example": "all",
 226 |               "enum": [
 227 |                 "all",
 228 |                 "read",
 229 |                 "unread",
 230 |                 "starred",
 231 |                 "recents"
 232 |               ],
 233 |               "type": "string"
 234 |             }
 235 |           },
 236 |           {
 237 |             "name": "sortBy",
 238 |             "required": false,
 239 |             "in": "query",
 240 |             "description": "The sorting of the conversation to be filtered as - manual messages or all messages",
 241 |             "schema": {
 242 |               "example": "last_message_date",
 243 |               "enum": [
 244 |                 "last_manual_message_date",
 245 |                 "last_message_date",
 246 |                 "score_profile"
 247 |               ],
 248 |               "type": "string"
 249 |             }
 250 |           },
 251 |           {
 252 |             "name": "sortScoreProfile",
 253 |             "required": false,
 254 |             "in": "query",
 255 |             "description": "Id of score profile on which sortBy.ScoreProfile should sort on",
 256 |             "schema": {
 257 |               "example": "ABCHkzuJQ8ZMd4Te84GK",
 258 |               "type": "string"
 259 |             }
 260 |           },
 261 |           {
 262 |             "name": "scoreProfile",
 263 |             "required": false,
 264 |             "in": "query",
 265 |             "description": "Id of score profile on which conversations should get filtered out, works with scoreProfileMin & scoreProfileMax",
 266 |             "schema": {
 267 |               "example": "ABCHkzuJQ8ZMd4Te84GK",
 268 |               "type": "string"
 269 |             }
 270 |           },
 271 |           {
 272 |             "name": "scoreProfileMin",
 273 |             "required": false,
 274 |             "in": "query",
 275 |             "description": "Minimum value for score",
 276 |             "schema": {
 277 |               "example": "ABCHkzuJQ8ZMd4Te84GK",
 278 |               "type": "number"
 279 |             }
 280 |           },
 281 |           {
 282 |             "name": "scoreProfileMax",
 283 |             "required": false,
 284 |             "in": "query",
 285 |             "description": "Maximum value for score",
 286 |             "schema": {
 287 |               "example": "ABCHkzuJQ8ZMd4Te84GK",
 288 |               "type": "number"
 289 |             }
 290 |           }
 291 |         ],
 292 |         "responses": {
 293 |           "200": {
 294 |             "description": "Successfully fetched the conversations",
 295 |             "content": {
 296 |               "application/json": {
 297 |                 "schema": {
 298 |                   "$ref": "#/components/schemas/SendConversationResponseDto"
 299 |                 }
 300 |               }
 301 |             }
 302 |           },
 303 |           "400": {
 304 |             "description": "Bad Request",
 305 |             "content": {
 306 |               "application/json": {
 307 |                 "schema": {
 308 |                   "$ref": "#/components/schemas/BadRequestDTO"
 309 |                 }
 310 |               }
 311 |             }
 312 |           },
 313 |           "401": {
 314 |             "description": "Unauthorized",
 315 |             "content": {
 316 |               "application/json": {
 317 |                 "schema": {
 318 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 319 |                 }
 320 |               }
 321 |             }
 322 |           }
 323 |         },
 324 |         "tags": [
 325 |           "Search"
 326 |         ],
 327 |         "security": [
 328 |           {
 329 |             "bearer": []
 330 |           }
 331 |         ]
 332 |       }
 333 |     },
 334 |     "/conversations/{conversationId}": {
 335 |       "get": {
 336 |         "operationId": "get-conversation",
 337 |         "summary": "Get Conversation",
 338 |         "description": "Get the conversation details based on the conversation ID",
 339 |         "parameters": [
 340 |           {
 341 |             "name": "Authorization",
 342 |             "in": "header",
 343 |             "description": "Access Token",
 344 |             "required": true,
 345 |             "schema": {
 346 |               "type": "string",
 347 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 348 |             }
 349 |           },
 350 |           {
 351 |             "name": "Version",
 352 |             "in": "header",
 353 |             "description": "API Version",
 354 |             "required": true,
 355 |             "schema": {
 356 |               "type": "string",
 357 |               "enum": [
 358 |                 "2021-04-15"
 359 |               ]
 360 |             }
 361 |           },
 362 |           {
 363 |             "name": "conversationId",
 364 |             "required": true,
 365 |             "in": "path",
 366 |             "description": "Conversation ID as string",
 367 |             "schema": {
 368 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
 369 |               "type": "string"
 370 |             }
 371 |           }
 372 |         ],
 373 |         "responses": {
 374 |           "200": {
 375 |             "description": "Successful response",
 376 |             "content": {
 377 |               "application/json": {
 378 |                 "schema": {
 379 |                   "$ref": "#/components/schemas/GetConversationByIdResponse"
 380 |                 }
 381 |               }
 382 |             }
 383 |           },
 384 |           "400": {
 385 |             "description": "Bad Request",
 386 |             "content": {
 387 |               "application/json": {
 388 |                 "schema": {
 389 |                   "$ref": "#/components/schemas/BadRequestDTO"
 390 |                 }
 391 |               }
 392 |             }
 393 |           },
 394 |           "401": {
 395 |             "description": "Unauthorized",
 396 |             "content": {
 397 |               "application/json": {
 398 |                 "schema": {
 399 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 400 |                 }
 401 |               }
 402 |             }
 403 |           }
 404 |         },
 405 |         "tags": [
 406 |           "Conversations"
 407 |         ],
 408 |         "security": [
 409 |           {
 410 |             "bearer": []
 411 |           }
 412 |         ]
 413 |       },
 414 |       "put": {
 415 |         "operationId": "update-conversation",
 416 |         "summary": "Update Conversation",
 417 |         "description": "Update the conversation details based on the conversation ID",
 418 |         "parameters": [
 419 |           {
 420 |             "name": "Authorization",
 421 |             "in": "header",
 422 |             "description": "Access Token",
 423 |             "required": true,
 424 |             "schema": {
 425 |               "type": "string",
 426 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 427 |             }
 428 |           },
 429 |           {
 430 |             "name": "Version",
 431 |             "in": "header",
 432 |             "description": "API Version",
 433 |             "required": true,
 434 |             "schema": {
 435 |               "type": "string",
 436 |               "enum": [
 437 |                 "2021-04-15"
 438 |               ]
 439 |             }
 440 |           },
 441 |           {
 442 |             "name": "conversationId",
 443 |             "required": true,
 444 |             "in": "path",
 445 |             "description": "Conversation ID as string",
 446 |             "schema": {
 447 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
 448 |               "type": "string"
 449 |             }
 450 |           }
 451 |         ],
 452 |         "requestBody": {
 453 |           "required": true,
 454 |           "content": {
 455 |             "application/json": {
 456 |               "schema": {
 457 |                 "$ref": "#/components/schemas/UpdateConversationDto"
 458 |               }
 459 |             }
 460 |           }
 461 |         },
 462 |         "responses": {
 463 |           "200": {
 464 |             "description": "Successful response",
 465 |             "content": {
 466 |               "application/json": {
 467 |                 "schema": {
 468 |                   "$ref": "#/components/schemas/GetConversationSuccessfulResponse"
 469 |                 }
 470 |               }
 471 |             }
 472 |           },
 473 |           "400": {
 474 |             "description": "Bad Request",
 475 |             "content": {
 476 |               "application/json": {
 477 |                 "schema": {
 478 |                   "$ref": "#/components/schemas/BadRequestDTO"
 479 |                 }
 480 |               }
 481 |             }
 482 |           },
 483 |           "401": {
 484 |             "description": "Unauthorized",
 485 |             "content": {
 486 |               "application/json": {
 487 |                 "schema": {
 488 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 489 |                 }
 490 |               }
 491 |             }
 492 |           }
 493 |         },
 494 |         "tags": [
 495 |           "Conversations"
 496 |         ],
 497 |         "security": [
 498 |           {
 499 |             "bearer": []
 500 |           }
 501 |         ]
 502 |       },
 503 |       "delete": {
 504 |         "operationId": "delete-conversation",
 505 |         "summary": "Delete Conversation",
 506 |         "description": "Delete the conversation details based on the conversation ID",
 507 |         "parameters": [
 508 |           {
 509 |             "name": "Authorization",
 510 |             "in": "header",
 511 |             "description": "Access Token",
 512 |             "required": true,
 513 |             "schema": {
 514 |               "type": "string",
 515 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 516 |             }
 517 |           },
 518 |           {
 519 |             "name": "Version",
 520 |             "in": "header",
 521 |             "description": "API Version",
 522 |             "required": true,
 523 |             "schema": {
 524 |               "type": "string",
 525 |               "enum": [
 526 |                 "2021-04-15"
 527 |               ]
 528 |             }
 529 |           },
 530 |           {
 531 |             "name": "conversationId",
 532 |             "required": true,
 533 |             "in": "path",
 534 |             "description": "Conversation ID as string",
 535 |             "schema": {
 536 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
 537 |               "type": "string"
 538 |             }
 539 |           }
 540 |         ],
 541 |         "responses": {
 542 |           "200": {
 543 |             "description": "Successful response",
 544 |             "content": {
 545 |               "application/json": {
 546 |                 "schema": {
 547 |                   "$ref": "#/components/schemas/DeleteConversationSuccessfulResponse"
 548 |                 }
 549 |               }
 550 |             }
 551 |           },
 552 |           "400": {
 553 |             "description": "Bad Request",
 554 |             "content": {
 555 |               "application/json": {
 556 |                 "schema": {
 557 |                   "$ref": "#/components/schemas/BadRequestDTO"
 558 |                 }
 559 |               }
 560 |             }
 561 |           },
 562 |           "401": {
 563 |             "description": "Unauthorized",
 564 |             "content": {
 565 |               "application/json": {
 566 |                 "schema": {
 567 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 568 |                 }
 569 |               }
 570 |             }
 571 |           }
 572 |         },
 573 |         "tags": [
 574 |           "Conversations"
 575 |         ],
 576 |         "security": [
 577 |           {
 578 |             "bearer": []
 579 |           }
 580 |         ]
 581 |       }
 582 |     },
 583 |     "/conversations/messages/email/{id}": {
 584 |       "get": {
 585 |         "operationId": "get-email-by-id",
 586 |         "summary": "Get email by Id",
 587 |         "description": "Get email by Id",
 588 |         "parameters": [
 589 |           {
 590 |             "name": "Authorization",
 591 |             "in": "header",
 592 |             "description": "Access Token",
 593 |             "required": true,
 594 |             "schema": {
 595 |               "type": "string",
 596 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 597 |             }
 598 |           }
 599 |         ],
 600 |         "responses": {
 601 |           "200": {
 602 |             "description": "Email object for the id given.",
 603 |             "content": {
 604 |               "application/json": {
 605 |                 "schema": {
 606 |                   "$ref": "#/components/schemas/GetEmailMessageResponseDto"
 607 |                 }
 608 |               }
 609 |             }
 610 |           }
 611 |         },
 612 |         "tags": [
 613 |           "Email"
 614 |         ]
 615 |       }
 616 |     },
 617 |     "/conversations/messages/email/{emailMessageId}/schedule": {
 618 |       "delete": {
 619 |         "operationId": "cancel-scheduled-email-message",
 620 |         "summary": "Cancel a scheduled email message.",
 621 |         "description": "Post the messageId for the API to delete a scheduled email message. <br />",
 622 |         "parameters": [
 623 |           {
 624 |             "name": "Authorization",
 625 |             "in": "header",
 626 |             "description": "Access Token",
 627 |             "required": true,
 628 |             "schema": {
 629 |               "type": "string",
 630 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 631 |             }
 632 |           },
 633 |           {
 634 |             "name": "emailMessageId",
 635 |             "required": true,
 636 |             "in": "path",
 637 |             "description": "Email Message Id",
 638 |             "schema": {
 639 |               "example": "ve9EPM428h8vShlRW1KT",
 640 |               "type": "string"
 641 |             }
 642 |           }
 643 |         ],
 644 |         "responses": {
 645 |           "200": {
 646 |             "description": "The scheduled email message was cancelled successfully",
 647 |             "content": {
 648 |               "application/json": {
 649 |                 "schema": {
 650 |                   "$ref": "#/components/schemas/CancelScheduledResponseDto"
 651 |                 }
 652 |               }
 653 |             }
 654 |           }
 655 |         },
 656 |         "tags": [
 657 |           "Email"
 658 |         ]
 659 |       }
 660 |     },
 661 |     "/conversations/messages/{id}": {
 662 |       "get": {
 663 |         "operationId": "get-message",
 664 |         "summary": "Get message by message id",
 665 |         "description": "Get message by message id.",
 666 |         "parameters": [
 667 |           {
 668 |             "name": "Authorization",
 669 |             "in": "header",
 670 |             "description": "Access Token",
 671 |             "required": true,
 672 |             "schema": {
 673 |               "type": "string",
 674 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 675 |             }
 676 |           },
 677 |           {
 678 |             "name": "Version",
 679 |             "in": "header",
 680 |             "description": "API Version",
 681 |             "required": true,
 682 |             "schema": {
 683 |               "type": "string",
 684 |               "enum": [
 685 |                 "2021-04-15"
 686 |               ]
 687 |             }
 688 |           }
 689 |         ],
 690 |         "responses": {
 691 |           "200": {
 692 |             "description": "Message object for the id given.",
 693 |             "content": {
 694 |               "application/json": {
 695 |                 "schema": {
 696 |                   "$ref": "#/components/schemas/GetMessageResponseDto"
 697 |                 }
 698 |               }
 699 |             }
 700 |           },
 701 |           "400": {
 702 |             "description": "Bad Request",
 703 |             "content": {
 704 |               "application/json": {
 705 |                 "schema": {
 706 |                   "$ref": "#/components/schemas/BadRequestDTO"
 707 |                 }
 708 |               }
 709 |             }
 710 |           },
 711 |           "401": {
 712 |             "description": "Unauthorized",
 713 |             "content": {
 714 |               "application/json": {
 715 |                 "schema": {
 716 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 717 |                 }
 718 |               }
 719 |             }
 720 |           }
 721 |         },
 722 |         "tags": [
 723 |           "Messages"
 724 |         ],
 725 |         "security": [
 726 |           {
 727 |             "bearer": []
 728 |           }
 729 |         ]
 730 |       }
 731 |     },
 732 |     "/conversations/{conversationId}/messages": {
 733 |       "get": {
 734 |         "operationId": "get-messages",
 735 |         "summary": "Get messages by conversation id",
 736 |         "description": "Get messages by conversation id.",
 737 |         "parameters": [
 738 |           {
 739 |             "name": "Authorization",
 740 |             "in": "header",
 741 |             "description": "Access Token",
 742 |             "required": true,
 743 |             "schema": {
 744 |               "type": "string",
 745 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 746 |             }
 747 |           },
 748 |           {
 749 |             "name": "Version",
 750 |             "in": "header",
 751 |             "description": "API Version",
 752 |             "required": true,
 753 |             "schema": {
 754 |               "type": "string",
 755 |               "enum": [
 756 |                 "2021-04-15"
 757 |               ]
 758 |             }
 759 |           },
 760 |           {
 761 |             "name": "conversationId",
 762 |             "required": true,
 763 |             "in": "path",
 764 |             "description": "Conversation ID as string",
 765 |             "schema": {
 766 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
 767 |               "type": "string"
 768 |             }
 769 |           },
 770 |           {
 771 |             "name": "lastMessageId",
 772 |             "required": false,
 773 |             "in": "query",
 774 |             "description": "Message ID of the last message in the list as a string",
 775 |             "schema": {
 776 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
 777 |               "type": "string"
 778 |             }
 779 |           },
 780 |           {
 781 |             "name": "limit",
 782 |             "required": false,
 783 |             "in": "query",
 784 |             "description": "Number of messages to be fetched from the conversation. Default limit is 20",
 785 |             "schema": {
 786 |               "example": 20,
 787 |               "type": "number"
 788 |             }
 789 |           },
 790 |           {
 791 |             "name": "type",
 792 |             "required": false,
 793 |             "in": "query",
 794 |             "description": "Types of message to fetched separated with comma",
 795 |             "schema": {
 796 |               "example": "TYPE_SMS,TYPE_CALL",
 797 |               "enum": [
 798 |                 "TYPE_CALL",
 799 |                 "TYPE_SMS",
 800 |                 "TYPE_EMAIL",
 801 |                 "TYPE_FACEBOOK",
 802 |                 "TYPE_GMB",
 803 |                 "TYPE_INSTAGRAM",
 804 |                 "TYPE_WHATSAPP",
 805 |                 "TYPE_ACTIVITY_APPOINTMENT",
 806 |                 "TYPE_ACTIVITY_CONTACT",
 807 |                 "TYPE_ACTIVITY_INVOICE",
 808 |                 "TYPE_ACTIVITY_PAYMENT",
 809 |                 "TYPE_ACTIVITY_OPPORTUNITY",
 810 |                 "TYPE_LIVE_CHAT",
 811 |                 "TYPE_INTERNAL_COMMENTS"
 812 |               ],
 813 |               "type": "string"
 814 |             }
 815 |           }
 816 |         ],
 817 |         "responses": {
 818 |           "200": {
 819 |             "description": "List of messages for the conversation id of the given type.",
 820 |             "content": {
 821 |               "application/json": {
 822 |                 "schema": {
 823 |                   "$ref": "#/components/schemas/GetMessagesByConversationResponseDto"
 824 |                 }
 825 |               }
 826 |             }
 827 |           },
 828 |           "400": {
 829 |             "description": "Bad Request",
 830 |             "content": {
 831 |               "application/json": {
 832 |                 "schema": {
 833 |                   "$ref": "#/components/schemas/BadRequestDTO"
 834 |                 }
 835 |               }
 836 |             }
 837 |           },
 838 |           "401": {
 839 |             "description": "Unauthorized",
 840 |             "content": {
 841 |               "application/json": {
 842 |                 "schema": {
 843 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 844 |                 }
 845 |               }
 846 |             }
 847 |           }
 848 |         },
 849 |         "tags": [
 850 |           "Messages"
 851 |         ],
 852 |         "security": [
 853 |           {
 854 |             "bearer": []
 855 |           }
 856 |         ]
 857 |       }
 858 |     },
 859 |     "/conversations/messages": {
 860 |       "post": {
 861 |         "operationId": "send-a-new-message",
 862 |         "summary": "Send a new message",
 863 |         "description": "Post the necessary fields for the API to send a new message.",
 864 |         "parameters": [
 865 |           {
 866 |             "name": "Authorization",
 867 |             "in": "header",
 868 |             "description": "Access Token",
 869 |             "required": true,
 870 |             "schema": {
 871 |               "type": "string",
 872 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 873 |             }
 874 |           },
 875 |           {
 876 |             "name": "Version",
 877 |             "in": "header",
 878 |             "description": "API Version",
 879 |             "required": true,
 880 |             "schema": {
 881 |               "type": "string",
 882 |               "enum": [
 883 |                 "2021-04-15"
 884 |               ]
 885 |             }
 886 |           }
 887 |         ],
 888 |         "requestBody": {
 889 |           "required": true,
 890 |           "content": {
 891 |             "application/json": {
 892 |               "schema": {
 893 |                 "$ref": "#/components/schemas/SendMessageBodyDto"
 894 |               }
 895 |             }
 896 |           }
 897 |         },
 898 |         "responses": {
 899 |           "200": {
 900 |             "description": "Created the message",
 901 |             "content": {
 902 |               "application/json": {
 903 |                 "schema": {
 904 |                   "$ref": "#/components/schemas/SendMessageResponseDto"
 905 |                 }
 906 |               }
 907 |             }
 908 |           },
 909 |           "400": {
 910 |             "description": "Bad Request",
 911 |             "content": {
 912 |               "application/json": {
 913 |                 "schema": {
 914 |                   "$ref": "#/components/schemas/BadRequestDTO"
 915 |                 }
 916 |               }
 917 |             }
 918 |           },
 919 |           "401": {
 920 |             "description": "Unauthorized",
 921 |             "content": {
 922 |               "application/json": {
 923 |                 "schema": {
 924 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 925 |                 }
 926 |               }
 927 |             }
 928 |           }
 929 |         },
 930 |         "tags": [
 931 |           "Messages"
 932 |         ],
 933 |         "security": [
 934 |           {
 935 |             "bearer": []
 936 |           }
 937 |         ]
 938 |       }
 939 |     },
 940 |     "/conversations/messages/inbound": {
 941 |       "post": {
 942 |         "operationId": "add-an-inbound-message",
 943 |         "summary": "Add an inbound message",
 944 |         "description": "Post the necessary fields for the API to add a new inbound message. <br />",
 945 |         "parameters": [
 946 |           {
 947 |             "name": "Authorization",
 948 |             "in": "header",
 949 |             "description": "Access Token",
 950 |             "required": true,
 951 |             "schema": {
 952 |               "type": "string",
 953 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 954 |             }
 955 |           },
 956 |           {
 957 |             "name": "Version",
 958 |             "in": "header",
 959 |             "description": "API Version",
 960 |             "required": true,
 961 |             "schema": {
 962 |               "type": "string",
 963 |               "enum": [
 964 |                 "2021-04-15"
 965 |               ]
 966 |             }
 967 |           }
 968 |         ],
 969 |         "requestBody": {
 970 |           "required": true,
 971 |           "content": {
 972 |             "application/json": {
 973 |               "schema": {
 974 |                 "$ref": "#/components/schemas/ProcessMessageBodyDto"
 975 |               }
 976 |             }
 977 |           }
 978 |         },
 979 |         "responses": {
 980 |           "200": {
 981 |             "description": "Created the message",
 982 |             "content": {
 983 |               "application/json": {
 984 |                 "schema": {
 985 |                   "$ref": "#/components/schemas/ProcessMessageResponseDto"
 986 |                 }
 987 |               }
 988 |             }
 989 |           },
 990 |           "400": {
 991 |             "description": "Bad Request",
 992 |             "content": {
 993 |               "application/json": {
 994 |                 "schema": {
 995 |                   "$ref": "#/components/schemas/BadRequestDTO"
 996 |                 }
 997 |               }
 998 |             }
 999 |           },
1000 |           "401": {
1001 |             "description": "Unauthorized",
1002 |             "content": {
1003 |               "application/json": {
1004 |                 "schema": {
1005 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1006 |                 }
1007 |               }
1008 |             }
1009 |           }
1010 |         },
1011 |         "tags": [
1012 |           "Messages"
1013 |         ],
1014 |         "security": [
1015 |           {
1016 |             "bearer": []
1017 |           }
1018 |         ]
1019 |       }
1020 |     },
1021 |     "/conversations/messages/outbound": {
1022 |       "post": {
1023 |         "operationId": "add-an-outbound-message",
1024 |         "summary": "Add an external outbound call",
1025 |         "description": "Post the necessary fields for the API to add a new outbound call.",
1026 |         "parameters": [
1027 |           {
1028 |             "name": "Authorization",
1029 |             "in": "header",
1030 |             "description": "Access Token",
1031 |             "required": true,
1032 |             "schema": {
1033 |               "type": "string",
1034 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1035 |             }
1036 |           },
1037 |           {
1038 |             "name": "Version",
1039 |             "in": "header",
1040 |             "description": "API Version",
1041 |             "required": true,
1042 |             "schema": {
1043 |               "type": "string",
1044 |               "enum": [
1045 |                 "2021-04-15"
1046 |               ]
1047 |             }
1048 |           }
1049 |         ],
1050 |         "requestBody": {
1051 |           "required": true,
1052 |           "content": {
1053 |             "application/json": {
1054 |               "schema": {
1055 |                 "$ref": "#/components/schemas/ProcessOutboundMessageBodyDto"
1056 |               }
1057 |             }
1058 |           }
1059 |         },
1060 |         "responses": {
1061 |           "200": {
1062 |             "description": "Created the message",
1063 |             "content": {
1064 |               "application/json": {
1065 |                 "schema": {
1066 |                   "$ref": "#/components/schemas/ProcessMessageResponseDto"
1067 |                 }
1068 |               }
1069 |             }
1070 |           },
1071 |           "400": {
1072 |             "description": "Bad Request",
1073 |             "content": {
1074 |               "application/json": {
1075 |                 "schema": {
1076 |                   "$ref": "#/components/schemas/BadRequestDTO"
1077 |                 }
1078 |               }
1079 |             }
1080 |           },
1081 |           "401": {
1082 |             "description": "Unauthorized",
1083 |             "content": {
1084 |               "application/json": {
1085 |                 "schema": {
1086 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1087 |                 }
1088 |               }
1089 |             }
1090 |           }
1091 |         },
1092 |         "tags": [
1093 |           "Messages"
1094 |         ],
1095 |         "security": [
1096 |           {
1097 |             "bearer": []
1098 |           }
1099 |         ]
1100 |       }
1101 |     },
1102 |     "/conversations/messages/{messageId}/schedule": {
1103 |       "delete": {
1104 |         "operationId": "cancel-scheduled-message",
1105 |         "summary": "Cancel a scheduled message.",
1106 |         "description": "Post the messageId for the API to delete a scheduled message. <br />",
1107 |         "parameters": [
1108 |           {
1109 |             "name": "Authorization",
1110 |             "in": "header",
1111 |             "description": "Access Token",
1112 |             "required": true,
1113 |             "schema": {
1114 |               "type": "string",
1115 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1116 |             }
1117 |           },
1118 |           {
1119 |             "name": "Version",
1120 |             "in": "header",
1121 |             "description": "API Version",
1122 |             "required": true,
1123 |             "schema": {
1124 |               "type": "string",
1125 |               "enum": [
1126 |                 "2021-04-15"
1127 |               ]
1128 |             }
1129 |           },
1130 |           {
1131 |             "name": "messageId",
1132 |             "required": true,
1133 |             "in": "path",
1134 |             "description": "Message Id",
1135 |             "schema": {
1136 |               "example": "ve9EPM428h8vShlRW1KT",
1137 |               "type": "string"
1138 |             }
1139 |           }
1140 |         ],
1141 |         "responses": {
1142 |           "200": {
1143 |             "description": "The scheduled message was cancelled successfully",
1144 |             "content": {
1145 |               "application/json": {
1146 |                 "schema": {
1147 |                   "$ref": "#/components/schemas/CancelScheduledResponseDto"
1148 |                 }
1149 |               }
1150 |             }
1151 |           },
1152 |           "400": {
1153 |             "description": "Bad Request",
1154 |             "content": {
1155 |               "application/json": {
1156 |                 "schema": {
1157 |                   "$ref": "#/components/schemas/BadRequestDTO"
1158 |                 }
1159 |               }
1160 |             }
1161 |           },
1162 |           "401": {
1163 |             "description": "Unauthorized",
1164 |             "content": {
1165 |               "application/json": {
1166 |                 "schema": {
1167 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1168 |                 }
1169 |               }
1170 |             }
1171 |           }
1172 |         },
1173 |         "tags": [
1174 |           "Messages"
1175 |         ],
1176 |         "security": [
1177 |           {
1178 |             "bearer": []
1179 |           }
1180 |         ]
1181 |       }
1182 |     },
1183 |     "/conversations/messages/upload": {
1184 |       "post": {
1185 |         "operationId": "upload-file-attachments",
1186 |         "summary": "Upload file attachments",
1187 |         "description": "Post the necessary fields for the API to upload files. The files need to be a buffer with the key \"fileAttachment\". <br /><br /> The allowed file types are: <br> <ul><li>JPG</li><li>JPEG</li><li>PNG</li><li>MP4</li><li>MPEG</li><li>ZIP</li><li>RAR</li><li>PDF</li><li>DOC</li><li>DOCX</li><li>TXT</li><li>MP3</li><li>WAV</li></ul> <br /><br /> The API will return an object with the URLs",
1188 |         "parameters": [
1189 |           {
1190 |             "name": "Authorization",
1191 |             "in": "header",
1192 |             "description": "Access Token",
1193 |             "required": true,
1194 |             "schema": {
1195 |               "type": "string",
1196 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1197 |             }
1198 |           },
1199 |           {
1200 |             "name": "Version",
1201 |             "in": "header",
1202 |             "description": "API Version",
1203 |             "required": true,
1204 |             "schema": {
1205 |               "type": "string",
1206 |               "enum": [
1207 |                 "2021-04-15"
1208 |               ]
1209 |             }
1210 |           }
1211 |         ],
1212 |         "requestBody": {
1213 |           "required": true,
1214 |           "content": {
1215 |             "multipart/form-data": {
1216 |               "schema": {
1217 |                 "$ref": "#/components/schemas/UploadFilesDto"
1218 |               }
1219 |             }
1220 |           }
1221 |         },
1222 |         "responses": {
1223 |           "200": {
1224 |             "description": "Uploaded the file successfully",
1225 |             "content": {
1226 |               "application/json": {
1227 |                 "schema": {
1228 |                   "$ref": "#/components/schemas/UploadFilesResponseDto"
1229 |                 }
1230 |               }
1231 |             }
1232 |           },
1233 |           "400": {
1234 |             "description": "Bad Request",
1235 |             "content": {
1236 |               "application/json": {
1237 |                 "schema": {
1238 |                   "$ref": "#/components/schemas/BadRequestDTO"
1239 |                 }
1240 |               }
1241 |             }
1242 |           },
1243 |           "401": {
1244 |             "description": "Unauthorized",
1245 |             "content": {
1246 |               "application/json": {
1247 |                 "schema": {
1248 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1249 |                 }
1250 |               }
1251 |             }
1252 |           },
1253 |           "413": {
1254 |             "description": "Payload Too Large",
1255 |             "content": {
1256 |               "application/json": {
1257 |                 "schema": {
1258 |                   "$ref": "#/components/schemas/UploadFilesErrorResponseDto"
1259 |                 }
1260 |               }
1261 |             }
1262 |           },
1263 |           "415": {
1264 |             "description": "Unsupported Media Type",
1265 |             "content": {
1266 |               "application/json": {
1267 |                 "schema": {
1268 |                   "$ref": "#/components/schemas/UploadFilesErrorResponseDto"
1269 |                 }
1270 |               }
1271 |             }
1272 |           }
1273 |         },
1274 |         "tags": [
1275 |           "Messages"
1276 |         ],
1277 |         "security": [
1278 |           {
1279 |             "bearer": []
1280 |           }
1281 |         ]
1282 |       }
1283 |     },
1284 |     "/conversations/messages/{messageId}/status": {
1285 |       "put": {
1286 |         "operationId": "update-message-status",
1287 |         "summary": "Update message status",
1288 |         "description": "Post the necessary fields for the API to update message status.",
1289 |         "parameters": [
1290 |           {
1291 |             "name": "Authorization",
1292 |             "in": "header",
1293 |             "description": "Access Token",
1294 |             "required": true,
1295 |             "schema": {
1296 |               "type": "string",
1297 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1298 |             }
1299 |           },
1300 |           {
1301 |             "name": "Version",
1302 |             "in": "header",
1303 |             "description": "API Version",
1304 |             "required": true,
1305 |             "schema": {
1306 |               "type": "string",
1307 |               "enum": [
1308 |                 "2021-04-15"
1309 |               ]
1310 |             }
1311 |           },
1312 |           {
1313 |             "name": "messageId",
1314 |             "required": true,
1315 |             "in": "path",
1316 |             "description": "Message Id",
1317 |             "schema": {
1318 |               "example": "ve9EPM428h8vShlRW1KT",
1319 |               "type": "string"
1320 |             }
1321 |           }
1322 |         ],
1323 |         "requestBody": {
1324 |           "required": true,
1325 |           "content": {
1326 |             "application/json": {
1327 |               "schema": {
1328 |                 "$ref": "#/components/schemas/UpdateMessageStatusDto"
1329 |               }
1330 |             }
1331 |           }
1332 |         },
1333 |         "responses": {
1334 |           "200": {
1335 |             "description": "Created the message",
1336 |             "content": {
1337 |               "application/json": {
1338 |                 "schema": {
1339 |                   "$ref": "#/components/schemas/SendMessageResponseDto"
1340 |                 }
1341 |               }
1342 |             }
1343 |           },
1344 |           "400": {
1345 |             "description": "Bad Request",
1346 |             "content": {
1347 |               "application/json": {
1348 |                 "schema": {
1349 |                   "$ref": "#/components/schemas/BadRequestDTO"
1350 |                 }
1351 |               }
1352 |             }
1353 |           },
1354 |           "401": {
1355 |             "description": "Unauthorized",
1356 |             "content": {
1357 |               "application/json": {
1358 |                 "schema": {
1359 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1360 |                 }
1361 |               }
1362 |             }
1363 |           }
1364 |         },
1365 |         "tags": [
1366 |           "Messages"
1367 |         ],
1368 |         "security": [
1369 |           {
1370 |             "bearer": []
1371 |           }
1372 |         ]
1373 |       }
1374 |     },
1375 |     "/conversations/messages/{messageId}/locations/{locationId}/recording": {
1376 |       "get": {
1377 |         "operationId": "get-message-recording",
1378 |         "summary": "Get Recording by Message ID",
1379 |         "description": "Get the recording for a message by passing the message id",
1380 |         "parameters": [
1381 |           {
1382 |             "name": "Authorization",
1383 |             "in": "header",
1384 |             "description": "Access Token",
1385 |             "required": true,
1386 |             "schema": {
1387 |               "type": "string",
1388 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1389 |             }
1390 |           },
1391 |           {
1392 |             "name": "Version",
1393 |             "in": "header",
1394 |             "description": "API Version",
1395 |             "required": true,
1396 |             "schema": {
1397 |               "type": "string",
1398 |               "enum": [
1399 |                 "2021-04-15"
1400 |               ]
1401 |             }
1402 |           },
1403 |           {
1404 |             "name": "locationId",
1405 |             "required": true,
1406 |             "in": "path",
1407 |             "description": "Location ID as string",
1408 |             "schema": {
1409 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
1410 |               "type": "string"
1411 |             }
1412 |           },
1413 |           {
1414 |             "name": "messageId",
1415 |             "required": true,
1416 |             "in": "path",
1417 |             "description": "Message ID as string",
1418 |             "schema": {
1419 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
1420 |               "type": "string"
1421 |             }
1422 |           }
1423 |         ],
1424 |         "responses": {
1425 |           "200": {
1426 |             "description": "Gives the attached recording to the message",
1427 |             "headers": {
1428 |               "Content-Type": {
1429 |                 "description": "audio/x-wav"
1430 |               },
1431 |               "Content-Disposition": {
1432 |                 "description": "Attachment; filename=audio.wav"
1433 |               }
1434 |             }
1435 |           },
1436 |           "400": {
1437 |             "description": "Bad Request",
1438 |             "content": {
1439 |               "application/json": {
1440 |                 "schema": {
1441 |                   "$ref": "#/components/schemas/BadRequestDTO"
1442 |                 }
1443 |               }
1444 |             }
1445 |           },
1446 |           "401": {
1447 |             "description": "Unauthorized",
1448 |             "content": {
1449 |               "application/json": {
1450 |                 "schema": {
1451 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1452 |                 }
1453 |               }
1454 |             }
1455 |           }
1456 |         },
1457 |         "tags": [
1458 |           "Messages"
1459 |         ],
1460 |         "security": [
1461 |           {
1462 |             "bearer": []
1463 |           },
1464 |           {
1465 |             "Location-Access": []
1466 |           }
1467 |         ]
1468 |       }
1469 |     },
1470 |     "/conversations/locations/{locationId}/messages/{messageId}/transcription": {
1471 |       "get": {
1472 |         "operationId": "get-message-transcription",
1473 |         "summary": "Get transcription by Message ID",
1474 |         "description": "Get the recording transcription for a message by passing the message id",
1475 |         "parameters": [
1476 |           {
1477 |             "name": "Authorization",
1478 |             "in": "header",
1479 |             "description": "Access Token",
1480 |             "required": true,
1481 |             "schema": {
1482 |               "type": "string",
1483 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1484 |             }
1485 |           },
1486 |           {
1487 |             "name": "Version",
1488 |             "in": "header",
1489 |             "description": "API Version",
1490 |             "required": true,
1491 |             "schema": {
1492 |               "type": "string",
1493 |               "enum": [
1494 |                 "2021-04-15"
1495 |               ]
1496 |             }
1497 |           },
1498 |           {
1499 |             "name": "locationId",
1500 |             "required": true,
1501 |             "in": "path",
1502 |             "description": "Location ID as string",
1503 |             "schema": {
1504 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
1505 |               "type": "string"
1506 |             }
1507 |           },
1508 |           {
1509 |             "name": "messageId",
1510 |             "required": true,
1511 |             "in": "path",
1512 |             "description": "Message ID as string",
1513 |             "schema": {
1514 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
1515 |               "type": "string"
1516 |             }
1517 |           }
1518 |         ],
1519 |         "responses": {
1520 |           "200": {
1521 |             "description": "Gives the attached recording transcription to the message",
1522 |             "content": {
1523 |               "application/json": {
1524 |                 "schema": {
1525 |                   "$ref": "#/components/schemas/GetMessageTranscriptionResponseDto"
1526 |                 }
1527 |               }
1528 |             }
1529 |           },
1530 |           "400": {
1531 |             "description": "Bad Request",
1532 |             "content": {
1533 |               "application/json": {
1534 |                 "schema": {
1535 |                   "$ref": "#/components/schemas/BadRequestDTO"
1536 |                 }
1537 |               }
1538 |             }
1539 |           },
1540 |           "401": {
1541 |             "description": "Unauthorized",
1542 |             "content": {
1543 |               "application/json": {
1544 |                 "schema": {
1545 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1546 |                 }
1547 |               }
1548 |             }
1549 |           }
1550 |         },
1551 |         "tags": [
1552 |           "Messages"
1553 |         ],
1554 |         "security": [
1555 |           {
1556 |             "bearer": []
1557 |           },
1558 |           {
1559 |             "Location-Access": []
1560 |           }
1561 |         ]
1562 |       }
1563 |     },
1564 |     "/conversations/locations/{locationId}/messages/{messageId}/transcription/download": {
1565 |       "get": {
1566 |         "operationId": "download-message-transcription",
1567 |         "summary": "Download transcription by Message ID",
1568 |         "description": "Download the recording transcription for a message by passing the message id",
1569 |         "parameters": [
1570 |           {
1571 |             "name": "Authorization",
1572 |             "in": "header",
1573 |             "description": "Access Token",
1574 |             "required": true,
1575 |             "schema": {
1576 |               "type": "string",
1577 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1578 |             }
1579 |           },
1580 |           {
1581 |             "name": "Version",
1582 |             "in": "header",
1583 |             "description": "API Version",
1584 |             "required": true,
1585 |             "schema": {
1586 |               "type": "string",
1587 |               "enum": [
1588 |                 "2021-04-15"
1589 |               ]
1590 |             }
1591 |           },
1592 |           {
1593 |             "name": "locationId",
1594 |             "required": true,
1595 |             "in": "path",
1596 |             "description": "Location ID as string",
1597 |             "schema": {
1598 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
1599 |               "type": "string"
1600 |             }
1601 |           },
1602 |           {
1603 |             "name": "messageId",
1604 |             "required": true,
1605 |             "in": "path",
1606 |             "description": "Message ID as string",
1607 |             "schema": {
1608 |               "example": "tDtDnQdgm2LXpyiqYvZ6",
1609 |               "type": "string"
1610 |             }
1611 |           }
1612 |         ],
1613 |         "responses": {
1614 |           "200": {
1615 |             "description": "Downloads the attached transcription of the message",
1616 |             "headers": {
1617 |               "Content-Type": {
1618 |                 "description": "text/plain"
1619 |               },
1620 |               "Content-Disposition": {
1621 |                 "description": "Attachment; filename=\"transcription.txt\""
1622 |               }
1623 |             },
1624 |             "content": {
1625 |               "application/json": {
1626 |                 "schema": {
1627 |                   "$ref": "#/components/schemas/"
1628 |                 }
1629 |               }
1630 |             }
1631 |           },
1632 |           "400": {
1633 |             "description": "Bad Request",
1634 |             "content": {
1635 |               "application/json": {
1636 |                 "schema": {
1637 |                   "$ref": "#/components/schemas/BadRequestDTO"
1638 |                 }
1639 |               }
1640 |             }
1641 |           },
1642 |           "401": {
1643 |             "description": "Unauthorized",
1644 |             "content": {
1645 |               "application/json": {
1646 |                 "schema": {
1647 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1648 |                 }
1649 |               }
1650 |             }
1651 |           }
1652 |         },
1653 |         "tags": [
1654 |           "Messages"
1655 |         ],
1656 |         "security": [
1657 |           {
1658 |             "bearer": []
1659 |           },
1660 |           {
1661 |             "Location-Access": []
1662 |           }
1663 |         ]
1664 |       }
1665 |     },
1666 |     "/conversations/providers/live-chat/typing": {
1667 |       "post": {
1668 |         "operationId": "live-chat-agent-typing",
1669 |         "summary": "Agent/Ai-Bot is typing a message indicator for live chat",
1670 |         "description": "Agent/AI-Bot will call this when they are typing a message in live chat message",
1671 |         "parameters": [
1672 |           {
1673 |             "name": "Authorization",
1674 |             "in": "header",
1675 |             "description": "Access Token",
1676 |             "required": true,
1677 |             "schema": {
1678 |               "type": "string",
1679 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1680 |             }
1681 |           },
1682 |           {
1683 |             "name": "Version",
1684 |             "in": "header",
1685 |             "description": "API Version",
1686 |             "required": true,
1687 |             "schema": {
1688 |               "type": "string",
1689 |               "enum": [
1690 |                 "2021-04-15"
1691 |               ]
1692 |             }
1693 |           }
1694 |         ],
1695 |         "requestBody": {
1696 |           "required": true,
1697 |           "content": {
1698 |             "application/json": {
1699 |               "schema": {
1700 |                 "$ref": "#/components/schemas/UserTypingBody"
1701 |               }
1702 |             }
1703 |           }
1704 |         },
1705 |         "responses": {
1706 |           "201": {
1707 |             "description": "Show typing indicator for live chat",
1708 |             "content": {
1709 |               "application/json": {
1710 |                 "schema": {
1711 |                   "$ref": "#/components/schemas/CreateLiveChatMessageFeedbackResponse"
1712 |                 }
1713 |               }
1714 |             }
1715 |           },
1716 |           "400": {
1717 |             "description": "Bad Request",
1718 |             "content": {
1719 |               "application/json": {
1720 |                 "schema": {
1721 |                   "$ref": "#/components/schemas/BadRequestDTO"
1722 |                 }
1723 |               }
1724 |             }
1725 |           },
1726 |           "401": {
1727 |             "description": "Unauthorized",
1728 |             "content": {
1729 |               "application/json": {
1730 |                 "schema": {
1731 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1732 |                 }
1733 |               }
1734 |             }
1735 |           },
1736 |           "422": {
1737 |             "description": "Unprocessable Entity",
1738 |             "content": {
1739 |               "application/json": {
1740 |                 "schema": {
1741 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1742 |                 }
1743 |               }
1744 |             }
1745 |           }
1746 |         },
1747 |         "tags": [
1748 |           "Providers"
1749 |         ],
1750 |         "security": [
1751 |           {
1752 |             "Location-Access": []
1753 |           }
1754 |         ]
1755 |       }
1756 |     },
1757 |     "/conversations/": {
1758 |       "post": {
1759 |         "operationId": "create-conversation",
1760 |         "summary": "Create Conversation",
1761 |         "description": "Creates a new conversation with the data provided",
1762 |         "parameters": [
1763 |           {
1764 |             "name": "Authorization",
1765 |             "in": "header",
1766 |             "description": "Access Token",
1767 |             "required": true,
1768 |             "schema": {
1769 |               "type": "string",
1770 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1771 |             }
1772 |           },
1773 |           {
1774 |             "name": "Version",
1775 |             "in": "header",
1776 |             "description": "API Version",
1777 |             "required": true,
1778 |             "schema": {
1779 |               "type": "string",
1780 |               "enum": [
1781 |                 "2021-04-15"
1782 |               ]
1783 |             }
1784 |           }
1785 |         ],
1786 |         "requestBody": {
1787 |           "required": true,
1788 |           "content": {
1789 |             "application/json": {
1790 |               "schema": {
1791 |                 "$ref": "#/components/schemas/CreateConversationDto"
1792 |               }
1793 |             }
1794 |           }
1795 |         },
1796 |         "responses": {
1797 |           "201": {
1798 |             "description": "Successful response",
1799 |             "content": {
1800 |               "application/json": {
1801 |                 "schema": {
1802 |                   "$ref": "#/components/schemas/CreateConversationSuccessResponse"
1803 |                 }
1804 |               }
1805 |             }
1806 |           },
1807 |           "400": {
1808 |             "description": "Bad Request",
1809 |             "content": {
1810 |               "application/json": {
1811 |                 "schema": {
1812 |                   "$ref": "#/components/schemas/BadRequestDTO"
1813 |                 }
1814 |               }
1815 |             }
1816 |           },
1817 |           "401": {
1818 |             "description": "Unauthorized",
1819 |             "content": {
1820 |               "application/json": {
1821 |                 "schema": {
1822 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1823 |                 }
1824 |               }
1825 |             }
1826 |           }
1827 |         },
1828 |         "tags": [
1829 |           "Conversations"
1830 |         ],
1831 |         "security": [
1832 |           {
1833 |             "bearer": []
1834 |           }
1835 |         ]
1836 |       }
1837 |     }
1838 |   },
1839 |   "info": {
1840 |     "title": "Conversations API",
1841 |     "description": "Documentation for Conversations API",
1842 |     "version": "1.0",
1843 |     "contact": {}
1844 |   },
1845 |   "tags": [
1846 |     {
1847 |       "name": "Conversations",
1848 |       "description": "Documentation for Conversations API"
1849 |     },
1850 |     {
1851 |       "name": "Search",
1852 |       "description": "Documentation for Conversations API"
1853 |     }
1854 |   ],
1855 |   "servers": [
1856 |     {
1857 |       "url": "https://services.leadconnectorhq.com"
1858 |     }
1859 |   ],
1860 |   "components": {
1861 |     "securitySchemes": {
1862 |       "bearer": {
1863 |         "scheme": "bearer",
1864 |         "bearerFormat": "JWT",
1865 |         "name": "Authorization",
1866 |         "in": "header",
1867 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1868 |         "type": "http"
1869 |       },
1870 |       "Location-Access": {
1871 |         "scheme": "bearer",
1872 |         "bearerFormat": "JWT",
1873 |         "name": "Authorization",
1874 |         "in": "header",
1875 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1876 |         "type": "http"
1877 |       },
1878 |       "Agency-Access": {
1879 |         "scheme": "bearer",
1880 |         "bearerFormat": "JWT",
1881 |         "name": "Authorization",
1882 |         "in": "header",
1883 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
1884 |         "type": "http"
1885 |       }
1886 |     },
1887 |     "schemas": {
1888 |       "BadRequestDTO": {
1889 |         "type": "object",
1890 |         "properties": {
1891 |           "statusCode": {
1892 |             "type": "number",
1893 |             "example": 400
1894 |           },
1895 |           "message": {
1896 |             "type": "string",
1897 |             "example": "Bad Request"
1898 |           }
1899 |         }
1900 |       },
1901 |       "UnauthorizedDTO": {
1902 |         "type": "object",
1903 |         "properties": {
1904 |           "statusCode": {
1905 |             "type": "number",
1906 |             "example": 401
1907 |           },
1908 |           "message": {
1909 |             "type": "string",
1910 |             "example": "Invalid token: access token is invalid"
1911 |           },
1912 |           "error": {
1913 |             "type": "string",
1914 |             "example": "Unauthorized"
1915 |           }
1916 |         }
1917 |       },
1918 |       "StartAfterNumberSchema": {
1919 |         "type": "object",
1920 |         "properties": {
1921 |           "startAfterDate": {
1922 |             "type": "number",
1923 |             "description": "Search to begin after the specified date - should contain the sort value of the last document",
1924 |             "example": 1600854
1925 |           }
1926 |         }
1927 |       },
1928 |       "StartAfterArrayNumberSchema": {
1929 |         "type": "object",
1930 |         "properties": {
1931 |           "startAfterDate": {
1932 |             "description": "Search to begin after the specified date - should contain the sort value of the last document",
1933 |             "example": [
1934 |               1600854,
1935 |               1600851
1936 |             ],
1937 |             "type": "array",
1938 |             "items": {
1939 |               "type": "string"
1940 |             }
1941 |           }
1942 |         }
1943 |       },
1944 |       "ConversationSchema": {
1945 |         "type": "object",
1946 |         "properties": {
1947 |           "id": {
1948 |             "type": "string",
1949 |             "description": "Conversation Id",
1950 |             "example": "ABCHkzuJQ8ZMd4Te84GK"
1951 |           },
1952 |           "contactId": {
1953 |             "type": "string",
1954 |             "description": "Contact Id",
1955 |             "example": "ABCHkzuJQ8ZMd4Te84GK"
1956 |           },
1957 |           "locationId": {
1958 |             "type": "string",
1959 |             "description": "Location Id",
1960 |             "example": "ABCHkzuJQ8ZMd4Te84GK"
1961 |           },
1962 |           "lastMessageBody": {
1963 |             "type": "string",
1964 |             "description": "Content of the most recent message in the conversation",
1965 |             "example": "This is a sample message body"
1966 |           },
1967 |           "lastMessageType": {
1968 |             "type": "string",
1969 |             "description": "Channel/type of the most recent message (SMS, Email, Call, etc)",
1970 |             "example": "TYPE_SMS",
1971 |             "enum": [
1972 |               "TYPE_CALL",
1973 |               "TYPE_SMS",
1974 |               "TYPE_EMAIL",
1975 |               "TYPE_SMS_REVIEW_REQUEST",
1976 |               "TYPE_WEBCHAT",
1977 |               "TYPE_SMS_NO_SHOW_REQUEST",
1978 |               "TYPE_CAMPAIGN_SMS",
1979 |               "TYPE_CAMPAIGN_CALL",
1980 |               "TYPE_CAMPAIGN_EMAIL",
1981 |               "TYPE_CAMPAIGN_VOICEMAIL",
1982 |               "TYPE_FACEBOOK",
1983 |               "TYPE_CAMPAIGN_FACEBOOK",
1984 |               "TYPE_CAMPAIGN_MANUAL_CALL",
1985 |               "TYPE_CAMPAIGN_MANUAL_SMS",
1986 |               "TYPE_GMB",
1987 |               "TYPE_CAMPAIGN_GMB",
1988 |               "TYPE_REVIEW",
1989 |               "TYPE_INSTAGRAM",
1990 |               "TYPE_WHATSAPP",
1991 |               "TYPE_CUSTOM_SMS",
1992 |               "TYPE_CUSTOM_EMAIL",
1993 |               "TYPE_CUSTOM_PROVIDER_SMS",
1994 |               "TYPE_CUSTOM_PROVIDER_EMAIL",
1995 |               "TYPE_IVR_CALL",
1996 |               "TYPE_ACTIVITY_CONTACT",
1997 |               "TYPE_ACTIVITY_INVOICE",
1998 |               "TYPE_ACTIVITY_PAYMENT",
1999 |               "TYPE_ACTIVITY_OPPORTUNITY",
2000 |               "TYPE_LIVE_CHAT",
2001 |               "TYPE_LIVE_CHAT_INFO_MESSAGE",
2002 |               "TYPE_ACTIVITY_APPOINTMENT",
2003 |               "TYPE_FACEBOOK_COMMENT",
2004 |               "TYPE_INSTAGRAM_COMMENT",
2005 |               "TYPE_CUSTOM_CALL",
2006 |               "TYPE_INTERNAL_COMMENT"
2007 |             ]
2008 |           },
2009 |           "type": {
2010 |             "type": "string",
2011 |             "description": "Primary channel/type of the conversation (Phone, Email, etc)",
2012 |             "example": "TYPE_PHONE",
2013 |             "enum": [
2014 |               "TYPE_PHONE",
2015 |               "TYPE_EMAIL",
2016 |               "TYPE_FB_MESSENGER",
2017 |               "TYPE_REVIEW",
2018 |               "TYPE_GROUP_SMS"
2019 |             ]
2020 |           },
2021 |           "unreadCount": {
2022 |             "type": "number",
2023 |             "description": "Number of unread messages in this conversation",
2024 |             "example": 1
2025 |           },
2026 |           "fullName": {
2027 |             "type": "string",
2028 |             "description": "Complete name of the contact (first and last name)",
2029 |             "example": "John Doe"
2030 |           },
2031 |           "contactName": {
2032 |             "type": "string",
2033 |             "description": "Alternative display name for the contact - used when full name is not available",
2034 |             "example": "John Doe Company"
2035 |           },
2036 |           "email": {
2037 |             "type": "string",
2038 |             "description": "Primary email address of the contact",
2039 |             "example": "johndoe@mailingdomain.com"
2040 |           },
2041 |           "phone": {
2042 |             "type": "string",
2043 |             "description": "Primary phone number of the contact",
2044 |             "example": "+15550001234"
2045 |           }
2046 |         },
2047 |         "required": [
2048 |           "id",
2049 |           "contactId",
2050 |           "locationId",
2051 |           "lastMessageBody",
2052 |           "lastMessageType",
2053 |           "type",
2054 |           "unreadCount",
2055 |           "fullName",
2056 |           "contactName",
2057 |           "email",
2058 |           "phone"
2059 |         ]
2060 |       },
2061 |       "SendConversationResponseDto": {
2062 |         "type": "object",
2063 |         "properties": {
2064 |           "conversations": {
2065 |             "description": "The list of all conversations found for the given query",
2066 |             "type": "array",
2067 |             "items": {
2068 |               "$ref": "#/components/schemas/ConversationSchema"
2069 |             }
2070 |           },
2071 |           "total": {
2072 |             "type": "number",
2073 |             "description": "Total Number of results found for the given query",
2074 |             "example": 100
2075 |           }
2076 |         },
2077 |         "required": [
2078 |           "conversations",
2079 |           "total"
2080 |         ]
2081 |       },
2082 |       "CreateConversationDto": {
2083 |         "type": "object",
2084 |         "properties": {
2085 |           "locationId": {
2086 |             "type": "string",
2087 |             "description": "Location ID as string",
2088 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2089 |           },
2090 |           "contactId": {
2091 |             "type": "string",
2092 |             "description": "Contact ID as string",
2093 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2094 |           }
2095 |         },
2096 |         "required": [
2097 |           "locationId",
2098 |           "contactId"
2099 |         ]
2100 |       },
2101 |       "ConversationCreateResponseDto": {
2102 |         "type": "object",
2103 |         "properties": {
2104 |           "id": {
2105 |             "type": "string",
2106 |             "description": "Unique identifier for the conversation",
2107 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2108 |           },
2109 |           "dateUpdated": {
2110 |             "type": "string",
2111 |             "description": "Date when the conversation was last updated",
2112 |             "example": "2023-10-01T12:00:00Z"
2113 |           },
2114 |           "dateAdded": {
2115 |             "type": "string",
2116 |             "description": "Date when the conversation was created",
2117 |             "example": "2023-10-01T12:00:00Z"
2118 |           },
2119 |           "deleted": {
2120 |             "type": "boolean",
2121 |             "description": "Flag indicating if this conversation has been deleted",
2122 |             "example": false
2123 |           },
2124 |           "contactId": {
2125 |             "type": "string",
2126 |             "description": "Unique identifier of the contact associated with this conversation",
2127 |             "example": "ve9EPM428kjkvShlRW1KT"
2128 |           },
2129 |           "locationId": {
2130 |             "type": "string",
2131 |             "description": "Unique identifier of the business location where this conversation takes place",
2132 |             "example": "ve9EPM428kjkvShlRW1KT"
2133 |           },
2134 |           "lastMessageDate": {
2135 |             "type": "string",
2136 |             "description": "Date of the last message in the conversation",
2137 |             "example": "2023-10-01T12:00:00Z"
2138 |           },
2139 |           "assignedTo": {
2140 |             "type": "string",
2141 |             "description": "Unique identifier of the team member assigned to this conversation",
2142 |             "example": "ve9EPM428kjkvShlRW1KT"
2143 |           }
2144 |         },
2145 |         "required": [
2146 |           "id",
2147 |           "dateUpdated",
2148 |           "dateAdded",
2149 |           "deleted",
2150 |           "contactId",
2151 |           "locationId",
2152 |           "lastMessageDate"
2153 |         ]
2154 |       },
2155 |       "CreateConversationSuccessResponse": {
2156 |         "type": "object",
2157 |         "properties": {
2158 |           "success": {
2159 |             "type": "boolean",
2160 |             "description": "Indicates whether the API request was successful.",
2161 |             "example": true
2162 |           },
2163 |           "conversation": {
2164 |             "description": "Conversation data of the provided conversation ID.",
2165 |             "allOf": [
2166 |               {
2167 |                 "$ref": "#/components/schemas/ConversationCreateResponseDto"
2168 |               }
2169 |             ]
2170 |           }
2171 |         },
2172 |         "required": [
2173 |           "success",
2174 |           "conversation"
2175 |         ]
2176 |       },
2177 |       "GetConversationByIdResponse": {
2178 |         "type": "object",
2179 |         "properties": {
2180 |           "contactId": {
2181 |             "type": "string",
2182 |             "description": "Unique identifier of the contact associated with this conversation",
2183 |             "example": "ve9EPM428kjkvShlRW1KT"
2184 |           },
2185 |           "locationId": {
2186 |             "type": "string",
2187 |             "description": "Unique identifier of the business location where this conversation takes place",
2188 |             "example": "ve9EPM428kjkvShlRW1KT"
2189 |           },
2190 |           "deleted": {
2191 |             "type": "boolean",
2192 |             "description": "Flag indicating if this conversation has been moved to trash/deleted",
2193 |             "example": false
2194 |           },
2195 |           "inbox": {
2196 |             "type": "boolean",
2197 |             "description": "Flag indicating if this conversation is currently in the main inbox view",
2198 |             "example": true
2199 |           },
2200 |           "type": {
2201 |             "type": "number",
2202 |             "description": "Communication channel type for this conversation: 1 (Phone), 2 (Email), 3 (Facebook Messenger), 4 (Review), 5 (Group SMS), 6 (Internal Chat - coming soon)"
2203 |           },
2204 |           "unreadCount": {
2205 |             "type": "number",
2206 |             "description": "Number of messages in this conversation that have not been read by the user",
2207 |             "example": 1
2208 |           },
2209 |           "assignedTo": {
2210 |             "type": "string",
2211 |             "description": "Unique identifier of the team member currently responsible for handling this conversation",
2212 |             "example": "ve9EPM428kjkvShlRW1KT"
2213 |           },
2214 |           "id": {
2215 |             "type": "string",
2216 |             "description": "Unique identifier for this specific conversation thread",
2217 |             "example": "ve9EPM428kjkvShlRW1KT"
2218 |           },
2219 |           "starred": {
2220 |             "type": "boolean",
2221 |             "description": "Flag indicating if this conversation has been marked as important/starred by the user",
2222 |             "example": true
2223 |           }
2224 |         },
2225 |         "required": [
2226 |           "contactId",
2227 |           "locationId",
2228 |           "deleted",
2229 |           "inbox",
2230 |           "type",
2231 |           "unreadCount",
2232 |           "id"
2233 |         ]
2234 |       },
2235 |       "UpdateConversationDto": {
2236 |         "type": "object",
2237 |         "properties": {
2238 |           "locationId": {
2239 |             "type": "string",
2240 |             "description": "Location ID as string",
2241 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2242 |           },
2243 |           "unreadCount": {
2244 |             "type": "number",
2245 |             "description": "Count of unread messages in the conversation",
2246 |             "example": 1
2247 |           },
2248 |           "starred": {
2249 |             "type": "boolean",
2250 |             "description": "Starred status of the conversation.",
2251 |             "example": true
2252 |           },
2253 |           "feedback": {
2254 |             "type": "object"
2255 |           }
2256 |         },
2257 |         "required": [
2258 |           "locationId"
2259 |         ]
2260 |       },
2261 |       "ConversationDto": {
2262 |         "type": "object",
2263 |         "properties": {
2264 |           "id": {
2265 |             "type": "string",
2266 |             "description": "Contact ID as string",
2267 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2268 |           },
2269 |           "locationId": {
2270 |             "type": "string",
2271 |             "description": "Location ID as string",
2272 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2273 |           },
2274 |           "contactId": {
2275 |             "type": "string",
2276 |             "description": "Contact ID as string",
2277 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2278 |           },
2279 |           "assignedTo": {
2280 |             "type": "string",
2281 |             "description": "Assigned User ID as string",
2282 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2283 |           },
2284 |           "userId": {
2285 |             "type": "string",
2286 |             "description": "User ID as string",
2287 |             "example": "tDtDnQdgm2LXpyiqYvZ6"
2288 |           },
2289 |           "lastMessageBody": {
2290 |             "type": "string",
2291 |             "description": "Last message body as string",
2292 |             "example": "Hello, this is the message body"
2293 |           },
2294 |           "lastMessageDate": {
2295 |             "type": "string",
2296 |             "description": "Last message date as UTC",
2297 |             "example": "1628008053263"
2298 |           },
2299 |           "lastMessageType": {
2300 |             "type": "string",
2301 |             "description": "Type of the last message sent/received in the conversation.",
2302 |             "enum": [
2303 |               "TYPE_CALL",
2304 |               "TYPE_SMS",
2305 |               "TYPE_EMAIL",
2306 |               "TYPE_SMS_REVIEW_REQUEST",
2307 |               "TYPE_WEBCHAT",
2308 |               "TYPE_SMS_NO_SHOW_REQUEST",
2309 |               "TYPE_CAMPAIGN_SMS",
2310 |               "TYPE_CAMPAIGN_CALL",
2311 |               "TYPE_CAMPAIGN_EMAIL",
2312 |               "TYPE_CAMPAIGN_VOICEMAIL",
2313 |               "TYPE_FACEBOOK",
2314 |               "TYPE_CAMPAIGN_FACEBOOK",
2315 |               "TYPE_CAMPAIGN_MANUAL_CALL",
2316 |               "TYPE_CAMPAIGN_MANUAL_SMS",
2317 |               "TYPE_GMB",
2318 |               "TYPE_CAMPAIGN_GMB",
2319 |               "TYPE_REVIEW",
2320 |               "TYPE_INSTAGRAM",
2321 |               "TYPE_WHATSAPP",
2322 |               "TYPE_CUSTOM_SMS",
2323 |               "TYPE_CUSTOM_EMAIL",
2324 |               "TYPE_CUSTOM_PROVIDER_SMS",
2325 |               "TYPE_CUSTOM_PROVIDER_EMAIL",
2326 |               "TYPE_IVR_CALL",
2327 |               "TYPE_ACTIVITY_CONTACT",
2328 |               "TYPE_ACTIVITY_INVOICE",
2329 |               "TYPE_ACTIVITY_PAYMENT",
2330 |               "TYPE_ACTIVITY_OPPORTUNITY",
2331 |               "TYPE_LIVE_CHAT",
2332 |               "TYPE_LIVE_CHAT_INFO_MESSAGE",
2333 |               "TYPE_ACTIVITY_APPOINTMENT",
2334 |               "TYPE_FACEBOOK_COMMENT",
2335 |               "TYPE_INSTAGRAM_COMMENT",
2336 |               "TYPE_CUSTOM_CALL",
2337 |               "TYPE_INTERNAL_COMMENT"
2338 |             ],
2339 |             "example": "TYPE_CALL"
2340 |           },
2341 |           "unreadCount": {
2342 |             "type": "number",
2343 |             "description": "Count of unread messages in the conversation",
2344 |             "example": 1
2345 |           },
2346 |           "inbox": {
2347 |             "type": "boolean",
2348 |             "description": "Inbox status of the conversation.",
2349 |             "example": true
2350 |           },
2351 |           "starred": {
2352 |             "type": "boolean",
2353 |             "description": "Starred status of the conversation.",
2354 |             "example": true
2355 |           },
2356 |           "deleted": {
2357 |             "type": "boolean",
2358 |             "description": "Deleted status of the conversation.",
2359 |             "example": false
2360 |           }
2361 |         },
2362 |         "required": [
2363 |           "locationId",
2364 |           "contactId",
2365 |           "deleted"
2366 |         ]
2367 |       },
2368 |       "GetConversationSuccessfulResponse": {
2369 |         "type": "object",
2370 |         "properties": {
2371 |           "success": {
2372 |             "type": "boolean",
2373 |             "description": "Boolean value as the API response.",
2374 |             "example": true
2375 |           },
2376 |           "conversation": {
2377 |             "description": "Conversation data of the provided conversation ID.",
2378 |             "allOf": [
2379 |               {
2380 |                 "$ref": "#/components/schemas/ConversationDto"
2381 |               }
2382 |             ]
2383 |           }
2384 |         },
2385 |         "required": [
2386 |           "success",
2387 |           "conversation"
2388 |         ]
2389 |       },
2390 |       "DeleteConversationSuccessfulResponse": {
2391 |         "type": "object",
2392 |         "properties": {
2393 |           "success": {
2394 |             "type": "boolean",
2395 |             "description": "Boolean value as the API response.",
2396 |             "example": true
2397 |           }
2398 |         },
2399 |         "required": [
2400 |           "success"
2401 |         ]
2402 |       },
2403 |       "GetEmailMessageResponseDto": {
2404 |         "type": "object",
2405 |         "properties": {
2406 |           "id": {
2407 |             "type": "string",
2408 |             "example": "ve9EPM428h8vShlRW1KT"
2409 |           },
2410 |           "altId": {
2411 |             "type": "string",
2412 |             "example": "ve9EPM428h8vShlRW1KT",
2413 |             "description": "External Id"
2414 |           },
2415 |           "threadId": {
2416 |             "type": "string",
2417 |             "example": "ve9EPM428h8vShlRW1KT",
2418 |             "description": "Message Id or thread Id"
2419 |           },
2420 |           "locationId": {
2421 |             "type": "string",
2422 |             "example": "ve9EPM428h8vShlRW1KT"
2423 |           },
2424 |           "contactId": {
2425 |             "type": "string",
2426 |             "example": "ve9EPM428h8vShlRW1KT"
2427 |           },
2428 |           "conversationId": {
2429 |             "type": "string",
2430 |             "example": "ve9EPM428h8vShlRW1KT"
2431 |           },
2432 |           "dateAdded": {
2433 |             "type": "string",
2434 |             "example": "2024-03-27T18:13:49.000Z"
2435 |           },
2436 |           "subject": {
2437 |             "type": "string",
2438 |             "example": "Order confirm"
2439 |           },
2440 |           "body": {
2441 |             "type": "string",
2442 |             "example": "Hi there"
2443 |           },
2444 |           "direction": {
2445 |             "type": "string",
2446 |             "enum": [
2447 |               "inbound",
2448 |               "outbound"
2449 |             ]
2450 |           },
2451 |           "status": {
2452 |             "type": "string",
2453 |             "enum": [
2454 |               "pending",
2455 |               "scheduled",
2456 |               "sent",
2457 |               "delivered",
2458 |               "read",
2459 |               "undelivered",
2460 |               "connected",
2461 |               "failed",
2462 |               "opened"
2463 |             ]
2464 |           },
2465 |           "contentType": {
2466 |             "type": "string",
2467 |             "example": "text/plain"
2468 |           },
2469 |           "attachments": {
2470 |             "description": "An array of attachment URLs.",
2471 |             "type": "array",
2472 |             "items": {
2473 |               "type": "string"
2474 |             }
2475 |           },
2476 |           "provider": {
2477 |             "type": "string",
2478 |             "examples": [
2479 |               "Leadconnector Gmail",
2480 |               "mailgun",
2481 |               "smtp",
2482 |               "custom"
2483 |             ]
2484 |           },
2485 |           "from": {
2486 |             "type": "string",
2487 |             "description": "Name and Email Id of the sender"
2488 |           },
2489 |           "to": {
2490 |             "description": "List of email Ids of the receivers",
2491 |             "type": "array",
2492 |             "items": {
2493 |               "type": "string"
2494 |             }
2495 |           },
2496 |           "cc": {
2497 |             "description": "List of email Ids of the people in the cc field",
2498 |             "type": "array",
2499 |             "items": {
2500 |               "type": "string"
2501 |             }
2502 |           },
2503 |           "bcc": {
2504 |             "description": "List of email Ids of the people in the bcc field",
2505 |             "type": "array",
2506 |             "items": {
2507 |               "type": "string"
2508 |             }
2509 |           },
2510 |           "replyToMessageId": {
2511 |             "type": "string",
2512 |             "description": "In case of reply, email message Id of the reply to email"
2513 |           },
2514 |           "source": {
2515 |             "type": "string",
2516 |             "enum": [
2517 |               "workflow",
2518 |               "bulk_actions",
2519 |               "campaign",
2520 |               "api",
2521 |               "app"
2522 |             ],
2523 |             "description": "Email source"
2524 |           },
2525 |           "conversationProviderId": {
2526 |             "type": "string",
2527 |             "example": "cI08i1Bls3iTB9bKgF01",
2528 |             "description": "Conversation provider ID"
2529 |           }
2530 |         },
2531 |         "required": [
2532 |           "id",
2533 |           "threadId",
2534 |           "locationId",
2535 |           "contactId",
2536 |           "conversationId",
2537 |           "dateAdded",
2538 |           "body",
2539 |           "direction",
2540 |           "contentType",
2541 |           "from",
2542 |           "to"
2543 |         ]
2544 |       },
2545 |       "CancelScheduledResponseDto": {
2546 |         "type": "object",
2547 |         "properties": {
2548 |           "status": {
2549 |             "type": "number",
2550 |             "description": "HTTP Status code of the request",
2551 |             "example": 404
2552 |           },
2553 |           "message": {
2554 |             "type": "string",
2555 |             "description": "Error message of the request",
2556 |             "example": "Failed cancel the scheduled message"
2557 |           }
2558 |         },
2559 |         "required": [
2560 |           "status",
2561 |           "message"
2562 |         ]
2563 |       },
2564 |       "MessageMeta": {
2565 |         "type": "object",
2566 |         "properties": {
2567 |           "callDuration": {
2568 |             "type": "string",
2569 |             "description": "Call duration in seconds",
2570 |             "example": 120
2571 |           },
2572 |           "callStatus": {
2573 |             "type": "string",
2574 |             "description": "Call status - can be pending, completed, answered, busy, no-answer, failed, canceled, or voicemail",
2575 |             "example": "completed",
2576 |             "enum": [
2577 |               "pending",
2578 |               "completed",
2579 |               "answered",
2580 |               "busy",
2581 |               "no-answer",
2582 |               "failed",
2583 |               "canceled",
2584 |               "voicemail"
2585 |             ]
2586 |           },
2587 |           "email": {
2588 |             "type": "object",
2589 |             "description": "meta will contain email, for message type 3 (email). messageIds is list of all email message ids under the message thread",
2590 |             "example": {
2591 |               "email": {
2592 |                 "messageIds": [
2593 |                   "ve9EPM428kjkvShlRW1KT",
2594 |                   "ve9EPs1028kjkvShlRW1KT"
2595 |                 ]
2596 |               }
2597 |             }
2598 |           }
2599 |         }
2600 |       },
2601 |       "GetMessageResponseDto": {
2602 |         "type": "object",
2603 |         "properties": {
2604 |           "id": {
2605 |             "type": "string",
2606 |             "example": "ve9EPM428h8vShlRW1KT"
2607 |           },
2608 |           "type": {
2609 |             "type": "number",
2610 |             "example": 1
2611 |           },
2612 |           "messageType": {
2613 |             "type": "string",
2614 |             "description": "Type of the message as a string",
2615 |             "example": "SMS",
2616 |             "enum": [
2617 |               "TYPE_CALL",
2618 |               "TYPE_SMS",
2619 |               "TYPE_EMAIL",
2620 |               "TYPE_SMS_REVIEW_REQUEST",
2621 |               "TYPE_WEBCHAT",
2622 |               "TYPE_SMS_NO_SHOW_REQUEST",
2623 |               "TYPE_CAMPAIGN_SMS",
2624 |               "TYPE_CAMPAIGN_CALL",
2625 |               "TYPE_CAMPAIGN_EMAIL",
2626 |               "TYPE_CAMPAIGN_VOICEMAIL",
2627 |               "TYPE_FACEBOOK",
2628 |               "TYPE_CAMPAIGN_FACEBOOK",
2629 |               "TYPE_CAMPAIGN_MANUAL_CALL",
2630 |               "TYPE_CAMPAIGN_MANUAL_SMS",
2631 |               "TYPE_GMB",
2632 |               "TYPE_CAMPAIGN_GMB",
2633 |               "TYPE_REVIEW",
2634 |               "TYPE_INSTAGRAM",
2635 |               "TYPE_WHATSAPP",
2636 |               "TYPE_CUSTOM_SMS",
2637 |               "TYPE_CUSTOM_EMAIL",
2638 |               "TYPE_CUSTOM_PROVIDER_SMS",
2639 |               "TYPE_CUSTOM_PROVIDER_EMAIL",
2640 |               "TYPE_IVR_CALL",
2641 |               "TYPE_ACTIVITY_CONTACT",
2642 |               "TYPE_ACTIVITY_INVOICE",
2643 |               "TYPE_ACTIVITY_PAYMENT",
2644 |               "TYPE_ACTIVITY_OPPORTUNITY",
2645 |               "TYPE_LIVE_CHAT",
2646 |               "TYPE_LIVE_CHAT_INFO_MESSAGE",
2647 |               "TYPE_ACTIVITY_APPOINTMENT",
2648 |               "TYPE_FACEBOOK_COMMENT",
2649 |               "TYPE_INSTAGRAM_COMMENT",
2650 |               "TYPE_CUSTOM_CALL",
2651 |               "TYPE_INTERNAL_COMMENT"
2652 |             ]
2653 |           },
2654 |           "locationId": {
2655 |             "type": "string",
2656 |             "example": "ve9EPM428h8vShlRW1KT"
2657 |           },
2658 |           "contactId": {
2659 |             "type": "string",
2660 |             "example": "ve9EPM428h8vShlRW1KT"
2661 |           },
2662 |           "conversationId": {
2663 |             "type": "string",
2664 |             "example": "ve9EPM428h8vShlRW1KT"
2665 |           },
2666 |           "dateAdded": {
2667 |             "type": "string",
2668 |             "example": "2024-03-27T18:13:49.000Z"
2669 |           },
2670 |           "body": {
2671 |             "type": "string",
2672 |             "example": "Hi there"
2673 |           },
2674 |           "direction": {
2675 |             "type": "string",
2676 |             "enum": [
2677 |               "inbound",
2678 |               "outbound"
2679 |             ]
2680 |           },
2681 |           "status": {
2682 |             "type": "string",
2683 |             "enum": [
2684 |               "connected",
2685 |               "delivered",
2686 |               "failed",
2687 |               "opened",
2688 |               "pending",
2689 |               "read",
2690 |               "scheduled",
2691 |               "sent",
2692 |               "undelivered",
2693 |               "clicked",
2694 |               "opt_out"
2695 |             ]
2696 |           },
2697 |           "contentType": {
2698 |             "type": "string",
2699 |             "example": "text/plain"
2700 |           },
2701 |           "attachments": {
2702 |             "description": "An array of attachment URLs. Attachments will be empty for Call and Voicemails, type 1 and 10. Please use get call recording API to fetch call recording and voicemails.",
2703 |             "type": "array",
2704 |             "items": {
2705 |               "type": "string"
2706 |             }
2707 |           },
2708 |           "meta": {
2709 |             "$ref": "#/components/schemas/MessageMeta"
2710 |           },
2711 |           "source": {
2712 |             "type": "string",
2713 |             "enum": [
2714 |               "workflow",
2715 |               "bulk_actions",
2716 |               "campaign",
2717 |               "api",
2718 |               "app"
2719 |             ],
2720 |             "description": "Message source"
2721 |           },
2722 |           "userId": {
2723 |             "type": "string",
2724 |             "description": "User Id",
2725 |             "example": "ve9EPM428kjkvShlRW1KT"
2726 |           },
2727 |           "conversationProviderId": {
2728 |             "type": "string",
2729 |             "description": "Conversation Provider Id",
2730 |             "example": "ve9EPM428kjkvShlRW1KT"
2731 |           }
2732 |         },
2733 |         "required": [
2734 |           "id",
2735 |           "type",
2736 |           "messageType",
2737 |           "locationId",
2738 |           "contactId",
2739 |           "conversationId",
2740 |           "dateAdded",
2741 |           "direction",
2742 |           "contentType"
2743 |         ]
2744 |       },
2745 |       "GetMessagesByConversationResponseDto": {
2746 |         "type": "object",
2747 |         "properties": {
2748 |           "lastMessageId": {
2749 |             "type": "string",
2750 |             "description": "Id of the last message in the messages array",
2751 |             "example": "p1mRSHeLDhAms5q0LMr4"
2752 |           },
2753 |           "nextPage": {
2754 |             "type": "boolean",
2755 |             "description": "Next page value true indicates only 20 message is in the response. Rest of the messages are in the next page. Please use the lastMessageId value in the query to get the next page messages",
2756 |             "example": true
2757 |           },
2758 |           "messages": {
2759 |             "description": "Array of messages",
2760 |             "type": "array",
2761 |             "items": {
2762 |               "$ref": "#/components/schemas/GetMessageResponseDto"
2763 |             }
2764 |           }
2765 |         },
2766 |         "required": [
2767 |           "lastMessageId",
2768 |           "nextPage",
2769 |           "messages"
2770 |         ]
2771 |       },
2772 |       "SendMessageBodyDto": {
2773 |         "type": "object",
2774 |         "properties": {
2775 |           "type": {
2776 |             "type": "string",
2777 |             "enum": [
2778 |               "SMS",
2779 |               "Email",
2780 |               "WhatsApp",
2781 |               "IG",
2782 |               "FB",
2783 |               "Custom",
2784 |               "Live_Chat"
2785 |             ],
2786 |             "description": "Type of message being sent",
2787 |             "example": "Email"
2788 |           },
2789 |           "contactId": {
2790 |             "type": "string",
2791 |             "description": "ID of the contact receiving the message",
2792 |             "example": "abc123def456"
2793 |           },
2794 |           "appointmentId": {
2795 |             "type": "string",
2796 |             "description": "ID of the associated appointment",
2797 |             "example": "appt123"
2798 |           },
2799 |           "attachments": {
2800 |             "description": "Array of attachment URLs",
2801 |             "example": [
2802 |               "https://storage.com/file1.pdf",
2803 |               "https://storage.com/file2.jpg"
2804 |             ],
2805 |             "type": "array",
2806 |             "items": {
2807 |               "type": "string"
2808 |             }
2809 |           },
2810 |           "emailFrom": {
2811 |             "type": "string",
2812 |             "description": "Email address to send from",
2813 |             "example": "sender@company.com"
2814 |           },
2815 |           "emailCc": {
2816 |             "description": "Array of CC email addresses",
2817 |             "example": [
2818 |               "cc1@company.com",
2819 |               "cc2@company.com"
2820 |             ],
2821 |             "type": "array",
2822 |             "items": {
2823 |               "type": "string"
2824 |             }
2825 |           },
2826 |           "emailBcc": {
2827 |             "description": "Array of BCC email addresses",
2828 |             "example": [
2829 |               "bcc1@company.com",
2830 |               "bcc2@company.com"
2831 |             ],
2832 |             "type": "array",
2833 |             "items": {
2834 |               "type": "string"
2835 |             }
2836 |           },
2837 |           "html": {
2838 |             "type": "string",
2839 |             "description": "HTML content of the message",
2840 |             "example": "<p>Hello World</p>"
2841 |           },
2842 |           "message": {
2843 |             "type": "string",
2844 |             "description": "Text content of the message",
2845 |             "example": "Hello, how can I help you today?"
2846 |           },
2847 |           "subject": {
2848 |             "type": "string",
2849 |             "description": "Subject line for email messages",
2850 |             "example": "Important Update"
2851 |           },
2852 |           "replyMessageId": {
2853 |             "type": "string",
2854 |             "description": "ID of message being replied to",
2855 |             "example": "msg123"
2856 |           },
2857 |           "templateId": {
2858 |             "type": "string",
2859 |             "description": "ID of message template",
2860 |             "example": "template123"
2861 |           },
2862 |           "threadId": {
2863 |             "type": "string",
2864 |             "description": "ID of message thread. For email messages, this is the message ID that contains multiple email messages in the thread",
2865 |             "example": "thread123"
2866 |           },
2867 |           "scheduledTimestamp": {
2868 |             "type": "number",
2869 |             "description": "UTC Timestamp (in seconds) at which the message should be scheduled",
2870 |             "example": 1669287863
2871 |           },
2872 |           "conversationProviderId": {
2873 |             "type": "string",
2874 |             "description": "ID of conversation provider",
2875 |             "example": "provider123"
2876 |           },
2877 |           "emailTo": {
2878 |             "type": "string",
2879 |             "description": "Email address to send to, if different from contact's primary email. This should be a valid email address associated with the contact.",
2880 |             "example": "recipient@company.com"
2881 |           },
2882 |           "emailReplyMode": {
2883 |             "type": "string",
2884 |             "enum": [
2885 |               "reply",
2886 |               "reply_all"
2887 |             ],
2888 |             "description": "Mode for email replies",
2889 |             "example": "reply_all"
2890 |           },
2891 |           "fromNumber": {
2892 |             "type": "string",
2893 |             "description": "Phone number used as the sender number for outbound messages",
2894 |             "example": "+1499499299"
2895 |           },
2896 |           "toNumber": {
2897 |             "type": "string",
2898 |             "description": "Recipient phone number for outbound messages",
2899 |             "example": "+1439499299"
2900 |           }
2901 |         },
2902 |         "required": [
2903 |           "type",
2904 |           "contactId"
2905 |         ]
2906 |       },
2907 |       "SendMessageResponseDto": {
2908 |         "type": "object",
2909 |         "properties": {
2910 |           "conversationId": {
2911 |             "type": "string",
2912 |             "description": "Conversation ID.",
2913 |             "example": "ABC12h2F6uBrIkfXYazb"
2914 |           },
2915 |           "emailMessageId": {
2916 |             "type": "string",
2917 |             "description": "This contains the email message id (only for Email type). Use this ID to send inbound replies to GHL to create a threaded email.",
2918 |             "example": "rnGyqh2F6uBrIkfhFo9A"
2919 |           },
2920 |           "messageId": {
2921 |             "type": "string",
2922 |             "description": "This is the main Message ID",
2923 |             "example": "t22c6DQcTDf3MjRhwf77"
2924 |           },
2925 |           "messageIds": {
2926 |             "description": "When sending via the GMB channel, we will be returning list of `messageIds` instead of single `messageId`.",
2927 |             "type": "array",
2928 |             "items": {
2929 |               "type": "string"
2930 |             }
2931 |           },
2932 |           "msg": {
2933 |             "type": "string",
2934 |             "description": "Additional response message when sending a workflow message",
2935 |             "example": "Message queued successfully."
2936 |           }
2937 |         },
2938 |         "required": [
2939 |           "conversationId",
2940 |           "messageId"
2941 |         ]
2942 |       },
2943 |       "CallDataDTO": {
2944 |         "type": "object",
2945 |         "properties": {
2946 |           "to": {
2947 |             "type": "string",
2948 |             "description": "Phone number of the receiver",
2949 |             "example": "+15037081210"
2950 |           },
2951 |           "from": {
2952 |             "type": "string",
2953 |             "description": "Phone number of the dialer",
2954 |             "example": "+15037081210"
2955 |           },
2956 |           "status": {
2957 |             "type": "string",
2958 |             "description": "Call status",
2959 |             "example": "completed",
2960 |             "enum": [
2961 |               "pending",
2962 |               "completed",
2963 |               "answered",
2964 |               "busy",
2965 |               "no-answer",
2966 |               "failed",
2967 |               "canceled",
2968 |               "voicemail"
2969 |             ]
2970 |           }
2971 |         }
2972 |       },
2973 |       "ProcessMessageBodyDto": {
2974 |         "type": "object",
2975 |         "properties": {
2976 |           "type": {
2977 |             "type": "string",
2978 |             "description": "Message Type",
2979 |             "example": "SMS",
2980 |             "enum": [
2981 |               "SMS",
2982 |               "Email",
2983 |               "WhatsApp",
2984 |               "GMB",
2985 |               "IG",
2986 |               "FB",
2987 |               "Custom",
2988 |               "WebChat",
2989 |               "Live_Chat",
2990 |               "Call"
2991 |             ]
2992 |           },
2993 |           "attachments": {
2994 |             "description": "Array of attachments",
2995 |             "type": "array",
2996 |             "items": {
2997 |               "type": "string"
2998 |             }
2999 |           },
3000 |           "message": {
3001 |             "type": "string",
3002 |             "description": "Message Body"
3003 |           },
3004 |           "conversationId": {
3005 |             "type": "string",
3006 |             "description": "Conversation Id",
3007 |             "example": "ve9EPM428h8vShlRW1KT"
3008 |           },
3009 |           "conversationProviderId": {
3010 |             "type": "string",
3011 |             "description": "Conversation Provider Id",
3012 |             "example": "61d6d1f9cdac7612faf80753"
3013 |           },
3014 |           "html": {
3015 |             "type": "string",
3016 |             "description": "HTML Body of Email"
3017 |           },
3018 |           "subject": {
3019 |             "type": "string",
3020 |             "description": "Subject of the Email"
3021 |           },
3022 |           "emailFrom": {
3023 |             "type": "string",
3024 |             "description": "Email address to send from. This field is associated with the contact record and cannot be dynamically changed.",
3025 |             "example": "sender@company.com"
3026 |           },
3027 |           "emailTo": {
3028 |             "type": "string",
3029 |             "description": "Recipient email address. This field is associated with the contact record and cannot be dynamically changed."
3030 |           },
3031 |           "emailCc": {
3032 |             "description": "List of email address to CC",
3033 |             "example": [
3034 |               "john1@doe.com",
3035 |               "john2@doe.com"
3036 |             ],
3037 |             "type": "array",
3038 |             "items": {
3039 |               "type": "string"
3040 |             }
3041 |           },
3042 |           "emailBcc": {
3043 |             "description": "List of email address to BCC",
3044 |             "example": [
3045 |               "john1@doe.com",
3046 |               "john2@doe.com"
3047 |             ],
3048 |             "type": "array",
3049 |             "items": {
3050 |               "type": "string"
3051 |             }
3052 |           },
3053 |           "emailMessageId": {
3054 |             "type": "string",
3055 |             "description": "Send the email message id for which this email should be threaded. This is for replying to a specific email"
3056 |           },
3057 |           "altId": {
3058 |             "type": "string",
3059 |             "description": "external mail provider's message id",
3060 |             "example": "61d6d1f9cdac7612faf80753"
3061 |           },
3062 |           "direction": {
3063 |             "type": "object",
3064 |             "description": "Message direction, if required can be set manually, default is outbound",
3065 |             "default": "outbound",
3066 |             "example": [
3067 |               "outbound",
3068 |               "inbound"
3069 |             ]
3070 |           },
3071 |           "date": {
3072 |             "format": "date-time",
3073 |             "type": "string",
3074 |             "description": "Date of the inbound message"
3075 |           },
3076 |           "call": {
3077 |             "description": "Phone call dialer and receiver information",
3078 |             "allOf": [
3079 |               {
3080 |                 "$ref": "#/components/schemas/CallDataDTO"
3081 |               }
3082 |             ]
3083 |           }
3084 |         },
3085 |         "required": [
3086 |           "type",
3087 |           "conversationId",
3088 |           "conversationProviderId"
3089 |         ]
3090 |       },
3091 |       "ProcessMessageResponseDto": {
3092 |         "type": "object",
3093 |         "properties": {
3094 |           "success": {
3095 |             "type": "boolean"
3096 |           },
3097 |           "conversationId": {
3098 |             "type": "string",
3099 |             "description": "Conversation ID.",
3100 |             "example": "ABC12h2F6uBrIkfXYazb"
3101 |           },
3102 |           "messageId": {
3103 |             "type": "string",
3104 |             "description": "This is the main Message ID",
3105 |             "example": "t22c6DQcTDf3MjRhwf77"
3106 |           },
3107 |           "message": {
3108 |             "type": "string"
3109 |           },
3110 |           "contactId": {
3111 |             "type": "string"
3112 |           },
3113 |           "dateAdded": {
3114 |             "format": "date-time",
3115 |             "type": "string"
3116 |           },
3117 |           "emailMessageId": {
3118 |             "type": "string"
3119 |           }
3120 |         },
3121 |         "required": [
3122 |           "success",
3123 |           "conversationId",
3124 |           "messageId",
3125 |           "message"
3126 |         ]
3127 |       },
3128 |       "ProcessOutboundMessageBodyDto": {
3129 |         "type": "object",
3130 |         "properties": {
3131 |           "type": {
3132 |             "type": "string",
3133 |             "description": "Message Type",
3134 |             "example": "Call",
3135 |             "enum": [
3136 |               "Call"
3137 |             ]
3138 |           },
3139 |           "attachments": {
3140 |             "description": "Array of attachments",
3141 |             "type": "array",
3142 |             "items": {
3143 |               "type": "string"
3144 |             }
3145 |           },
3146 |           "conversationId": {
3147 |             "type": "string",
3148 |             "description": "Conversation Id",
3149 |             "example": "ve9EPM428h8vShlRW1KT"
3150 |           },
3151 |           "conversationProviderId": {
3152 |             "type": "string",
3153 |             "description": "Conversation Provider Id",
3154 |             "example": "61d6d1f9cdac7612faf80753"
3155 |           },
3156 |           "altId": {
3157 |             "type": "string",
3158 |             "description": "external mail provider's message id",
3159 |             "example": "61d6d1f9cdac7612faf80753"
3160 |           },
3161 |           "date": {
3162 |             "format": "date-time",
3163 |             "type": "string",
3164 |             "description": "Date of the outbound message"
3165 |           },
3166 |           "call": {
3167 |             "description": "Phone call dialer and receiver information",
3168 |             "allOf": [
3169 |               {
3170 |                 "$ref": "#/components/schemas/CallDataDTO"
3171 |               }
3172 |             ]
3173 |           }
3174 |         },
3175 |         "required": [
3176 |           "type",
3177 |           "conversationId",
3178 |           "conversationProviderId"
3179 |         ]
3180 |       },
3181 |       "UploadFilesDto": {
3182 |         "type": "object",
3183 |         "properties": {
3184 |           "conversationId": {
3185 |             "type": "string",
3186 |             "description": "Conversation Id",
3187 |             "example": "ve9EPM428h8vShlRW1KT"
3188 |           },
3189 |           "locationId": {
3190 |             "type": "string"
3191 |           },
3192 |           "attachmentUrls": {
3193 |             "type": "array",
3194 |             "items": {
3195 |               "type": "string"
3196 |             }
3197 |           }
3198 |         },
3199 |         "required": [
3200 |           "conversationId",
3201 |           "locationId",
3202 |           "attachmentUrls"
3203 |         ]
3204 |       },
3205 |       "UploadFilesResponseDto": {
3206 |         "type": "object",
3207 |         "properties": {
3208 |           "uploadedFiles": {
3209 |             "type": "object"
3210 |           }
3211 |         },
3212 |         "required": [
3213 |           "uploadedFiles"
3214 |         ]
3215 |       },
3216 |       "UploadFilesErrorResponseDto": {
3217 |         "type": "object",
3218 |         "properties": {
3219 |           "status": {
3220 |             "type": "number",
3221 |             "description": "HTTP Status code of the request",
3222 |             "example": 413,
3223 |             "enum": [
3224 |               400,
3225 |               413,
3226 |               415
3227 |             ]
3228 |           },
3229 |           "message": {
3230 |             "type": "string",
3231 |             "description": "Error message of the request",
3232 |             "example": "Failed to upload the files"
3233 |           }
3234 |         },
3235 |         "required": [
3236 |           "status",
3237 |           "message"
3238 |         ]
3239 |       },
3240 |       "ErrorDto": {
3241 |         "type": "object",
3242 |         "properties": {
3243 |           "code": {
3244 |             "type": "string",
3245 |             "description": "Error Code",
3246 |             "example": "1"
3247 |           },
3248 |           "type": {
3249 |             "type": "string",
3250 |             "description": "Error Type",
3251 |             "example": "saas"
3252 |           },
3253 |           "message": {
3254 |             "type": "string",
3255 |             "description": "Error Message",
3256 |             "example": "There was an error from the provider"
3257 |           }
3258 |         },
3259 |         "required": [
3260 |           "code",
3261 |           "type",
3262 |           "message"
3263 |         ]
3264 |       },
3265 |       "UpdateMessageStatusDto": {
3266 |         "type": "object",
3267 |         "properties": {
3268 |           "status": {
3269 |             "type": "string",
3270 |             "description": "Message status",
3271 |             "example": "read",
3272 |             "enum": [
3273 |               "delivered",
3274 |               "failed",
3275 |               "pending",
3276 |               "read"
3277 |             ]
3278 |           },
3279 |           "error": {
3280 |             "description": "Error object from the conversation provider",
3281 |             "allOf": [
3282 |               {
3283 |                 "$ref": "#/components/schemas/ErrorDto"
3284 |               }
3285 |             ]
3286 |           },
3287 |           "emailMessageId": {
3288 |             "type": "string",
3289 |             "description": "Email message Id",
3290 |             "example": "ve9EPM428h8vShlRW1KT"
3291 |           },
3292 |           "recipients": {
3293 |             "description": "Email delivery status for additional email recipients.",
3294 |             "type": "array",
3295 |             "items": {
3296 |               "type": "string"
3297 |             }
3298 |           }
3299 |         },
3300 |         "required": [
3301 |           "status"
3302 |         ]
3303 |       },
3304 |       "GetMessageTranscriptionResponseDto": {
3305 |         "type": "object",
3306 |         "properties": {
3307 |           "mediaChannel": {
3308 |             "type": "number",
3309 |             "description": "Media channel describes the user interaction channel",
3310 |             "example": "1"
3311 |           },
3312 |           "sentenceIndex": {
3313 |             "type": "number",
3314 |             "description": "Index of the sentence in the transcription",
3315 |             "example": "1"
3316 |           },
3317 |           "startTime": {
3318 |             "type": "number",
3319 |             "description": "Start time of the sentence in milliseconds",
3320 |             "example": "34"
3321 |           },
3322 |           "endTime": {
3323 |             "type": "number",
3324 |             "description": "End time of the sentence in milliseconds",
3325 |             "example": "45"
3326 |           },
3327 |           "transcript": {
3328 |             "type": "string",
3329 |             "description": "Transcript of the sentence",
3330 |             "example": "This call may be recorded for quality assurance purposes."
3331 |           },
3332 |           "confidence": {
3333 |             "type": "number",
3334 |             "description": "Confidence of the transcription",
3335 |             "example": "0.5"
3336 |           }
3337 |         },
3338 |         "required": [
3339 |           "mediaChannel",
3340 |           "sentenceIndex",
3341 |           "startTime",
3342 |           "endTime",
3343 |           "transcript",
3344 |           "confidence"
3345 |         ]
3346 |       },
3347 |       "UserTypingBody": {
3348 |         "type": "object",
3349 |         "properties": {
3350 |           "locationId": {
3351 |             "type": "string",
3352 |             "description": "Location Id",
3353 |             "example": "ve9EPM428h8vShlRW1KT"
3354 |           },
3355 |           "isTyping": {
3356 |             "type": "string",
3357 |             "description": "Typing status",
3358 |             "example": true
3359 |           },
3360 |           "visitorId": {
3361 |             "type": "string",
3362 |             "description": "visitorId is the Unique ID assigned to each Live chat visitor. visitorId will be added soon in <a href=\"https://highlevel.stoplight.io/docs/integrations/00c5ff21f0030-get-contact\" target=\"_blank\">GET Contact API</a>",
3363 |             "example": "ve9EPM428h8vShlRW1KT"
3364 |           },
3365 |           "conversationId": {
3366 |             "type": "string",
3367 |             "description": "Conversation Id",
3368 |             "example": "ve9EPM428h8vShlRW1KT"
3369 |           }
3370 |         },
3371 |         "required": [
3372 |           "locationId",
3373 |           "isTyping",
3374 |           "visitorId",
3375 |           "conversationId"
3376 |         ]
3377 |       },
3378 |       "CreateLiveChatMessageFeedbackResponse": {
3379 |         "type": "object",
3380 |         "properties": {
3381 |           "success": {
3382 |             "type": "boolean"
3383 |           }
3384 |         },
3385 |         "required": [
3386 |           "success"
3387 |         ]
3388 |       },
3389 |       "UnprocessableDTO": {
3390 |         "type": "object",
3391 |         "properties": {
3392 |           "statusCode": {
3393 |             "type": "number",
3394 |             "example": 422
3395 |           },
3396 |           "message": {
3397 |             "example": [
3398 |               "Unprocessable Entity"
3399 |             ],
3400 |             "type": "array",
3401 |             "items": {
3402 |               "type": "string"
3403 |             }
3404 |           },
3405 |           "error": {
3406 |             "type": "string",
3407 |             "example": "Unprocessable Entity"
3408 |           }
3409 |         }
3410 |       }
3411 |     }
3412 |   }
3413 | }


--------------------------------------------------------------------------------
/courses/courses.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/courses/courses-exporter/public/import": {
  5 |       "post": {
  6 |         "operationId": "import-courses",
  7 |         "summary": "Import Courses",
  8 |         "description": "Import Courses through public channels",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           }
 20 |         ],
 21 |         "requestBody": {
 22 |           "required": true,
 23 |           "content": {
 24 |             "application/json": {
 25 |               "schema": {
 26 |                 "$ref": "#/components/schemas/PublicExporterPayload"
 27 |               }
 28 |             }
 29 |           }
 30 |         },
 31 |         "responses": {
 32 |           "201": {
 33 |             "description": ""
 34 |           }
 35 |         },
 36 |         "security": [
 37 |           {
 38 |             "bearer": []
 39 |           }
 40 |         ]
 41 |       }
 42 |     }
 43 |   },
 44 |   "info": {
 45 |     "title": "MEMBERSHIPS API",
 46 |     "description": "API Service for Courses and Memberships",
 47 |     "version": "1.0",
 48 |     "contact": {}
 49 |   },
 50 |   "tags": [
 51 |     {
 52 |       "name": "courses",
 53 |       "description": "API Service for Courses and Memberships"
 54 |     }
 55 |   ],
 56 |   "servers": [
 57 |     {
 58 |       "url": "https://services.leadconnectorhq.com"
 59 |     }
 60 |   ],
 61 |   "components": {
 62 |     "securitySchemes": {
 63 |       "bearer": {
 64 |         "scheme": "bearer",
 65 |         "bearerFormat": "JWT",
 66 |         "name": "Authorization",
 67 |         "in": "header",
 68 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 69 |         "type": "http"
 70 |       },
 71 |       "Location-Access": {
 72 |         "scheme": "bearer",
 73 |         "bearerFormat": "JWT",
 74 |         "name": "Authorization",
 75 |         "in": "header",
 76 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 77 |         "type": "http"
 78 |       },
 79 |       "Agency-Access": {
 80 |         "scheme": "bearer",
 81 |         "bearerFormat": "JWT",
 82 |         "name": "Authorization",
 83 |         "in": "header",
 84 |         "description": "Use the Access Token generated with user type as Agency.",
 85 |         "type": "http"
 86 |       }
 87 |     },
 88 |     "schemas": {
 89 |       "visibility": {
 90 |         "type": "string",
 91 |         "enum": [
 92 |           "published",
 93 |           "draft"
 94 |         ]
 95 |       },
 96 |       "contentType": {
 97 |         "type": "string",
 98 |         "enum": [
 99 |           "video",
100 |           "assignment",
101 |           "quiz"
102 |         ]
103 |       },
104 |       "type": {
105 |         "type": "string",
106 |         "enum": [
107 |           "pdf",
108 |           "image",
109 |           "docx",
110 |           "pptx",
111 |           "xlsx",
112 |           "html",
113 |           "dotx",
114 |           "epub",
115 |           "webp",
116 |           "gdoc",
117 |           "mp3",
118 |           "doc",
119 |           "txt",
120 |           "zip",
121 |           "ppt",
122 |           "key",
123 |           "htm",
124 |           "xls",
125 |           "odp",
126 |           "odt",
127 |           "rtf",
128 |           "m4a",
129 |           "ods",
130 |           "mp4",
131 |           "ai",
132 |           "avi",
133 |           "mov",
134 |           "wmv",
135 |           "mkv",
136 |           "wav",
137 |           "flac",
138 |           "ogg",
139 |           "png",
140 |           "jpeg",
141 |           "jpg",
142 |           "gif",
143 |           "bmp",
144 |           "tiff",
145 |           "svg",
146 |           "odg",
147 |           "sxw",
148 |           "sxc",
149 |           "sxi",
150 |           "rar",
151 |           "7z",
152 |           "json",
153 |           "xml",
154 |           "csv",
155 |           "md",
156 |           "obj",
157 |           "stl",
158 |           "woff",
159 |           "ttf"
160 |         ]
161 |       },
162 |       "PostMaterialInterface": {
163 |         "type": "object",
164 |         "properties": {
165 |           "title": {
166 |             "type": "string"
167 |           },
168 |           "type": {
169 |             "$ref": "#/components/schemas/type"
170 |           },
171 |           "url": {
172 |             "type": "string"
173 |           }
174 |         },
175 |         "required": [
176 |           "title",
177 |           "type",
178 |           "url"
179 |         ]
180 |       },
181 |       "PostInterface": {
182 |         "type": "object",
183 |         "properties": {
184 |           "title": {
185 |             "type": "string"
186 |           },
187 |           "visibility": {
188 |             "$ref": "#/components/schemas/visibility"
189 |           },
190 |           "thumbnailUrl": {
191 |             "type": "string"
192 |           },
193 |           "contentType": {
194 |             "$ref": "#/components/schemas/contentType"
195 |           },
196 |           "description": {
197 |             "type": "string"
198 |           },
199 |           "bucketVideoUrl": {
200 |             "type": "string"
201 |           },
202 |           "postMaterials": {
203 |             "type": "array",
204 |             "items": {
205 |               "$ref": "#/components/schemas/PostMaterialInterface"
206 |             }
207 |           }
208 |         },
209 |         "required": [
210 |           "title",
211 |           "visibility",
212 |           "contentType",
213 |           "description"
214 |         ]
215 |       },
216 |       "SubCategoryInterface": {
217 |         "type": "object",
218 |         "properties": {
219 |           "title": {
220 |             "type": "string"
221 |           },
222 |           "visibility": {
223 |             "$ref": "#/components/schemas/visibility"
224 |           },
225 |           "thumbnailUrl": {
226 |             "type": "string"
227 |           },
228 |           "posts": {
229 |             "type": "array",
230 |             "items": {
231 |               "$ref": "#/components/schemas/PostInterface"
232 |             }
233 |           }
234 |         },
235 |         "required": [
236 |           "title",
237 |           "visibility"
238 |         ]
239 |       },
240 |       "CategoryInterface": {
241 |         "type": "object",
242 |         "properties": {
243 |           "title": {
244 |             "type": "string"
245 |           },
246 |           "visibility": {
247 |             "$ref": "#/components/schemas/visibility"
248 |           },
249 |           "thumbnailUrl": {
250 |             "type": "string"
251 |           },
252 |           "posts": {
253 |             "type": "array",
254 |             "items": {
255 |               "$ref": "#/components/schemas/PostInterface"
256 |             }
257 |           },
258 |           "subCategories": {
259 |             "type": "array",
260 |             "items": {
261 |               "$ref": "#/components/schemas/SubCategoryInterface"
262 |             }
263 |           }
264 |         },
265 |         "required": [
266 |           "title",
267 |           "visibility"
268 |         ]
269 |       },
270 |       "InstructorDetails": {
271 |         "type": "object",
272 |         "properties": {
273 |           "name": {
274 |             "type": "string"
275 |           },
276 |           "description": {
277 |             "type": "string"
278 |           }
279 |         },
280 |         "required": [
281 |           "name",
282 |           "description"
283 |         ]
284 |       },
285 |       "ProductInterface": {
286 |         "type": "object",
287 |         "properties": {
288 |           "title": {
289 |             "type": "string"
290 |           },
291 |           "description": {
292 |             "type": "string"
293 |           },
294 |           "imageUrl": {
295 |             "type": "string"
296 |           },
297 |           "categories": {
298 |             "type": "array",
299 |             "items": {
300 |               "$ref": "#/components/schemas/CategoryInterface"
301 |             }
302 |           },
303 |           "instructorDetails": {
304 |             "$ref": "#/components/schemas/InstructorDetails"
305 |           }
306 |         },
307 |         "required": [
308 |           "title",
309 |           "description",
310 |           "categories"
311 |         ]
312 |       },
313 |       "PublicExporterPayload": {
314 |         "type": "object",
315 |         "properties": {
316 |           "locationId": {
317 |             "type": "string"
318 |           },
319 |           "userId": {
320 |             "type": "string"
321 |           },
322 |           "products": {
323 |             "type": "array",
324 |             "items": {
325 |               "$ref": "#/components/schemas/ProductInterface"
326 |             }
327 |           }
328 |         },
329 |         "required": [
330 |           "locationId",
331 |           "products"
332 |         ]
333 |       }
334 |     }
335 |   }
336 | }


--------------------------------------------------------------------------------
/custom-fields/custom-fields.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/custom-fields/{id}": {
   5 |       "get": {
   6 |         "operationId": "get-custom-field-by-id",
   7 |         "summary": "Get Custom Field / Folder By Id",
   8 |         "description": "<div>\n                  <p> Get Custom Field / Folder By Id.</p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                        Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n                        </strong>\n                      </span>\n                  </div>\n                </div>",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "id",
  34 |             "required": true,
  35 |             "in": "path",
  36 |             "schema": {
  37 |               "type": "string"
  38 |             }
  39 |           }
  40 |         ],
  41 |         "responses": {
  42 |           "200": {
  43 |             "description": "Successful response",
  44 |             "content": {
  45 |               "application/json": {
  46 |                 "schema": {
  47 |                   "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
  48 |                 }
  49 |               }
  50 |             }
  51 |           },
  52 |           "400": {
  53 |             "description": "Bad Request",
  54 |             "content": {
  55 |               "application/json": {
  56 |                 "schema": {
  57 |                   "$ref": "#/components/schemas/BadRequestDTO"
  58 |                 }
  59 |               }
  60 |             }
  61 |           },
  62 |           "401": {
  63 |             "description": "Unauthorized",
  64 |             "content": {
  65 |               "application/json": {
  66 |                 "schema": {
  67 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  68 |                 }
  69 |               }
  70 |             }
  71 |           }
  72 |         },
  73 |         "tags": [
  74 |           "Custom Fields V2"
  75 |         ],
  76 |         "security": [
  77 |           {
  78 |             "bearer": []
  79 |           }
  80 |         ]
  81 |       },
  82 |       "put": {
  83 |         "operationId": "update-custom-field",
  84 |         "summary": "Update Custom Field By Id",
  85 |         "description": "<div>\n    <p> Update Custom Field By Id </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
  86 |         "parameters": [
  87 |           {
  88 |             "name": "Authorization",
  89 |             "in": "header",
  90 |             "description": "Access Token",
  91 |             "required": true,
  92 |             "schema": {
  93 |               "type": "string",
  94 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  95 |             }
  96 |           },
  97 |           {
  98 |             "name": "Version",
  99 |             "in": "header",
 100 |             "description": "API Version",
 101 |             "required": true,
 102 |             "schema": {
 103 |               "type": "string",
 104 |               "enum": [
 105 |                 "2021-07-28"
 106 |               ]
 107 |             }
 108 |           },
 109 |           {
 110 |             "name": "id",
 111 |             "required": true,
 112 |             "in": "path",
 113 |             "schema": {
 114 |               "type": "string"
 115 |             }
 116 |           }
 117 |         ],
 118 |         "requestBody": {
 119 |           "required": true,
 120 |           "content": {
 121 |             "application/json": {
 122 |               "schema": {
 123 |                 "$ref": "#/components/schemas/UpdateCustomFieldsDTO"
 124 |               }
 125 |             }
 126 |           }
 127 |         },
 128 |         "responses": {
 129 |           "200": {
 130 |             "description": "Successful response",
 131 |             "content": {
 132 |               "application/json": {
 133 |                 "schema": {
 134 |                   "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
 135 |                 }
 136 |               }
 137 |             }
 138 |           },
 139 |           "400": {
 140 |             "description": "Bad Request",
 141 |             "content": {
 142 |               "application/json": {
 143 |                 "schema": {
 144 |                   "$ref": "#/components/schemas/BadRequestDTO"
 145 |                 }
 146 |               }
 147 |             }
 148 |           },
 149 |           "401": {
 150 |             "description": "Unauthorized",
 151 |             "content": {
 152 |               "application/json": {
 153 |                 "schema": {
 154 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 155 |                 }
 156 |               }
 157 |             }
 158 |           }
 159 |         },
 160 |         "tags": [
 161 |           "Custom Fields V2"
 162 |         ],
 163 |         "security": [
 164 |           {
 165 |             "bearer": []
 166 |           }
 167 |         ]
 168 |       },
 169 |       "delete": {
 170 |         "operationId": "delete-custom-field",
 171 |         "summary": "Delete Custom Field By Id",
 172 |         "description": "<div>\n    <p> Delete Custom Field By Id </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
 173 |         "parameters": [
 174 |           {
 175 |             "name": "Authorization",
 176 |             "in": "header",
 177 |             "description": "Access Token",
 178 |             "required": true,
 179 |             "schema": {
 180 |               "type": "string",
 181 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 182 |             }
 183 |           },
 184 |           {
 185 |             "name": "Version",
 186 |             "in": "header",
 187 |             "description": "API Version",
 188 |             "required": true,
 189 |             "schema": {
 190 |               "type": "string",
 191 |               "enum": [
 192 |                 "2021-07-28"
 193 |               ]
 194 |             }
 195 |           },
 196 |           {
 197 |             "name": "id",
 198 |             "required": true,
 199 |             "in": "path",
 200 |             "schema": {
 201 |               "type": "string"
 202 |             }
 203 |           }
 204 |         ],
 205 |         "responses": {
 206 |           "200": {
 207 |             "description": "Successful response",
 208 |             "content": {
 209 |               "application/json": {
 210 |                 "schema": {
 211 |                   "$ref": "#/components/schemas/CustomFolderDeleteResponseDto"
 212 |                 }
 213 |               }
 214 |             }
 215 |           },
 216 |           "400": {
 217 |             "description": "Bad Request",
 218 |             "content": {
 219 |               "application/json": {
 220 |                 "schema": {
 221 |                   "$ref": "#/components/schemas/BadRequestDTO"
 222 |                 }
 223 |               }
 224 |             }
 225 |           },
 226 |           "401": {
 227 |             "description": "Unauthorized",
 228 |             "content": {
 229 |               "application/json": {
 230 |                 "schema": {
 231 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 232 |                 }
 233 |               }
 234 |             }
 235 |           }
 236 |         },
 237 |         "tags": [
 238 |           "Custom Fields V2"
 239 |         ],
 240 |         "security": [
 241 |           {
 242 |             "bearer": []
 243 |           }
 244 |         ]
 245 |       }
 246 |     },
 247 |     "/custom-fields/object-key/{objectKey}": {
 248 |       "get": {
 249 |         "operationId": "get-custom-fields-by-object-key",
 250 |         "summary": "Get Custom Fields By Object Key",
 251 |         "description": "<div>\n                  <p> Get Custom Fields By Object Key</p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                        Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n                        </strong>\n                      </span>\n                  </div>\n                </div>",
 252 |         "parameters": [
 253 |           {
 254 |             "name": "Authorization",
 255 |             "in": "header",
 256 |             "description": "Access Token",
 257 |             "required": true,
 258 |             "schema": {
 259 |               "type": "string",
 260 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 261 |             }
 262 |           },
 263 |           {
 264 |             "name": "Version",
 265 |             "in": "header",
 266 |             "description": "API Version",
 267 |             "required": true,
 268 |             "schema": {
 269 |               "type": "string",
 270 |               "enum": [
 271 |                 "2021-07-28"
 272 |               ]
 273 |             }
 274 |           },
 275 |           {
 276 |             "name": "objectKey",
 277 |             "required": true,
 278 |             "in": "path",
 279 |             "description": "key of the Object. Must include \"custom_objects.\" prefix for custom objects. Available on the Custom Objects details Page under settings",
 280 |             "example": "custom_objects.pet",
 281 |             "schema": {
 282 |               "type": "string"
 283 |             }
 284 |           },
 285 |           {
 286 |             "name": "locationId",
 287 |             "required": true,
 288 |             "in": "query",
 289 |             "example": "Location Id",
 290 |             "schema": {
 291 |               "type": "string"
 292 |             }
 293 |           }
 294 |         ],
 295 |         "responses": {
 296 |           "200": {
 297 |             "description": "Successful response",
 298 |             "content": {
 299 |               "application/json": {
 300 |                 "schema": {
 301 |                   "$ref": "#/components/schemas/CustomFieldsResponseDTO"
 302 |                 }
 303 |               }
 304 |             }
 305 |           },
 306 |           "400": {
 307 |             "description": "Bad Request",
 308 |             "content": {
 309 |               "application/json": {
 310 |                 "schema": {
 311 |                   "$ref": "#/components/schemas/BadRequestDTO"
 312 |                 }
 313 |               }
 314 |             }
 315 |           },
 316 |           "401": {
 317 |             "description": "Unauthorized",
 318 |             "content": {
 319 |               "application/json": {
 320 |                 "schema": {
 321 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 322 |                 }
 323 |               }
 324 |             }
 325 |           }
 326 |         },
 327 |         "tags": [
 328 |           "Custom Fields V2"
 329 |         ],
 330 |         "security": [
 331 |           {
 332 |             "bearer": []
 333 |           }
 334 |         ]
 335 |       }
 336 |     },
 337 |     "/custom-fields/folder": {
 338 |       "post": {
 339 |         "operationId": "create-custom-field-folder",
 340 |         "summary": "Create Custom Field Folder",
 341 |         "description": "<div>\n    <p> Create Custom Field Folder </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
 342 |         "parameters": [
 343 |           {
 344 |             "name": "Authorization",
 345 |             "in": "header",
 346 |             "description": "Access Token",
 347 |             "required": true,
 348 |             "schema": {
 349 |               "type": "string",
 350 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 351 |             }
 352 |           },
 353 |           {
 354 |             "name": "Version",
 355 |             "in": "header",
 356 |             "description": "API Version",
 357 |             "required": true,
 358 |             "schema": {
 359 |               "type": "string",
 360 |               "enum": [
 361 |                 "2021-07-28"
 362 |               ]
 363 |             }
 364 |           }
 365 |         ],
 366 |         "requestBody": {
 367 |           "required": true,
 368 |           "content": {
 369 |             "application/json": {
 370 |               "schema": {
 371 |                 "$ref": "#/components/schemas/CreateFolder"
 372 |               }
 373 |             }
 374 |           }
 375 |         },
 376 |         "responses": {
 377 |           "201": {
 378 |             "description": "Successful response",
 379 |             "content": {
 380 |               "application/json": {
 381 |                 "schema": {
 382 |                   "$ref": "#/components/schemas/ICustomFieldFolder"
 383 |                 }
 384 |               }
 385 |             }
 386 |           },
 387 |           "400": {
 388 |             "description": "Bad Request",
 389 |             "content": {
 390 |               "application/json": {
 391 |                 "schema": {
 392 |                   "$ref": "#/components/schemas/BadRequestDTO"
 393 |                 }
 394 |               }
 395 |             }
 396 |           },
 397 |           "401": {
 398 |             "description": "Unauthorized",
 399 |             "content": {
 400 |               "application/json": {
 401 |                 "schema": {
 402 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 403 |                 }
 404 |               }
 405 |             }
 406 |           }
 407 |         },
 408 |         "tags": [
 409 |           "Custom Fields V2"
 410 |         ],
 411 |         "security": [
 412 |           {
 413 |             "bearer": []
 414 |           }
 415 |         ]
 416 |       }
 417 |     },
 418 |     "/custom-fields/folder/{id}": {
 419 |       "put": {
 420 |         "operationId": "update-custom-field-folder",
 421 |         "summary": "Update Custom Field Folder Name",
 422 |         "description": "<div>\n    <p> Create Custom Field Folder </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
 423 |         "parameters": [
 424 |           {
 425 |             "name": "Authorization",
 426 |             "in": "header",
 427 |             "description": "Access Token",
 428 |             "required": true,
 429 |             "schema": {
 430 |               "type": "string",
 431 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 432 |             }
 433 |           },
 434 |           {
 435 |             "name": "Version",
 436 |             "in": "header",
 437 |             "description": "API Version",
 438 |             "required": true,
 439 |             "schema": {
 440 |               "type": "string",
 441 |               "enum": [
 442 |                 "2021-07-28"
 443 |               ]
 444 |             }
 445 |           },
 446 |           {
 447 |             "name": "id",
 448 |             "required": true,
 449 |             "in": "path",
 450 |             "schema": {
 451 |               "type": "string"
 452 |             }
 453 |           }
 454 |         ],
 455 |         "requestBody": {
 456 |           "required": true,
 457 |           "content": {
 458 |             "application/json": {
 459 |               "schema": {
 460 |                 "$ref": "#/components/schemas/UpdateFolder"
 461 |               }
 462 |             }
 463 |           }
 464 |         },
 465 |         "responses": {
 466 |           "200": {
 467 |             "description": "Successful response",
 468 |             "content": {
 469 |               "application/json": {
 470 |                 "schema": {
 471 |                   "$ref": "#/components/schemas/ICustomFieldFolder"
 472 |                 }
 473 |               }
 474 |             }
 475 |           },
 476 |           "400": {
 477 |             "description": "Bad Request",
 478 |             "content": {
 479 |               "application/json": {
 480 |                 "schema": {
 481 |                   "$ref": "#/components/schemas/BadRequestDTO"
 482 |                 }
 483 |               }
 484 |             }
 485 |           },
 486 |           "401": {
 487 |             "description": "Unauthorized",
 488 |             "content": {
 489 |               "application/json": {
 490 |                 "schema": {
 491 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 492 |                 }
 493 |               }
 494 |             }
 495 |           }
 496 |         },
 497 |         "tags": [
 498 |           "Custom Fields V2"
 499 |         ],
 500 |         "security": [
 501 |           {
 502 |             "bearer": []
 503 |           }
 504 |         ]
 505 |       },
 506 |       "delete": {
 507 |         "operationId": "delete-custom-field-folder",
 508 |         "summary": "Delete Custom Field Folder",
 509 |         "description": "<div>\n    <p> Create Custom Field Folder </p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n          Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n          </strong>\n        </span>\n    </div>\n  </div>",
 510 |         "parameters": [
 511 |           {
 512 |             "name": "Authorization",
 513 |             "in": "header",
 514 |             "description": "Access Token",
 515 |             "required": true,
 516 |             "schema": {
 517 |               "type": "string",
 518 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 519 |             }
 520 |           },
 521 |           {
 522 |             "name": "Version",
 523 |             "in": "header",
 524 |             "description": "API Version",
 525 |             "required": true,
 526 |             "schema": {
 527 |               "type": "string",
 528 |               "enum": [
 529 |                 "2021-07-28"
 530 |               ]
 531 |             }
 532 |           },
 533 |           {
 534 |             "name": "id",
 535 |             "required": true,
 536 |             "in": "path",
 537 |             "schema": {
 538 |               "type": "string"
 539 |             }
 540 |           },
 541 |           {
 542 |             "name": "locationId",
 543 |             "required": true,
 544 |             "in": "query",
 545 |             "description": "Location Id",
 546 |             "example": "ve9EPM428h8vShlRW1KT",
 547 |             "schema": {
 548 |               "type": "string"
 549 |             }
 550 |           }
 551 |         ],
 552 |         "responses": {
 553 |           "200": {
 554 |             "description": "Successful response",
 555 |             "content": {
 556 |               "application/json": {
 557 |                 "schema": {
 558 |                   "$ref": "#/components/schemas/CustomFolderDeleteResponseDto"
 559 |                 }
 560 |               }
 561 |             }
 562 |           },
 563 |           "400": {
 564 |             "description": "Bad Request",
 565 |             "content": {
 566 |               "application/json": {
 567 |                 "schema": {
 568 |                   "$ref": "#/components/schemas/BadRequestDTO"
 569 |                 }
 570 |               }
 571 |             }
 572 |           },
 573 |           "401": {
 574 |             "description": "Unauthorized",
 575 |             "content": {
 576 |               "application/json": {
 577 |                 "schema": {
 578 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 579 |                 }
 580 |               }
 581 |             }
 582 |           }
 583 |         },
 584 |         "tags": [
 585 |           "Custom Fields V2"
 586 |         ],
 587 |         "security": [
 588 |           {
 589 |             "bearer": []
 590 |           }
 591 |         ]
 592 |       }
 593 |     },
 594 |     "/custom-fields/": {
 595 |       "post": {
 596 |         "operationId": "create-custom-field",
 597 |         "summary": "Create Custom Field",
 598 |         "description": "<div>\n                  <p> Create Custom Field </p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                        Only supports Custom Objects and Company (Business) today. Will be extended to other Standard Objects in the future.\n                        </strong>\n                      </span>\n                  </div>\n                </div>",
 599 |         "parameters": [
 600 |           {
 601 |             "name": "Authorization",
 602 |             "in": "header",
 603 |             "description": "Access Token",
 604 |             "required": true,
 605 |             "schema": {
 606 |               "type": "string",
 607 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 608 |             }
 609 |           },
 610 |           {
 611 |             "name": "Version",
 612 |             "in": "header",
 613 |             "description": "API Version",
 614 |             "required": true,
 615 |             "schema": {
 616 |               "type": "string",
 617 |               "enum": [
 618 |                 "2021-07-28"
 619 |               ]
 620 |             }
 621 |           }
 622 |         ],
 623 |         "requestBody": {
 624 |           "required": true,
 625 |           "content": {
 626 |             "application/json": {
 627 |               "schema": {
 628 |                 "$ref": "#/components/schemas/CreateCustomFieldsDTO"
 629 |               }
 630 |             }
 631 |           }
 632 |         },
 633 |         "responses": {
 634 |           "201": {
 635 |             "description": "Successful response",
 636 |             "content": {
 637 |               "application/json": {
 638 |                 "schema": {
 639 |                   "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
 640 |                 }
 641 |               }
 642 |             }
 643 |           },
 644 |           "400": {
 645 |             "description": "Bad Request",
 646 |             "content": {
 647 |               "application/json": {
 648 |                 "schema": {
 649 |                   "$ref": "#/components/schemas/BadRequestDTO"
 650 |                 }
 651 |               }
 652 |             }
 653 |           },
 654 |           "401": {
 655 |             "description": "Unauthorized",
 656 |             "content": {
 657 |               "application/json": {
 658 |                 "schema": {
 659 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 660 |                 }
 661 |               }
 662 |             }
 663 |           }
 664 |         },
 665 |         "tags": [
 666 |           "Custom Fields V2"
 667 |         ],
 668 |         "security": [
 669 |           {
 670 |             "bearer": []
 671 |           }
 672 |         ]
 673 |       }
 674 |     }
 675 |   },
 676 |   "info": {
 677 |     "title": "CUSTOM_FIELDS API",
 678 |     "description": "Custom fields are data points that allow you to capture and store specific information tailored to your business requirements. You can create fields across field types like text, numeric, selection options and special fields like date/time or signature",
 679 |     "version": "1.0",
 680 |     "contact": {}
 681 |   },
 682 |   "tags": [
 683 |     {
 684 |       "name": "CUSTOM_FIELDS",
 685 |       "description": "Custom fields are data points that allow you to capture and store specific information tailored to your business requirements. You can create fields across field types like text, numeric, selection options and special fields like date/time or signature"
 686 |     }
 687 |   ],
 688 |   "servers": [
 689 |     {
 690 |       "url": "https://services.leadconnectorhq.com"
 691 |     }
 692 |   ],
 693 |   "components": {
 694 |     "securitySchemes": {
 695 |       "bearer": {
 696 |         "scheme": "bearer",
 697 |         "bearerFormat": "JWT",
 698 |         "name": "Authorization",
 699 |         "in": "header",
 700 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 701 |         "type": "http"
 702 |       },
 703 |       "Location-Access": {
 704 |         "scheme": "bearer",
 705 |         "bearerFormat": "JWT",
 706 |         "name": "Authorization",
 707 |         "in": "header",
 708 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 709 |         "type": "http"
 710 |       },
 711 |       "Agency-Access": {
 712 |         "scheme": "bearer",
 713 |         "bearerFormat": "JWT",
 714 |         "name": "Authorization",
 715 |         "in": "header",
 716 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
 717 |         "type": "http"
 718 |       }
 719 |     },
 720 |     "schemas": {
 721 |       "BadRequestDTO": {
 722 |         "type": "object",
 723 |         "properties": {
 724 |           "statusCode": {
 725 |             "type": "number",
 726 |             "example": 400
 727 |           },
 728 |           "message": {
 729 |             "type": "string",
 730 |             "example": "Bad Request"
 731 |           }
 732 |         }
 733 |       },
 734 |       "UnauthorizedDTO": {
 735 |         "type": "object",
 736 |         "properties": {
 737 |           "statusCode": {
 738 |             "type": "number",
 739 |             "example": 401
 740 |           },
 741 |           "message": {
 742 |             "type": "string",
 743 |             "example": "Invalid token: access token is invalid"
 744 |           },
 745 |           "error": {
 746 |             "type": "string",
 747 |             "example": "Unauthorized"
 748 |           }
 749 |         }
 750 |       },
 751 |       "OptionDTO": {
 752 |         "type": "object",
 753 |         "properties": {
 754 |           "key": {
 755 |             "type": "string",
 756 |             "description": "Key of the option (Included in Create and Response, excluded in Update)"
 757 |           },
 758 |           "label": {
 759 |             "type": "string",
 760 |             "description": "Value of the option"
 761 |           },
 762 |           "url": {
 763 |             "type": "string",
 764 |             "description": "URL associated with the option (Optional, valid only for RADIO type)"
 765 |           }
 766 |         },
 767 |         "required": [
 768 |           "key",
 769 |           "label"
 770 |         ]
 771 |       },
 772 |       "ICustomField": {
 773 |         "type": "object",
 774 |         "properties": {
 775 |           "locationId": {
 776 |             "type": "string",
 777 |             "description": "Location Id",
 778 |             "example": "ve9EPM428h8vShlRW1KT"
 779 |           },
 780 |           "name": {
 781 |             "type": "string",
 782 |             "description": "Field name",
 783 |             "example": "Name"
 784 |           },
 785 |           "description": {
 786 |             "type": "string",
 787 |             "description": "Description of the field"
 788 |           },
 789 |           "placeholder": {
 790 |             "type": "string",
 791 |             "description": "Placeholder text for the field"
 792 |           },
 793 |           "showInForms": {
 794 |             "type": "boolean",
 795 |             "description": "Whether the field should be shown in forms"
 796 |           },
 797 |           "options": {
 798 |             "description": "Options for the field (Optional, valid only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST type)",
 799 |             "type": "array",
 800 |             "items": {
 801 |               "$ref": "#/components/schemas/OptionDTO"
 802 |             }
 803 |           },
 804 |           "acceptedFormats": {
 805 |             "type": "string",
 806 |             "enum": [
 807 |               ".pdf",
 808 |               ".docx",
 809 |               ".doc",
 810 |               ".jpg",
 811 |               ".jpeg",
 812 |               ".png",
 813 |               ".gif",
 814 |               ".csv",
 815 |               ".xlsx",
 816 |               ".xls",
 817 |               "all"
 818 |             ],
 819 |             "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
 820 |           },
 821 |           "id": {
 822 |             "type": "string",
 823 |             "description": "Unique identifier of the object"
 824 |           },
 825 |           "objectKey": {
 826 |             "type": "string",
 827 |             "description": "The key for your custom / standard object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
 828 |             "example": "custom_object.pet"
 829 |           },
 830 |           "dataType": {
 831 |             "type": "string",
 832 |             "enum": [
 833 |               "TEXT",
 834 |               "LARGE_TEXT",
 835 |               "NUMERICAL",
 836 |               "PHONE",
 837 |               "MONETORY",
 838 |               "CHECKBOX",
 839 |               "SINGLE_OPTIONS",
 840 |               "MULTIPLE_OPTIONS",
 841 |               "DATE",
 842 |               "TEXTBOX_LIST",
 843 |               "FILE_UPLOAD",
 844 |               "RADIO"
 845 |             ],
 846 |             "description": "Type of field that you are trying to create"
 847 |           },
 848 |           "parentId": {
 849 |             "type": "string",
 850 |             "description": "ID of the parent folder",
 851 |             "example": "3v34PM428h8vShlRW1KT"
 852 |           },
 853 |           "fieldKey": {
 854 |             "type": "string",
 855 |             "description": "Field key. For Custom Object it's formatted as \"custom_object.{objectKey}.{fieldKey}\". \"custom_object\" is a fixed prefix, \"{objectKey}\" is your custom object's identifier, and \"{fieldName}\" is the unique field name within that object. Example: \"custom_object.pet.name\" for a \"name\" field in a \"pet\" custom object.",
 856 |             "example": "custom_object.pet.name"
 857 |           },
 858 |           "allowCustomOption": {
 859 |             "type": "boolean",
 860 |             "description": "Determines if users can add a custom option value different from the predefined options in records for RADIO type fields. A custom value added in one record does not automatically become an option and will not appear as an option for other records.",
 861 |             "example": true
 862 |           },
 863 |           "maxFileLimit": {
 864 |             "type": "number",
 865 |             "description": "Maximum file limit for uploads",
 866 |             "example": 2
 867 |           },
 868 |           "dateAdded": {
 869 |             "type": "string",
 870 |             "description": "Date and time when the object was added",
 871 |             "format": "date-time"
 872 |           },
 873 |           "dateUpdated": {
 874 |             "type": "string",
 875 |             "description": "Date and time when the object was last updated",
 876 |             "format": "date-time"
 877 |           }
 878 |         },
 879 |         "required": [
 880 |           "locationId",
 881 |           "showInForms",
 882 |           "id",
 883 |           "objectKey",
 884 |           "dataType",
 885 |           "parentId",
 886 |           "fieldKey",
 887 |           "dateAdded",
 888 |           "dateUpdated"
 889 |         ]
 890 |       },
 891 |       "CustomFieldSuccessfulResponseDto": {
 892 |         "type": "object",
 893 |         "properties": {
 894 |           "field": {
 895 |             "$ref": "#/components/schemas/ICustomField"
 896 |           }
 897 |         }
 898 |       },
 899 |       "CustomFieldsResponseDTO": {
 900 |         "type": "object",
 901 |         "properties": {
 902 |           "fields": {
 903 |             "description": "Custom Fields for the object.",
 904 |             "type": "array",
 905 |             "items": {
 906 |               "$ref": "#/components/schemas/ICustomField"
 907 |             }
 908 |           },
 909 |           "folders": {
 910 |             "description": "Custom Fields folder for the object.",
 911 |             "type": "array",
 912 |             "items": {
 913 |               "$ref": "#/components/schemas/ICustomField"
 914 |             }
 915 |           }
 916 |         }
 917 |       },
 918 |       "CreateCustomFieldsDTO": {
 919 |         "type": "object",
 920 |         "properties": {
 921 |           "locationId": {
 922 |             "type": "string",
 923 |             "description": "Location Id",
 924 |             "example": "ve9EPM428h8vShlRW1KT"
 925 |           },
 926 |           "name": {
 927 |             "type": "string",
 928 |             "description": "Field name",
 929 |             "example": "Name"
 930 |           },
 931 |           "description": {
 932 |             "type": "string",
 933 |             "description": "Description of the field"
 934 |           },
 935 |           "placeholder": {
 936 |             "type": "string",
 937 |             "description": "Placeholder text for the field"
 938 |           },
 939 |           "showInForms": {
 940 |             "type": "boolean",
 941 |             "description": "Whether the field should be shown in forms"
 942 |           },
 943 |           "options": {
 944 |             "description": "Options for the field (Optional, valid only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST type)",
 945 |             "type": "array",
 946 |             "items": {
 947 |               "$ref": "#/components/schemas/OptionDTO"
 948 |             }
 949 |           },
 950 |           "acceptedFormats": {
 951 |             "type": "string",
 952 |             "enum": [
 953 |               ".pdf",
 954 |               ".docx",
 955 |               ".doc",
 956 |               ".jpg",
 957 |               ".jpeg",
 958 |               ".png",
 959 |               ".gif",
 960 |               ".csv",
 961 |               ".xlsx",
 962 |               ".xls",
 963 |               "all"
 964 |             ],
 965 |             "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
 966 |           },
 967 |           "dataType": {
 968 |             "type": "string",
 969 |             "enum": [
 970 |               "TEXT",
 971 |               "LARGE_TEXT",
 972 |               "NUMERICAL",
 973 |               "PHONE",
 974 |               "MONETORY",
 975 |               "CHECKBOX",
 976 |               "SINGLE_OPTIONS",
 977 |               "MULTIPLE_OPTIONS",
 978 |               "DATE",
 979 |               "TEXTBOX_LIST",
 980 |               "FILE_UPLOAD",
 981 |               "RADIO",
 982 |               "EMAIL"
 983 |             ],
 984 |             "description": "Type of field that you are trying to create"
 985 |           },
 986 |           "fieldKey": {
 987 |             "type": "string",
 988 |             "description": "Field key. For Custom Object it's formatted as \"custom_object.{objectKey}.{fieldKey}\". \"custom_object\" is a fixed prefix, \"{objectKey}\" is your custom object's identifier, and \"{fieldKey}\" is the unique field name within that object. Example: \"custom_object.pet.name\" for a \"name\" field in a \"pet\" custom object.",
 989 |             "example": "custom_object.pet.name"
 990 |           },
 991 |           "objectKey": {
 992 |             "type": "string",
 993 |             "description": "The key for your custom object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
 994 |             "example": "custom_object.pet"
 995 |           },
 996 |           "maxFileLimit": {
 997 |             "type": "number",
 998 |             "description": "Maximum file limit for uploads. Applicable only for fields with a data type of FILE_UPLOAD.",
 999 |             "example": 2
1000 |           },
1001 |           "allowCustomOption": {
1002 |             "type": "boolean",
1003 |             "description": "Determines if users can add a custom option value different from the predefined options in records for RADIO type fields. A custom value added in one record does not automatically become an option and will not appear as an option for other records.",
1004 |             "example": true
1005 |           },
1006 |           "parentId": {
1007 |             "type": "string",
1008 |             "description": "ID of the parent folder"
1009 |           }
1010 |         },
1011 |         "required": [
1012 |           "locationId",
1013 |           "showInForms",
1014 |           "dataType",
1015 |           "fieldKey",
1016 |           "objectKey",
1017 |           "parentId"
1018 |         ]
1019 |       },
1020 |       "CreateFolder": {
1021 |         "type": "object",
1022 |         "properties": {
1023 |           "objectKey": {
1024 |             "type": "string",
1025 |             "description": "The key for your custom object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
1026 |             "example": "custom_object.pet"
1027 |           },
1028 |           "name": {
1029 |             "type": "string",
1030 |             "description": "Field name",
1031 |             "example": "Name"
1032 |           },
1033 |           "locationId": {
1034 |             "type": "string",
1035 |             "description": "Location Id",
1036 |             "example": "ve9EPM428h8vShlRW1KT"
1037 |           }
1038 |         },
1039 |         "required": [
1040 |           "objectKey",
1041 |           "name",
1042 |           "locationId"
1043 |         ]
1044 |       },
1045 |       "ICustomFieldFolder": {
1046 |         "type": "object",
1047 |         "properties": {
1048 |           "id": {
1049 |             "type": "string",
1050 |             "description": "Unique identifier of the object"
1051 |           },
1052 |           "objectKey": {
1053 |             "type": "string",
1054 |             "description": "The key for your custom object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
1055 |             "example": "custom_object.pet"
1056 |           },
1057 |           "locationId": {
1058 |             "type": "string",
1059 |             "description": "Location Id",
1060 |             "example": "ve9EPM428h8vShlRW1KT"
1061 |           },
1062 |           "name": {
1063 |             "type": "string",
1064 |             "description": "Field name",
1065 |             "example": "Name"
1066 |           }
1067 |         },
1068 |         "required": [
1069 |           "id",
1070 |           "objectKey",
1071 |           "locationId",
1072 |           "name"
1073 |         ]
1074 |       },
1075 |       "UpdateFolder": {
1076 |         "type": "object",
1077 |         "properties": {
1078 |           "name": {
1079 |             "type": "string",
1080 |             "description": "Field name",
1081 |             "example": "Name"
1082 |           },
1083 |           "locationId": {
1084 |             "type": "string",
1085 |             "description": "Location Id",
1086 |             "example": "ve9EPM428h8vShlRW1KT"
1087 |           }
1088 |         },
1089 |         "required": [
1090 |           "name",
1091 |           "locationId"
1092 |         ]
1093 |       },
1094 |       "CustomFolderDeleteResponseDto": {
1095 |         "type": "object",
1096 |         "properties": {
1097 |           "succeded": {
1098 |             "type": "boolean",
1099 |             "example": true
1100 |           },
1101 |           "id": {
1102 |             "type": "string",
1103 |             "example": "3v34PM428h8vShlRW1KT"
1104 |           },
1105 |           "key": {
1106 |             "type": "string",
1107 |             "example": "custom_object.pet.name"
1108 |           }
1109 |         },
1110 |         "required": [
1111 |           "succeded",
1112 |           "id",
1113 |           "key"
1114 |         ]
1115 |       },
1116 |       "UpdateCustomFieldsDTO": {
1117 |         "type": "object",
1118 |         "properties": {
1119 |           "locationId": {
1120 |             "type": "string",
1121 |             "description": "Location Id",
1122 |             "example": "ve9EPM428h8vShlRW1KT"
1123 |           },
1124 |           "name": {
1125 |             "type": "string",
1126 |             "description": "Field name",
1127 |             "example": "Name"
1128 |           },
1129 |           "description": {
1130 |             "type": "string",
1131 |             "description": "Description of the field"
1132 |           },
1133 |           "placeholder": {
1134 |             "type": "string",
1135 |             "description": "Placeholder text for the field"
1136 |           },
1137 |           "showInForms": {
1138 |             "type": "boolean",
1139 |             "description": "Whether the field should be shown in forms"
1140 |           },
1141 |           "options": {
1142 |             "description": "Options for the field. Important: Providing options will completely replace the existing options array. You must include all existing options alongside any new options you wish to add. Removal of options is not supported through this update. Applicable only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST types.",
1143 |             "type": "array",
1144 |             "items": {
1145 |               "$ref": "#/components/schemas/OptionDTO"
1146 |             }
1147 |           },
1148 |           "acceptedFormats": {
1149 |             "type": "string",
1150 |             "enum": [
1151 |               ".pdf",
1152 |               ".docx",
1153 |               ".doc",
1154 |               ".jpg",
1155 |               ".jpeg",
1156 |               ".png",
1157 |               ".gif",
1158 |               ".csv",
1159 |               ".xlsx",
1160 |               ".xls",
1161 |               "all"
1162 |             ],
1163 |             "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
1164 |           },
1165 |           "maxFileLimit": {
1166 |             "type": "number",
1167 |             "description": "Maximum file limit for uploads. Applicable only for fields with a data type of FILE_UPLOAD.",
1168 |             "example": 2
1169 |           }
1170 |         },
1171 |         "required": [
1172 |           "locationId",
1173 |           "showInForms"
1174 |         ]
1175 |       }
1176 |     }
1177 |   }
1178 | }


--------------------------------------------------------------------------------
/custom-menus/custom-menus.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/custom-menus/{customMenuId}": {
  5 |       "get": {
  6 |         "operationId": "get-custom-menu-by-id",
  7 |         "summary": "Get Custom Menu Link",
  8 |         "description": "Fetches a single custom menus based on id. This endpoint allows clients to retrieve custom menu configurations, which may include menu items, categories, and associated metadata",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "customMenuId",
 34 |             "required": true,
 35 |             "in": "path",
 36 |             "description": "Unique identifier of the custom menu",
 37 |             "example": "62e589c1-c456-47e1-a9a7-cb8900014311",
 38 |             "schema": {
 39 |               "type": "string"
 40 |             }
 41 |           }
 42 |         ],
 43 |         "responses": {
 44 |           "200": {
 45 |             "description": "Successfully retrieved custom menu. Returns a single custom menu object, potentially including its structure, items, and relevant metadata.",
 46 |             "content": {
 47 |               "application/json": {
 48 |                 "schema": {
 49 |                   "$ref": "#/components/schemas/GetSingleCustomMenusSuccessfulResponseDTO"
 50 |                 }
 51 |               }
 52 |             }
 53 |           },
 54 |           "400": {
 55 |             "description": "Bad Request. Invalid query parameters provided."
 56 |           },
 57 |           "401": {
 58 |             "description": "Unauthorized",
 59 |             "content": {
 60 |               "application/json": {
 61 |                 "schema": {
 62 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 63 |                 }
 64 |               }
 65 |             }
 66 |           },
 67 |           "403": {
 68 |             "description": "Forbidden. The client does not have necessary permissions to access custom menu."
 69 |           },
 70 |           "422": {
 71 |             "description": "Unprocessable Entity",
 72 |             "content": {
 73 |               "application/json": {
 74 |                 "schema": {
 75 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 76 |                 }
 77 |               }
 78 |             }
 79 |           }
 80 |         },
 81 |         "tags": [
 82 |           "Custom Menu Links"
 83 |         ],
 84 |         "security": [
 85 |           {
 86 |             "Agency-Access": []
 87 |           }
 88 |         ]
 89 |       },
 90 |       "delete": {
 91 |         "operationId": "delete-custom-menu",
 92 |         "summary": "Delete Custom Menu Link",
 93 |         "description": "Removes a specific custom menu from the system. This operation requires authentication and proper permissions. The custom menu is identified by its unique ID, and the operation is performed within the context of a specific company.",
 94 |         "parameters": [
 95 |           {
 96 |             "name": "Authorization",
 97 |             "in": "header",
 98 |             "description": "Access Token",
 99 |             "required": true,
100 |             "schema": {
101 |               "type": "string",
102 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
103 |             }
104 |           },
105 |           {
106 |             "name": "Version",
107 |             "in": "header",
108 |             "description": "API Version",
109 |             "required": true,
110 |             "schema": {
111 |               "type": "string",
112 |               "enum": [
113 |                 "2021-07-28"
114 |               ]
115 |             }
116 |           },
117 |           {
118 |             "name": "customMenuId",
119 |             "required": true,
120 |             "in": "path",
121 |             "description": "ID of the custom menu to delete",
122 |             "example": "62e589c1-c456-47e1-a9a7-cb8900014311",
123 |             "schema": {
124 |               "type": "string"
125 |             }
126 |           }
127 |         ],
128 |         "responses": {
129 |           "200": {
130 |             "description": "Custom menu successfully deleted",
131 |             "content": {
132 |               "application/json": {
133 |                 "schema": {
134 |                   "$ref": "#/components/schemas/DeleteCustomMenuSuccessfulResponseDTO"
135 |                 }
136 |               }
137 |             }
138 |           },
139 |           "400": {
140 |             "description": "Bad Request. Invalid parameters provided."
141 |           },
142 |           "401": {
143 |             "description": "Unauthorized",
144 |             "content": {
145 |               "application/json": {
146 |                 "schema": {
147 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
148 |                 }
149 |               }
150 |             }
151 |           },
152 |           "403": {
153 |             "description": "Forbidden. The client does not have necessary permissions to delete this custom menu."
154 |           },
155 |           "404": {
156 |             "description": "Not Found. The specified custom menu does not exist or has already been deleted."
157 |           },
158 |           "422": {
159 |             "description": "Unprocessable Entity",
160 |             "content": {
161 |               "application/json": {
162 |                 "schema": {
163 |                   "$ref": "#/components/schemas/UnprocessableDTO"
164 |                 }
165 |               }
166 |             }
167 |           }
168 |         },
169 |         "tags": [
170 |           "Custom Menu Links"
171 |         ],
172 |         "security": [
173 |           {
174 |             "Agency-Access": []
175 |           }
176 |         ]
177 |       },
178 |       "put": {
179 |         "operationId": "update-custom-menu",
180 |         "summary": "Update Custom Menu Link",
181 |         "description": "Updates an existing custom menu for a given company. Requires authentication and proper permissions.",
182 |         "parameters": [
183 |           {
184 |             "name": "Authorization",
185 |             "in": "header",
186 |             "description": "Access Token",
187 |             "required": true,
188 |             "schema": {
189 |               "type": "string",
190 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
191 |             }
192 |           },
193 |           {
194 |             "name": "Version",
195 |             "in": "header",
196 |             "description": "API Version",
197 |             "required": true,
198 |             "schema": {
199 |               "type": "string",
200 |               "enum": [
201 |                 "2021-07-28"
202 |               ]
203 |             }
204 |           },
205 |           {
206 |             "name": "customMenuId",
207 |             "required": true,
208 |             "in": "path",
209 |             "description": "ID of the custom menu to update",
210 |             "example": "62e589c1-c456-47e1-a9a7-cb8900014311",
211 |             "schema": {
212 |               "type": "string"
213 |             }
214 |           }
215 |         ],
216 |         "requestBody": {
217 |           "required": true,
218 |           "content": {
219 |             "application/json": {
220 |               "schema": {
221 |                 "$ref": "#/components/schemas/UpdateCustomMenuDTO"
222 |               }
223 |             }
224 |           }
225 |         },
226 |         "responses": {
227 |           "200": {
228 |             "description": "Custom menu successfully updated",
229 |             "content": {
230 |               "application/json": {
231 |                 "schema": {
232 |                   "$ref": "#/components/schemas/UpdateCustomMenuLinkResponseDTO"
233 |                 }
234 |               }
235 |             }
236 |           },
237 |           "400": {
238 |             "description": "Bad Request - Invalid input"
239 |           },
240 |           "401": {
241 |             "description": "Unauthorized",
242 |             "content": {
243 |               "application/json": {
244 |                 "schema": {
245 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
246 |                 }
247 |               }
248 |             }
249 |           },
250 |           "403": {
251 |             "description": "Forbidden - Insufficient permissions"
252 |           },
253 |           "404": {
254 |             "description": "Not Found - Custom menu or company not found"
255 |           },
256 |           "422": {
257 |             "description": "Unprocessable Entity",
258 |             "content": {
259 |               "application/json": {
260 |                 "schema": {
261 |                   "$ref": "#/components/schemas/UnprocessableDTO"
262 |                 }
263 |               }
264 |             }
265 |           }
266 |         },
267 |         "tags": [
268 |           "Custom Menu Links"
269 |         ],
270 |         "security": [
271 |           {
272 |             "Agency-Access": []
273 |           }
274 |         ]
275 |       }
276 |     },
277 |     "/custom-menus/": {
278 |       "get": {
279 |         "operationId": "get-custom-menus",
280 |         "summary": "Get Custom Menu Links",
281 |         "description": "Fetches a collection of custom menus based on specified criteria. This endpoint allows clients to retrieve custom menu configurations, which may include menu items, categories, and associated metadata. The response can be tailored using query parameters for filtering, sorting, and pagination.",
282 |         "parameters": [
283 |           {
284 |             "name": "Authorization",
285 |             "in": "header",
286 |             "description": "Access Token",
287 |             "required": true,
288 |             "schema": {
289 |               "type": "string",
290 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
291 |             }
292 |           },
293 |           {
294 |             "name": "Version",
295 |             "in": "header",
296 |             "description": "API Version",
297 |             "required": true,
298 |             "schema": {
299 |               "type": "string",
300 |               "enum": [
301 |                 "2021-07-28"
302 |               ]
303 |             }
304 |           },
305 |           {
306 |             "name": "locationId",
307 |             "required": false,
308 |             "in": "query",
309 |             "description": "Unique identifier of the location",
310 |             "example": "5DP4iH6HLkQsiKESj6rh",
311 |             "schema": {
312 |               "type": "string"
313 |             }
314 |           },
315 |           {
316 |             "name": "skip",
317 |             "required": false,
318 |             "in": "query",
319 |             "description": "Number of items to skip for pagination",
320 |             "example": 0,
321 |             "schema": {
322 |               "minimum": 0,
323 |               "default": 0,
324 |               "type": "number"
325 |             }
326 |           },
327 |           {
328 |             "name": "limit",
329 |             "required": false,
330 |             "in": "query",
331 |             "description": "Maximum number of items to return",
332 |             "example": 10,
333 |             "schema": {
334 |               "minimum": 1,
335 |               "default": 20,
336 |               "type": "number"
337 |             }
338 |           },
339 |           {
340 |             "name": "query",
341 |             "required": false,
342 |             "in": "query",
343 |             "description": "Search query to filter custom menus by name, supports partial || full names",
344 |             "example": "custom-menu-link-name",
345 |             "schema": {
346 |               "type": "string"
347 |             }
348 |           },
349 |           {
350 |             "name": "showOnCompany",
351 |             "required": false,
352 |             "in": "query",
353 |             "description": "Filter to show only agency-level menu links. When omitted, fetches both agency and sub-account menu links. Ignored if locationId is provided",
354 |             "example": true,
355 |             "schema": {
356 |               "type": "boolean"
357 |             }
358 |           }
359 |         ],
360 |         "responses": {
361 |           "200": {
362 |             "description": "Successfully retrieved custom menus. Returns an array of custom menu objects, potentially including their structure, items, and relevant metadata.",
363 |             "content": {
364 |               "application/json": {
365 |                 "schema": {
366 |                   "$ref": "#/components/schemas/GetCustomMenusResponseDTO"
367 |                 }
368 |               }
369 |             }
370 |           },
371 |           "400": {
372 |             "description": "Bad Request. Invalid query parameters provided."
373 |           },
374 |           "401": {
375 |             "description": "Unauthorized",
376 |             "content": {
377 |               "application/json": {
378 |                 "schema": {
379 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
380 |                 }
381 |               }
382 |             }
383 |           },
384 |           "403": {
385 |             "description": "Forbidden. The client does not have necessary permissions to access custom menus."
386 |           },
387 |           "422": {
388 |             "description": "Unprocessable Entity",
389 |             "content": {
390 |               "application/json": {
391 |                 "schema": {
392 |                   "$ref": "#/components/schemas/UnprocessableDTO"
393 |                 }
394 |               }
395 |             }
396 |           }
397 |         },
398 |         "tags": [
399 |           "Custom Menu Links"
400 |         ],
401 |         "security": [
402 |           {
403 |             "Agency-Access": []
404 |           }
405 |         ]
406 |       },
407 |       "post": {
408 |         "operationId": "create-custom-menu",
409 |         "summary": "Create Custom Menu Link",
410 |         "description": "Creates a new custom menu for a company. Requires authentication and proper permissions. For Icon Usage Details please refer to  https://doc.clickup.com/8631005/d/h/87cpx-243696/d60fa70db6b92b2",
411 |         "parameters": [
412 |           {
413 |             "name": "Authorization",
414 |             "in": "header",
415 |             "description": "Access Token",
416 |             "required": true,
417 |             "schema": {
418 |               "type": "string",
419 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
420 |             }
421 |           },
422 |           {
423 |             "name": "Version",
424 |             "in": "header",
425 |             "description": "API Version",
426 |             "required": true,
427 |             "schema": {
428 |               "type": "string",
429 |               "enum": [
430 |                 "2021-07-28"
431 |               ]
432 |             }
433 |           }
434 |         ],
435 |         "requestBody": {
436 |           "required": true,
437 |           "content": {
438 |             "application/json": {
439 |               "schema": {
440 |                 "$ref": "#/components/schemas/CreateCustomMenuDTO"
441 |               }
442 |             }
443 |           }
444 |         },
445 |         "responses": {
446 |           "201": {
447 |             "description": "Custom menu successfully created",
448 |             "content": {
449 |               "application/json": {
450 |                 "schema": {
451 |                   "$ref": "#/components/schemas/GetSingleCustomMenusSuccessfulResponseDTO"
452 |                 }
453 |               }
454 |             }
455 |           },
456 |           "400": {
457 |             "description": "Bad Request - Invalid input"
458 |           },
459 |           "401": {
460 |             "description": "Unauthorized",
461 |             "content": {
462 |               "application/json": {
463 |                 "schema": {
464 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
465 |                 }
466 |               }
467 |             }
468 |           },
469 |           "403": {
470 |             "description": "Forbidden - Insufficient permissions"
471 |           },
472 |           "422": {
473 |             "description": "Unprocessable Entity",
474 |             "content": {
475 |               "application/json": {
476 |                 "schema": {
477 |                   "$ref": "#/components/schemas/UnprocessableDTO"
478 |                 }
479 |               }
480 |             }
481 |           }
482 |         },
483 |         "tags": [
484 |           "Custom Menu Links"
485 |         ],
486 |         "security": [
487 |           {
488 |             "Agency-Access": []
489 |           }
490 |         ]
491 |       }
492 |     }
493 |   },
494 |   "info": {
495 |     "title": "Custom menus API",
496 |     "description": "Documentation for Custom menus API",
497 |     "version": "1.0",
498 |     "contact": {}
499 |   },
500 |   "tags": [
501 |     {
502 |       "name": "custom-menus",
503 |       "description": "Documentation for Custom menus API"
504 |     }
505 |   ],
506 |   "servers": [
507 |     {
508 |       "url": "https://services.leadconnectorhq.com"
509 |     }
510 |   ],
511 |   "components": {
512 |     "securitySchemes": {
513 |       "bearer": {
514 |         "scheme": "bearer",
515 |         "bearerFormat": "JWT",
516 |         "name": "Authorization",
517 |         "in": "header",
518 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
519 |         "type": "http"
520 |       },
521 |       "Location-Access": {
522 |         "scheme": "bearer",
523 |         "bearerFormat": "JWT",
524 |         "name": "Authorization",
525 |         "in": "header",
526 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
527 |         "type": "http"
528 |       },
529 |       "Agency-Access": {
530 |         "scheme": "bearer",
531 |         "bearerFormat": "JWT",
532 |         "name": "Authorization",
533 |         "in": "header",
534 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
535 |         "type": "http"
536 |       }
537 |     },
538 |     "schemas": {
539 |       "BadRequestDTO": {
540 |         "type": "object",
541 |         "properties": {
542 |           "statusCode": {
543 |             "type": "number",
544 |             "example": 400
545 |           },
546 |           "message": {
547 |             "type": "string",
548 |             "example": "Bad Request"
549 |           }
550 |         }
551 |       },
552 |       "UnauthorizedDTO": {
553 |         "type": "object",
554 |         "properties": {
555 |           "statusCode": {
556 |             "type": "number",
557 |             "example": 401
558 |           },
559 |           "message": {
560 |             "type": "string",
561 |             "example": "Invalid token: access token is invalid"
562 |           },
563 |           "error": {
564 |             "type": "string",
565 |             "example": "Unauthorized"
566 |           }
567 |         }
568 |       },
569 |       "UnprocessableDTO": {
570 |         "type": "object",
571 |         "properties": {
572 |           "statusCode": {
573 |             "type": "number",
574 |             "example": 422
575 |           },
576 |           "message": {
577 |             "example": [
578 |               "Unprocessable Entity"
579 |             ],
580 |             "type": "array",
581 |             "items": {
582 |               "type": "string"
583 |             }
584 |           },
585 |           "error": {
586 |             "type": "string",
587 |             "example": "Unprocessable Entity"
588 |           }
589 |         }
590 |       },
591 |       "IconSchemaOptional": {
592 |         "type": "object",
593 |         "properties": {
594 |           "name": {
595 |             "type": "string",
596 |             "description": "Name of the icon",
597 |             "example": "yin-yang"
598 |           },
599 |           "fontFamily": {
600 |             "type": "string",
601 |             "description": "Font family of the icon",
602 |             "enum": [
603 |               "fab",
604 |               "fas",
605 |               "far"
606 |             ]
607 |           }
608 |         }
609 |       },
610 |       "CustomMenuSchema": {
611 |         "type": "object",
612 |         "properties": {
613 |           "id": {
614 |             "type": "string",
615 |             "description": "Unique identifier for the custom menu",
616 |             "example": "12345"
617 |           },
618 |           "icon": {
619 |             "description": "Icon information for the menu item",
620 |             "allOf": [
621 |               {
622 |                 "$ref": "#/components/schemas/IconSchemaOptional"
623 |               }
624 |             ]
625 |           },
626 |           "title": {
627 |             "type": "string",
628 |             "description": "Title of the custom menu",
629 |             "example": "Dashboard"
630 |           },
631 |           "url": {
632 |             "type": "string",
633 |             "description": "URL of the custom menu",
634 |             "example": "/dashboard"
635 |           },
636 |           "order": {
637 |             "type": "number",
638 |             "description": "Order of the custom menu",
639 |             "example": 1
640 |           },
641 |           "showOnCompany": {
642 |             "type": "boolean",
643 |             "description": "Filter to show only agency-level menu links. When omitted, fetches both agency and sub-account menu links. Ignored if locationId is provided",
644 |             "example": true
645 |           },
646 |           "showOnLocation": {
647 |             "type": "boolean",
648 |             "description": "Whether the menu must be displayed for sub-accounts level",
649 |             "example": true
650 |           },
651 |           "showToAllLocations": {
652 |             "type": "boolean",
653 |             "description": "Whether the menu must be displayed to all sub-accounts",
654 |             "example": true
655 |           },
656 |           "locations": {
657 |             "description": "List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false",
658 |             "example": [
659 |               "gfWreTIHL8pDbggBb7af",
660 |               "67WreTIHL8pDbggBb7ty"
661 |             ],
662 |             "type": "array",
663 |             "items": {
664 |               "type": "string"
665 |             }
666 |           },
667 |           "openMode": {
668 |             "type": "string",
669 |             "description": "Mode for opening the menu link",
670 |             "enum": [
671 |               "iframe",
672 |               "new_tab",
673 |               "current_tab"
674 |             ]
675 |           },
676 |           "userRole": {
677 |             "type": "string",
678 |             "description": "Which user-roles should the menu be accessible to?",
679 |             "enum": [
680 |               "all",
681 |               "admin",
682 |               "user"
683 |             ]
684 |           },
685 |           "allowCamera": {
686 |             "type": "boolean",
687 |             "description": "Indicates if camera access is allowed for this menu",
688 |             "example": false
689 |           },
690 |           "allowMicrophone": {
691 |             "type": "boolean",
692 |             "description": "Indicates if microphone access is allowed for this menu",
693 |             "example": false
694 |           }
695 |         }
696 |       },
697 |       "GetCustomMenusResponseDTO": {
698 |         "type": "object",
699 |         "properties": {
700 |           "customMenus": {
701 |             "description": "Array of custom menu links",
702 |             "type": "array",
703 |             "items": {
704 |               "$ref": "#/components/schemas/CustomMenuSchema"
705 |             }
706 |           },
707 |           "totalLinks": {
708 |             "type": "number",
709 |             "description": "Total number of custom menu records",
710 |             "example": 100
711 |           }
712 |         }
713 |       },
714 |       "GetSingleCustomMenusSuccessfulResponseDTO": {
715 |         "type": "object",
716 |         "properties": {
717 |           "customMenu": {
718 |             "description": "Single Custom menu link object",
719 |             "allOf": [
720 |               {
721 |                 "$ref": "#/components/schemas/CustomMenuSchema"
722 |               }
723 |             ]
724 |           }
725 |         }
726 |       },
727 |       "DeleteCustomMenuSuccessfulResponseDTO": {
728 |         "type": "object",
729 |         "properties": {
730 |           "success": {
731 |             "type": "boolean",
732 |             "description": "Indicates whether the custom menu was successfully deleted",
733 |             "example": true
734 |           },
735 |           "message": {
736 |             "type": "string",
737 |             "description": "A message providing additional information about the deletion operation",
738 |             "example": "Custom menu successfully deleted"
739 |           },
740 |           "deletedMenuId": {
741 |             "type": "string",
742 |             "description": "The ID of the deleted custom menu",
743 |             "example": "12345abcde"
744 |           },
745 |           "deletedAt": {
746 |             "type": "string",
747 |             "description": "Timestamp of when the deletion was performed",
748 |             "example": "2023-09-12T15:30:45.123Z",
749 |             "format": "date-time"
750 |           }
751 |         }
752 |       },
753 |       "IconSchema": {
754 |         "type": "object",
755 |         "properties": {
756 |           "name": {
757 |             "type": "string",
758 |             "description": "Name of the icon",
759 |             "example": "yin-yang"
760 |           },
761 |           "fontFamily": {
762 |             "type": "string",
763 |             "description": "Font family of the icon",
764 |             "enum": [
765 |               "fab",
766 |               "fas",
767 |               "far"
768 |             ]
769 |           }
770 |         },
771 |         "required": [
772 |           "name",
773 |           "fontFamily"
774 |         ]
775 |       },
776 |       "CreateCustomMenuDTO": {
777 |         "type": "object",
778 |         "properties": {
779 |           "title": {
780 |             "type": "string",
781 |             "description": "Title of the custom menu",
782 |             "example": "Custom Menu"
783 |           },
784 |           "url": {
785 |             "type": "string",
786 |             "description": "URL of the custom menu",
787 |             "example": "https://custom-menus.com/"
788 |           },
789 |           "icon": {
790 |             "description": "Icon information for the custom menu",
791 |             "allOf": [
792 |               {
793 |                 "$ref": "#/components/schemas/IconSchema"
794 |               }
795 |             ]
796 |           },
797 |           "showOnCompany": {
798 |             "type": "boolean",
799 |             "description": "Whether the menu must be displayed on the agency's level",
800 |             "example": true,
801 |             "default": true
802 |           },
803 |           "showOnLocation": {
804 |             "type": "boolean",
805 |             "description": "Whether the menu must be displayed for sub-accounts level",
806 |             "example": true,
807 |             "default": true
808 |           },
809 |           "showToAllLocations": {
810 |             "type": "boolean",
811 |             "description": "Whether the menu must be displayed to all sub-accounts",
812 |             "example": true,
813 |             "default": true
814 |           },
815 |           "openMode": {
816 |             "type": "string",
817 |             "description": "Mode for opening the menu link",
818 |             "enum": [
819 |               "iframe",
820 |               "new_tab",
821 |               "current_tab"
822 |             ]
823 |           },
824 |           "locations": {
825 |             "description": "List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false",
826 |             "example": [
827 |               "gfWreTIHL8pDbggBb7af",
828 |               "67WreTIHL8pDbggBb7ty"
829 |             ],
830 |             "type": "array",
831 |             "items": {
832 |               "type": "string"
833 |             }
834 |           },
835 |           "userRole": {
836 |             "type": "string",
837 |             "description": "Which user-roles should the menu be accessible to?",
838 |             "enum": [
839 |               "all",
840 |               "admin",
841 |               "user"
842 |             ]
843 |           },
844 |           "allowCamera": {
845 |             "type": "boolean",
846 |             "description": "Whether to allow camera access (only for iframe mode)",
847 |             "example": false
848 |           },
849 |           "allowMicrophone": {
850 |             "type": "boolean",
851 |             "description": "Whether to allow microphone access (only for iframe mode)",
852 |             "example": false
853 |           }
854 |         },
855 |         "required": [
856 |           "title",
857 |           "url",
858 |           "icon",
859 |           "showOnCompany",
860 |           "showOnLocation",
861 |           "showToAllLocations",
862 |           "openMode",
863 |           "locations",
864 |           "userRole"
865 |         ]
866 |       },
867 |       "UpdateCustomMenuDTO": {
868 |         "type": "object",
869 |         "properties": {
870 |           "title": {
871 |             "type": "string",
872 |             "description": "Title of the custom menu",
873 |             "example": "Custom Menu"
874 |           },
875 |           "url": {
876 |             "type": "string",
877 |             "description": "URL of the custom menu",
878 |             "example": "https://custom-menus.com/"
879 |           },
880 |           "icon": {
881 |             "description": "Icon information for the custom menu",
882 |             "allOf": [
883 |               {
884 |                 "$ref": "#/components/schemas/IconSchemaOptional"
885 |               }
886 |             ]
887 |           },
888 |           "showOnCompany": {
889 |             "type": "boolean",
890 |             "description": "Whether the menu must be displayed on the agency's level",
891 |             "example": true,
892 |             "default": true
893 |           },
894 |           "showOnLocation": {
895 |             "type": "boolean",
896 |             "description": "Whether the menu must be displayed for sub-accounts level",
897 |             "example": true,
898 |             "default": true
899 |           },
900 |           "showToAllLocations": {
901 |             "type": "boolean",
902 |             "description": "Whether the menu must be displayed to all sub-accounts",
903 |             "example": true,
904 |             "default": true
905 |           },
906 |           "openMode": {
907 |             "type": "string",
908 |             "description": "Mode for opening the menu link",
909 |             "enum": [
910 |               "iframe",
911 |               "new_tab",
912 |               "current_tab"
913 |             ]
914 |           },
915 |           "locations": {
916 |             "description": "List of sub-account IDs where the menu should be shown. This list is applicable only when showOnLocation is true and showToAllLocations is false",
917 |             "example": [
918 |               "gfWreTIHL8pDbggBb7af",
919 |               "67WreTIHL8pDbggBb7ty"
920 |             ],
921 |             "type": "array",
922 |             "items": {
923 |               "type": "string"
924 |             }
925 |           },
926 |           "userRole": {
927 |             "type": "string",
928 |             "description": "Which user-roles should the menu be accessible to?",
929 |             "enum": [
930 |               "all",
931 |               "admin",
932 |               "user"
933 |             ]
934 |           },
935 |           "allowCamera": {
936 |             "type": "boolean",
937 |             "description": "Whether to allow camera access (only for iframe mode)",
938 |             "example": false
939 |           },
940 |           "allowMicrophone": {
941 |             "type": "boolean",
942 |             "description": "Whether to allow microphone access (only for iframe mode)",
943 |             "example": false
944 |           }
945 |         }
946 |       },
947 |       "UpdateCustomMenuLinkResponseDTO": {
948 |         "type": "object",
949 |         "properties": {
950 |           "success": {
951 |             "type": "boolean",
952 |             "description": "Status of update"
953 |           },
954 |           "customMenu": {
955 |             "description": "Updated custom menu link",
956 |             "allOf": [
957 |               {
958 |                 "$ref": "#/components/schemas/CustomMenuSchema"
959 |               }
960 |             ]
961 |           }
962 |         }
963 |       }
964 |     }
965 |   }
966 | }


--------------------------------------------------------------------------------
/docs/country list/Country.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Country]
  3 | ---
  4 | 
  5 | # Country List
  6 | 
  7 | Select country code whenever a contact will create or update with country field
  8 | 
  9 | 
 10 | | **Country Code** | **Country Name**                             |                 |                      
 11 | | ---------------- | -------------------------------------------- | ----------------|               
 12 | |AF| Afghanistan|
 13 | |AX| Aland Islands|
 14 | |AL| Albania|
 15 | |DZ| Algeria|
 16 | |AS| American Samoa|
 17 | |AD| AndorrA|
 18 | |AO| Angola|
 19 | |AI| Anguilla|
 20 | |AQ| Antarctica|
 21 | |AG| Antigua and Barbuda|
 22 | |AR| Argentina|
 23 | |AM| Armenia|
 24 | |AW| Aruba|
 25 | |AU| Australia|
 26 | |AT| Austria|
 27 | |AZ| Azerbaijan|
 28 | |BS| Bahamas|
 29 | |BH| Bahrain|
 30 | |BD| Bangladesh|
 31 | |BB| Barbados|
 32 | |BY| Belarus|
 33 | |BE| Belgium|
 34 | |BZ| Belize|
 35 | |BJ| Benin|
 36 | |BM| Bermuda|
 37 | |BT| Bhutan|
 38 | |BO| Bolivia|
 39 | |BA| Bosnia and Herzegovina|
 40 | |BW| Botswana|
 41 | |BV| Bouvet Island|
 42 | |BR| Brazil|
 43 | |IO| British Indian Ocean Territory|
 44 | |BN| Brunei Darussalam|
 45 | |BG| Bulgaria|
 46 | |BF| Burkina Faso|
 47 | |BI| Burundi|
 48 | |KH| Cambodia|
 49 | |CM| Cameroon|
 50 | |CA| Canada|
 51 | |CV| Cape Verde|
 52 | |KY| Cayman Islands|
 53 | |CF| Central African Republic|
 54 | |TD| Chad|
 55 | |CL| Chile|
 56 | |CN| China|
 57 | |CX| Christmas Island|
 58 | |CC| Cocos (Keeling) Islands|
 59 | |CO| Colombia|
 60 | |KM| Comoros|
 61 | |CG| Congo|
 62 | |CD| Congo| (The Democratic Republic of the)|
 63 | |CK| Cook Islands|
 64 | |CR| Costa Rica|
 65 | |CI| Cote D"Ivoire|
 66 | |HR| Croatia|
 67 | |CU| Cuba|
 68 | |CY| Cyprus|
 69 | |CZ| Czech Republic|
 70 | |DK| Denmark|
 71 | |DJ| Djibouti|
 72 | |DM| Dominica|
 73 | |DO| Dominican Republic|
 74 | |EC| Ecuador|
 75 | |EG| Egypt|
 76 | |SV| El Salvador|
 77 | |GQ| Equatorial Guinea|
 78 | |ER| Eritrea|
 79 | |EE| Estonia|
 80 | |ET| Ethiopia|
 81 | |FK| Falkland Islands (Malvinas)|
 82 | |FO| Faroe Islands|
 83 | |FJ| Fiji|
 84 | |FI| Finland|
 85 | |FR| France|
 86 | |GF| French Guiana|
 87 | |PF| French Polynesia|
 88 | |TF| French Southern Territories|
 89 | |GA| Gabon|
 90 | |GM| Gambia|
 91 | |GE| Georgia|
 92 | |DE| Germany|
 93 | |GH| Ghana|
 94 | |GI| Gibraltar|
 95 | |GR| Greece|
 96 | |GL| Greenland|
 97 | |GD| Grenada|
 98 | |GP| Guadeloupe|
 99 | |GU| Guam|
100 | |GT| Guatemala|
101 | |GG| Guernsey|
102 | |GN| Guinea|
103 | |GW| Guinea-Bissau|
104 | |GY| Guyana|
105 | |HT| Haiti|
106 | |HM| Heard Island and Mcdonald Islands|
107 | |VA| Holy See (Vatican City State)|
108 | |HN| Honduras|
109 | |HK| Hong Kong|
110 | |HU| Hungary|
111 | |IS| Iceland|
112 | |IN| India|
113 | |ID| Indonesia|
114 | |IR| Iran| (Islamic Republic Of)|
115 | |IQ| Iraq|
116 | |IE| Ireland|
117 | |IM| Isle of Man|
118 | |IL| Israel|
119 | |IT| Italy|
120 | |JM| Jamaica|
121 | |JP| Japan|
122 | |JE| Jersey|
123 | |JO| Jordan|
124 | |KZ| Kazakhstan|
125 | |KE| Kenya|
126 | |KI| Kiribati|
127 | |KP| Korea| (Democratic People"S Republic)|
128 | |KR| Korea| (Republic of)|
129 | |XK| Kosovo|
130 | |KW| Kuwait|
131 | |KG| Kyrgyzstan|
132 | |LA| Lao People's Democratic Republic`|
133 | |LV| Latvia|
134 | |LB| Lebanon|
135 | |LS| Lesotho|
136 | |LR| Liberia|
137 | |LY| Libyan Arab Jamahiriya|
138 | |LI| Liechtenstein|
139 | |LT| Lithuania|
140 | |LU| Luxembourg|
141 | |MO| Macao|
142 | |MK| Macedonia| (The Former Yugoslav Republic of)|
143 | |MG| Madagascar|
144 | |MW| Malawi|
145 | |MY| Malaysia|
146 | |MV| Maldives|
147 | |ML| Mali|
148 | |MT| Malta|
149 | |MH| Marshall Islands|
150 | |MQ| Martinique|
151 | |MR| Mauritania|
152 | |MU| Mauritius|
153 | |YT| Mayotte|
154 | |MX| Mexico|
155 | |FM| Micronesia| (Federated States of)|
156 | |MD| Moldova| (Republic of)|
157 | |MC| Monaco|
158 | |MN| Mongolia|
159 | |ME| Montenegro|
160 | |MS| Montserrat|
161 | |MA| Morocco|
162 | |MZ| Mozambique|
163 | |MM| Myanmar|
164 | |NA| Namibia|
165 | |NR| Nauru|
166 | |NP| Nepal|
167 | |NL| Netherlands|
168 | |AN| Netherlands Antilles|
169 | |NC| New Caledonia|
170 | |NZ| New Zealand|
171 | |NI| Nicaragua|
172 | |NE| Niger|
173 | |NG| Nigeria|
174 | |NU| Niue|
175 | |NF| Norfolk Island|
176 | |MP| Northern Mariana Islands|
177 | |NO| Norway|
178 | |OM| Oman|
179 | |PK| Pakistan|
180 | |PW| Palau|
181 | |PS| Palestinian Territory| (Occupied)|
182 | |PA| Panama|
183 | |PG| Papua New Guinea|
184 | |PY| Paraguay|
185 | |PE| Peru|
186 | |PH| Philippines|
187 | |PN| Pitcairn|
188 | |PL| Poland|
189 | |PT| Portugal|
190 | |PR| Puerto Rico|
191 | |QA| Qatar|
192 | |RE| Reunion|
193 | |RO| Romania|
194 | |RU| Russian Federation|
195 | |RW| Rwanda|
196 | |SH| Saint Helena|
197 | |KN| Saint Kitts and Nevis|
198 | |LC| Saint Lucia|
199 | |MF| Saint Martin|
200 | |PM| Saint Pierre and Miquelon|
201 | |VC| Saint Vincent and the Grenadines|
202 | |WS| Samoa|
203 | |SM| San Marino|
204 | |ST| Sao Tome and Principe|
205 | |SA| Saudi Arabia|
206 | |SN| Senegal|
207 | |RS| Serbia|
208 | |SC| Seychelles|
209 | |SL| Sierra Leone|
210 | |SG| Singapore|
211 | |SX| Sint Maarten|
212 | |SK| Slovakia|
213 | |SI| Slovenia|
214 | |SB| Solomon Islands|
215 | |SO| Somalia|
216 | |ZA| South Africa|
217 | |GS| South Georgia and the South Sandwich Islands|
218 | |ES| Spain|
219 | |LK| Sri Lanka|
220 | |SD| Sudan|
221 | |SR| Suriname|
222 | |SJ| Svalbard and Jan Mayen|
223 | |SZ| Swaziland|
224 | |SE| Sweden|
225 | |CH| Switzerland|
226 | |SY| Syrian Arab Republic|
227 | |TW| Taiwan|
228 | |TJ| Tajikistan|
229 | |TZ| Tanzania| (United Republic of)|
230 | |TH| Thailand|
231 | |TL| Timor-Leste|
232 | |TG| Togo|
233 | |TK| Tokelau|
234 | |TO| Tonga|
235 | |TT| Trinidad and Tobago|
236 | |TN| Tunisia|
237 | |TR| Turkey|
238 | |TM| Turkmenistan|
239 | |TC| Turks and Caicos Islands|
240 | |TV| Tuvalu|
241 | |UG| Uganda|
242 | |GB| UK|
243 | |UA| Ukraine|
244 | |AE| United Arab Emirates|
245 | |US| United States|
246 | |UM| United States Minor Outlying Islands|
247 | |UY| Uruguay|
248 | |UZ| Uzbekistan|
249 | |VU| Vanuatu|
250 | |VE| Venezuela|
251 | |VN| Viet Nam|
252 | |VG| Virgin Islands| (British)|
253 | |VI| Virgin Islands| (U.S.)|
254 | |WF| Wallis and Futuna|
255 | |EH| Western Sahara|
256 | |YE| Yemen|
257 | |ZM| Zambia|
258 | |ZW| Zimbabwe|
259 | 


--------------------------------------------------------------------------------
/docs/marketplace modules/CustomJs.md:
--------------------------------------------------------------------------------
  1 | # CustomJS
  2 | 
  3 | ## Wrapper functions
  4 | 
  5 | HighLevel provides functions to render contextual data & some utilities that can help developers customize experience for the user.
  6 | 
  7 | ### 1. Local Storage and Cookies Management:
  8 | 
  9 | This feature provides utility methods to interact with localStorage and cookies efficiently.
 10 | 
 11 | **Local Storage Wrapper:**
 12 | 
 13 | - Store data with a maximum size of 5KB per entry.
 14 | - The wrapper automatically prefixes keys to prevent key collisions with `custom_`.
 15 | - Stored data is automatically cleaned up when the Vue instance is destroyed.
 16 | 
 17 | _Usage:_
 18 | 
 19 | ```shell
 20 | await  AppUtils.Storage.setData(key,  value); //  Store  data
 21 | await  AppUtils.Storage.getData(key); //  Retrieve  data
 22 | ```
 23 | 
 24 | <br/>
 25 | 
 26 | **Cookies Wrapper:**
 27 | 
 28 | - Store data with a maximum size of 5KB per entry.
 29 | - Set cookies with optional expiration (maximum of 2 days from the time of creation).
 30 | - The wrapper automatically prefixes keys to prevent key collisions with `custom_`.
 31 | 
 32 | _Usage:_
 33 | 
 34 | ```shell
 35 | await AppUtils.Storage.setCookie(key, value, expiryInHours)
 36 | //or
 37 | await AppUtils.Storage.setCookie(key, value) // Store data in a cookie
 38 | 
 39 | await AppUtils.Storage.getCookie(key) // Retrieve cookie value
 40 | ```
 41 | 
 42 | <hr/>
 43 | 
 44 | ### 2. Custom Events:
 45 | 
 46 | You can listen to custom application events for specific lifecycle hooks or activities.
 47 | 
 48 | **Events:**
 49 | 
 50 | - **routeLoaded**: Emitted when the first route is loaded after application startup.
 51 | - **routeChangeEvent**: Emitted on every route change after the initial route load.
 52 | 
 53 | _Usage:_
 54 | 
 55 | ```shell
 56 | window.addEventListener('routeLoaded',callback)
 57 | window.addEventListener('routeChangeEvent',callback)
 58 | ```
 59 | 
 60 | <hr>
 61 | 
 62 | ### 3. Routing Methods:
 63 | 
 64 | Custom scripts can now control routing within the application via exposed methods.
 65 | 
 66 | **Methods:**
 67 | 
 68 | - **getCurrentRoute()**: Get the current route info.
 69 | - **navigate(options:INavigationOptions)**: Allows you to navigate to a different route via name or path.
 70 | 
 71 | ```js
 72 |  interface INavigationOptions{
 73 |   name?: string
 74 |   path?: string
 75 |   params?: Record<string,  string>
 76 |   query?: Record<string,  string>
 77 |   replace?: boolean
 78 |   append?: boolean
 79 | }
 80 | ```
 81 | 
 82 | _Usage:_
 83 | 
 84 | ```shell
 85 | await AppUtils.RouteHelper.navigate({name: 'integrations-settings-v2'}); // Navigate to integrations page on current location
 86 | 
 87 | const path = '/integration'
 88 | await AppUtils.RouteHelper.navigate({path}) // Navigates to marketplace apps page
 89 | 
 90 | const currentRoute = await AppUtils.RouteHelper.getCurrentRoute();
 91 | console.log(currentRoute); // Logs current route information {fullPath, name, params, path, query}
 92 | ```
 93 | 
 94 | <hr>
 95 | 
 96 | ### 4. Utility Methods:
 97 | 
 98 | A set of utility methods is now available to provide essential contextual data for custom scripts.
 99 | 
100 | **Methods:**
101 | 
102 | - User Info: `getCurrentUser()` – Retrieves current user's information.
103 | - Current Location: `getCurrentLocation()` – Retrieves data about the user's current location.
104 | - Company Info: `getCompany()` – Retrieves information about the current company.
105 | 
106 | _Usage:_
107 | 
108 | ```shell
109 | const userInfo = await AppUtils.Utilities.getCurrentUser();//{id, name, firstName, lastName, email, type, role}
110 | 
111 | const currentLocation = await AppUtils.Utilities.getCurrentLocation();//{id, name, address: {address, city, country}}
112 | 
113 | const companyInfo = AppUtils.Utilities.getCompany();//{id, name}
114 | ```


--------------------------------------------------------------------------------
/docs/marketplace modules/shared_secret_customJS_customPages.md:
--------------------------------------------------------------------------------
  1 | # User Context in Marketplace Apps
  2 | 
  3 | HighLevel provides a secure mechanism for accessing authenticated user information through signed tokens. This guide explains how you can generate and use `Shared Secret` key to access user context in secured manner.
  4 | 
  5 | ## Setting Up Shared Secret
  6 | 
  7 | ### Generating a Shared Secret Key
  8 | 
  9 | First you'll need to generate a Shared Secret key for your application:
 10 | 
 11 | 1. Navigate to your application's Advanced Settings
 12 | 2. Go to the Auth section
 13 | 3. Under Shared Secret, click the Generate button to create your Shared Secret key
 14 | 
 15 | <div style="display: flex; justify-content: left">
 16 |   <img src="https://i.imgur.com/Xw3LGpo.png" alt="Shared Secret Key Generation" width="600" height="200"/>
 17 | </div>
 18 | 
 19 | ## Frontend Implementation Methods
 20 | 
 21 | There are two ways in which you can access this data in your frontend, depending on where your code runs:
 22 | 
 23 | ### 1. Custom JavaScript Implementation
 24 | 
 25 | If you're using custom JavaScript injected into HighLevel pages, use the `exposeSessionDetails` method:
 26 | 
 27 | ```javascript
 28 | async function getUserData() {
 29 |   try {
 30 |     // APP_ID is your application's unique identifier
 31 |     const encryptedUserData = await window.exposeSessionDetails(APP_ID)
 32 | 
 33 |     // Send this encrypted data to your backend for decryption
 34 |     const response = await fetch('your-backend-endpoint', {
 35 |       method: 'POST',
 36 |       headers: {
 37 |         'Content-Type': 'application/json'
 38 |       },
 39 |       body: JSON.stringify({ encryptedData: encryptedUserData })
 40 |     })
 41 | 
 42 |     const userData = await response.json()
 43 |     return userData
 44 |   } catch (error) {
 45 |     console.error('Failed to fetch session details:', error)
 46 |     throw error
 47 |   }
 48 | }
 49 | ```
 50 | 
 51 | ### 2. Custom Pages Implementation
 52 | 
 53 | If you're trying to get user context in custom page, use the `postMessage` method to communicate with the parent window:
 54 | 
 55 | ```javascript
 56 | async function getUserData() {
 57 |   try {
 58 |     const encryptedUserData = await new Promise((resolve) => {
 59 |       // Request user data from parent window
 60 |       window.parent.postMessage({ message: 'REQUEST_USER_DATA' }, '*')
 61 | 
 62 |       // Listen for the response
 63 |       const messageHandler = ({ data }) => {
 64 |         if (data.message === 'REQUEST_USER_DATA_RESPONSE') {
 65 |           window.removeEventListener('message', messageHandler)
 66 |           resolve(data.payload)
 67 |         }
 68 |       }
 69 | 
 70 |       window.addEventListener('message', messageHandler)
 71 |     })
 72 | 
 73 |     // Send encrypted data to your backend for decryption
 74 |     const response = await fetch('your-backend-endpoint', {
 75 |       method: 'POST',
 76 |       headers: {
 77 |         'Content-Type': 'application/json'
 78 |       },
 79 |       body: JSON.stringify({ encryptedData: encryptedUserData })
 80 |     })
 81 | 
 82 |     const userData = await response.json()
 83 |     return userData
 84 |   } catch (error) {
 85 |     console.error('Failed to fetch user data:', error)
 86 |     throw error
 87 |   }
 88 | }
 89 | ```
 90 | 
 91 | ## Backend Implementation
 92 | 
 93 | Regardless of which frontend method you use, the backend decryption process remains the same:
 94 | 
 95 | ```javascript
 96 | const CryptoJS = require('crypto-js')
 97 | 
 98 | function decryptUserData(encryptedUserData, sharedSecretKey) {
 99 |   try {
100 |     const decrypted = CryptoJS.AES.decrypt(encryptedUserData, sharedSecretKey).toString(CryptoJS.enc.Utf8)
101 |     return JSON.parse(decrypted)
102 |   } catch (error) {
103 |     throw new Error('Failed to decrypt user data')
104 |   }
105 | }
106 | 
107 | // Example Express endpoint
108 | app.post('/decrypt-user-data', (req, res) => {
109 |   try {
110 |     const { encryptedData } = req.body
111 |     const userData = decryptUserData(encryptedData, process.env.GHL_APP_SHARED_SECRET)
112 |     res.json(userData)
113 |   } catch (error) {
114 |     res.status(400).json({ error: 'Failed to decrypt user data' })
115 |   }
116 | })
117 | ```
118 | 
119 | ## Decrypted Data Structure
120 | 
121 | After decryption, the data will be returned as a JSON object containing user information. The structure varies based on whether the user is accessing from an Agency or Location context.
122 | 
123 | ### Agency Context
124 | 
125 | When accessing from an Agency context, the decrypted data will have the following structure:
126 | 
127 | ```json
128 | {
129 |   "userId": "MKQJ7wOVVmNOMvrnKKKK", // Unique identifier for the user
130 |   "companyId": "GNb7aIv4rQFVb9iwNl5K", // Unique identifier for the company/agency
131 |   "role": "admin", // User's role in the system
132 |   "type": "agency", // Indicates this is an agency user
133 |   "userName": "John Doe", // Full name of the user
134 |   "email": "johndoe@gmail.com" // User's email address
135 | }
136 | ```
137 | 
138 | ### Location Context
139 | 
140 | When accessing from a Location context, the decrypted data will include an additional `activeLocation` field:
141 | 
142 | ```json
143 | {
144 |   "userId": "MKQJ7wOVVmNOMvrnKKKK", // Unique identifier for the user
145 |   "companyId": "GNb7aIv4rQFVb9iwNl5K", // Unique identifier for the company/agency
146 |   "role": "admin", // User's role in the system
147 |   "type": "agency", // Indicates this is an agency user
148 |   "activeLocation": "yLKVZpNppIdYpah4RjNE", // Unique identifier for the active location
149 |   "userName": "John Doe", // Full name of the user
150 |   "email": "johndoe@gmail.com" // User's email address
151 | }
152 | ```
153 | 
154 | ### Field Descriptions
155 | 
156 | | Field          | Type   | Description                                                       |
157 | | -------------- | ------ | ----------------------------------------------------------------- |
158 | | userId         | string | Unique identifier for the user                                    |
159 | | companyId      | string | Unique identifier for the company/agency                          |
160 | | role           | string | User's role in the system (e.g., 'admin', 'user')                 |
161 | | type           | string | Context type ('agency' or 'location')                             |
162 | | activeLocation | string | (Location context only) Unique identifier for the active location |
163 | | userName       | string | Full name of the user                                             |
164 | | email          | string | User's email address                                              |
165 | 
166 | ### Reference Implementation
167 | 
168 | For a complete example implementation, you can refer to our marketplace app template repository:
169 | 
170 | [GoHighLevel Marketplace App Template](https://github.com/GoHighLevel/ghl-marketplace-app-template/tree/main)
171 | 
172 | The relevant implementation can be found in the `/decrypt-sso` endpoint of the template.
173 | 
174 | ### Security Considerations
175 | 
176 | - Never expose your Shared Secret key in client-side code
177 | - Always perform decryption on your backend
178 | - Store your Shared Secret key securely using environment variables
179 | - Use HTTPS for all communications between your frontend and backend
180 | - Regularly rotate your Shared Secret keys for enhanced security
181 | 


--------------------------------------------------------------------------------
/docs/oauth/Authorization.md:
--------------------------------------------------------------------------------
 1 | # Authorization
 2 | 
 3 | HighLevel supports the Authorization Code Grant flow with v2 APIs. Please find the step-by-step procedure to use and understand the OAuth 2.0 flow.
 4 | 
 5 | Here's a [Loom Video](https://www.loom.com/share/f32384758de74a4dbb647e0b7962c4ea?sid=0907a66d-a160-4b51-bcd4-c47ebae37fca) to walk you through the entire process.
 6 | 
 7 | ### 1. Register an OAuth app
 8 | 
 9 | 1. Go to the [Marketplace](https://marketplace.gohighlevel.com)
10 | 2. Sign up for a developer account.
11 | 3. Go to "My Apps," and click on "Create App."
12 | 4. Fill up the required details in the form, then your app will be created.
13 | 5. Click on the app, and it will take you to settings where you can configure the scopes, generate the keys, etc.
14 | 
15 | ### 2. Add the app to your desired location
16 | 
17 | 1. Make the location/agency Admin go to the app's Authorization Page URL.
18 | 2. They select the location they want to connect.
19 | 3. They are redirected to the redirect URL with the Authorization Code.
20 | 4. Use the Authorization Code to get the Access token via the Get Access Token API under OAuth 2.0.
21 | 5. Use the Access Token to call any API.
22 | 
23 | ### 3. Get the app's Authorization Page URL
24 | 
25 | To generate the Authorization Page URL for an app, replace the `client_id`, `redirect_uri`, and `scope` in the template below. Then, redirect the location/agency admin trying to install your app to the URL.
26 | 
27 | 1. For standard Auth URL flow:
28 | 
29 | ```
30 | https://marketplace.gohighlevel.com/oauth/chooselocation?
31 | response_type=code&
32 | redirect_uri=https://myapp.com/oauth/callback/gohighlevel&
33 | client_id=CLIENT_ID&
34 | scope=conversations/message.readonly conversations/message.write
35 | ```
36 | 
37 | 2. For White-labeled Auth URL flow:
38 | 
39 | ```
40 | https://marketplace.leadconnectorhq.com/oauth/chooselocation?
41 | response_type=code&
42 | redirect_uri=https://myapp.com/oauth/callback/gohighlevel&
43 | client_id=CLIENT_ID&
44 | scope=conversations/message.readonly conversations/message.write
45 | ```
46 | 
47 | <b>NOTE:</b> For the users who are not logged in to the application at the time of giving consent, developer has option to initiate login in new tab or in same tab. For initiating login in same tab, developer need to append `&loginWindowOpenMode=self` to authorization url. If the query param not passed, login in new tab would be default.
48 | 
49 | When a user grants access, their browser is redirected to the specified redirect URI, and the Authorization Code is passed inside the code query parameter.
50 | 
51 | ```
52 | https://myapp.com/oauth/callback/gohighlevel?code=7676cjcbdc6t76cdcbkjcd09821jknnkj
53 | ```
54 | 
55 | ## OAuth FAQs
56 | 
57 | ### How long are the access tokens valid?
58 | 
59 | The access tokens are valid for a day. After that, you can use the refresh token to get a new access token which will be valid for another day.
60 | 
61 | ### How long are the refresh tokens valid?
62 | 
63 | The refresh tokens are valid for a year unless they are used. If they are used, the new refresh token is valid for a year as well.
64 | 
65 | ### How should we handle token expiry?
66 | 
67 | You should:
68 | 
69 | 1. Make a request to any of our APIs using the accessToken.
70 | 2. If you get a response saying that the token is expired, refresh the token using our API and save the new access token and refresh token in your database.
71 | 3. Make the request again with the new accessToken.
72 | 
73 | You can write a wrapper function on your end to achieve this. You can use it for all the API calls you make to our APIs.
74 | 
75 | ### What are current rate limits for API 2.0?
76 | 
77 | GHL has implemented rate limits on our public V2 APIs using OAuth to ensure optimal performance and stability. These limits have been adjusted to:
78 | 
79 | Burst limit: A maximum of 100 API requests per 10 seconds for each Marketplace app (i.e., client) per resource (i.e., Location or Company).
80 | Daily limit: 200,000 API requests per day for each Marketplace app (i.e., client) per resource (i.e., Location or Company).
81 | 
82 | These new limits contribute to better overall performance and stability of our system.
83 | 
84 | To monitor your limited usage, refer to the following API response headers:
85 | 
86 | 'X-RateLimit-Limit-Daily': Your daily limit
87 | 'X-RateLimit-Daily-Remaining': The remaining number of requests for the day
88 | 'X-RateLimit-Interval-Milliseconds': The time interval for burst requests
89 | 'X-RateLimit-Max': The maximum request limit in the specified time interval
90 | 'X-RateLimit-Remaining': The remaining number of requests in the current time interval
91 | 
92 | Example: If the 'GHL-APP' is installed on two locations (Sub-account A and Sub-account B) on the GHL Marketplace, the rate limits for each location would be as follows:
93 | 
94 | 1. Sub-account A: 'GHL-APP' can make 200,000 API requests per day and 100 API requests per 10 seconds.
95 | 2. Sub-account B: 'GHL-APP' can make 200,000 API requests per day and 100 API requests per 10 seconds.
96 | 


--------------------------------------------------------------------------------
/docs/oauth/Billing.md:
--------------------------------------------------------------------------------
 1 | # Billing Webhook
 2 | 
 3 | This webhook is essential for externally billed apps within our marketplace. It must be accessed by developers to authorize the installation of the app.
 4 | 
 5 | The primary purpose of this webhook is to capture and update payment information for apps that employ a Paid business model and do not utilize HighLevel's internal billing mechanism.
 6 | 
 7 | ## 1. Prerequisites for using this webhook
 8 | 
 9 | Before using this webhook, ensure that you meet the following prerequisites on the [Marketplace](https://marketplace.gohighlevel.com):
10 | 
11 | 1. You should have an app with a Business Model marked as Paid.
12 | 2. External Billing must be enabled for your app.
13 | 3. You must have entered the Billing URL.
14 | 
15 | ## 2. Retrieving Parameters from the Billing URL
16 | 
17 | When an Agency or Location installs your app, they will be redirected to the Billing URL specified in the configuration. You will receive the following parameters in the URL:
18 | 
19 | | Parameter Name | Possible Values      | Notes                                                                   |
20 | | -------------- | -------------------- | ----------------------------------------------------------------------- |
21 | | clientId       | `<client_id>`        | Used for validation.                                                    |
22 | | installType    | `location`, `agency` | You will receive `agency,location` in case of both agency and location. |
23 | | locationId     | `<location_id>`      | You will receive this in case of `location` or `agency,location`.       |
24 | | companyId      | `<agency_id>`        | You will receive this in case of `agency` or `agency,location`.         |
25 | 
26 | ## 3. Using The Webhook
27 | 
28 | After successfully processing the payment on your end, you need to make a request to our billing webhook endpoint:
29 | 
30 | ```
31 | https://services.leadconnectorhq.com/oauth/billing/webhook
32 | ```
33 | 
34 | The parameters you need to include in the webhook request are as follows:
35 | 
36 | **Request Method:**
37 | POST
38 | 
39 | **Request Headers:**
40 | 
41 | | Name                | Value              | Notes                                                                          |
42 | | ------------------- | ------------------ | ------------------------------------------------------------------------------ |
43 | | x-ghl-client-key    | Your client key    | This should be from the same client for which you are authorizing the payment. |
44 | | x-ghl-client-secret | Your Client Secret | The corresponding client secret for the client key used.                       |
45 | | Content-Type        | application/json   |
46 | 
47 | **Request Body:**
48 | 
49 | | Name           | Value                | Notes                                                             |
50 | | -------------- | -------------------- | ----------------------------------------------------------------- |
51 | | clientId       | Your client ID       |                                                                   |
52 | | authType       | Enum                 | Possible values are `company` and `location`.                     |
53 | | locationId     | `<location_id>`      | Required when authType is `location`.                             |
54 | | companyId      | `<company_id>`       | Required when authType is `company`.                              |
55 | | subscriptionId | Your subscription ID | You can include this if you have configured a subscription model. |
56 | | paymentId      | Your Payment ID      | In case of a one-time payment model, you can send this parameter. |
57 | | amount         | Billed Amount        | Required.                                                         |
58 | | status         | Enum                 | Possible values are `COMPLETED` and `FAILED`.                     |
59 | | paymentType    | Enum                 | Possible values are `one_time` and `recurring`.                   |
60 | 
61 | ### Example
62 | 
63 | Here is a sample cURL command for the webhook request:
64 | 
65 | ```shell
66 | curl --location 'https://services.leadconnectorhq.com/oauth/billing/webhook' \
67 | --header 'x-ghl-client-key: <client_key>' \
68 | --header 'x-ghl-client-secret: <client_secret>' \
69 | --header 'Content-Type: application/json' \
70 | --data '{
71 |     "clientId": "<client_id>",
72 |     "authType": "location",
73 |     "locationId": "<location_id>",
74 |     "subscriptionId": "<subscription_id>",
75 |     "paymentId": "<payment_id>",
76 |     "amount": 12,
77 |     "status": "COMPLETED",
78 |     "paymentType": "recurring"
79 | }'
80 | ```
81 | 
82 | ## Webhook FAQs
83 | 
84 | ### Can I get multiple location ids in the Billing URL?
85 | 
86 | Yes, in the case of multiple installations, you will receive a list of locationIds in a comma-separated format in the billing URL.
87 | 
88 | ### Can I update for multiple locations in one call?
89 | 
90 | No, you need to trigger the webhook for each location and company separately.
91 | 


--------------------------------------------------------------------------------
/docs/oauth/ExternalAuthentication.md:
--------------------------------------------------------------------------------
  1 | # External Authentication
  2 | 
  3 | External authentication enables developers to authenticate HighLevel users using their credentials with the developer’s system before installing the application on HighLevel.
  4 | 
  5 | This feature allows you to configure custom authentication fields as necessary, such as:
  6 | 
  7 | - apiKey
  8 | - username
  9 | - password
 10 | - oauth 2.0
 11 | 
 12 | ###### How to enable external authentication on the application?
 13 | 
 14 | Navigate to Developer Marketplace > My Apps > select your app and click on ‘External Authentication’ tab in the navigation pane. We support API Key/Basic Auth and OAuth2.0
 15 | 
 16 | ## OAuth 2.0
 17 | 
 18 | Adding OAuth v2 Authentication to Marketplace Apps
 19 | This document outlines the process of configuring OAuth 2.0 authentication for external calls within Marketplace apps. Currently, only the "Authorization Code" grant type is supported. HighLevel manages token pairs and includes them in custom actions and triggers, enabling a wide range of integration possibilities.
 20 | 
 21 | ### 1. Configuration
 22 | 
 23 | Follow these steps to configure OAuth v2 authentication:
 24 | 
 25 | <ol type="a">
 26 | <li> 
 27 | <b>App Details and Scopes:</b>
 28 | 
 29 | Provide the name of your third-party app, client key, and client secret.
 30 | Specify the required scopes for your third-party integration. Separate scopes with spaces or commas. Include only the necessary scopes for the integration.
 31 | 
 32 | </li>
 33 | 
 34 | <li> 
 35 | <b>Redirect URL:</b>
 36 | 
 37 | Copy the redirect URL provided in your Marketplace app configuration and paste it into your third-party app's configuration settings.
 38 | 
 39 | </li>
 40 | 
 41 | <li> 
 42 | <b>Authorization URL Configuration:</b>
 43 | 
 44 | Configure the authorization URL. Marketplace pre-populates some standard fields, which you can adjust based on the third-party app's documentation.
 45 | The state parameter is a standard OAuth2 security feature that prevents authorization requests from being initiated by unauthorized parties. Marketplace uses the state parameter to verify the validity of callback requests. Ensure this parameter is not modified for seamless integration.
 46 | 
 47 | </li>
 48 | 
 49 | <li> 
 50 | <b>Access & Refresh Token Request Configuration:</b>
 51 | 
 52 | Configure the access and refresh token request settings according to the third-party app's documentation. Marketplace pre-populates some standard configurations, which you can modify as needed. Click the "More Options" button to add any additional call details required.
 53 | 
 54 | Example Expected Response:
 55 | 
 56 | ```
 57 | {
 58 |   "access_token": "your_access_token",
 59 |   "refresh_token": "your_refresh_token",
 60 |   "expires_in": 3600, // Example expiry time in seconds
 61 | }
 62 | ```
 63 | 
 64 | </li>
 65 | 
 66 | <li> 
 67 | <b>Auto Refresh Token:</b>
 68 | 
 69 | Enable the "Auto refresh token" option to automatically fetch new token pairs using the refresh API when tokens expire.
 70 | If auto-refresh is disabled, the connection will break after token expiration. The user will need to re-authorize to re-establish the connection. We recommend to enable this option for smooth hustle free experience.
 71 | 
 72 | </li>
 73 | 
 74 | <li> 
 75 | <b>Test API:</b>
 76 | 
 77 | Configure a test API endpoint (ideally a GET call requiring no special configuration) to validate the token. HighLevel will call this API to check token validity. If the test fails and auto-refresh is enabled, Marketplace will attempt to refresh the token.
 78 | The access token is included by default in all API calls. If your API requires additional configuration for the test call, click the "More Options" button to add the necessary options.
 79 | 
 80 | </li>
 81 | </ol>
 82 | 
 83 | Refresh Mechanism:
 84 | The refresh mechanism is triggered only when a workflow with custom actions/triggers is about to execute. The access token is passed to all external calls involved in Marketplace custom action/trigger configurations.
 85 | 
 86 | #### Glossary
 87 | 
 88 | ##### OAuth Parameters
 89 | 
 90 | The following table describes the essential OAuth parameters used in the authorization flow:
 91 | 
 92 | | Parameter       | System Value                            | Description                                                                                                                                                                                                                                            |
 93 | | --------------- | --------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
 94 | | `client_id`     | `{{externalApp.clientId}}`              | Unique identifier issued by the third-party application. This ID is used to identify your application during the OAuth process.                                                                                                                        |
 95 | | `client_secret` | `{{externalApp.clientSecret}}`          | A confidential key issued alongside the client_id. This secret key is used to authenticate your application when exchanging the authorization code for tokens. Must be kept secure and never exposed to clients.                                       |
 96 | | `scope`         | `{{externalApp.scope}}`                 | A space-separated list of permissions that your application requires to access the third-party application's resources. These scopes determine the level of access granted to your application.                                                        |
 97 | | `response_type` | `code`                                  | Specifies the type of response expected from the authorization server. GHL exclusively supports the `code` response type, which returns an authorization code that can be exchanged for access and refresh tokens.                                     |
 98 | | `state`         | `{{bundle.state}}`                      | A security token generated by GHL to prevent CSRF attacks. This value must be returned unchanged in the callback response. The request will be rejected if the state parameter doesn't match the original value.                                       |
 99 | | `redirect_uri`  | `{{bundle.redirectUrl}}`                | The callback URL where the third-party application will send the authorization response. This URL must be pre-registered and must match exactly with the URL provided during the OAuth configuration.                                                  |
100 | | `grant_type`    | `authorization_code` or `refresh_token` | Specifies the type of grant being requested from the authorization server:<br>- `authorization_code`: Used when exchanging the authorization code for access tokens<br>- `refresh_token`: Used when requesting new access tokens using a refresh token |
101 | 
102 | ##### Token Parameters
103 | 
104 | These parameters are used during the OAuth token exchange process:
105 | 
106 | | Parameter       | System Value              | Description                                                                                                                                                                            |
107 | | --------------- | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
108 | | `code`          | `{{bundle.code}}`         | The authorization code received from the third-party application after successful authorization. This code is temporary and can only be used once to obtain access and refresh tokens. |
109 | | `access_token`  | `{{bundle.accessToken}}`  | The token used to authenticate requests to the third-party API. This token has a limited lifetime and needs to be refreshed periodically.                                              |
110 | | `refresh_token` | `{{bundle.refreshToken}}` | A long-lived token used to obtain new access tokens when the current access token expires. This token remains valid until explicitly revoked.                                          |
111 | 
112 | ### 2. Testing the Integration
113 | 
114 | Developers can test their configurations using the built-in test functionality. This initiates the OAuth process with the third-party app. Once the token is generated, the configured test API is called. Ensure all configurations are saved before testing.
115 | 
116 | <b>Important Note:</b> Switching between external authentication types (e.g., from Basic to OAuth) is currently not supported.[Coming soon]
117 | 
118 | <hr/>
119 | 
120 | ## API Key or Basic Auth
121 | 
122 | <div style="display: flex; justify-content: center">
123 |   <img src="https://i.imgur.com/sdItFxW.png"  alt="drawing" width="600"/>
124 | </div>
125 | </br>
126 | There are three sections available.
127 | 
128 | </br>
129 | </br>
130 | <b>Section 1:</b> Configure your fields
131 | This section contains all the fields that developers want to ask from users while installing the application.
132 | </br>
133 | </br>
134 | <div style="display: flex; justify-content: center">
135 |   <img src="https://i.imgur.com/T6EtbvW.png"  alt="drawing" width="600"/>
136 | </div>
137 | </br>
138 | To add a field to the user’s authentication form, you may configure the following:
139 | 
140 | - <b>Label:</b> It is a helpful text describing the field.
141 | - <b>Key:</b> The key that holds the value of the user's input. You may pass the user’s input to your authentication endpoint in the header or body by using the key.
142 | - <b>Type:</b> The type of input shown to the user. Currently, two field types are supported: "text" and "password."
143 | - <b>Required:</b> Is the field required?
144 | - <b>Help Text:</b> A brief about the field that is displayed to the user. You can
145 | - <b>Default field:</b> Default value to be sent in case the user leaves the field empty.
146 | 
147 | ###### NOTE: We currently support a maximum of three fields only.
148 | 
149 | </br>
150 | <div style="display: flex; justify-content: center">
151 |   <img src="https://i.imgur.com/HN83bMw.png"  alt="drawing" width="600" height="500"/>
152 | </div>
153 | </br>
154 | 
155 | <b>Section 2:</b> Configure authentication endpoint
156 | This section lets you configure the HTTP request template that would be made when a user tries to install the application.
157 | 
158 | </br>
159 | </br>
160 | <div style="display: flex; justify-content: center">
161 |   <img src="https://i.imgur.com/w72X9ZV.png"  alt="drawing" width="600"/>
162 | </div>
163 | </br>
164 | 
165 | <b>Type of request:</b> The request can be one of "GET", "POST", "PUT" or "PATCH" (When GET is selected, you will not be able to configure the request body)
166 | <b>URL:</b> It is the URL that would be hit with the request.
167 | <b>URL params:</b> The params that need to be sent with the request.
168 | <b>HTTP headers:</b> The headers that need to be sent with the request.
169 | <b>Request Body:</b> The body that needs to be sent with the request.
170 | 
171 | ###### IMPORTANT NOTE:
172 | 
173 | 1. You may need to pass the user-entered value, such as API Key/ Username / Password for authentication. You can easily access user input data from the userData object, which has the key of field and value entered by the users and can be accessed with {{userData.key}}.
174 |    For example, if your field’s key is ‘apiKey’, then you may access the user-entered value for the ‘apiKey’ using {{userData.apiKey}}.
175 | 2. For external auth verification to complete the authentication url should return one of the following status codes: 200, 201, 202, 204.
176 | 
177 | </br>
178 | <div></div>
179 | <b>Section 3:</b> Test your authentication </br>
180 | This section will allow developers to test the authentication flow with sample values.
181 | 
182 | </br>
183 | </br>
184 | <div style="display: flex; justify-content: center">
185 |   <img src="https://i.imgur.com/rq8D1YC.png"  alt="drawing" width="600"/>
186 | </div>
187 | </br>
188 | </br>
189 | </br>
190 | <div style="display: flex; justify-content: center">
191 |   <img src="https://i.imgur.com/EwoJXAz.png"  alt="drawing" width="600"/>
192 | </div>
193 | </br>
194 | 
195 | Installation of the application
196 | At the time of installation, user would be asked to enter the fields that you have configured.
197 | Here’s a sample authentication form displayed to the user at the time of installation.
198 | 
199 | <div style="display: flex; justify-content: center">
200 |   <img src="https://i.imgur.com/gCWXURo.png"  alt="drawing" width="600"/>
201 | </div>
202 | </br>
203 | 
204 | ###### External auth request parameters
205 | 
206 | | Key                 | Type     | Details                                                                                                                                                                                                                                                                                                                                                        |
207 | | ------------------- | -------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
208 | | companyId           | string   | <ul> <li>This parameter is set to agencyId if the application was installed by an agency; </li> <li>It will be null if the application was installed by a location</li></ul>                                                                                                                                                                                   |
209 | | {field_key}         | string   | <ul> <li> Key: The key for the parameter is the key of the field. </li><li>There can be a maximum of three fields and hence three keys in the request parameter.</li><li>The value for the parmeters will be as per the agency user’s response</li></ul>                                                                                                       |
210 | | approveAllLocations | boolean  | <div> <div><ul> <li> True - if “Select all N sub-accounts” checkbox was selected during installation</li> <li> False - if “Select all N sub-accounts” checkbox was not selected during installation</li></ul></div> <div style="display: flex; justify-content: center"> <img src="https://i.imgur.com/jkB3WZ3.png"  alt="drawing" width="600"/> </div> </div> |
211 | | locationId          | string[] | <ul> <li>If approveAllLocations = false, this parameter contains an array of locationIds selected during installation </li> <li>If approveAllLocation = true, this parameter is set to null. </li></ul>                                                                                                                                                        |
212 | | excludedLocations   | string[] | <ul> <li>If approveAllLocations = false, this parameter is set to null. </li> <li>If approveAllLocation = true, this parameter contains an array of locationIds which were not selected during installation </li></ul>                                                                                                                                         |
213 | 
214 | ###### NOTE:
215 | 
216 | - In the POST, PATCH, and PUT requests, the above fields would be sent as part of the body
217 | - In the GET request, the fields would be passed as params
218 | 
219 | ###### Examples:
220 | 
221 | - Say an agency has 5 locations - A,B,C,D,E
222 | - Let’s assume that the app requires two fields, “username” and “password”.
223 | - Scenario 1: User selects location A while installing the app
224 |   <br>
225 | 
226 | ```js
227 | {
228 | "companyId": "123",
229 | "locationId": {"A"},
230 | "username" : "user1",
231 | "password" : "password123",
232 | "approveAllLocations": false,
233 | "excludedLocations": null
234 | }
235 | ```
236 | 
237 | - Scenario 2: User selects locations A and B while installing the app
238 | 
239 | ```js
240 | {
241 | "companyId": "123",
242 | "locationId": {"A","B"},
243 | "username" : "user1",
244 | "password" : "password123",
245 | "approveAllLocations": false,
246 | "excludedLocations": null
247 | }
248 | 
249 | ```
250 | 
251 | - Scenario 3: User selects “Select all 5 locations”
252 | 
253 | ```js
254 | {
255 | "companyId": "123",
256 | "locationId": null,
257 | "username" : "user1",
258 | "password" : "password123",
259 | "approveAllLocations": true,
260 | "excludedLocations": null
261 | }
262 | 
263 | ```
264 | 
265 | - Scenario 4: User selects “Select all 5 locations”, but unchecks location C and D
266 | 
267 | ```js
268 | {
269 | "companyId": "123",
270 | "locationId": null,
271 | "username" : "user1",
272 | "password" : "password123",
273 | "approveAllLocations": true,
274 | "excludedLocations": {"C","D"}
275 | }
276 | 
277 | ```
278 | 
279 | <!-- <strong >Some important notes for the external authentication: </strong>:
280 | 
281 | - The new External Authentication feature is backward compatible. Existing apps with the existing external auth setup will continue to work without any action required by developers or app users.
282 | - If you update external auth settings, existing app users would need to re-install the application for new external auth to take place. This is a current limitation in beta that will be addressed shortly. -->
283 | 


--------------------------------------------------------------------------------
/docs/oauth/Faqs.md:
--------------------------------------------------------------------------------
 1 | # FAQs
 2 | 
 3 | Here you will find answers to commonly encountered questions.
 4 | 
 5 | > If you are having trouble and cannot find a suitable answer, please reach out to support.
 6 | 
 7 | ### How do I listen to webhook events?
 8 | 
 9 | For listening to the webhook events -
10 | 
11 | 1. Register for an app.
12 | 2. Go to the app settings and update the webhook url (where you want to listen for events)
13 | 3. Under the settings, also add the scope needed for the webhook event under the scopes section.
14 | 4. Ask the location/agency admin to go to the app page in marketplace and click on "Add App".
15 | 5. Select the location, it will redirect you to the redirect uri with the authorization code.
16 | 6. Use the authorization code to get the access token.
17 | 7. You would start receiving the webhook event for the location.


--------------------------------------------------------------------------------
/docs/oauth/Overview.md:
--------------------------------------------------------------------------------
 1 | ## Overview
 2 | 
 3 | These APIs use OAuth 2.0 flow for authentication.
 4 | 
 5 | To get started, please follow [Authorization steps](docs/oauth/Authorization.md).
 6 | 
 7 | ### Standard Response Fields
 8 | 
 9 | Below we have listed the standard fields you would receive with every request.
10 | 
11 | #### TraceId
12 | 
13 | A traceId represents a unique id for every request and is returned with every response. It is useful in pinpointing the exact request and helps while debugging.
14 | 


--------------------------------------------------------------------------------
/docs/oauth/Scopes.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [OAuth 2.0]
  3 | stoplight-id: vcctp9t1w8hja
  4 | ---
  5 | 
  6 | # **Scopes**
  7 | 
  8 | Here is a list of the scopes you require to access the API Endpoints and Webhook Events.
  9 | 
 10 | | Scope                           | API Endpoints                                                                      | Webhook Events                      | Access Type         |
 11 | | ------------------------------- | ---------------------------------------------------------------------------------- | ----------------------------------- | ------------------- |
 12 | | businesses.readonly             | GET /businesses                                                                    |                                     | Sub-Account         |
 13 | | &nbsp;                          | GET /businesses/:businessId                                                        |                                     | Sub-Account         |
 14 | | businesses.write                | POST /businesses                                                                   |                                     | Sub-Account         |
 15 | | &nbsp;                          | PUT /businesses/:businessId                                                        |                                     | Sub-Account         |
 16 | | &nbsp;                          | DELETE /businesses/:businessId                                                     |                                     | Sub-Account         |
 17 | | calendars.write                 | POST /calendars/                                                                   |                                     | Sub-Account         |
 18 | | &nbsp;                          | PUT /calendars/:calendarId                                                         |                                     | Sub-Account         |
 19 | | &nbsp;                          | DELETE /calendars/:calendarId                                                      |                                     | Sub-Account         |
 20 | | calendars.readonly              | GET /calendars/                                                                    |                                     | Sub-Account         |
 21 | | &nbsp;                          | GET /calendars/:calendarId                                                         |                                     | Sub-Account         |
 22 | | &nbsp;                          | GET /calendars/:calendarId/free-slots                                              |                                     | Sub-Account         |
 23 | | calendars/groups.readonly       | GET /calendars/groups                                                              |                                     | Sub-Account         |
 24 | | calendars/groups.write          | POST /calendars/groups                                                             |                                     | Sub-Account         |
 25 | | &nbsp;                          | POST /calendars/groups/validate-slug                                               |                                     | Sub-Account         |
 26 | | &nbsp;                          | DELETE /calendars/groups/:groupId                                                  |                                     | Sub-Account         |
 27 | | &nbsp;                          | PUT /calendars/groups/:groupId                                                     |                                     | Sub-Account         |
 28 | | &nbsp;                          | PUT /calendars/groups/:groupId/status                                              |                                     | Sub-Account         |
 29 | | calendars/resources.readonly    | GET /calendars/resources/:resourceType                                             |                                     | Sub-Account         |
 30 | | &nbsp;                          | GET /calendars/resources/:resourceType/:id                                         |                                     | Sub-Account         |
 31 | | calendars/resources.write       | POST /calendars/resources                                                          |                                     | Sub-Account         |
 32 | | &nbsp;                          | PUT /calendars/resources/:resourceType/:id                                         |                                     | Sub-Account         |
 33 | | &nbsp;                          | DELETE /calendars/resources/:resourceType/:id                                      |                                     | Sub-Account         |
 34 | | calendars/events.readonly       | GET /calendars/events/appointments/:eventId                                        |                                     | Sub-Account         |
 35 | | &nbsp;                          | GET /calendars/events                                                              |                                     | Sub-Account         |
 36 | | &nbsp;                          | GET /calendars/blocked-slots                                                       |                                     | Sub-Account         |
 37 | | &nbsp;                          | GET /calendars/appointments/:appointmentId/notes                                   |                                     | Sub-Account         |
 38 | | &nbsp;                          | GET /calendars/:calendarId/notifications/:notificationId                           |                                     | Sub-Account         |
 39 | | &nbsp;                          | GET /calendars/:calendarId/notifications                                           |                                     | Sub-Account         |
 40 | | calendars/events.write          | DELETE /calendars/events/:eventId                                                  |                                     | Sub-Account         |
 41 | | &nbsp;                          | POST /calendars/events/block-slots                                                 |                                     | Sub-Account         |
 42 | | &nbsp;                          | PUT /calendars/events/block-slots/:eventId                                         |                                     | Sub-Account         |
 43 | | &nbsp;                          | POST /calendars/events/appointments                                                |                                     | Sub-Account         |
 44 | | &nbsp;                          | PUT /calendars/events/appointments/:eventId                                        |                                     | Sub-Account         |
 45 | | &nbsp;                          | POST /calendars/appointments/:appointmentId/notes                                  |                                     | Sub-Account         |
 46 | | &nbsp;                          | PUT /calendars/appointments/:appointmentId/notes/:noteId                           |                                     | Sub-Account         |
 47 | | &nbsp;                          | DELETE /calendars/appointments/:appointmentId/notes/:noteId                        |                                     | Sub-Account         |
 48 | | &nbsp;                          | POST /calendars/:calendarId/notifications                                          |                                     | Sub-Account         |
 49 | | &nbsp;                          | PUT /calendars/:calendarId/notifications/:notificationId                           |                                     | Sub-Account         |
 50 | | &nbsp;                          | DELETE /calendars/:calendarId/notifications/:notificationId                        |                                     | Sub-Account         |
 51 | | campaigns.readonly              | GET /campaigns/                                                                    | CampaignStatusUpdate                | Sub-Account         |
 52 | | contacts.readonly               | GET /contacts/:contactId                                                           | ContactCreate                       | Sub-Account         |
 53 | | &nbsp;                          | GET /contacts/:contactId/tasks                                                     | ContactDelete                       | Sub-Account         |
 54 | | &nbsp;                          | GET /contacts/:contactId/tasks/:taskId                                             | ContactDndUpdate                    | Sub-Account         |
 55 | | &nbsp;                          | GET /contacts/:contactId/notes                                                     | ContactTagUpdate                    | Sub-Account         |
 56 | | &nbsp;                          | GET /contacts/:contactId/notes/:id                                                 | NoteCreate                          | Sub-Account         |
 57 | | &nbsp;                          | GET /contacts/:contactId/appointments                                              | NoteDelete                          | Sub-Account         |
 58 | | &nbsp;                          | GET /contacts/                                                                     | TaskCreate                          | Sub-Account         |
 59 | | &nbsp;                          | GET /contacts/business/:businessId                                                 | TaskDelete                          | Sub-Account         |
 60 | | contacts.write                  | POST /contacts/                                                                    | &nbsp;                              | Sub-Account         |
 61 | | &nbsp;                          | PUT /contacts/:contactId                                                           | &nbsp;                              | Sub-Account         |
 62 | | &nbsp;                          | DELETE /contacts/:contactId                                                        | &nbsp;                              | Sub-Account         |
 63 | | &nbsp;                          | POST /contacts/:contactId/tasks                                                    | &nbsp;                              | Sub-Account         |
 64 | | &nbsp;                          | PUT /contacts/:contactId/tasks/:taskId                                             | &nbsp;                              | Sub-Account         |
 65 | | &nbsp;                          | PUT /contacts/:contactId/tasks/:taskId/completed                                   | &nbsp;                              | Sub-Account         |
 66 | | &nbsp;                          | DELETE /contacts/:contactId/tasks/:taskId                                          | &nbsp;                              | Sub-Account         |
 67 | | &nbsp;                          | POST /contacts/:contactId/tags                                                     | &nbsp;                              | Sub-Account         |
 68 | | &nbsp;                          | DELETE /contacts/:contactId/tags                                                   | &nbsp;                              | Sub-Account         |
 69 | | &nbsp;                          | POST /contacts/:contactId/notes                                                    | &nbsp;                              | Sub-Account         |
 70 | | &nbsp;                          | PUT /contacts/:contactId/notes/:id                                                 | &nbsp;                              | Sub-Account         |
 71 | | &nbsp;                          | DELETE /contacts/:contactId/notes/:id                                              | &nbsp;                              | Sub-Account         |
 72 | | &nbsp;                          | POST /contacts/:contactId/campaigns/:campaignId                                    | &nbsp;                              | Sub-Account         |
 73 | | &nbsp;                          | DELETE /contacts/:contactId/campaigns/removeAll                                    | &nbsp;                              | Sub-Account         |
 74 | | &nbsp;                          | DELETE /contacts/:contactId/campaigns/:campaignId                                  | &nbsp;                              | Sub-Account         |
 75 | | &nbsp;                          | POST /contacts/:contactId/workflow/:workflowId                                     | &nbsp;                              | Sub-Account         |
 76 | | &nbsp;                          | DELETE /contacts/:contactId/workflow/:workflowId                                   | &nbsp;                              | Sub-Account         |
 77 | | objects/schema.readonly         | GET /objects/:key                                                                  | &nbsp;                              | Sub-Account         |
 78 | | &nbsp;                          | GET /objects                                                                       | &nbsp;                              | Sub-Account         |
 79 | | objects/schema.write            |                                                                                    | &nbsp;                              | Sub-Account         |
 80 | | objects/record.readonly         | GET /objects/:schemaKey/records/:id                                                | &nbsp;                              | Sub-Account         |
 81 | | objects/record.write            | POST /objects/:schemaKey/records                                                   | &nbsp;                              | Sub-Account         |
 82 | | &nbsp;                          | PUT /objects/:schemaKey/records/:id                                                | &nbsp;                              | Sub-Account         |
 83 | | &nbsp;                          | DELETE /objects/:schemaKey/records/:id                                             | &nbsp;                              | Sub-Account         |
 84 | | conversations.readonly          | GET /conversations/:conversationsId                                                | ConversationUnreadWebhook           | Sub-Account         |
 85 | | &nbsp;                          | GET /conversations/search                                                          | &nbsp;                              | Sub-Account         |
 86 | | conversations.write             | POST /conversations/                                                               | &nbsp;                              | Sub-Account         |
 87 | | &nbsp;                          | PUT /conversations/:conversationsId                                                | &nbsp;                              | Sub-Account         |
 88 | | &nbsp;                          | DELETE /conversations/:conversationsId                                             | &nbsp;                              | Sub-Account         |
 89 | | conversations/message.readonly  | GET conversations/messages/:messageId/locations/:locationId/recording              | InboundMessage                      | Sub-Account         |
 90 | | &nbsp;                          |                                                                                    | OutboundMessage                     | Sub-Account         |
 91 | | &nbsp;                          | GET conversations/locations/:locationId/messages/:messageId/transcription          | InboundMessage                      | Sub-Account         |
 92 | | &nbsp;                          |                                                                                    | OutboundMessage                     | Sub-Account         |
 93 | | &nbsp;                          | GET conversations/locations/:locationId/messages/:messageId/transcription/download | InboundMessage                      | Sub-Account         |
 94 | | &nbsp;                          |                                                                                    | OutboundMessage                     |
 95 | | conversations/message.write     | POST /conversations/messages                                                       | ConversationProviderOutboundMessage | Sub-Account         |
 96 | | &nbsp;                          | POST /conversations/messages/inbound                                               | &nbsp;                              | Sub-Account         |
 97 | | &nbsp;                          | POST /conversations/messages/upload                                                | &nbsp;                              | Sub-Account         |
 98 | | &nbsp;                          | PUT /conversations/messages/:messageId/status                                      | &nbsp;                              | Sub-Account         |
 99 | | &nbsp;                          | DELETE /conversations/messages/:messageId/schedule                                 | &nbsp;                              | Sub-Account         |
100 | | &nbsp;                          | DELETE /conversations/messages/email/:emailMessageId/schedule                      | &nbsp;                              | Sub-Account         |
101 | | conversations/livechat.write    | POST /conversations/providers/live-chat/typing                                     | &nbsp;                              | Sub-Account         |
102 | | forms.readonly                  | GET /forms/                                                                        | &nbsp;                              | Sub-Account         |
103 | | &nbsp;                          | GET /forms/submissions                                                             | &nbsp;                              | Sub-Account         |
104 | | invoices.readonly               | GET /invoices/                                                                     | &nbsp;                              | Sub-Account         |
105 | | &nbsp;                          | GET /invoices/:invoiceId                                                           | &nbsp;                              | Sub-Account         |
106 | | &nbsp;                          | GET /invoices/generate-invoice-number                                              | &nbsp;                              | Sub-Account         |
107 | | invoices.write                  | POST /invoices                                                                     | &nbsp;                              | Sub-Account         |
108 | | &nbsp;                          | PUT /invoices/:invoiceId                                                           | &nbsp;                              | Sub-Account         |
109 | | &nbsp;                          | DELETE /invoices/:invoiceId                                                        | &nbsp;                              | Sub-Account         |
110 | | &nbsp;                          | POST /invoices/:invoiceId/send                                                     | &nbsp;                              | Sub-Account         |
111 | | &nbsp;                          | POST /invoices/:invoiceId/void                                                     | &nbsp;                              | Sub-Account         |
112 | | &nbsp;                          | POST /invoices/:invoiceId/record-payment                                           | &nbsp;                              | Sub-Account         |
113 | | &nbsp;                          | POST /invoices/text2pay                                                            | &nbsp;                              | Sub-Account         |
114 | | invoices/schedule.readonly      | GET /invoices/schedule/                                                            | &nbsp;                              | Sub-Account         |
115 | | &nbsp;                          | GET /invoices/schedule/:scheduleId                                                 | &nbsp;                              | Sub-Account         |
116 | | invoices/schedule.write         | POST /invoices/schedule                                                            | &nbsp;                              | Sub-Account         |
117 | | &nbsp;                          | PUT /invoices/schedule/:scheduleId                                                 | &nbsp;                              | Sub-Account         |
118 | | &nbsp;                          | DELETE /invoices/schedule/:scheduleId                                              | &nbsp;                              | Sub-Account         |
119 | | &nbsp;                          | POST /invoices/schedule/:scheduleId/schedule                                       | &nbsp;                              | Sub-Account         |
120 | | &nbsp;                          | POST /invoices/schedule/:scheduleId/auto-payment                                   | &nbsp;                              | Sub-Account         |
121 | | &nbsp;                          | POST /invoices/schedule/:scheduleId/cancel                                         | &nbsp;                              | Sub-Account         |
122 | | invoices/template.readonly      | GET /invoices/template/                                                            | &nbsp;                              | Sub-Account         |
123 | | &nbsp;                          | GET /invoices/template/:templateId                                                 | &nbsp;                              | Sub-Account         |
124 | | invoices/template.write         | POST /invoices/template/                                                           | &nbsp;                              | Sub-Account         |
125 | | &nbsp;                          | PUT /invoices/template/:templateId                                                 | &nbsp;                              | Sub-Account         |
126 | | &nbsp;                          | DELETE /invoices/template/:templateId                                              | &nbsp;                              | Sub-Account         |
127 | | links.readonly                  | GET /links/                                                                        | &nbsp;                              | Sub-Account         |
128 | | links.write                     | POST /links/                                                                       | &nbsp;                              | Sub-Account         |
129 | | &nbsp;                          | PUT /links/:linkId                                                                 | &nbsp;                              | Sub-Account         |
130 | | &nbsp;                          | DELETE /links/:linkId                                                              | &nbsp;                              | Sub-Account         |
131 | | locations.readonly              | GET /locations/:locationId                                                         | LocationCreate                      | Sub-Account, Agency |
132 | |                                 |                                                                                    | LocationUpdate                      | Sub-Account, Agency |
133 | |                                 | GET /locations/search                                                              | &nbsp;                              | Sub-Account, Agency |
134 | |                                 | GET /locations/timeZones                                                           | &nbsp;                              | Sub-Account         |
135 | | locations.write                 | POST /locations/                                                                   | &nbsp;                              | Agency              |
136 | |                                 | PUT /locations/:locationId                                                         | &nbsp;                              | Agency              |
137 | |                                 | DELETE /locations/:locationId                                                      | &nbsp;                              | Agency              |
138 | | locations/customValues.readonly | GET /locations/:locationId/customValues                                            | &nbsp;                              | Sub-Account         |
139 | | &nbsp;                          | GET /locations/:locationId/customValues/:id                                        | &nbsp;                              | Sub-Account         |
140 | | locations/customValues.write    | POST /locations/:locationId/customValues                                           | &nbsp;                              | Sub-Account         |
141 | | &nbsp;                          | PUT /locations/:locationId/customValues/:id                                        | &nbsp;                              | Sub-Account         |
142 | | &nbsp;                          | DELETE /locations/:locationId/customValues/:id                                     | &nbsp;                              | Sub-Account         |
143 | | locations/customFields.readonly | GET /locations/:locationId/customFields                                            | &nbsp;                              | Sub-Account         |
144 | | &nbsp;                          | GET /locations/:locationId/customFields/:id                                        | &nbsp;                              | Sub-Account         |
145 | | &nbsp;                          | GET /custom-fields/:id                                                             | &nbsp;                              | Sub-Account         |
146 | | &nbsp;                          | GET /custom-field/object-key/:key                                                  | &nbsp;                              | Sub-Account         |
147 | | locations/customFields.write    | POST /locations/:locationId/customFields                                           | &nbsp;                              | Sub-Account         |
148 | | &nbsp;                          | PUT /locations/:locationId/customFields/:id                                        | &nbsp;                              | Sub-Account         |
149 | | &nbsp;                          | DELETE /locations/:locationId/customFields/:id                                     | &nbsp;                              | Sub-Account         |
150 | | locations/tags.readonly         | GET /locations/:locationId/tags                                                    | &nbsp;                              | Sub-Account         |
151 | |                                 | GET /locations/:locationId/tags/:tagId                                             | &nbsp;                              | Sub-Account         |
152 | | locations/tags.write            | POST /locations/:locationId/tags/                                                  | &nbsp;                              | Sub-Account         |
153 | | &nbsp;                          | PUT /locations/:locationId/tags/:tagId                                             | &nbsp;                              | Sub-Account         |
154 | | &nbsp;                          | DELETE /locations/:locationId/tags/:tagId                                          | &nbsp;                              | Sub-Account         |
155 | | locations/templates.readonly    | GET /locations/:locationId/templates                                               | &nbsp;                              | Sub-Account         |
156 | | locations/tasks.readonly        | POST /locations/:locationId/tasks/search                                           | &nbsp;                              | Sub-Account         |
157 | | medias.readonly                 | GET /medias/files                                                                  | &nbsp;                              | Sub-Account         |
158 | | medias.write                    | POST /medias/upload-file                                                           | &nbsp;                              | Sub-Account         |
159 | | funnels/redirect.readonly       | GET /funnels/lookup/redirect/list                                                  | &nbsp;                              | Sub-Account         |
160 | | funnels/redirect.write          | POST /funnels/lookup/redirect                                                      | &nbsp;                              | Sub-Account         |
161 | | funnels/page.readonly           | GET /funnels/page                                                                  | &nbsp;                              | Sub-Account         |
162 | | funnels/funnel.readonly         | GET /funnels/funnel/list                                                           | &nbsp;                              | Sub-Account         |
163 | | funnels/pagecount.readonly      | GET /funnels/page/count                                                            | &nbsp;                              | Sub-Account         |
164 | | &nbsp;                          | DELETE /funnels/lookup/redirect/:id                                                | &nbsp;                              | Sub-Account         |
165 | | &nbsp;                          | PATCH /funnels/lookup/redirect/:id                                                 | &nbsp;                              | Sub-Account         |
166 | | &nbsp;                          | DELETE /medias/:fileId                                                             | &nbsp;                              | Sub-Account         |
167 | | opportunities.readonly          | GET /opportunities/search                                                          | OpportunityCreate                   | Sub-Account         |
168 | | &nbsp;                          | GET /opportunities/:id                                                             | OpportunityDelete                   | Sub-Account         |
169 | | &nbsp;                          | GET /opportunities/pipelines                                                       | OpportunityStageUpdate              | Sub-Account         |
170 | | &nbsp;                          | &nbsp;                                                                             | OpportunityStatusUpdate             | Sub-Account         |
171 | | &nbsp;                          | &nbsp;                                                                             | OpportunityMonetaryValueUpdate      | Sub-Account         |
172 | | opportunities.write             | DELETE /opportunities/:id                                                          | &nbsp;                              | Sub-Account         |
173 | | &nbsp;                          | PUT /opportunities/:id/status                                                      | &nbsp;                              | Sub-Account         |
174 | | &nbsp;                          | POST /opportunities                                                                | &nbsp;                              | Sub-Account         |
175 | | &nbsp;                          | PUT /opportunities/:id                                                             | &nbsp;                              | Sub-Account         |
176 | | payments/integration.readonly   | GET /payments/integrations/provider/whitelabel                                     | &nbsp;                              | Sub-Account         |
177 | | payments/integration.write      | POST /payments/integrations/provider/whitelabel                                    | &nbsp;                              | Sub-Account         |
178 | | payments/orders.readonly        | GET /payments/orders/                                                              | &nbsp;                              | Sub-Account         |
179 | | &nbsp;                          | GET /payments/orders/:orderId                                                      | &nbsp;                              | Sub-Account         |
180 | | &nbsp;                          | GET /payments/orders/:orderId/fulfillments                                         | &nbsp;                              | Sub-Account         |
181 | | payments/orders.write           | POST /payments/orders/:orderId/fulfillments                                        | &nbsp;                              | Sub-Account         |
182 | | payments/transactions.readonly  | GET /payments/transactions/                                                        | &nbsp;                              | Sub-Account         |
183 | | &nbsp;                          | GET /payments/transactions/:transactionId                                          | &nbsp;                              | Sub-Account         |
184 | | payments/subscriptions.readonly | GET /payments/subscriptions/                                                       | &nbsp;                              | Sub-Account         |
185 | | &nbsp;                          | GET /payments/subscriptions/:subscriptionId                                        | &nbsp;                              | Sub-Account         |
186 | | products.readonly               | GET /products/                                                                     | &nbsp;                              | Sub-Account         |
187 | | &nbsp;                          | GET /products/:productId                                                           | &nbsp;                              | Sub-Account         |
188 | | products.write                  | POST /products/                                                                    | &nbsp;                              | Sub-Account         |
189 | | &nbsp;                          | PUT /products/:productId                                                           | &nbsp;                              | Sub-Account         |
190 | | &nbsp;                          | DELETE /products/:productId                                                        | &nbsp;                              | Sub-Account         |
191 | | products/prices.readonly        | GET /products/:productId/price/                                                    | &nbsp;                              | Sub-Account         |
192 | | &nbsp;                          | GET /products/:productId/price/:priceId                                            | &nbsp;                              | Sub-Account         |
193 | | products/prices.write           | POST /products/:productId/price/                                                   | &nbsp;                              | Sub-Account         |
194 | | &nbsp;                          | PUT /products/:productId/price/:priceId                                            | &nbsp;                              | Sub-Account         |
195 | | &nbsp;                          | DELETE /products/:productId/price/:priceId                                         | &nbsp;                              | Sub-Account         |
196 | | oauth.readonly                  | GET /oauth/installedLocations                                                      | &nbsp;                              | Agency              |
197 | | oauth.write                     | POST /oauth/locationToken                                                          | &nbsp;                              | Agency              |
198 | | saas/location.write             | PUT /update-saas-subscription/:locationId                                          | &nbsp;                              | Agency              |
199 | | &nbsp;                          | POST /enable-saas/:locationId                                                      | &nbsp;                              | Sub-Account, Agency |
200 | | saas/location.read              | GET /locations                                                                     | &nbsp;                              | Sub-Account, Agency |
201 | | saas/company.write              | POST /bulk-disable-saas/:companyId                                                 | &nbsp;                              | Sub-Account, Agency |
202 | | snapshots.readonly              | GET /snapshots                                                                     | &nbsp;                              | Agency              |
203 | | socialplanner/account.readonly  | GET /social-media-posting/:locationId/accounts                                     | &nbsp;                              | Sub-Account         |
204 | | socialplanner/account.write     | DELETE /social-media-posting/:locationId/accounts/:id                              | &nbsp;                              | Sub-Account         |
205 | | socialplanner/csv.readonly      | GET /social-media-posting/:locationId/csv                                          | &nbsp;                              | Sub-Account         |
206 | | &nbsp;                          | GET /social-media-posting/:locationId/csv/:id                                      | &nbsp;                              | Sub-Account         |
207 | | socialplanner/csv.write         | POST /social-media-posting/:locationId/csv                                         | &nbsp;                              | Sub-Account         |
208 | | &nbsp;                          | POST /social-media-posting/:locationId/set-accounts                                | &nbsp;                              | Sub-Account         |
209 | | &nbsp;                          | DELETE /social-media-posting/:locationId/csv/:id                                   | &nbsp;                              | Sub-Account         |
210 | | &nbsp;                          | PATCH /social-media-posting/:locationId/csv/:id                                    | &nbsp;                              | Sub-Account         |
211 | | &nbsp;                          | POST /social-media-posting/:locationId/posts/bulk-delete                           | &nbsp;                              | Sub-Account         |
212 | | &nbsp;                          | DELETE /social-media-posting/:locationId/csv/:csvId/post/:postId                   | &nbsp;                              | Sub-Account         |
213 | | socialplanner/category.readonly | GET /social-media-posting/:locationId/categories                                   | &nbsp;                              | Sub-Account         |
214 | | &nbsp;                          | GET /social-media-posting/:locationId/categories/:id                               | &nbsp;                              | Sub-Account         |
215 | | socialplanner/oauth.readonly    | GET /social-media-posting/oauth/facebook/start                                     | &nbsp;                              | Sub-Account         |
216 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/facebook/accounts/:accountId           | &nbsp;                              | Sub-Account         |
217 | | &nbsp;                          | GET /social-media-posting/oauth/google/start                                       | &nbsp;                              | Sub-Account         |
218 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/google/locations/:accountId            | &nbsp;                              | Sub-Account         |
219 | | &nbsp;                          | GET /social-media-posting/oauth/instagram/start                                    | &nbsp;                              | Sub-Account         |
220 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/instagram/accounts/:accountId          | &nbsp;                              | Sub-Account         |
221 | | &nbsp;                          | GET /social-media-posting/oauth/linkedin/start                                     | &nbsp;                              | Sub-Account         |
222 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/linkedin/accounts/:accountId           | &nbsp;                              | Sub-Account         |
223 | | &nbsp;                          | GET /social-media-posting/oauth/tiktok/start                                       | &nbsp;                              | Sub-Account         |
224 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/tiktok/accounts/:accountId             | &nbsp;                              | Sub-Account         |
225 | | &nbsp;                          | GET /social-media-posting/oauth/tiktok-business/start                              | &nbsp;                              | Sub-Account         |
226 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/tiktok-business/accounts/:accountId    | &nbsp;                              | Sub-Account         |
227 | | &nbsp;                          | GET /social-media-posting/oauth/twitter/start                                      | &nbsp;                              | Sub-Account         |
228 | | &nbsp;                          | GET /social-media-posting/oauth/:locationId/twitter/accounts/:accountId            | &nbsp;                              | Sub-Account         |
229 | | socialplanner/oauth.write       | POST /social-media-posting/oauth/:locationId/facebook/accounts/:accountId          | &nbsp;                              | Sub-Account         |
230 | | &nbsp;                          | POST /social-media-posting/oauth/:locationId/google/locations/:accountId           | &nbsp;                              | Sub-Account         |
231 | | &nbsp;                          | POST /social-media-posting/oauth/:locationId/instagram/accounts/:accountId         | &nbsp;                              | Sub-Account         |
232 | | &nbsp;                          | POST /social-media-posting/oauth/:locationId/linkedin/accounts/:accountId          | &nbsp;                              | Sub-Account         |
233 | | &nbsp;                          | POST /social-media-posting/oauth/:locationId/tiktok/accounts/:accountId            | &nbsp;                              | Sub-Account         |
234 | | &nbsp;                          | POST /social-media-posting/oauth/:locationId/twitter/accounts/:accountId           | &nbsp;                              | Sub-Account         |
235 | | socialplanner/post.readonly     | GET /social-media-posting/:locationId/posts/:id                                    | &nbsp;                              | Sub-Account         |
236 | | &nbsp;                          | POST /social-media-posting/:locationId/posts/list                                  | &nbsp;                              | Sub-Account         |
237 | | socialplanner/post.write        | POST /social-media-posting/:locationId/posts                                       | &nbsp;                              | Sub-Account         |
238 | | &nbsp;                          | PUT /social-media-posting/:locationId/posts/:id                                    | &nbsp;                              | Sub-Account         |
239 | | &nbsp;                          | DELETE /social-media-posting/:locationId/posts/:id                                 | &nbsp;                              | Sub-Account         |
240 | | &nbsp;                          | PATCH /social-media-posting/:locationId/posts/:id                                  | &nbsp;                              | Sub-Account         |
241 | | socialplanner/tag.readonly      | GET /social-media-posting/:locationId/tags                                         | &nbsp;                              | Sub-Account         |
242 | | &nbsp;                          | POST /social-media-posting/:locationId/tags/details                                | &nbsp;                              | Sub-Account         |
243 | | surveys.readonly                | GET /surveys/                                                                      | &nbsp;                              | Sub-Account         |
244 | | &nbsp;                          | GET /surveys/submissions                                                           | &nbsp;                              | Sub-Account         |
245 | | users.readonly                  | GET /users/                                                                        | &nbsp;                              | Sub-Account, Agency |
246 | | &nbsp;                          | GET /users/:userId                                                                 | &nbsp;                              | Sub-Account, Agency |
247 | | users.write                     | POST /users/                                                                       | &nbsp;                              | Sub-Account, Agency |
248 | | &nbsp;                          | DELETE /users/:userId                                                              | &nbsp;                              | Sub-Account, Agency |
249 | | &nbsp;                          | PUT /users/:userId                                                                 | &nbsp;                              | Sub-Account, Agency |
250 | | workflows.readonly              | GET /workflows/                                                                    | &nbsp;                              | Sub-Account         |
251 | | courses.write                   | POST courses/courses-exporter/public/import                                        | &nbsp;                              | Sub-Account         |
252 | | emails/builder.readonly         | GET emails/builder                                                                 | &nbsp;                              | Sub-Account         |
253 | | emails/builder.write            | POST emails/builder                                                                | &nbsp;                              | Sub-Account         |
254 | | &nbsp;                          | POST /emails/builder/data                                                          | &nbsp;                              | Sub-Account         |
255 | | &nbsp;                          | DELETE /emails/builder/:locationId/:templateId                                     | &nbsp;                              | Sub-Account         |
256 | | emails/schedule.readonly        | GET emails/schedule                                                                | &nbsp;                              | Sub-Account, Agency |
257 | | blogs/post.write                | POST /blogs/posts                                                                  | &nbsp;                              | Sub-Account         |
258 | | blogs/post-update.write         | PUT /blogs/posts/:postId                                                           | &nbsp;                              | Sub-Account         |
259 | | blogs/check-slug.readonly       | GET /blogs/posts/url-slug-exists                                                   | &nbsp;                              | Sub-Account         |
260 | | blogs/category.readonly         | GET /blogs/categories                                                              | &nbsp;                              | Sub-Account         |
261 | | blogs/author.readonly           | GET /blogs/authors                                                                 | &nbsp;                              | Sub-Account         |
262 | | blogs/posts.readonly            | GET /blogs/posts/all                                                               | &nbsp;                              | Sub-Account         |
263 | | blogs/list.readonly             | GET /blogs/site/all                                                                | &nbsp;                              | Sub-Account         |
264 | 


--------------------------------------------------------------------------------
/docs/oauth/ScopesOld.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [OAuth 2.0]
  3 | ---
  4 | 
  5 | # **Scopes**
  6 | 
  7 | Here is a list of the scopes you require to access the API Endpoints and Webhook Events.
  8 | 
  9 | | Scope                           | API Endpoints                                                 | Webhook Events                      | Access Type          |
 10 | | ------------------------------- | ------------------------------------------------------------- | ----------------------------------- | -------------------- |
 11 | | businesses.readonly             | GET /businesses                                               |                                     | Sub-Account          |
 12 | | &nbsp;                          | GET /businesses/:businessId                                   |                                     | Sub-Account          |
 13 | | businesses.write                | POST /businesses                                              |                                     | Sub-Account          |
 14 | | &nbsp;                          | PUT /businesses/:businessId                                   |                                     | Sub-Account          |
 15 | | &nbsp;                          | DELETE /businesses/:businessId                                |                                     | Sub-Account          |
 16 | | calendars.write                 | POST /calendars/                                              |                                     | Sub-Account          |
 17 | | &nbsp;                          | PUT /calendars/:calendarId                                    |                                     | Sub-Account          |
 18 | | &nbsp;                          | DELETE /calendars/:calendarId                                 |                                     | Sub-Account          |
 19 | | calendars.readonly              | GET /calendars/                                               |                                     | Sub-Account          |
 20 | | &nbsp;                          | GET /calendars/groups                                         |                                     | Sub-Account          |
 21 | | &nbsp;                          | GET /calendars/:calendarId                                    |                                     | Sub-Account          |
 22 | | &nbsp;                          | GET /calendars/:calendarId/free-slots                         |                                     | Sub-Account          |
 23 | | calendars/events.readonly       | GET /calendars/events/appointments/:eventId                   |                                     | Sub-Account          |
 24 | | calendars/events.write          | DELETE /calendars/events/:eventId                             |                                     | Sub-Account          |
 25 | | &nbsp;                          | POST /calendars/events/block-slots                            |                                     | Sub-Account          |
 26 | | &nbsp;                          | PUT /calendars/events/block-slots/:eventId                    |                                     | Sub-Account          |
 27 | | &nbsp;                          | POST /calendars/events/appointments                           |                                     | Sub-Account          |
 28 | | &nbsp;                          | PUT /calendars/events/appointments /:eventId                  |                                     | Sub-Account          |
 29 | | campaigns.readonly              | GET /campaigns/                                               | CampaignStatusUpdate                | Sub-Account          |
 30 | | contacts.readonly               | GET /contacts/:contactId                                      | ContactCreate                       | Sub-Account          |
 31 | | &nbsp;                          | GET /contacts/:contactId/tasks                                | ContactDelete                       | Sub-Account          |
 32 | | &nbsp;                          | GET /contacts/:contactId/tasks/:taskId                        | ContactDndUpdate                    | Sub-Account          |
 33 | | &nbsp;                          | GET /contacts/:contactId/notes                                | ContactTagUpdate                    | Sub-Account          |
 34 | | &nbsp;                          | GET /contacts/:contactId/notes/:id                            | NoteCreate                          | Sub-Account          |
 35 | | &nbsp;                          | GET /contacts/:contactId/appointments                         | NoteDelete                          | Sub-Account          |
 36 | | &nbsp;                          | GET /contacts/                                                | TaskCreate                          | Sub-Account          |
 37 | | &nbsp;                          | GET /contacts/business/:businessId                            | TaskDelete                          | Sub-Account          |
 38 | | contacts.write                  | POST /contacts/                                               | &nbsp;                              | Sub-Account          |
 39 | | &nbsp;                          | PUT /contacts/:contactId                                      | &nbsp;                              | Sub-Account          |
 40 | | &nbsp;                          | DELETE /contacts/:contactId                                   | &nbsp;                              | Sub-Account          |
 41 | | &nbsp;                          | POST /contacts/:contactId/tasks                               | &nbsp;                              | Sub-Account          |
 42 | | &nbsp;                          | PUT /contacts/:contactId/tasks/:taskId                        | &nbsp;                              | Sub-Account          |
 43 | | &nbsp;                          | PUT /contacts/:contactId/tasks/:taskId/completed              | &nbsp;                              | Sub-Account          |
 44 | | &nbsp;                          | DELETE /contacts/:contactId/tasks/:taskId                     | &nbsp;                              | Sub-Account          |
 45 | | &nbsp;                          | POST /contacts/:contactId/tags                                | &nbsp;                              | Sub-Account          |
 46 | | &nbsp;                          | DELETE /contacts/:contactId/tags                              | &nbsp;                              | Sub-Account          |
 47 | | &nbsp;                          | POST /contacts/:contactId/notes                               | &nbsp;                              | Sub-Account          |
 48 | | &nbsp;                          | PUT /contacts/:contactId/notes/:id                            | &nbsp;                              | Sub-Account          |
 49 | | &nbsp;                          | DELETE /contacts/:contactId/notes/:id                         | &nbsp;                              | Sub-Account          |
 50 | | &nbsp;                          | POST /contacts/:contactId/campaigns/:campaignId               | &nbsp;                              | Sub-Account          |
 51 | | &nbsp;                          | DELETE /contacts/:contactId/campaigns/removeAll               | &nbsp;                              | Sub-Account          |
 52 | | &nbsp;                          | DELETE /contacts/:contactId/campaigns/:campaignId             | &nbsp;                              | Sub-Account          |
 53 | | &nbsp;                          | POST /contacts/:contactId/workflow/:workflowId                | &nbsp;                              | Sub-Account          |
 54 | | &nbsp;                          | DELETE /contacts/:contactId/workflow/:workflowId              | &nbsp;                              | Sub-Account          |
 55 | | conversations.readonly          | GET /conversations/:conversationsId                           | ConversationUnreadWebhook           | Sub-Account          |
 56 | | &nbsp;                          | GET /conversations/search                                     | &nbsp;                              | Sub-Account          |
 57 | | conversations.write             | POST /conversations/                                          | &nbsp;                              | Sub-Account          |
 58 | | &nbsp;                          | PUT /conversations/:conversationsId                           | &nbsp;                              | Sub-Account          |
 59 | | &nbsp;                          | DELETE /conversations/:conversationsId                        | &nbsp;                              | Sub-Account          |
 60 | | conversations/message.readonly  |                                                               | InboundMessage                      | Sub-Account          |
 61 | | &nbsp;                          |                                                               | OutboundMessage                     | Sub-Account          |
 62 | | conversations/message.write     | POST /conversations/messages                                  | ConversationProviderOutboundMessage | Sub-Account          |
 63 | | &nbsp;                          | POST /conversations/messages/inbound                          | &nbsp;                              | Sub-Account          |
 64 | | &nbsp;                          | POST /conversations/messages/upload                           | &nbsp;                              | Sub-Account          |
 65 | | &nbsp;                          | PUT /conversations/messages/:messageId/status                 | &nbsp;                              | Sub-Account          |
 66 | | &nbsp;                          | DELETE /conversations/messages/:messageId/schedule            | &nbsp;                              | Sub-Account          |
 67 | | &nbsp;                          | DELETE /conversations/messages/email/:emailMessageId/schedule | &nbsp;                              | Sub-Account          |
 68 | | forms.readonly                  | GET /forms/                                                   | &nbsp;                              | Sub-Account          |
 69 | | &nbsp;                          | GET /forms/submissions                                        | &nbsp;                              | Sub-Account          |
 70 | | links.readonly                  | GET /links/                                                   | &nbsp;                              | Sub-Account          |
 71 | | links.write                     | POST /links/                                                  | &nbsp;                              | Sub-Account          |
 72 | | &nbsp;                          | PUT /links/:linkId                                            | &nbsp;                              | Sub-Account          |
 73 | | &nbsp;                          | DELETE /links/:linkId                                         | &nbsp;                              | Sub-Account          |
 74 | | locations.readonly              | GET /locations/:locationId                                    | &nbsp;                              | Sub-Account, Company |
 75 | |                                 | GET /locations/search                                         | &nbsp;                              | Sub-Account, Company |
 76 | | locations.write                 | POST /locations/                                              | &nbsp;                              | Company              |
 77 | |                                 | PUT /locations/:locationId                                    | &nbsp;                              | Company              |
 78 | |                                 | DELETE /locations/:locationId                                 | &nbsp;                              | Company              |
 79 | | locations/customValues.readonly | GET /locations/:locationId/customValues                       | &nbsp;                              | Sub-Account          |
 80 | | &nbsp;                          | GET /locations/:locationId/customValues/:id                   | &nbsp;                              | Sub-Account          |
 81 | | locations/customValues.write    | POST /locations/:locationId/customValues                      | &nbsp;                              | Sub-Account          |
 82 | | &nbsp;                          | PUT /locations/:locationId/customValues/:id                   | &nbsp;                              | Sub-Account          |
 83 | | &nbsp;                          | DELETE /locations/:locationId/customValues/:id                | &nbsp;                              | Sub-Account          |
 84 | | locations/customFields.readonly | GET /locations/:locationId/customFields                       | &nbsp;                              | Sub-Account          |
 85 | | &nbsp;                          | GET /locations/:locationId/customFields/:id                   | &nbsp;                              | Sub-Account          |
 86 | | locations/customFields.write    | POST /locations/:locationId/customFields                      | &nbsp;                              | Sub-Account          |
 87 | | &nbsp;                          | PUT /locations/:locationId/customFields/:id                   | &nbsp;                              | Sub-Account          |
 88 | | &nbsp;                          | DELETE /locations/:locationId/customFields/:id                | &nbsp;                              | Sub-Account          |
 89 | | locations/tags.readonly         | GET /locations/:locationId/tags                               | &nbsp;                              | Sub-Account          |
 90 | |                                 | GET /locations/:locationId/tags/:tagId                        | &nbsp;                              | Sub-Account          |
 91 | | locations/tags.write            | POST /locations/:locationId/tags/                             | &nbsp;                              | Sub-Account          |
 92 | | &nbsp;                          | PUT /locations/:locationId/tags/:tagId                        | &nbsp;                              | Sub-Account          |
 93 | | &nbsp;                          | DELETE /locations/:locationId/tags/:tagId                     | &nbsp;                              | Sub-Account          |
 94 | | locations/templates.readonly    | GET /locations/:locationId/templates                          | &nbsp;                              | Sub-Account          |
 95 | | locations/tasks.readonly        | POST /locations/:locationId/tasks/search                      | &nbsp;                              | Sub-Account          |
 96 | | opportunities.readonly          | GET /opportunities/search                                     | OpportunityCreate                   | Sub-Account          |
 97 | | &nbsp;                          | GET /opportunities/:id                                        | OpportunityDelete                   | Sub-Account          |
 98 | | &nbsp;                          | GET /opportunities/pipelines                                  | OpportunityStageUpdate              | Sub-Account          |
 99 | | &nbsp;                          | &nbsp;                                                        | OpportunityStatusUpdate             | Sub-Account          |
100 | | &nbsp;                          | &nbsp;                                                        | OpportunityMonetaryValueUpdate      | Sub-Account          |
101 | | opportunities.write             | DELETE /opportunities/:id                                     | &nbsp;                              | Sub-Account          |
102 | | &nbsp;                          | PUT /opportunities/:id/status                                 | &nbsp;                              | Sub-Account          |
103 | | &nbsp;                          | POST /opportunities                                           | &nbsp;                              | Sub-Account          |
104 | | &nbsp;                          | PUT /opportunities/:id                                        | &nbsp;                              | Sub-Account          |
105 | | snapshots.readonly              | GET /snapshots                                                | &nbsp;                              | Company              |
106 | | surveys.readonly                | GET /surveys/                                                 | &nbsp;                              | Sub-Account          |
107 | | &nbsp;                          | GET /surveys/submissions                                      | &nbsp;                              | Sub-Account          |
108 | | users.readonly                  | GET /users/                                                   | &nbsp;                              | Sub-Account, Company |
109 | | &nbsp;                          | GET /users/:userId                                            | &nbsp;                              | Sub-Account, Company |
110 | | users.write                     | POST /users/                                                  | &nbsp;                              | Sub-Account, Company |
111 | | &nbsp;                          | DELETE /users/:userId                                         | &nbsp;                              | Sub-Account, Company |
112 | | &nbsp;                          | PUT /users/:userId                                            | &nbsp;                              | Sub-Account, Company |
113 | | workflows.readonly              | GET /workflows/                                               | &nbsp;                              | Sub-Account          |


--------------------------------------------------------------------------------
/docs/oauth/WebhookAuthentication.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | stoplight-id: vyc3gbbez52ip
  3 | ---
  4 | 
  5 | # Webhook Authentication Guide
  6 | 
  7 | ## How It Works
  8 | 
  9 | ### 1. Receiving the Webhook
 10 | 
 11 | When your endpoint receives a webhook request, it will include the following:
 12 | 
 13 | - **Headers**:
 14 | 
 15 |   - `x-wh-signature`: The digital signature of the payload.
 16 | 
 17 | - **Body**: The payload containing the timestamp, webhook ID, and data.
 18 | 
 19 | Example payload:
 20 | 
 21 |     {
 22 |       "timestamp": "2025-01-28T14:35:00Z",
 23 |       "webhookId": "abc123xyz",
 24 |       ...<add_other_webhook_data>
 25 |     }
 26 | 
 27 | 
 28 | ### 2. Verifying the Signature
 29 | 
 30 | To verify the authenticity of the webhook request:
 31 | 
 32 | 1. Retrieve the `x-wh-signature` header from the request.
 33 | 
 34 | 2. Use the public key mentioned below to verify the signature:
 35 | 
 36 | 3. Compute the signature on your end using the payload and the public key.
 37 | 
 38 | 4. Compare your computed signature with the `x-wh-signature` header.
 39 | 
 40 | ```
 41 | -----BEGIN PUBLIC KEY-----
 42 | MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAokvo/r9tVgcfZ5DysOSC
 43 | Frm602qYV0MaAiNnX9O8KxMbiyRKWeL9JpCpVpt4XHIcBOK4u3cLSqJGOLaPuXw6
 44 | dO0t6Q/ZVdAV5Phz+ZtzPL16iCGeK9po6D6JHBpbi989mmzMryUnQJezlYJ3DVfB
 45 | csedpinheNnyYeFXolrJvcsjDtfAeRx5ByHQmTnSdFUzuAnC9/GepgLT9SM4nCpv
 46 | uxmZMxrJt5Rw+VUaQ9B8JSvbMPpez4peKaJPZHBbU3OdeCVx5klVXXZQGNHOs8gF
 47 | 3kvoV5rTnXV0IknLBXlcKKAQLZcY/Q9rG6Ifi9c+5vqlvHPCUJFT5XUGG5RKgOKU
 48 | J062fRtN+rLYZUV+BjafxQauvC8wSWeYja63VSUruvmNj8xkx2zE/Juc+yjLjTXp
 49 | IocmaiFeAO6fUtNjDeFVkhf5LNb59vECyrHD2SQIrhgXpO4Q3dVNA5rw576PwTzN
 50 | h/AMfHKIjE4xQA1SZuYJmNnmVZLIZBlQAF9Ntd03rfadZ+yDiOXCCs9FkHibELhC
 51 | HULgCsnuDJHcrGNd5/Ddm5hxGQ0ASitgHeMZ0kcIOwKDOzOU53lDza6/Y09T7sYJ
 52 | PQe7z0cvj7aE4B+Ax1ZoZGPzpJlZtGXCsu9aTEGEnKzmsFqwcSsnw3JB31IGKAyk
 53 | T1hhTiaCeIY/OwwwNUY2yvcCAwEAAQ==
 54 | -----END PUBLIC KEY-----
 55 | ```
 56 | 
 57 | If they match, the payload is valid and comes from a trusted source.
 58 | 
 59 | ### 3. Handling Replay Attacks
 60 | 
 61 | To protect against replay attacks:
 62 | 
 63 | - Ensure the `timestamp` in the payload is within an acceptable time window (e.g., 5 minutes).
 64 | 
 65 | - Reject any requests with duplicate `webhookId` values.
 66 | 
 67 | ### 4. Handling Public Key Rotation
 68 | 
 69 | Please keep an eye on your email and [our social channels](https://ghl-developer-council.slack.com/archives/C01F43GUJV6) for notices regarding public key rotation to stay updated. The public key in this doc is the one to use to validate the webhook payload.
 70 | 
 71 | ***
 72 | 
 73 | 
 74 | ## Example Code
 75 | 
 76 | Here’s an example of how to verify the signature in Node.js:
 77 | 
 78 |     const crypto = require('crypto');
 79 | 
 80 |     const publicKey = `<use_the_above_key>`;
 81 | 
 82 |     function verifySignature(payload, signature) {
 83 |         const verifier = crypto.createVerify('SHA256');
 84 |         verifier.update(payload);
 85 |         verifier.end();
 86 | 
 87 |         return verifier.verify(publicKey, signature, 'base64');
 88 |     }
 89 | 
 90 |     // Example usage
 91 |     const payload = JSON.stringify({
 92 |       "timestamp": "2025-01-28T14:35:00Z",
 93 |       "webhookId": "abc123xyz",
 94 |       ...<add_other_webhook_data>
 95 |     });
 96 | 
 97 |     const signature = "<received-x-wh-signature>";
 98 |     const isValid = verifySignature(payload, signature);
 99 | 
100 |     return isValid;
101 | 
102 | 
103 | ## Summary
104 | 
105 | These new features significantly enhance the security of webhook integrations. By including a timestamp, webhook ID, and a digitally signed payload, we ensure your data remains secure and trusted. Implement these changes today to keep your integrations robust and secure!
106 | 


--------------------------------------------------------------------------------
/docs/webhook events/AppInstall.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # App
  6 | 
  7 | Called whenever an app is installed
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "appId": {
 19 |       "type": "string"
 20 |     },
 21 |     "companyId": {
 22 |       "type": "string"
 23 |     },
 24 |     "locationId": {
 25 |       "type": "string"
 26 |     },
 27 |     "userId": {
 28 |       "type": "string"
 29 |     },
 30 |     "planId": {
 31 |       "type": "string"
 32 |     },
 33 |     "trial": {
 34 |       "type": "object",
 35 |       "properties": {
 36 |         "onTrial": {
 37 |           "type": "boolean"
 38 |         },
 39 |         "trialDuration": {
 40 |           "type": "number"
 41 |         },
 42 |         "trialStartDate": {
 43 |           "type": "Date"
 44 |         }
 45 |       }
 46 |     },
 47 |     "isWhitelabelCompany": {
 48 |       "type": "boolean"
 49 |     },
 50 |     "whitelabelDetails": {
 51 |       "type": "object",
 52 |       "properties": {
 53 |         "domain": {
 54 |           "type": "string"
 55 |         },
 56 |         "logoUrl": {
 57 |           "type": "string"
 58 |         }
 59 |       }
 60 |     },
 61 |     "companyName": {
 62 |       "type": "string"
 63 |     }
 64 |   }
 65 | }
 66 | ```
 67 | 
 68 | - Note: The User ID and Company ID may be available when a new token is generated. In case of app installation via future locations, you may not get these fields.
 69 | 
 70 | #### Example
 71 | 
 72 | - For Location Level App Install if company is whitelabeled
 73 | 
 74 | ```json
 75 | {
 76 |   "type": "INSTALL",
 77 |   "appId": "ve9EPM428h8vShlRW1KT",
 78 |   "locationId": "otg8dTQqGLh3Q6iQI55w",
 79 |   "companyId": "otg8dTQqGLh3Q6iQI55w",
 80 |   "userId": "otg8dTQqGLh3Q6iQI55w",
 81 |   "planId": "66a0419a0dffa47fb5f8b22f",
 82 |   "trial": {
 83 |     "onTrial": true,
 84 |     "trialDuration": 10,
 85 |     "trialStartDate": "2024-07-23T23:54:51.264Z"
 86 |   },
 87 |   "isWhitelabelCompany": true,
 88 |   "whitelabelDetails": {
 89 |     "domain": "example.com",
 90 |     "logoUrl": "https://example.com/logo.png"
 91 |   },
 92 |   "companyName": "Example Company"
 93 | }
 94 | ```
 95 | 
 96 | - For Location Level App Install if company is non whitelabeled
 97 | 
 98 | ```json
 99 | {
100 |   "type": "INSTALL",
101 |   "appId": "ve9EPM428h8vShlRW1KT",
102 |   "locationId": "otg8dTQqGLh3Q6iQI55w",
103 |   "companyId": "otg8dTQqGLh3Q6iQI55w",
104 |   "userId": "otg8dTQqGLh3Q6iQI55w",
105 |   "planId": "66a0419a0dffa47fb5f8b22f",
106 |   "trial": {
107 |     "onTrial": true,
108 |     "trialDuration": 10,
109 |     "trialStartDate": "2024-07-23T23:54:51.264Z"
110 |   },
111 |   "isWhitelabelCompany": false,
112 |   "whitelabelDetails": {},
113 |   "companyName": "Example Company"
114 | }
115 | ```
116 | 
117 | - For Agency Level App Install
118 | 
119 | ```json
120 | {
121 |   "type": "INSTALL",
122 |   "appId": "ve9EPM428h8vShlRW1KT",
123 |   "companyId": "otg8dTQqGLh3Q6iQI55w",
124 |   "planId": "66a0419a0dffa47fb5f8b22f",
125 |   "trial": {
126 |     "onTrial": true,
127 |     "trialDuration": 10,
128 |     "trialStartDate": "2024-07-23T23:54:51.264Z"
129 |   }
130 | }
131 | ```


--------------------------------------------------------------------------------
/docs/webhook events/AppUninstall.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # App
 6 | 
 7 | Called whenever an app is uninstalled
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "appId": {
19 |       "type": "string"
20 |     },
21 |     "companyId": {
22 |       "type": "string"
23 |     },
24 |     "locationId": {
25 |       "type": "string"
26 |     }
27 |   }
28 | }
29 | ```
30 | 
31 | #### Example
32 | 
33 | - For Location Level App Uninstall
34 | 
35 | ```json
36 | {
37 |   "type": "UNINSTALL",
38 |   "appId": "ve9EPM428h8vShlRW1KT",
39 |   "locationId": "otg8dTQqGLh3Q6iQI55w"
40 | }
41 | ```
42 | 
43 | - For Agency Level App Uninstall
44 | 
45 | ```json
46 | {
47 |   "type": "UNINSTALL",
48 |   "appId": "ve9EPM428h8vShlRW1KT",
49 |   "companyId": "otg8dTQqGLh3Q6iQI55w"
50 | }
51 | ```


--------------------------------------------------------------------------------
/docs/webhook events/AppointmentCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Appointment
  6 | 
  7 | Called whenever an appointment is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "appointment": {
 22 |       "type": "object",
 23 |       "properties": {
 24 |         "id": {
 25 |           "type": "string"
 26 |         },
 27 |         "address": {
 28 |           "type": "string"
 29 |         },
 30 |         "title": {
 31 |           "type": "string"
 32 |         },
 33 |         "calendarId": {
 34 |           "type": "string"
 35 |         },
 36 |         "contactId": {
 37 |           "type": "string"
 38 |         },
 39 |         "groupId": {
 40 |           "type": "string"
 41 |         },
 42 |         "appointmentStatus": {
 43 |           "type": "string"
 44 |         },
 45 |         "assignedUserId": {
 46 |           "type": "string"
 47 |         },
 48 |         "users": {
 49 |           "type": "array"
 50 |         },
 51 |         "notes": {
 52 |           "type": "string"
 53 |         },
 54 |         "source": {
 55 |           "type": "string"
 56 |         },
 57 |         "startTime": {
 58 |           "type": "string"
 59 |         },
 60 |         "endTime": {
 61 |           "type": "string"
 62 |         },
 63 |         "dateAdded": {
 64 |           "type": "string"
 65 |         },
 66 |         "dateUpdated": {
 67 |           "type": "string"
 68 |         }
 69 |       }
 70 |     }
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | #### Example
 76 | 
 77 | ```json
 78 | {
 79 |   "type": "AppointmentCreate",
 80 |   "locationId": "0007BWpSzSwfiuSl0tR2",
 81 |   "appointment": {
 82 |     "id": "0007BWpSzSwfiuSl0tR2",
 83 |     "address": "https://example.com/meeting",
 84 |     "title": "Appointment with GHL Dev team",
 85 |     "calendarId": "BqTwX8QFwXzpegMve9EQ",
 86 |     "contactId": "9NkT25Vor1v4aQatFsv2",
 87 |     "groupId": "9NkT25Vor1v4aQatFsv2",
 88 |     "appointmentStatus": "confirmed",
 89 |     "assignedUserId": "YlWd2wuCAZQzh2cH1fVZ",
 90 |     "users": [
 91 |       "YlWd2wuCAZQzh2cH1fVZ",
 92 |       "9NkT25Vor1v4aQatFsv2"
 93 |     ],
 94 |     "notes": "Some dummy note",
 95 |     "source": "booking_widget",
 96 |     "startTime": "2023-09-25T16:00:00+05:30",
 97 |     "endTime": "2023-09-25T16:00:00+05:30",
 98 |     "dateAdded": "2023-09-25T16:00:00+05:30",
 99 |     "dateUpdated": "2023-09-25T16:00:00+05:30"
100 |   }
101 | }
102 | ```


--------------------------------------------------------------------------------
/docs/webhook events/AppointmentDelete.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Appointment
  6 | 
  7 | Called whenever an appointment is deleted
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "appointment": {
 22 |       "type": "object",
 23 |       "properties": {
 24 |         "id": {
 25 |           "type": "string"
 26 |         },
 27 |         "address": {
 28 |           "type": "string"
 29 |         },
 30 |         "title": {
 31 |           "type": "string"
 32 |         },
 33 |         "calendarId": {
 34 |           "type": "string"
 35 |         },
 36 |         "contactId": {
 37 |           "type": "string"
 38 |         },
 39 |         "groupId": {
 40 |           "type": "string"
 41 |         },
 42 |         "appointmentStatus": {
 43 |           "type": "string"
 44 |         },
 45 |         "assignedUserId": {
 46 |           "type": "string"
 47 |         },
 48 |         "users": {
 49 |           "type": "array"
 50 |         },
 51 |         "notes": {
 52 |           "type": "string"
 53 |         },
 54 |         "source": {
 55 |           "type": "string"
 56 |         },
 57 |         "startTime": {
 58 |           "type": "string"
 59 |         },
 60 |         "endTime": {
 61 |           "type": "string"
 62 |         },
 63 |         "dateAdded": {
 64 |           "type": "string"
 65 |         },
 66 |         "dateUpdated": {
 67 |           "type": "string"
 68 |         }
 69 |       }
 70 |     }
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | #### Example
 76 | 
 77 | ```json
 78 | {
 79 |   "type": "AppointmentCreate",
 80 |   "locationId": "0007BWpSzSwfiuSl0tR2",
 81 |   "appointment": {
 82 |     "id": "0007BWpSzSwfiuSl0tR2",
 83 |     "address": "https://example.com/meeting",
 84 |     "title": "Appointment with GHL Dev team",
 85 |     "calendarId": "BqTwX8QFwXzpegMve9EQ",
 86 |     "contactId": "9NkT25Vor1v4aQatFsv2",
 87 |     "groupId": "9NkT25Vor1v4aQatFsv2",
 88 |     "appointmentStatus": "confirmed",
 89 |     "assignedUserId": "YlWd2wuCAZQzh2cH1fVZ",
 90 |     "users": [
 91 |       "YlWd2wuCAZQzh2cH1fVZ",
 92 |       "9NkT25Vor1v4aQatFsv2"
 93 |     ],
 94 |     "notes": "Some dummy note",
 95 |     "source": "booking_widget",
 96 |     "startTime": "2023-09-25T16:00:00+05:30",
 97 |     "endTime": "2023-09-25T16:00:00+05:30",
 98 |     "dateAdded": "2023-09-25T16:00:00+05:30",
 99 |     "dateUpdated": "2023-09-25T16:00:00+05:30"
100 |   }
101 | }
102 | ```


--------------------------------------------------------------------------------
/docs/webhook events/AppointmentUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Appointment
  6 | 
  7 | Called whenever an appointment is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "appointment": {
 22 |       "type": "object",
 23 |       "properties": {
 24 |         "id": {
 25 |           "type": "string"
 26 |         },
 27 |         "address": {
 28 |           "type": "string"
 29 |         },
 30 |         "title": {
 31 |           "type": "string"
 32 |         },
 33 |         "calendarId": {
 34 |           "type": "string"
 35 |         },
 36 |         "contactId": {
 37 |           "type": "string"
 38 |         },
 39 |         "groupId": {
 40 |           "type": "string"
 41 |         },
 42 |         "appointmentStatus": {
 43 |           "type": "string"
 44 |         },
 45 |         "assignedUserId": {
 46 |           "type": "string"
 47 |         },
 48 |         "users": {
 49 |           "type": "array"
 50 |         },
 51 |         "notes": {
 52 |           "type": "string"
 53 |         },
 54 |         "source": {
 55 |           "type": "string"
 56 |         },
 57 |         "startTime": {
 58 |           "type": "string"
 59 |         },
 60 |         "endTime": {
 61 |           "type": "string"
 62 |         },
 63 |         "dateAdded": {
 64 |           "type": "string"
 65 |         },
 66 |         "dateUpdated": {
 67 |           "type": "string"
 68 |         }
 69 |       }
 70 |     }
 71 |   }
 72 | }
 73 | ```
 74 | 
 75 | #### Example
 76 | 
 77 | ```json
 78 | {
 79 |   "type": "AppointmentCreate",
 80 |   "locationId": "0007BWpSzSwfiuSl0tR2",
 81 |   "appointment": {
 82 |     "id": "0007BWpSzSwfiuSl0tR2",
 83 |     "address": "https://example.com/meeting",
 84 |     "title": "Appointment with GHL Dev team",
 85 |     "calendarId": "BqTwX8QFwXzpegMve9EQ",
 86 |     "contactId": "9NkT25Vor1v4aQatFsv2",
 87 |     "groupId": "9NkT25Vor1v4aQatFsv2",
 88 |     "appointmentStatus": "confirmed",
 89 |     "assignedUserId": "YlWd2wuCAZQzh2cH1fVZ",
 90 |     "users": [
 91 |       "YlWd2wuCAZQzh2cH1fVZ",
 92 |       "9NkT25Vor1v4aQatFsv2"
 93 |     ],
 94 |     "notes": "Some dummy note",
 95 |     "source": "booking_widget",
 96 |     "startTime": "2023-09-25T16:00:00+05:30",
 97 |     "endTime": "2023-09-25T16:00:00+05:30",
 98 |     "dateAdded": "2023-09-25T16:00:00+05:30",
 99 |     "dateUpdated": "2023-09-25T16:00:00+05:30"
100 |   }
101 | }
102 | ```


--------------------------------------------------------------------------------
/docs/webhook events/AssociationCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Response]
  3 | ---
  4 | 
  5 | # Association Created
  6 | 
  7 | ## Overview
  8 | 
  9 | This webhook response is triggered when a new association is created between objects, such as linking contacts to custom objects. Currently, only contact-to-contact , contact to custom object and custom object to custom object associations are supported. There are plans to expand support for additional associations in the future.
 10 | 
 11 | For example, in a real estate system, a company may want to associate potential buyers with specific properties. In this case:
 12 | - The **first object** (buyer) would be a custom object representing the interested person.
 13 | - The **second object** (property) would be a custom object representing the real estate listing.
 14 | - The **association label** might be "Interested Buyer," indicating that the buyer has shown interest in the property.
 15 | - The system could store multiple buyers per property (many-to-many relationship), allowing for flexible tracking of interest.
 16 | 
 17 | ## Schema
 18 | 
 19 | The webhook response follows the JSON schema below:
 20 | 
 21 | ```json json_schema
 22 | {
 23 |   "type": "object",
 24 |   "properties": {
 25 |     "id": {
 26 |       "type": "string"
 27 |     },
 28 |     "associationType": {
 29 |       "type": "string"
 30 |     },
 31 |     "firstObjectKey": {
 32 |       "type": "string"
 33 |     },
 34 |     "firstObjectLabel": {
 35 |       "type": "string"
 36 |     },
 37 |     "secondObjectKey": {
 38 |       "type": "string"
 39 |     },
 40 |     "secondObjectLabel": {
 41 |       "type": "string"
 42 |     },
 43 |     "key": {
 44 |       "type": "string"
 45 |     },
 46 |     "locationId": {
 47 |       "type": "string"
 48 |     }
 49 |   }
 50 | }
 51 | ```
 52 | 
 53 | ## Field Descriptions
 54 | 
 55 | ### `id`
 56 | - Type: `string`
 57 | - Unique identifier for the association.
 58 | 
 59 | ### `associationType`
 60 | - Type: `string`
 61 | - Specifies the type of association (e.g., `USER_DEFINED` or `SYSTEM_DEFINED`).
 62 | 
 63 | ### `firstObjectKey`
 64 | - Type: `string`
 65 | - Key representing the first object in the association.
 66 | 
 67 | ### `firstObjectLabel`
 68 | - Type: `string`
 69 | - Readable label for the first object.
 70 | 
 71 | ### `secondObjectKey`
 72 | - Type: `string`
 73 | - Key representing the second object in the association.
 74 | 
 75 | ### `secondObjectLabel`
 76 | - Type: `string`
 77 | - Readable label for the second object.
 78 | 
 79 | ### `key`
 80 | - Type: `string`
 81 | - Unique key assigned to the association.
 82 | 
 83 | ### `locationId`
 84 | - Type: `string`
 85 | - Identifies the location associated with the created association.
 86 | 
 87 | ## Example Response
 88 | 
 89 | ```json
 90 | {
 91 |   "id": "67ade73d1119d2ac7ad0c475",
 92 |   "associationType": "USER_DEFINED",
 93 |   "firstObjectKey": "custom_objects.real_estate_buyer",
 94 |   "firstObjectLabel": "Interested Buyer",
 95 |   "secondObjectKey": "custom_objects.property",
 96 |   "secondObjectLabel": "Property",
 97 |   "key": "buyer_property_interest",
 98 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P"
 99 | }
100 | ```
101 | 
102 | ## Additional Notes
103 | 
104 | - Ensure that your webhook listener is capable of processing `POST` requests.
105 | - The `firstObjectKey` and `secondObjectKey` help define relationships between entities.
106 | - The `traceId` is useful for debugging and logging purposes.
107 | 


--------------------------------------------------------------------------------
/docs/webhook events/AssociationDelete.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Response]
  3 | ---
  4 | 
  5 | # Association Deleted
  6 | 
  7 | ## Overview
  8 | 
  9 | This webhook response is triggered when a new association is deleted between objects, such as linking contacts to custom objects. Currently, only contact-to-contact , contact to custom object and custom object to custom object associations are supported. There are plans to expand support for additional associations in the future.
 10 | 
 11 | For example, in a real estate system, a company may want to associate potential buyers with specific properties. In this case:
 12 | - The **first object** (buyer) would be a custom object representing the interested person.
 13 | - The **second object** (property) would be a custom object representing the real estate listing.
 14 | - The **association label** might be "Interested Buyer," indicating that the buyer has shown interest in the property.
 15 | - The system could store multiple buyers per property (many-to-many relationship), allowing for flexible tracking of interest.
 16 | 
 17 | ## Schema
 18 | 
 19 | The webhook response follows the JSON schema below:
 20 | 
 21 | ```json json_schema
 22 | {
 23 |   "type": "object",
 24 |   "properties": {
 25 |     "id": {
 26 |       "type": "string"
 27 |     },
 28 |     "associationType": {
 29 |       "type": "string"
 30 |     },
 31 |     "firstObjectKey": {
 32 |       "type": "string"
 33 |     },
 34 |     "firstObjectLabel": {
 35 |       "type": "string"
 36 |     },
 37 |     "firstObjectToSecondObjectCardinality": {
 38 |       "type": "string"
 39 |     },
 40 |     "secondObjectKey": {
 41 |       "type": "string"
 42 |     },
 43 |     "secondObjectLabel": {
 44 |       "type": "string"
 45 |     },
 46 |     "secondObjectToFirstObjectCardinality": {
 47 |       "type": "string"
 48 |     },
 49 |     "key": {
 50 |       "type": "string"
 51 |     },
 52 |     "locationId": {
 53 |       "type": "string"
 54 |     }
 55 |   }
 56 | }
 57 | ```
 58 | 
 59 | ## Field Descriptions
 60 | 
 61 | ### `id`
 62 | - Type: `string`
 63 | - Unique identifier for the association.
 64 | 
 65 | ### `associationType`
 66 | - Type: `string`
 67 | - Specifies the type of association (e.g., `USER_DEFINED` or `SYSTEM_DEFINED`).
 68 | 
 69 | ### `firstObjectKey`
 70 | - Type: `string`
 71 | - Key representing the first object in the association.
 72 | 
 73 | ### `firstObjectLabel`
 74 | - Type: `string`
 75 | - Human-readable label for the first object.
 76 | 
 77 | ### `firstObjectToSecondObjectCardinality`
 78 | - Type: `string`
 79 | - Indicates the relationship between the first and second object (e.g., `MANY_TO_MANY`).
 80 | 
 81 | ### `secondObjectKey`
 82 | - Type: `string`
 83 | - Key representing the second object in the association.
 84 | 
 85 | ### `secondObjectLabel`
 86 | - Type: `string`
 87 | - Human-readable label for the second object.
 88 | 
 89 | ### `secondObjectToFirstObjectCardinality`
 90 | - Type: `string`
 91 | - Defines the reverse relationship between objects.
 92 | 
 93 | ### `key`
 94 | - Type: `string`
 95 | - Unique key assigned to the association.
 96 | 
 97 | ### `locationId`
 98 | - Type: `string`
 99 | - Identifies the location associated with the created association.
100 | 
101 | ## Example Response
102 | 
103 | ```json
104 | {
105 |   "id": "67ade73d1119d2ac7ad0c475",
106 |   "associationType": "USER_DEFINED",
107 |   "firstObjectKey": "custom_objects.real_estate_buyer",
108 |   "firstObjectLabel": "Interested Buyer",
109 |   "firstObjectToSecondObjectCardinality": "MANY_TO_MANY",
110 |   "secondObjectKey": "custom_objects.property",
111 |   "secondObjectLabel": "Property",
112 |   "secondObjectToFirstObjectCardinality": "MANY_TO_MANY",
113 |   "key": "buyer_property_interest",
114 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P"
115 | }
116 | ```
117 | 
118 | ## Additional Notes
119 | 
120 | - Ensure that your webhook listener is capable of processing `POST` requests.
121 | - The `firstObjectKey` and `secondObjectKey` help define relationships between entities.
122 | - The `traceId` is useful for debugging and logging purposes.
123 | 


--------------------------------------------------------------------------------
/docs/webhook events/AssociationUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Response]
  3 | ---
  4 | 
  5 | # Association Updated
  6 | 
  7 | ## Overview
  8 | 
  9 | This webhook response is triggered when a new association is updated between objects, such as linking contacts to custom objects. Currently, only contact-to-contact , contact to custom object and custom object to custom object associations are supported. There are plans to expand support for additional associations in the future.
 10 | 
 11 | For example, in a real estate system, a company may want to associate potential buyers with specific properties. In this case:
 12 | - The **first object** (buyer) would be a custom object representing the interested person.
 13 | - The **second object** (property) would be a custom object representing the real estate listing.
 14 | - The **association label** might be "Interested Buyer," indicating that the buyer has shown interest in the property.
 15 | - The system could store multiple buyers per property (many-to-many relationship), allowing for flexible tracking of interest.
 16 | 
 17 | ## Schema
 18 | 
 19 | The webhook response follows the JSON schema below:
 20 | 
 21 | ```json json_schema
 22 | {
 23 |   "type": "object",
 24 |   "properties": {
 25 |     "id": {
 26 |       "type": "string"
 27 |     },
 28 |     "associationType": {
 29 |       "type": "string"
 30 |     },
 31 |     "firstObjectKey": {
 32 |       "type": "string"
 33 |     },
 34 |     "firstObjectLabel": {
 35 |       "type": "string"
 36 |     },
 37 |     "firstObjectToSecondObjectCardinality": {
 38 |       "type": "string"
 39 |     },
 40 |     "secondObjectKey": {
 41 |       "type": "string"
 42 |     },
 43 |     "secondObjectLabel": {
 44 |       "type": "string"
 45 |     },
 46 |     "secondObjectToFirstObjectCardinality": {
 47 |       "type": "string"
 48 |     },
 49 |     "key": {
 50 |       "type": "string"
 51 |     },
 52 |     "locationId": {
 53 |       "type": "string"
 54 |     }
 55 |   }
 56 | }
 57 | ```
 58 | 
 59 | ## Field Descriptions
 60 | 
 61 | ### `id`
 62 | - Type: `string`
 63 | - Unique identifier for the association.
 64 | 
 65 | ### `associationType`
 66 | - Type: `string`
 67 | - Specifies the type of association (e.g., `USER_DEFINED` or `SYSTEM_DEFINED`).
 68 | 
 69 | ### `firstObjectKey`
 70 | - Type: `string`
 71 | - Key representing the first object in the association.
 72 | 
 73 | ### `firstObjectLabel`
 74 | - Type: `string`
 75 | - Human-readable label for the first object.
 76 | 
 77 | ### `firstObjectToSecondObjectCardinality`
 78 | - Type: `string`
 79 | - Indicates the relationship between the first and second object (e.g., `MANY_TO_MANY`).
 80 | 
 81 | ### `secondObjectKey`
 82 | - Type: `string`
 83 | - Key representing the second object in the association.
 84 | 
 85 | ### `secondObjectLabel`
 86 | - Type: `string`
 87 | - Human-readable label for the second object.
 88 | 
 89 | ### `secondObjectToFirstObjectCardinality`
 90 | - Type: `string`
 91 | - Defines the reverse relationship between objects.
 92 | 
 93 | ### `key`
 94 | - Type: `string`
 95 | - Unique key assigned to the association.
 96 | 
 97 | ### `locationId`
 98 | - Type: `string`
 99 | - Identifies the location associated with the created association.
100 | 
101 | ## Example Response
102 | 
103 | ```json
104 | {
105 |   "id": "67ade73d1119d2ac7ad0c475",
106 |   "associationType": "USER_DEFINED",
107 |   "firstObjectKey": "custom_objects.real_estate_buyer",
108 |   "firstObjectLabel": "Interested Buyer",
109 |   "firstObjectToSecondObjectCardinality": "MANY_TO_MANY",
110 |   "secondObjectKey": "custom_objects.property",
111 |   "secondObjectLabel": "Property",
112 |   "secondObjectToFirstObjectCardinality": "MANY_TO_MANY",
113 |   "key": "buyer_property_interest",
114 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P"
115 | }
116 | ```
117 | 
118 | ## Additional Notes
119 | 
120 | - Ensure that your webhook listener is capable of processing `POST` requests.
121 | - The `firstObjectKey` and `secondObjectKey` help define relationships between entities.
122 | - The `traceId` is useful for debugging and logging purposes.
123 | 


--------------------------------------------------------------------------------
/docs/webhook events/CampaignStatusUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Campaign
 6 | 
 7 | Called whenever a campaign status is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "contactId": {
25 |       "type": "string"
26 |     },
27 |     "status": {
28 |       "type": "string"
29 |     },
30 |     "templateId": {
31 |       "type": "string"
32 |     },
33 |     "replied": {
34 |       "type": "string"
35 |     },
36 |     "dateAdded": {
37 |       "type": "string"
38 |     }
39 |   }
40 | }
41 | ```
42 | 
43 | #### Example
44 | 
45 | ```json
46 | {
47 |   "type": "CampaignStatusUpdate",
48 |   "locationId": "ve9EPM428h8vShlRW1KT",
49 |   "id": "2hxvXh8Fjc69SvujEWMD",
50 |   "contactId": "CWBf1PR9LvvBkcYqiXlc",
51 |   "status": "paused",
52 |   "templateId": "Y2I9XM7aO1hncuSOlc9L",
53 |   "replied": "Loram ipsum",
54 |   "dateAdded": "2021-11-26T12:41:02.193Z"
55 | }
56 | ```
57 | 


--------------------------------------------------------------------------------
/docs/webhook events/ContactCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Contact
  6 | 
  7 | Called whenever a contact is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "id": {
 22 |       "type": "string"
 23 |     },
 24 |     "address1": {
 25 |       "type": "string"
 26 |     },
 27 |     "city": {
 28 |       "type": "string"
 29 |     },
 30 |     "companyName": {
 31 |       "type": "string"
 32 |     },
 33 |     "country": {
 34 |       "type": "string"
 35 |     },
 36 |     "source": {
 37 |       "type": "string"
 38 |     },
 39 |     "dateAdded": {
 40 |       "type": "string"
 41 |     },
 42 |     "dateOfBirth": {
 43 |       "type": "string"
 44 |     },
 45 |     "dnd": {
 46 |       "type": "boolean"
 47 |     },
 48 |     "email": {
 49 |       "type": "string"
 50 |     },
 51 |     "name": {
 52 |       "type": "string"
 53 |     },
 54 |     "firstName": {
 55 |       "type": "string"
 56 |     },
 57 |     "lastName": {
 58 |       "type": "string"
 59 |     },
 60 |     "phone": {
 61 |       "type": "string"
 62 |     },
 63 |     "postalCode": {
 64 |       "type": "string"
 65 |     },
 66 |     "state": {
 67 |       "type": "string"
 68 |     },
 69 |     "tags": {
 70 |       "type": "array"
 71 |     },
 72 |     "website": {
 73 |       "type": "string"
 74 |     },
 75 |     "attachments": {
 76 |       "type": "array"
 77 |     },
 78 |     "assignedTo": {
 79 |       "type": "string"
 80 |     },
 81 |     "customFields": {
 82 |       "type": "array",
 83 |       "items": {
 84 |         "type": "object",
 85 |         "properties": {
 86 |           "id": {
 87 |             "type": "string"
 88 |           },
 89 |           "value": {
 90 |             "type": ["string", "number", "array", "object"]
 91 |           }
 92 |         }
 93 |       }
 94 |     }
 95 |   }
 96 | }
 97 | ```
 98 | 
 99 | #### Example
100 | 
101 | ```json
102 | {
103 |   "type": "ContactCreate",
104 |   "locationId": "ve9EPM428h8vShlRW1KT",
105 |   "id": "nmFmQEsNgz6AVpgLVUJ0",
106 |   "address1": "3535 1st St N",
107 |   "city": "ruDolomitebika",
108 |   "state": "AL",
109 |   "companyName": "Loram ipsum",
110 |   "country": "DE",
111 |   "source": "xyz form",
112 |   "dateAdded": "2021-11-26T12:41:02.193Z",
113 |   "dateOfBirth": "2000-01-05T00:00:00.000Z",
114 |   "dnd": true,
115 |   "email": "JohnDeo@gmail.comm",
116 |   "name": "John Deo",
117 |   "firstName": "John",
118 |   "lastName": "Deo",
119 |   "phone": "+919509597501",
120 |   "postalCode": "452001",
121 |   "tags": ["id magna sed Lorem", "Duis dolor commodo aliqua"],
122 |   "website": "https://www.google.com/",
123 |   "attachments": [],
124 |   "assignedTo": "nmFmQEsNgz6AVpgLVUJ0",
125 |   "customFields": [
126 |     {
127 |       "id": "BcdmQEsNgz6AVpgLVUJ0",
128 |       "value": "XYZ Corp"
129 |     }
130 |   ]
131 | }
132 | ```


--------------------------------------------------------------------------------
/docs/webhook events/ContactDelete.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Contact
  6 | 
  7 | Called whenever a contact is deleted
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "id": {
 22 |       "type": "string"
 23 |     },
 24 |     "address1": {
 25 |       "type": "string"
 26 |     },
 27 |     "city": {
 28 |       "type": "string"
 29 |     },
 30 |     "companyName": {
 31 |       "type": "string"
 32 |     },
 33 |     "country": {
 34 |       "type": "string"
 35 |     },
 36 |     "source": {
 37 |       "type": "string"
 38 |     },
 39 |     "dateAdded": {
 40 |       "type": "string"
 41 |     },
 42 |     "dateOfBirth": {
 43 |       "type": "string"
 44 |     },
 45 |     "dnd": {
 46 |       "type": "boolean"
 47 |     },
 48 |     "email": {
 49 |       "type": "string"
 50 |     },
 51 |     "name": {
 52 |       "type": "string"
 53 |     },
 54 |     "firstName": {
 55 |       "type": "string"
 56 |     },
 57 |     "lastName": {
 58 |       "type": "string"
 59 |     },
 60 |     "phone": {
 61 |       "type": "string"
 62 |     },
 63 |     "postalCode": {
 64 |       "type": "string"
 65 |     },
 66 |     "state": {
 67 |       "type": "string"
 68 |     },
 69 |     "tags": {
 70 |       "type": "array"
 71 |     },
 72 |     "website": {
 73 |       "type": "string"
 74 |     },
 75 |     "attachments": {
 76 |       "type": "array"
 77 |     },
 78 |     "assignedTo": {
 79 |       "type": "string"
 80 |     },
 81 |     "customFields": {
 82 |       "type": "array",
 83 |       "items": {
 84 |         "type": "object",
 85 |         "properties": {
 86 |           "id": {
 87 |             "type": "string"
 88 |           },
 89 |           "value": {
 90 |             "type": ["string", "number", "array", "object"]
 91 |           }
 92 |         }
 93 |       }
 94 |     }
 95 |   }
 96 | }
 97 | ```
 98 | 
 99 | #### Example
100 | 
101 | ```json
102 | {
103 |   "type": "ContactDelete",
104 |   "locationId": "ve9EPM428h8vShlRW1KT",
105 |   "id": "nmFmQEsNgz6AVpgLVUJ0",
106 |   "address1": "3535 1st St N",
107 |   "city": "ruDolomitebika",
108 |   "state": "AL",
109 |   "companyName": "Loram ipsum",
110 |   "country": "DE",
111 |   "source": "xyz form",
112 |   "dateAdded": "2021-11-26T12:41:02.193Z",
113 |   "dateOfBirth": "2000-01-05T00:00:00.000Z",
114 |   "dnd": true,
115 |   "email": "JohnDeo@gmail.comm",
116 |   "name": "John Deo",
117 |   "firstName": "John",
118 |   "lastName": "Deo",
119 |   "phone": "+919509597501",
120 |   "postalCode": "452001",
121 |   "tags": ["id magna sed Lorem", "Duis dolor commodo aliqua"],
122 |   "website": "https://www.google.com/",
123 |   "attachments": [],
124 |   "assignedTo": "nmFmQEsNgz6AVpgLVUJ0",
125 |   "customFields": [
126 |     {
127 |       "id": "BcdmQEsNgz6AVpgLVUJ0",
128 |       "value": "XYZ Corp"
129 |     }
130 |   ]
131 | }
132 | ```


--------------------------------------------------------------------------------
/docs/webhook events/ContactDndUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Contact
  6 | 
  7 | Called whenever a contact's dnd field is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "id": {
 22 |       "type": "string"
 23 |     },
 24 |     "address1": {
 25 |       "type": "string"
 26 |     },
 27 |     "city": {
 28 |       "type": "string"
 29 |     },
 30 |     "companyName": {
 31 |       "type": "string"
 32 |     },
 33 |     "country": {
 34 |       "type": "string"
 35 |     },
 36 |     "source": {
 37 |       "type": "string"
 38 |     },
 39 |     "dateAdded": {
 40 |       "type": "string"
 41 |     },
 42 |     "dateOfBirth": {
 43 |       "type": "string"
 44 |     },
 45 |     "dnd": {
 46 |       "type": "boolean"
 47 |     },
 48 |     "dndSettings": {
 49 |       "type": "object",
 50 |       "properties": {
 51 |         "SMS": {
 52 |           "type": "object",
 53 |           "properties": {
 54 |             "status": {
 55 |               "type": "string"
 56 |             },
 57 |             "message": {
 58 |               "type": "string"
 59 |             },
 60 |             "code": {
 61 |               "type": "string"
 62 |             }
 63 |           }
 64 |         },
 65 |         "Email": {
 66 |           "type": "object",
 67 |           "properties": {
 68 |             "status": {
 69 |               "type": "string"
 70 |             },
 71 |             "message": {
 72 |               "type": "string"
 73 |             },
 74 |             "code": {
 75 |               "type": "string"
 76 |             }
 77 |           }
 78 |         },
 79 |         "GMB": {
 80 |           "type": "object",
 81 |           "properties": {
 82 |             "status": {
 83 |               "type": "string"
 84 |             },
 85 |             "message": {
 86 |               "type": "string"
 87 |             },
 88 |             "code": {
 89 |               "type": "string"
 90 |             }
 91 |           }
 92 |         },
 93 |         "FB": {
 94 |           "type": "object",
 95 |           "properties": {
 96 |             "status": {
 97 |               "type": "string"
 98 |             },
 99 |             "message": {
100 |               "type": "string"
101 |             },
102 |             "code": {
103 |               "type": "string"
104 |             }
105 |           }
106 |         },
107 |         "WhatsApp": {
108 |           "type": "object",
109 |           "properties": {
110 |             "status": {
111 |               "type": "string"
112 |             },
113 |             "message": {
114 |               "type": "string"
115 |             },
116 |             "code": {
117 |               "type": "string"
118 |             }
119 |           }
120 |         },
121 |         "Call": {
122 |           "type": "object",
123 |           "properties": {
124 |             "status": {
125 |               "type": "string"
126 |             },
127 |             "message": {
128 |               "type": "string"
129 |             },
130 |             "code": {
131 |               "type": "string"
132 |             }
133 |           }
134 |         }
135 |       }
136 |     },
137 |     "email": {
138 |       "type": "string"
139 |     },
140 |     "name": {
141 |       "type": "string"
142 |     },
143 |     "firstName": {
144 |       "type": "string"
145 |     },
146 |     "lastName": {
147 |       "type": "string"
148 |     },
149 |     "phone": {
150 |       "type": "string"
151 |     },
152 |     "postalCode": {
153 |       "type": "string"
154 |     },
155 |     "state": {
156 |       "type": "string"
157 |     },
158 |     "tags": {
159 |       "type": "array"
160 |     },
161 |     "website": {
162 |       "type": "string"
163 |     },
164 |     "attachments": {
165 |       "type": "array"
166 |     },
167 |     "assignedTo": {
168 |       "type": "string"
169 |     },
170 |     "customFields": {
171 |       "type": "array",
172 |       "items": {
173 |         "type": "object",
174 |         "properties": {
175 |           "id": {
176 |             "type": "string"
177 |           },
178 |           "value": {
179 |             "type": ["string", "number", "array", "object"]
180 |           }
181 |         }
182 |       }
183 |     }
184 |   }
185 | }
186 | ```
187 | 
188 | #### Example
189 | 
190 | ```json
191 | {
192 |   "type": "ContactDndUpdate",
193 |   "locationId": "ve9EPM428h8vShlRW1KT",
194 |   "id": "nmFmQEsNgz6AVpgLVUJ0",
195 |   "address1": "3535 1st St N",
196 |   "city": "ruDolomitebika",
197 |   "state": "AL",
198 |   "companyName": "Loram ipsum",
199 |   "country": "DE",
200 |   "source": "xyz form",
201 |   "dateAdded": "2021-11-26T12:41:02.193Z",
202 |   "dateOfBirth": "2000-01-05T00:00:00.000Z",
203 |   "dnd": true,
204 |   "dndSettings": {
205 |     "SMS": {
206 |       "status": "inactive",
207 |       "message": "Some message",
208 |       "code": "101"
209 |     },
210 |     "Call": {
211 |       "status": "inactive",
212 |       "message": "Some message",
213 |       "code": "101"
214 |     },
215 |     "Email": {
216 |       "status": "active",
217 |       "message": "Some message",
218 |       "code": "101"
219 |     },
220 |     "GMB": {
221 |       "status": "active",
222 |       "message": "Some message",
223 |       "code": "101"
224 |     },
225 |     "FB": {
226 |       "status": "active",
227 |       "message": "Some message",
228 |       "code": "101"
229 |     },
230 |     "WhatsApp": {
231 |       "status": "active",
232 |       "message": "Some message",
233 |       "code": "101"
234 |     }
235 |   },
236 |   "email": "JohnDeo@gmail.comm",
237 |   "name": "John Deo",
238 |   "firstName": "John",
239 |   "lastName": "Deo",
240 |   "phone": "+919509597501",
241 |   "postalCode": "452001",
242 |   "tags": ["id magna sed Lorem", "Duis dolor commodo aliqua"],
243 |   "website": "https://www.google.com/",
244 |   "attachments": [],
245 |   "assignedTo": "nmFmQEsNgz6AVpgLVUJ0",
246 |   "customFields": [
247 |     {
248 |       "id": "BcdmQEsNgz6AVpgLVUJ0",
249 |       "value": "XYZ Corp"
250 |     }
251 |   ]
252 | }
253 | ```


--------------------------------------------------------------------------------
/docs/webhook events/ContactTagUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Contact
  6 | 
  7 | Called whenever a contact's tag field is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "id": {
 22 |       "type": "string"
 23 |     },
 24 |     "address1": {
 25 |       "type": "string"
 26 |     },
 27 |     "city": {
 28 |       "type": "string"
 29 |     },
 30 |     "companyName": {
 31 |       "type": "string"
 32 |     },
 33 |     "country": {
 34 |       "type": "string"
 35 |     },
 36 |     "source": {
 37 |       "type": "string"
 38 |     },
 39 |     "dateAdded": {
 40 |       "type": "string"
 41 |     },
 42 |     "dateOfBirth": {
 43 |       "type": "string"
 44 |     },
 45 |     "dnd": {
 46 |       "type": "boolean"
 47 |     },
 48 |     "email": {
 49 |       "type": "string"
 50 |     },
 51 |     "name": {
 52 |       "type": "string"
 53 |     },
 54 |     "firstName": {
 55 |       "type": "string"
 56 |     },
 57 |     "lastName": {
 58 |       "type": "string"
 59 |     },
 60 |     "phone": {
 61 |       "type": "string"
 62 |     },
 63 |     "postalCode": {
 64 |       "type": "string"
 65 |     },
 66 |     "state": {
 67 |       "type": "string"
 68 |     },
 69 |     "tags": {
 70 |       "type": "array"
 71 |     },
 72 |     "website": {
 73 |       "type": "string"
 74 |     },
 75 |     "attachments": {
 76 |       "type": "array"
 77 |     },
 78 |     "assignedTo": {
 79 |       "type": "string"
 80 |     },
 81 |     "customFields": {
 82 |       "type": "array",
 83 |       "items": {
 84 |         "type": "object",
 85 |         "properties": {
 86 |           "id": {
 87 |             "type": "string"
 88 |           },
 89 |           "value": {
 90 |             "type": ["string", "number", "array", "object"]
 91 |           }
 92 |         }
 93 |       }
 94 |     }
 95 |   }
 96 | }
 97 | ```
 98 | 
 99 | #### Example
100 | 
101 | ```json
102 | {
103 |   "type": "ContactTagUpdate",
104 |   "locationId": "ve9EPM428h8vShlRW1KT",
105 |   "id": "nmFmQEsNgz6AVpgLVUJ0",
106 |   "address1": "3535 1st St N",
107 |   "city": "ruDolomitebika",
108 |   "state": "AL",
109 |   "companyName": "Loram ipsum",
110 |   "country": "DE",
111 |   "source": "xyz form",
112 |   "dateAdded": "2021-11-26T12:41:02.193Z",
113 |   "dateOfBirth": "2000-01-05T00:00:00.000Z",
114 |   "dnd": true,
115 |   "email": "JohnDeo@gmail.comm",
116 |   "name": "John Deo",
117 |   "firstName": "John",
118 |   "lastName": "Deo",
119 |   "phone": "+919509597501",
120 |   "postalCode": "452001",
121 |   "tags": ["id magna sed Lorem", "Duis dolor commodo aliqua"],
122 |   "website": "https://www.google.com/",
123 |   "attachments": [],
124 |   "assignedTo": "nmFmQEsNgz6AVpgLVUJ0",
125 |   "customFields": [
126 |     {
127 |       "id": "BcdmQEsNgz6AVpgLVUJ0",
128 |       "value": "XYZ Corp"
129 |     }
130 |   ]
131 | }
132 | ```


--------------------------------------------------------------------------------
/docs/webhook events/ContactUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Contact
  6 | 
  7 | Called whenever the specific fields in contact is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "locationId": {
 19 |       "type": "string"
 20 |     },
 21 |     "id": {
 22 |       "type": "string"
 23 |     },
 24 |     "address1": {
 25 |       "type": "string"
 26 |     },
 27 |     "city": {
 28 |       "type": "string"
 29 |     },
 30 |     "companyName": {
 31 |       "type": "string"
 32 |     },
 33 |     "country": {
 34 |       "type": "string"
 35 |     },
 36 |     "source": {
 37 |       "type": "string"
 38 |     },
 39 |     "dateAdded": {
 40 |       "type": "string"
 41 |     },
 42 |     "dateOfBirth": {
 43 |       "type": "string"
 44 |     },
 45 |     "dnd": {
 46 |       "type": "boolean"
 47 |     },
 48 |     "email": {
 49 |       "type": "string"
 50 |     },
 51 |     "name": {
 52 |       "type": "string"
 53 |     },
 54 |     "firstName": {
 55 |       "type": "string"
 56 |     },
 57 |     "lastName": {
 58 |       "type": "string"
 59 |     },
 60 |     "phone": {
 61 |       "type": "string"
 62 |     },
 63 |     "postalCode": {
 64 |       "type": "string"
 65 |     },
 66 |     "state": {
 67 |       "type": "string"
 68 |     },
 69 |     "tags": {
 70 |       "type": "array"
 71 |     },
 72 |     "website": {
 73 |       "type": "string"
 74 |     },
 75 |     "attachments": {
 76 |       "type": "array"
 77 |     },
 78 |     "assignedTo": {
 79 |       "type": "string"
 80 |     },
 81 |     "customFields": {
 82 |       "type": "array",
 83 |       "items": {
 84 |         "type": "object",
 85 |         "properties": {
 86 |           "id": {
 87 |             "type": "string"
 88 |           },
 89 |           "value": {
 90 |             "type": ["string", "number", "array", "object"]
 91 |           }
 92 |         }
 93 |       }
 94 |     }
 95 |   }
 96 | }
 97 | ```
 98 | 
 99 | #### Example
100 | 
101 | ```json
102 | {
103 |   "type": "ContactUpdate",
104 |   "locationId": "ve9EPM428h8vShlRW1KT",
105 |   "id": "nmFmQEsNgz6AVpgLVUJ0",
106 |   "address1": "3535 1st St N",
107 |   "city": "ruDolomitebika",
108 |   "state": "AL",
109 |   "companyName": "Loram ipsum",
110 |   "country": "DE",
111 |   "source": "xyz form",
112 |   "dateAdded": "2021-11-26T12:41:02.193Z",
113 |   "dateOfBirth": "2000-01-05T00:00:00.000Z",
114 |   "dnd": true,
115 |   "email": "JohnDeo@gmail.comm",
116 |   "name": "John Deo",
117 |   "firstName": "John",
118 |   "lastName": "Deo",
119 |   "phone": "+919509597501",
120 |   "postalCode": "452001",
121 |   "tags": ["id magna sed Lorem", "Duis dolor commodo aliqua"],
122 |   "website": "https://www.google.com/",
123 |   "attachments": [],
124 |   "assignedTo": "nmFmQEsNgz6AVpgLVUJ0",
125 |   "customFields": [
126 |     {
127 |       "id": "BcdmQEsNgz6AVpgLVUJ0",
128 |       "value": "XYZ Corp"
129 |     }
130 |   ]
131 | }
132 | ```


--------------------------------------------------------------------------------
/docs/webhook events/ConversationUnreadWebhook.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Conversation
 6 | 
 7 | Called whenever a conversations unread status is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "contactId": {
25 |       "type": "string"
26 |     },
27 |     "unreadCount": {
28 |       "type": "number"
29 |     },
30 |     "inbox": {
31 |       "type": "boolean"
32 |     },
33 |     "starred": {
34 |       "type": "boolean"
35 |     },
36 |     "deleted": {
37 |       "type": "boolean"
38 |     }
39 |   }
40 | }
41 | ```
42 | 
43 | #### Example
44 | 
45 | ```json
46 | {
47 |   "type": "ConversationUnreadUpdate",
48 |   "locationId": "ADVlSQnPsdq3hinusd6C3",
49 |   "id": "MzKIpg0rEIH2ZUGKf6BS",
50 |   "contactId": "zsYhPBOUsEHtrK508Wm9",
51 |   "deleted": false,
52 |   "inbox": false,
53 |   "starred": true,
54 |   "unreadCount": 0
55 | }
56 | ```
57 | 


--------------------------------------------------------------------------------
/docs/webhook events/InboundMessage.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # InboundMessage
  6 | 
  7 | Called whenever a contact sends a message to the user.
  8 | 
  9 | | Channel   |
 10 | | --------- |
 11 | | Call      |
 12 | | Voicemail |
 13 | | SMS       |
 14 | | GMB       |
 15 | | FB        |
 16 | | IG        |
 17 | | Email     |
 18 | | Live Chat |
 19 | 
 20 | #### Message Schema
 21 | 
 22 | ```json json_schema
 23 | {
 24 |   "type": "object",
 25 |   "properties": {
 26 |     "type": {
 27 |       "type": "string"
 28 |     },
 29 |     "locationId": {
 30 |       "type": "string"
 31 |     },
 32 |     "attachments": {
 33 |       "type": "array"
 34 |     },
 35 |     "body": {
 36 |       "type": "string"
 37 |     },
 38 |     "contactId": {
 39 |       "type": "string"
 40 |     },
 41 |     "contentType": {
 42 |       "type": "string"
 43 |     },
 44 |     "conversationId": {
 45 |       "type": "string"
 46 |     },
 47 |     "dateAdded": {
 48 |       "type": "string"
 49 |     },
 50 |     "direction": {
 51 |       "type": "string"
 52 |     },
 53 |     "messageType": {
 54 |       "type": "string"
 55 |     },
 56 |     "status": {
 57 |       "type": "string"
 58 |     },
 59 |     "messageId": {
 60 |       "type": "string"
 61 |     },
 62 |     "userId": {
 63 |       "type": "string"
 64 |     },
 65 |     "conversationProviderId": {
 66 |       "type": "string"
 67 |     },
 68 |     "callDuration": {
 69 |       "type": "number"
 70 |     },
 71 |     "callStatus": {
 72 |       "type": "string"
 73 |     }
 74 |   }
 75 | }
 76 | ```
 77 | 
 78 | #### Example(Message)
 79 | 
 80 | ```json
 81 | {
 82 |   "type": "InboundMessage",
 83 |   "locationId": "l1C08ntBrFjLS0elLIYU",
 84 |   "attachments": [],
 85 |   "body": "This is a test message",
 86 |   "contactId": "cI08i1Bls3iTB9bKgFJh",
 87 |   "contentType": "text/plain",
 88 |   "conversationId": "fcanlLgpbQgQhderivVs",
 89 |   "dateAdded": "2021-04-21T11:31:45.750Z",
 90 |   "direction": "inbound",
 91 |   "messageType": "SMS",
 92 |   "status": "delivered",
 93 |   "conversationProviderId": "cI08i1Bls3iTB9bKgF01"
 94 | }
 95 | ```
 96 | 
 97 | #### Example(Call)
 98 | 
 99 | ```json
100 | {
101 |   "type": "OutboundMessage",
102 |   "locationId": "0d48aEf7q67DAu134bpy",
103 |   "attachments": ["call recording url"],
104 |   "contactId": "gblakL5aYQC4glDtP1r2t3",
105 |   "conversationId": "SGDqZrzmwTr19d10aHkt9F",
106 |   "dateAdded": "2024-05-08T11:57:42.250Z",
107 |   "direction": "inbound",
108 |   "messageType": "CALL",
109 |   "userId": "xsmF1xxhmC92ZpL1lj7aLa",
110 |   "messageId": "tyW42xCD0HQpb3hhfLcx",
111 |   "status": "completed",
112 |   "callDuration": 120,
113 |   "callStatus": "completed"
114 | }
115 | ```
116 | 
117 | Example for unattended incoming call going to voicemail -
118 | 
119 | ```json
120 | {
121 |   "type": "InboundMessage",
122 |   "locationId": "0dalah57827q67DAuXUxbpy",
123 |   "attachments": ["voicemail url"],
124 |   "contactId": "gb7laj5aYQC4glDtP1r5",
125 |   "conversationId": "SGDqZrzmwTA5P7LHkt9F",
126 |   "dateAdded": "2024-05-08T12:00:56.193Z",
127 |   "direction": "inbound",
128 |   "messageType": "CALL",
129 |   "messageId": "QkNS0DNje0FjoLQdD5O3",
130 |   "status": "voicemail"
131 | }
132 | ```
133 | 
134 | ### Call Status Details
135 | 
136 | For inbound calls:
137 | - When the call is answered by a person, `status` will be `completed` and `callStatus` will be `completed`
138 | - When the call goes to voicemail, `status` will be `voicemail` and `callStatus` will be `voicemail`
139 | - The `callDuration` field indicates the length of the call in seconds
140 | 
141 | #### Email Message Schema
142 | 
143 | ```json json_schema
144 | {
145 |   "type": "object",
146 |   "properties": {
147 |     "type": {
148 |       "type": "string"
149 |     },
150 |     "locationId": {
151 |       "type": "string"
152 |     },
153 |     "attachments": {
154 |       "type": "array"
155 |     },
156 |     "body": {
157 |       "type": "string"
158 |     },
159 |     "contactId": {
160 |       "type": "string"
161 |     },
162 |     "conversationId": {
163 |       "type": "string"
164 |     },
165 |     "dateAdded": {
166 |       "type": "string"
167 |     },
168 |     "direction": {
169 |       "type": "string"
170 |     },
171 |     "messageType": {
172 |       "type": "string"
173 |     },
174 |     "emailMessageId": {
175 |       "type": "string"
176 |     },
177 |     "threadId": {
178 |       "type": "string"
179 |     },
180 |     "provider": {
181 |       "type": "string"
182 |     },
183 |     "to": {
184 |       "type": "string"
185 |     },
186 |     "cc": {
187 |       "type": "string"
188 |     },
189 |     "bcc": {
190 |       "type": "string"
191 |     },
192 |     "userId": {
193 |       "type": "string"
194 |     },
195 |     "conversationProviderId": {
196 |       "type": "string"
197 |     }
198 |   }
199 | }
200 | ```
201 | 
202 | #### Example(Email)
203 | 
204 | ```json
205 | {
206 |   "type": "InboundMessage",
207 |   "locationId": "kF4NJ5gzRyQF2gKFD34G",
208 |   "body": "<div style=\"font-family: verdana, geneva; font-size: 11pt;\">Testing Email Notification</div>",
209 |   "contactId": "3bN9f8LYJFG8F232XMUbfq",
210 |   "conversationId": "yCdNo6pwyTLYKgg6V2gj",
211 |   "dateAdded": "2024-01-12T12:59:04.045Z",
212 |   "direction": "inbound",
213 |   "messageType": "Email",
214 |   "emailMessageId": "sddfDSF3G56GHG",
215 |   "from": "Internal Notify <sample@email.service>",
216 |   "threadId": "sddfDSF3G56GHG",
217 |   "subject": "Order Confirmed",
218 |   "to": ["testprasath95@gmail.com"],
219 |   "conversationProviderId": "cI08i1Bls3iTB9bKgF01"
220 | }
221 | ```
222 | 
223 | ##### For listening to inbound messages
224 | 
225 | You need to change the Messaging webhook to -
226 | 
227 | <https://services.leadconnectorhq.com/conversations/providers/twilio/inbound_message>
228 | 
229 | You can find it inside your Twilio Account -
230 | 
231 | `Phone Numbers` > `Active Number` > `Click on the number` > `Messaging` > `A Message comes in`
232 | 
233 | If you want to revert, here's the old messaging webhook url -
234 | 
235 | <https://services.leadconnectorhq.com/appengine/twilio/incoming_message>
236 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoiceCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "draft",
213 |   "liveMode": false,
214 |   "amountPaid": 0,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 999,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoiceDelete.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is deleted
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "delete",
213 |   "liveMode": false,
214 |   "amountPaid": 0,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 999,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoicePaid.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is paid
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "paid",
213 |   "liveMode": false,
214 |   "amountPaid": 999,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 0,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoicePartiallyPaid.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is partially paid
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "partially_paid",
213 |   "liveMode": false,
214 |   "amountPaid": 899,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 100,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoiceSent.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is sent
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "sent",
213 |   "liveMode": false,
214 |   "amountPaid": 0,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 999,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoiceUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "draft",
213 |   "liveMode": false,
214 |   "amountPaid": 0,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 999,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/InvoiceVoid.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Invoice
  6 | 
  7 | Called whenever an invoice is marked as void
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "status": {
 19 |       "type": "string"
 20 |     },
 21 |     "liveMode": {
 22 |       "type": "boolean"
 23 |     },
 24 |     "amountPaid": {
 25 |       "type": "number"
 26 |     },
 27 |     "altId": {
 28 |       "type": "string"
 29 |     },
 30 |     "altType": {
 31 |       "type": "string"
 32 |     },
 33 |     "name": {
 34 |       "type": "string"
 35 |     },
 36 |     "businessDetails": {
 37 |       "type": "object",
 38 |       "properties": {
 39 |         "name": {
 40 |           "type": "string"
 41 |         },
 42 |         "address": {
 43 |           "type": "string"
 44 |         },
 45 |         "phoneNo": {
 46 |           "type": "string"
 47 |         },
 48 |         "website": {
 49 |           "type": "string"
 50 |         },
 51 |         "logoUrl": {
 52 |           "type": "string"
 53 |         },
 54 |         "customValues": {
 55 |           "type": "array",
 56 |           "items": {
 57 |             "type": "string"
 58 |           }
 59 |         }
 60 |       }
 61 |     },
 62 |     "invoiceNumber": {
 63 |       "type": "string"
 64 |     },
 65 |     "currency": {
 66 |       "type": "string"
 67 |     },
 68 |     "contactDetails": {
 69 |       "type": "object",
 70 |       "properties": {
 71 |         "id": {
 72 |           "type": "string"
 73 |         },
 74 |         "phoneNo": {
 75 |           "type": "string"
 76 |         },
 77 |         "email": {
 78 |           "type": "string"
 79 |         },
 80 |         "customFields": {
 81 |           "type": "array",
 82 |           "items": {
 83 |             "type": "string"
 84 |           }
 85 |         },
 86 |         "name": {
 87 |           "type": "string"
 88 |         },
 89 |         "address": {
 90 |           "type": "object",
 91 |           "properties": {
 92 |             "countryCode": {
 93 |               "type": "string"
 94 |             },
 95 |             "addressLine1": {
 96 |               "type": "string"
 97 |             },
 98 |             "addressLine2": {
 99 |               "type": "string"
100 |             },
101 |             "city": {
102 |               "type": "string"
103 |             },
104 |             "state": {
105 |               "type": "string"
106 |             },
107 |             "postalCode": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         },
112 |         "additionalEmails": {
113 |           "type": "array",
114 |           "items": {
115 |             "type": "object",
116 |             "properties": {
117 |               "email": {
118 |                 "type": "string"
119 |               }
120 |             }
121 |           }
122 |         },
123 |         "companyName": {
124 |           "type": "string"
125 |         }
126 |       }
127 |     },
128 |     "issueDate": {
129 |       "type": "string"
130 |     },
131 |     "dueDate": {
132 |       "type": "string"
133 |     },
134 |     "discount": {
135 |       "type": "object",
136 |       "properties": {
137 |         "type": {
138 |           "type": "string"
139 |         },
140 |         "value": {
141 |           "type": "number"
142 |         }
143 |       }
144 |     },
145 |     "invoiceItems": {
146 |       "type": "array",
147 |       "items": {
148 |         "type": "object",
149 |         "properties": {
150 |           "taxes": {
151 |             "type": "array"
152 |           },
153 |           "_id": {
154 |             "type": "string"
155 |           },
156 |           "productId": {
157 |             "type": "string"
158 |           },
159 |           "priceId": {
160 |             "type": "string"
161 |           },
162 |           "currency": {
163 |             "type": "string"
164 |           },
165 |           "name": {
166 |             "type": "string"
167 |           },
168 |           "qty": {
169 |             "type": "number"
170 |           },
171 |           "amount": {
172 |             "type": "number"
173 |           }
174 |         }
175 |       }
176 |     },
177 |     "total": {
178 |       "type": "number"
179 |     },
180 |     "title": {
181 |       "type": "string"
182 |     },
183 |     "amountDue": {
184 |       "type": "number"
185 |     },
186 |     "createdAt": {
187 |       "type": "string"
188 |     },
189 |     "updatedAt": {
190 |       "type": "string"
191 |     },
192 |     "totalSummary": {
193 |       "type": "object",
194 |       "properties": {
195 |         "subTotal": {
196 |           "type": "number"
197 |         },
198 |         "discount": {
199 |           "type": "number"
200 |         }
201 |       }
202 |     }
203 |   }
204 | }
205 | ```
206 | 
207 | #### Example
208 | 
209 | ```json
210 | {
211 |   "_id": "6578278e879ad2646715ba9c",
212 |   "status": "void",
213 |   "liveMode": false,
214 |   "amountPaid": 0,
215 |   "altId": "6578278e879ad2646715ba9c",
216 |   "altType": "location",
217 |   "name": "New Invoice",
218 |   "businessDetails": {
219 |     "name": "ABC Corp.",
220 |     "address": "9931 Beechwood, TX",
221 |     "phoneNo": "+1-214-559-6993",
222 |     "website": "wwww.example.com",
223 |     "logoUrl": "https://example.com/logo.png",
224 |     "customValues": ["string"]
225 |   },
226 |   "invoiceNumber": "19",
227 |   "currency": "USD",
228 |   "contactDetails": {
229 |     "id": "6578278e879ad2646715ba9c",
230 |     "phoneNo": "+1-214-559-6993",
231 |     "email": "alex@example.com",
232 |     "customFields": ["string"],
233 |     "name": "Alex",
234 |     "address": {
235 |       "countryCode": "US",
236 |       "addressLine1": "9931 Beechwood",
237 |       "addressLine2": "Beechwood",
238 |       "city": "St. Houston",
239 |       "state": "TX",
240 |       "postalCode": "559-6993"
241 |     },
242 |     "additionalEmails": [
243 |       {
244 |         "email": "alex@example.com"
245 |       }
246 |     ],
247 |     "companyName": "ABC Corp."
248 |   },
249 |   "issueDate": "2023-01-01",
250 |   "dueDate": "2023-01-01",
251 |   "discount": {
252 |     "type": "percentage",
253 |     "value": 10
254 |   },
255 |   "invoiceItems": [
256 |     {
257 |       "taxes": [],
258 |       "_id": "c6tZZU0rJBf30ZXx9Gli",
259 |       "productId": "c6tZZU0rJBf30ZXx9Gli",
260 |       "priceId": "c6tZZU0rJBf30ZXx9Gli",
261 |       "currency": "USD",
262 |       "name": "Macbook Pro",
263 |       "qty": 1,
264 |       "amount": 999
265 |     }
266 |   ],
267 |   "total": 999,
268 |   "title": "INVOICE",
269 |   "amountDue": 999,
270 |   "createdAt": "2023-12-12T09:27:42.355Z",
271 |   "updatedAt": "2023-12-12T09:27:42.355Z",
272 |   "totalSummary": {
273 |     "subTotal": 999,
274 |     "discount": 0
275 |   }
276 | }
277 | ```
278 | 


--------------------------------------------------------------------------------
/docs/webhook events/LCEmailStats.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # LC Email
  6 | 
  7 | Called whenever an email is sent, gives the statistics of the said email.
  8 | 
  9 | > Available only to Location Level Apps.
 10 | 
 11 | #### Schema
 12 | 
 13 | ```json json_schema
 14 | {
 15 |   "$schema": "http://json-schema.org/draft-07/schema#",
 16 |   "title": "LCEmailStats",
 17 |   "type": "object",
 18 |   "properties": {
 19 |     "type": {
 20 |       "type": "string"
 21 |     },
 22 |     "locationId": {
 23 |       "type": "string"
 24 |     },
 25 |     "companyId": {
 26 |       "type": "string"
 27 |     },
 28 |     "webhookPayload": {
 29 |       "type": "object",
 30 |       "properties": {
 31 |         "event": {
 32 |           "type": "string"
 33 |         },
 34 |         "id": {
 35 |           "type": "string"
 36 |         },
 37 |         "timestamp": {
 38 |           "type": "integer"
 39 |         },
 40 |         "flags": {
 41 |           "type": "object",
 42 |           "properties": {
 43 |             "is-authenticated": {
 44 |               "type": "boolean"
 45 |             },
 46 |             "is-routed": {
 47 |               "type": "boolean"
 48 |             },
 49 |             "is-big": {
 50 |               "type": "boolean"
 51 |             },
 52 |             "is-system-test": {
 53 |               "type": "boolean"
 54 |             },
 55 |             "is-test-mode": {
 56 |               "type": "boolean"
 57 |             }
 58 |           }
 59 |         },
 60 |         "message": {
 61 |           "type": "object",
 62 |           "properties": {
 63 |             "attachments": {
 64 |               "type": "array"
 65 |             },
 66 |             "headers": {
 67 |               "type": "object",
 68 |               "properties": {
 69 |                 "message-id": {
 70 |                   "type": "string"
 71 |                 },
 72 |                 "from": {
 73 |                   "type": "string"
 74 |                 },
 75 |                 "to": {
 76 |                   "type": "string"
 77 |                 }
 78 |               }
 79 |             },
 80 |             "size": {
 81 |               "type": "integer"
 82 |             }
 83 |           }
 84 |         },
 85 |         "log-level": {
 86 |           "type": "string"
 87 |         },
 88 |         "recipient": {
 89 |           "type": "string"
 90 |         },
 91 |         "recipient-domain": {
 92 |           "type": "string"
 93 |         },
 94 |         "tags": {
 95 |           "type": "array"
 96 |         },
 97 |         "recipient-provider": {
 98 |           "type": "string"
 99 |         },
100 |         "campaigns": {
101 |           "type": "array"
102 |         },
103 |         "delivery-status": {
104 |           "type": "object",
105 |           "properties": {
106 |             "attempt-no": {
107 |               "type": "integer"
108 |             },
109 |             "code": {
110 |               "type": "integer"
111 |             },
112 |             "message": {
113 |               "type": "string"
114 |             },
115 |             "description": {
116 |               "type": "string"
117 |             },
118 |             "session-seconds": {
119 |               "type": "number"
120 |             },
121 |             "enhanced-code": {
122 |               "type": "string"
123 |             },
124 |             "mx-host": {
125 |               "type": "string"
126 |             },
127 |             "utf8": {
128 |               "type": "boolean"
129 |             },
130 |             "i-first-delivery-attempt-seconds": {
131 |               "type": "number"
132 |             }
133 |           }
134 |         },
135 |         "envelope": {
136 |           "type": "object",
137 |           "properties": {
138 |             "sender": {
139 |               "type": "string"
140 |             },
141 |             "targets": {
142 |               "type": "string"
143 |             },
144 |             "transport": {
145 |               "type": "string"
146 |             },
147 |             "sending-ip": {
148 |               "type": "string"
149 |             },
150 |             "i-ip-pool-id": {
151 |               "type": "string"
152 |             },
153 |             "i-ip-pool-name": {
154 |               "type": "string"
155 |             }
156 |           }
157 |         }
158 |       }
159 |     }
160 |   }
161 | }
162 | ```
163 | 
164 | #### Example
165 | 
166 | ```json
167 | {
168 |   "type": "LCEmailStats",
169 |   "locationId": "ve9EPM428h8vShlRW1KT",
170 |   "companyId": "ve9EPM428h8vShlRW1KT",
171 |   "webhookPayload": {
172 |     "event": "delivered",
173 |     "id": "ve9EPM428h8vShlRW1KT",
174 |     "timestamp": 1714032441,
175 |     "flags": {
176 |       "is-authenticated": true,
177 |       "is-routed": false,
178 |       "is-big": false,
179 |       "is-system-test": false,
180 |       "is-test-mode": false
181 |     },
182 |     "message": {
183 |       "attachments": [],
184 |       "headers": {
185 |         "message-id": "<message-id>",
186 |         "from": "Aaditya Chakravarty <dummy@example.com>",
187 |         "to": "test@example.com"
188 |       },
189 |       "size": 1725
190 |     },
191 |     "log-level": "info",
192 |     "recipient": "test@example.com",
193 |     "recipient-domain": "example.com",
194 |     "tags": ["loc_ve9EPM428h8vShlRW1KT", "com_ve9EPM428h8vShlRW1KT", "et_other"],
195 |     "recipient-provider": "Other",
196 |     "campaigns": [],
197 |     "delivery-status": {
198 |       "attempt-no": 1,
199 |       "code": 250,
200 |       "message": "OK",
201 |       "description": "",
202 |       "session-seconds": 0.087,
203 |       "enhanced-code": "",
204 |       "mx-host": "mail.example.com",
205 |       "utf8": true,
206 |       "i-first-delivery-attempt-seconds": 0.047
207 |     },
208 |     "envelope": {
209 |       "sender": "<sender-id>",
210 |       "targets": "test@example.com",
211 |       "transport": "smtp",
212 |       "sending-ip": "127.0.0.1",
213 |       "i-ip-pool-id": "65cc66e77a4d4f63649d394c",
214 |       "i-ip-pool-name": "<pool-name>"
215 |     }
216 |   }
217 | }
218 | ```


--------------------------------------------------------------------------------
/docs/webhook events/LocationCreate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | stoplight-id: 4sn3a9hsczi43
 4 | ---
 5 | 
 6 | # Location
 7 | 
 8 | Called whenever a location is created.
 9 | 
10 | > Available only to Agency Level Apps.
11 | #### Schema
12 | 
13 | ```json json_schema
14 | {
15 |   "type": "object",
16 |   "properties": {
17 |     "type": {
18 |       "type": "string"
19 |     },
20 |     "id": {
21 |       "type": "string"
22 |     },
23 |     "name": {
24 |       "type": "string"
25 |     },
26 |     "email": {
27 |       "type": "string"
28 |     },
29 |     "stripeProductId": {
30 |       "type": "string"
31 |     },
32 |     "companyId": {
33 |       "type": "string"
34 |     }
35 |   }
36 | }
37 | ```
38 | 
39 | #### Example
40 | 
41 | ```json
42 | {
43 |   "type": "LocationCreate",
44 |   "id": "ve9EPM428h8vShlRW1KT",
45 |   "companyId": "otg8dTQqGLh3Q6iQI55w",
46 |   "name": "Loram ipsum",
47 |   "email": "mailer@example.com",
48 |   "stripeProductId": "prod_xyz123abc"
49 | }
50 | ```


--------------------------------------------------------------------------------
/docs/webhook events/LocationUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | stoplight-id: 69nmspzfqtcdk
 4 | ---
 5 | 
 6 | # Location
 7 | 
 8 | Called whenever a location is updated.
 9 | 
10 | > Available to Agency Level Apps for all sub-accounts or to specific sub-accounts.
11 | #### Schema
12 | 
13 | ```json json_schema
14 | {
15 |   "type": "object",
16 |   "properties": {
17 |     "type": {
18 |       "type": "string"
19 |     },
20 |     "id": {
21 |       "type": "string"
22 |     },
23 |     "name": {
24 |       "type": "string"
25 |     },
26 |     "email": {
27 |       "type": "string"
28 |     },
29 |     "stripeProductId": {
30 |       "type": "string"
31 |     },
32 |     "companyId": {
33 |       "type": "string"
34 |     }
35 |   }
36 | }
37 | ```
38 | 
39 | #### Example
40 | 
41 | ```json
42 | {
43 |   "type": "LocationUpdate",
44 |   "id": "ve9EPM428h8vShlRW1KT",
45 |   "companyId": "otg8dTQqGLh3Q6iQI55w",
46 |   "name": "Loram ipsum",
47 |   "email": "mailer@example.com",
48 |   "stripeProductId": "prod_xyz123abc"
49 | }
50 | ```


--------------------------------------------------------------------------------
/docs/webhook events/NoteCreate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Note
 6 | 
 7 | Called whenever a note is created
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "body": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "dateAdded": {
31 |       "type": "string"
32 |     }
33 |   }
34 | }
35 | ```
36 | 
37 | #### Example
38 | 
39 | ```json
40 | {
41 |   "type": "NoteCreate",
42 |   "locationId": "ve9EPM428h8vShlRW1KT",
43 |   "id": "otg8dTQqGLh3Q6iQI55w",
44 |   "body": "Loram ipsum",
45 |   "contactId": "CWBf1PR9LvvBkcYqiXlc",
46 |   "dateAdded": "2021-11-26T12:41:02.193Z"
47 | }
48 | ```
49 | 


--------------------------------------------------------------------------------
/docs/webhook events/NoteDelete.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Note
 6 | 
 7 | Called whenever a note is deleted
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "body": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "dateAdded": {
31 |       "type": "string"
32 |     }
33 |   }
34 | }
35 | ```
36 | 
37 | #### Example
38 | 
39 | ```json
40 | {
41 |   "type": "NoteDelete",
42 |   "locationId": "ve9EPM428h8vShlRW1KT",
43 |   "id": "otg8dTQqGLh3Q6iQI55w",
44 |   "body": "Loram ipsum",
45 |   "contactId": "CWBf1PR9LvvBkcYqiXlc",
46 |   "dateAdded": "2021-11-26T12:41:02.193Z"
47 | }
48 | ```
49 | 


--------------------------------------------------------------------------------
/docs/webhook events/NoteUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Note
 6 | 
 7 | Called whenever a note is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "body": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "dateAdded": {
31 |       "type": "string"
32 |     }
33 |   }
34 | }
35 | ```
36 | 
37 | #### Example
38 | 
39 | ```json
40 | {
41 |   "type": "NoteUpdate",
42 |   "locationId": "ve9EPM428h8vShlRW1KT",
43 |   "id": "otg8dTQqGLh3Q6iQI55w",
44 |   "body": "Loram ipsum",
45 |   "contactId": "CWBf1PR9LvvBkcYqiXlc",
46 |   "dateAdded": "2021-11-26T12:41:02.193Z"
47 | }
48 | ```


--------------------------------------------------------------------------------
/docs/webhook events/ObjectSchemaCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Object Schema Create
  6 | 
  7 | ## Overview
  8 | 
  9 | The **Object Schema Create** is triggered whenever a custom object is created. This webhook allows systems to listen for new custom objects and take appropriate actions based on the event.
 10 | 
 11 | ## Schema
 12 | 
 13 | The webhook payload follows the JSON schema below:
 14 | 
 15 | ```json json_schema
 16 | {
 17 |   "type": "object",
 18 |   "properties": {
 19 |     "labels": {
 20 |       "type": "object",
 21 |       "required": true
 22 |     },
 23 |     "description": {
 24 |       "type": "string"
 25 |     },
 26 |     "searchableProperties": {
 27 |       "type": "array"
 28 |     },
 29 |     "primaryDisplayProperty": {
 30 |       "type": "string",
 31 |       "required": true
 32 |     },
 33 |     "key": {
 34 |       "type": "string",
 35 |       "required": true
 36 |     },
 37 |     "locationId": {
 38 |       "type": "string",
 39 |       "required": true
 40 |     },
 41 |     "createdBy": {
 42 |       "type": "object"
 43 |     },
 44 |     "updatedBy": {
 45 |       "type": "object"
 46 |     },
 47 |     "timestamp": {
 48 |       "type": "string",
 49 |       "format": "date-time"
 50 |     },
 51 |     "objectType": {
 52 |       "type": "string",
 53 |       "enum": ["USER_DEFINED"],
 54 |       "default": "USER_DEFINED"
 55 |     }
 56 |   }
 57 | }
 58 | ```
 59 | 
 60 | ## Field Descriptions
 61 | 
 62 | ### `labels`
 63 | An object that defines the human-readable names associated with the custom object.
 64 | - **`singular`**: The name of the object in singular form (e.g., `"pet"`).
 65 | - **`plural`**: The name of the object in plural form (e.g., `"pets"`).
 66 | 
 67 | ### `description`
 68 | - Type: `string`
 69 | - A brief explanation of the custom object.
 70 | 
 71 | ### `searchableProperties`
 72 | - Type: `array`
 73 | - List of properties that are indexed for search.
 74 | 
 75 | ### `primaryDisplayProperty`
 76 | - Type: `string`
 77 | - Required: ✅
 78 | - The key property used to display the custom object.
 79 | 
 80 | ### `key`
 81 | - Type: `string`
 82 | - Required: ✅
 83 | - Unique identifier for the custom object type.
 84 | 
 85 | ### `locationId`
 86 | - Type: `string`
 87 | - Required: ✅
 88 | - Identifies the location associated with the custom object.
 89 | 
 90 | ### `createdBy`
 91 | - Type: `object`
 92 | - Metadata about the user who created the object.
 93 | 
 94 | ### `updatedBy`
 95 | - Type: `object`
 96 | - Metadata about the user who last updated the object.
 97 | 
 98 | ### `timestamp`
 99 | - Type: `string`
100 | - Format: `date-time`
101 | - The date and time when the object was created.
102 | 
103 | ### `objectType`
104 | - Type: `string`
105 | - Default: `"USER_DEFINED"`
106 | - Specifies the type of object, currently supports only `USER_DEFINED`.
107 | 
108 | ## Example Payload
109 | 
110 | ```json
111 | {
112 |   "id": "6798a1a18fc746e0eba2ccfe",
113 |   "labels": {
114 |     "singular": "pet",
115 |     "plural": "pets"
116 |   },
117 |   "description": "Pet's Description",
118 |   "searchableProperties": [
119 |     "custom_objects.pets.pet_name"
120 |   ],
121 |   "primaryDisplayProperty": "custom_objects.pets.pet_name",
122 |   "key": "custom_objects.pets",
123 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P",
124 |   "updatedAt": "2025-01-28T09:21:37.311Z",
125 |   "createdAt": "2025-01-28T09:21:37.311Z",
126 |   "objectType": "USER_DEFINED",
127 |   "timestamp": "2025-02-10T08:26:05.961Z"
128 | }
129 | ```
130 | 
131 | ## Additional Notes
132 | 
133 | - Ensure your webhook listener is set up to handle `POST` requests.
134 | - The payload format may change in future versions; check for updates regularly.
135 | - The `key` field should be unique within a given `locationId`.
136 | 
137 | ---
138 | 


--------------------------------------------------------------------------------
/docs/webhook events/ObjectSchemaUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Update Custom Object
  6 | 
  7 | ## Overview
  8 | 
  9 | The **Update Custom Object** is triggered whenever a custom object is Updated. This webhook allows systems to listen for new custom objects and take appropriate actions based on the event.
 10 | 
 11 | ## Schema
 12 | 
 13 | The webhook payload follows the JSON schema below:
 14 | 
 15 | ```json json_schema
 16 | {
 17 |   "type": "object",
 18 |   "properties": {
 19 |     "labels": {
 20 |       "type": "object",
 21 |       "required": true
 22 |     },
 23 |     "description": {
 24 |       "type": "string"
 25 |     },
 26 |     "searchableProperties": {
 27 |       "type": "array"
 28 |     },
 29 |     "primaryDisplayProperty": {
 30 |       "type": "string",
 31 |       "required": true
 32 |     },
 33 |     "key": {
 34 |       "type": "string",
 35 |       "required": true
 36 |     },
 37 |     "locationId": {
 38 |       "type": "string",
 39 |       "required": true
 40 |     },
 41 |     "createdBy": {
 42 |       "type": "object"
 43 |     },
 44 |     "updatedBy": {
 45 |       "type": "object"
 46 |     },
 47 |     "timestamp": {
 48 |       "type": "string",
 49 |       "format": "date-time"
 50 |     },
 51 |     "objectType": {
 52 |       "type": "string",
 53 |       "enum": ["USER_DEFINED"],
 54 |       "default": "USER_DEFINED"
 55 |     }
 56 |   }
 57 | }
 58 | ```
 59 | 
 60 | ## Field Descriptions
 61 | 
 62 | ### `labels`
 63 | An object that defines the human-readable names associated with the custom object.
 64 | - **`singular`**: The name of the object in singular form (e.g., `"pet"`).
 65 | - **`plural`**: The name of the object in plural form (e.g., `"pets"`).
 66 | 
 67 | ### `description`
 68 | - Type: `string`
 69 | - A brief explanation of the custom object.
 70 | 
 71 | ### `searchableProperties`
 72 | - Type: `array`
 73 | - List of properties that are indexed for search.
 74 | 
 75 | ### `primaryDisplayProperty`
 76 | - Type: `string`
 77 | - Required: ✅
 78 | - The key property used to display the custom object.
 79 | 
 80 | ### `key`
 81 | - Type: `string`
 82 | - Required: ✅
 83 | - Unique identifier for the custom object type.
 84 | 
 85 | ### `locationId`
 86 | - Type: `string`
 87 | - Required: ✅
 88 | - Identifies the location associated with the custom object.
 89 | 
 90 | ### `createdBy`
 91 | - Type: `object`
 92 | - Metadata about the user who created the object.
 93 | 
 94 | ### `updatedBy`
 95 | - Type: `object`
 96 | - Metadata about the user who last updated the object.
 97 | 
 98 | ### `timestamp`
 99 | - Type: `string`
100 | - Format: `date-time`
101 | - The date and time when the object was created.
102 | 
103 | ### `objectType`
104 | - Type: `string`
105 | - Default: `"USER_DEFINED"`
106 | - Specifies the type of object, currently supports only `USER_DEFINED`.
107 | 
108 | ## Example Payload
109 | 
110 | ```json
111 | {
112 |   "id": "6798a1a18fc746e0eba2ccfe",
113 |   "labels": {
114 |     "singular": "pet",
115 |     "plural": "pets"
116 |   },
117 |   "description": "Pet's Description",
118 |   "searchableProperties": [
119 |     "custom_objects.pets.pet_name"
120 |   ],
121 |   "primaryDisplayProperty": "custom_objects.pets.pet_name",
122 |   "key": "custom_objects.pets",
123 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P",
124 |   "updatedAt": "2025-01-28T09:21:37.311Z",
125 |   "createdAt": "2025-01-28T09:21:37.311Z",
126 |   "objectType": "USER_DEFINED",
127 |   "timestamp": "2025-02-10T08:26:05.961Z"
128 | }
129 | ```
130 | 
131 | ## Additional Notes
132 | 
133 | - Ensure your webhook listener is set up to handle `POST` requests.
134 | - The payload format may change in future versions; check for updates regularly.
135 | - The `key` field should be unique within a given `locationId`.
136 | 
137 | ---
138 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityAssignedToUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity's AssignedTo field is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "source": {
43 |       "type": "string"
44 |     },
45 |     "status": {
46 |       "type": "string"
47 |     },
48 |     "dateAdded": {
49 |       "type": "string"
50 |     }
51 |   }
52 | }
53 | ```
54 | 
55 | #### Example
56 | 
57 | ```json
58 | {
59 |   "type": "OpportunityAssignedToUpdate",
60 |   "locationId": "ve9EPM428h8vShlRW1KT",
61 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
62 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
63 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
64 |   "monetaryValue": 40,
65 |   "name": "Loram ipsu",
66 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
67 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
68 |   "source": "Loram ipsu",
69 |   "status": "open",
70 |   "dateAdded": "2021-11-26T12:41:02.193Z"
71 | }
72 | ```
73 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityCreate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity is created
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "pipelineStageId": {
43 |       "type": "string"
44 |     },
45 |     "source": {
46 |       "type": "string"
47 |     },
48 |     "status": {
49 |       "type": "string"
50 |     },
51 |     "dateAdded": {
52 |       "type": "string"
53 |     }
54 |   }
55 | }
56 | ```
57 | 
58 | #### Example
59 | 
60 | ```json
61 | {
62 |   "type": "OpportunityCreate",
63 |   "locationId": "ve9EPM428h8vShlRW1KT",
64 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
65 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
66 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
67 |   "monetaryValue": 40,
68 |   "name": "Loram ipsu",
69 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
70 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
71 |   "source": "Loram ipsu",
72 |   "status": "open",
73 |   "dateAdded": "2021-11-26T12:41:02.193Z"
74 | }
75 | ```
76 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityDelete.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity is deleted
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "pipelineStageId": {
43 |       "type": "string"
44 |     },
45 |     "source": {
46 |       "type": "string"
47 |     },
48 |     "status": {
49 |       "type": "string"
50 |     },
51 |     "dateAdded": {
52 |       "type": "string"
53 |     }
54 |   }
55 | }
56 | ```
57 | 
58 | #### Example
59 | 
60 | ```json
61 | {
62 |   "type": "OpportunityDelete",
63 |   "locationId": "ve9EPM428h8vShlRW1KT",
64 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
65 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
66 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
67 |   "monetaryValue": 40,
68 |   "name": "Loram ipsu",
69 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
70 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
71 |   "source": "Loram ipsu",
72 |   "status": "open",
73 |   "dateAdded": "2021-11-26T12:41:02.193Z"
74 | }
75 | ```
76 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityMonetaryValueUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity's monetary value field is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "source": {
43 |       "type": "string"
44 |     },
45 |     "status": {
46 |       "type": "string"
47 |     },
48 |     "dateAdded": {
49 |       "type": "string"
50 |     }
51 |   }
52 | }
53 | ```
54 | 
55 | #### Example
56 | 
57 | ```json
58 | {
59 |   "type": "OpportunityMonetaryValueUpdate",
60 |   "locationId": "ve9EPM428h8vShlRW1KT",
61 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
62 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
63 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
64 |   "monetaryValue": 40,
65 |   "name": "Loram ipsu",
66 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
67 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
68 |   "source": "Loram ipsu",
69 |   "status": "open",
70 |   "dateAdded": "2021-11-26T12:41:02.193Z"
71 | }
72 | ```
73 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityStageUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity's stage field is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "source": {
43 |       "type": "string"
44 |     },
45 |     "status": {
46 |       "type": "string"
47 |     },
48 |     "dateAdded": {
49 |       "type": "string"
50 |     }
51 |   }
52 | }
53 | ```
54 | 
55 | #### Example
56 | 
57 | ```json
58 | {
59 |   "type": "OpportunityStageUpdate",
60 |   "locationId": "ve9EPM428h8vShlRW1KT",
61 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
62 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
63 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
64 |   "monetaryValue": 40,
65 |   "name": "Loram ipsu",
66 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
67 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
68 |   "source": "Loram ipsu",
69 |   "status": "open",
70 |   "dateAdded": "2021-11-26T12:41:02.193Z"
71 | }
72 | ```
73 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityStatusUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity's status field is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "source": {
43 |       "type": "string"
44 |     },
45 |     "status": {
46 |       "type": "string"
47 |     },
48 |     "dateAdded": {
49 |       "type": "string"
50 |     }
51 |   }
52 | }
53 | ```
54 | 
55 | #### Example
56 | 
57 | ```json
58 | {
59 |   "type": "OpportunityStatusUpdate",
60 |   "locationId": "ve9EPM428h8vShlRW1KT",
61 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
62 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
63 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
64 |   "monetaryValue": 40,
65 |   "name": "Loram ipsu",
66 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
67 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
68 |   "source": "Loram ipsu",
69 |   "status": "open",
70 |   "dateAdded": "2021-11-26T12:41:02.193Z"
71 | }
72 | ```
73 | 


--------------------------------------------------------------------------------
/docs/webhook events/OpportunityUpdate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Opportunity
 6 | 
 7 | Called whenever an opportunity is updated
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "contactId": {
28 |       "type": "string"
29 |     },
30 |     "monetaryValue": {
31 |       "type": "number"
32 |     },
33 |     "name": {
34 |       "type": "string"
35 |     },
36 |     "pipelineId": {
37 |       "type": "string"
38 |     },
39 |     "pipelineStageId": {
40 |       "type": "string"
41 |     },
42 |     "pipelineStageId": {
43 |       "type": "string"
44 |     },
45 |     "source": {
46 |       "type": "string"
47 |     },
48 |     "status": {
49 |       "type": "string"
50 |     },
51 |     "dateAdded": {
52 |       "type": "string"
53 |     }
54 |   }
55 | }
56 | ```
57 | 
58 | #### Example
59 | 
60 | ```json
61 | {
62 |   "type": "OpportunityUpdate",
63 |   "locationId": "ve9EPM428h8vShlRW1KT",
64 |   "id": "wWhVuzqpRuOA1ZVWi4FC",
65 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
66 |   "contactId": "cJAWDskpkJHbRbhAT7bs",
67 |   "monetaryValue": 40,
68 |   "name": "Loram ipsu",
69 |   "pipelineId": "VDm7RPYC2GLUvdpKmBfC",
70 |   "pipelineStageId": "e93ba61a-53b3-45e7-985a-c7732dbcdb69",
71 |   "source": "Loram ipsu",
72 |   "status": "open",
73 |   "dateAdded": "2021-11-26T12:41:02.193Z"
74 | }
75 | ```


--------------------------------------------------------------------------------
/docs/webhook events/OrderCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Order
  6 | 
  7 | Called whenever an order is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "altId": {
 19 |       "type": "string"
 20 |     },
 21 |     "altType": {
 22 |       "type": "string"
 23 |     },
 24 |     "_id": {
 25 |       "type": "string"
 26 |     },
 27 |     "contactId": {
 28 |       "type": "string"
 29 |     },
 30 |     "contactSnapshot": {
 31 |       "type": "object",
 32 |       "properties": {
 33 |         "locationId": {
 34 |           "type": "string"
 35 |         },
 36 |         "id": {
 37 |           "type": "string"
 38 |         },
 39 |         "address1": {
 40 |           "type": "string"
 41 |         },
 42 |         "city": {
 43 |           "type": "string"
 44 |         },
 45 |         "companyName": {
 46 |           "type": "string"
 47 |         },
 48 |         "country": {
 49 |           "type": "string"
 50 |         },
 51 |         "source": {
 52 |           "type": "string"
 53 |         },
 54 |         "dateAdded": {
 55 |           "type": "string"
 56 |         },
 57 |         "dateOfBirth": {
 58 |           "type": "string"
 59 |         },
 60 |         "dnd": {
 61 |           "type": "boolean"
 62 |         },
 63 |         "email": {
 64 |           "type": "string"
 65 |         },
 66 |         "name": {
 67 |           "type": "string"
 68 |         },
 69 |         "firstName": {
 70 |           "type": "string"
 71 |         },
 72 |         "lastName": {
 73 |           "type": "string"
 74 |         },
 75 |         "phone": {
 76 |           "type": "string"
 77 |         },
 78 |         "postalCode": {
 79 |           "type": "string"
 80 |         },
 81 |         "state": {
 82 |           "type": "string"
 83 |         },
 84 |         "tags": {
 85 |           "type": "array"
 86 |         },
 87 |         "website": {
 88 |           "type": "string"
 89 |         },
 90 |         "attachments": {
 91 |           "type": "array"
 92 |         },
 93 |         "assignedTo": {
 94 |           "type": "string"
 95 |         }
 96 |       }
 97 |     },
 98 |     "status": {
 99 |       "type": "string"
100 |     },
101 |     "fulfillmentStatus": {
102 |       "type": "string"
103 |     },
104 |     "currency": {
105 |       "type": "string"
106 |     },
107 |     "amount": {
108 |       "type": "number"
109 |     },
110 |     "liveMode": {
111 |       "type": "boolean"
112 |     },
113 |     "items": {
114 |       "type": "array",
115 |       "items": {
116 |         "type": "object",
117 |         "properties": {
118 |           "name": {
119 |             "type": "string"
120 |           },
121 |           "qty": {
122 |             "type": "number"
123 |           },
124 |           "product": {
125 |             "type": "object"
126 |           },
127 |           "price": {
128 |             "type": "object"
129 |           }
130 |         }
131 |       }
132 |     },
133 |     "amountSummary": {
134 |       "type": "object",
135 |       "properties": {
136 |         "discount": {
137 |           "type": "number"
138 |         },
139 |         "shipping": {
140 |           "type": "number"
141 |         },
142 |         "subtotal": {
143 |           "type": "number"
144 |         },
145 |         "tax": {
146 |           "type": "number"
147 |         }
148 |       }
149 |     },
150 |     "taxSummary": {
151 |       "type": "array",
152 |       "items": {
153 |         "type": "object",
154 |         "properties": {
155 |           "_id": {
156 |             "type": "string"
157 |           },
158 |           "amount": {
159 |             "type": "number"
160 |           },
161 |           "calculation": {
162 |             "type": "string"
163 |           },
164 |           "name": {
165 |             "type": "string"
166 |           },
167 |           "rate": {
168 |             "type": "number"
169 |           }
170 |         }
171 |       }
172 |     },
173 |     "source": {
174 |       "type": "object",
175 |       "properties": {
176 |         "id": {
177 |           "type": "string"
178 |         },
179 |         "name": {
180 |           "type": "string"
181 |         },
182 |         "type": {
183 |           "type": "string"
184 |         },
185 |         "subType": {
186 |           "type": "string"
187 |         },
188 |         "meta": {
189 |           "type": "object"
190 |         }
191 |       }
192 |     },
193 |     "createdAt": {
194 |       "type": "string"
195 |     },
196 |     "updatedAt": {
197 |       "type": "string"
198 |     }
199 |   }
200 | }
201 | ```
202 | 
203 | #### Example
204 | 
205 | ```json
206 | {
207 |   "type": "OrderCreate",
208 |   "locationId": "Z4Bxl8J4SaPEPLq9IQ8g",
209 |   "_id": "660ed43bfdf9fc05a0de7a40",
210 |   "altId": "Z4Bxl8J4SaPEPLq9IQ8g",
211 |   "altType": "location",
212 |   "status": "pending",
213 |   "taxSummary": [
214 |     {
215 |       "_id": "63770f5cecf298787c752075",
216 |       "name": "10%",
217 |       "calculation": "exclusive",
218 |       "rate": 10,
219 |       "amount": 12.1
220 |     }
221 |   ],
222 |   "fulfillmentStatus": "unfulfilled",
223 |   "contactId": "ff2JstbQJfRuofXzeT0M",
224 |   "currency": "USD",
225 |   "amount": 150.1,
226 |   "liveMode": false,
227 |   "amountSummary": {
228 |     "subtotal": 138,
229 |     "discount": 0,
230 |     "tax": 12.1,
231 |     "shipping": 0
232 |   },
233 |   "source": {
234 |     "type": "website",
235 |     "subType": "store",
236 |     "id": "nohc1pPZJlpZTpxJfLCp",
237 |     "name": "Ecom Store",
238 |     "meta": {
239 |       "stepId": "dca58f2c-943b-4a92-b591-5d79f37df0a1",
240 |       "pageId": "IoJJMciJZIRBSzGZcjl4",
241 |       "domain": "ghl.shareef.me",
242 |       "pageUrl": "/checkout"
243 |     }
244 |   },
245 |   "createdAt": "2024-04-04T16:24:27.036Z",
246 |   "updatedAt": "2024-04-04T16:24:31.297Z",
247 |   "contactSnapshot": {
248 |     "id": "ff2JstbQJfRuofXzeT0M",
249 |     "locationId": "Z4Bxl8J4SaPEPLq9IQ8g",
250 |     "firstName": "Maxwell",
251 |     "lastName": "Schmidt",
252 |     "email": "limof@mailinator.com",
253 |     "phone": "+2389372075506",
254 |     "dnd": false,
255 |     "source": "Ecom Store",
256 |     "address1": "Velit consequuntur ",
257 |     "city": "Eius eveniet provid",
258 |     "state": "Ea provident volupt",
259 |     "postalCode": "61131",
260 |     "tags": [],
261 |     "country": "CV",
262 |     "dateAdded": "2024-04-04T16:24:21.375Z"
263 |   },
264 |   "items": [
265 |     {
266 |       "name": "Men's classic tee - XL / Charcoal",
267 |       "qty": 1,
268 |       "product": {
269 |         "_id": "660ed1ff95e1dc88d5b0d346",
270 |         "name": "Men's classic tee",
271 |         "availableInStore": true,
272 |         "taxes": [],
273 |         "variants": [
274 |           {
275 |             "id": "6xcxyf3ufjm",
276 |             "name": "Size",
277 |             "options": [
278 |               {
279 |                 "id": "pq72pwv2dd",
280 |                 "name": "S"
281 |               },
282 |               {
283 |                 "id": "oxyrtisnrch",
284 |                 "name": "M"
285 |               },
286 |               {
287 |                 "id": "e90dmjc49m7",
288 |                 "name": "L"
289 |               },
290 |               {
291 |                 "id": "100p40ngait",
292 |                 "name": "XL"
293 |               },
294 |               {
295 |                 "id": "1g0zjf4s57l",
296 |                 "name": "2XL"
297 |               },
298 |               {
299 |                 "id": "x3qgphbudz",
300 |                 "name": "3XL"
301 |               },
302 |               {
303 |                 "id": "4spdojmrhlh",
304 |                 "name": "4XL"
305 |               }
306 |             ]
307 |           },
308 |           {
309 |             "id": "06to66ownvc5",
310 |             "name": "Color",
311 |             "options": [
312 |               {
313 |                 "id": "7uhq7ky7bge",
314 |                 "name": "Maroon"
315 |               },
316 |               {
317 |                 "id": "qeac76hvr1c",
318 |                 "name": "Black"
319 |               },
320 |               {
321 |                 "id": "yhgmvthkf49",
322 |                 "name": "Navy"
323 |               },
324 |               {
325 |                 "id": "plg4elfx0sq",
326 |                 "name": "Red"
327 |               },
328 |               {
329 |                 "id": "7etdl015ljk",
330 |                 "name": "Royal"
331 |               },
332 |               {
333 |                 "id": "yj1jw5ga5bk",
334 |                 "name": "Charcoal"
335 |               }
336 |             ]
337 |           }
338 |         ]
339 |       },
340 |       "price": {
341 |         "_id": "660ed20095e1dcd37bb0d392",
342 |         "name": "XL / Charcoal",
343 |         "type": "one_time",
344 |         "currency": "USD",
345 |         "amount": 17,
346 |         "variantOptionIds": ["100p40ngait", "yj1jw5ga5bk"]
347 |       }
348 |     },
349 |     {
350 |       "name": "Tshirt - Green / S",
351 |       "qty": 1,
352 |       "product": {
353 |         "_id": "64f84dea1e2c5ae21f0714dd",
354 |         "name": "Tshirt",
355 |         "description": "<p>Here is the <span style=\"color: rgb(206, 145, 120); color: rgb(206, 145, 120)\">onDeleteMedia</span></p>",
356 |         "availableInStore": true,
357 |         "taxes": [
358 |           {
359 |             "_id": "63770f5cecf298787c752075",
360 |             "calculation": "exclusive",
361 |             "deleted": false,
362 |             "altId": "Z4Bxl8J4SaPEPLq9IQ8g",
363 |             "altType": "location",
364 |             "name": "10%",
365 |             "rate": 10,
366 |             "createdAt": "2022-11-18T04:51:40.067Z",
367 |             "updatedAt": "2022-11-18T04:51:40.067Z",
368 |             "__v": 0
369 |           }
370 |         ],
371 |         "variants": [
372 |           {
373 |             "id": "mhpty6azkx",
374 |             "name": "Color",
375 |             "options": [
376 |               {
377 |                 "id": "j1kri8rtkz",
378 |                 "name": "Red"
379 |               },
380 |               {
381 |                 "id": "qxd87i00pr",
382 |                 "name": "Green"
383 |               }
384 |             ]
385 |           },
386 |           {
387 |             "id": "14ykjkzqfe",
388 |             "name": "Size",
389 |             "options": [
390 |               {
391 |                 "id": "nk794wey5a",
392 |                 "name": "S"
393 |               }
394 |             ]
395 |           }
396 |         ]
397 |       },
398 |       "price": {
399 |         "_id": "64f84dec1e2c5ae21f0714e1",
400 |         "name": "Green / S",
401 |         "type": "one_time",
402 |         "currency": "USD",
403 |         "amount": 121,
404 |         "variantOptionIds": ["qxd87i00pr", "nk794wey5a"]
405 |       }
406 |     }
407 |   ]
408 | }
409 | ```
410 | 


--------------------------------------------------------------------------------
/docs/webhook events/OrderStatusUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Order
  6 | 
  7 | Called whenever an order's status field updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "type": {
 16 |       "type": "string"
 17 |     },
 18 |     "altId": {
 19 |       "type": "string"
 20 |     },
 21 |     "altType": {
 22 |       "type": "string"
 23 |     },
 24 |     "_id": {
 25 |       "type": "string"
 26 |     },
 27 |     "contactId": {
 28 |       "type": "string"
 29 |     },
 30 |     "contactSnapshot": {
 31 |       "type": "object",
 32 |       "properties": {
 33 |         "locationId": {
 34 |           "type": "string"
 35 |         },
 36 |         "id": {
 37 |           "type": "string"
 38 |         },
 39 |         "address1": {
 40 |           "type": "string"
 41 |         },
 42 |         "city": {
 43 |           "type": "string"
 44 |         },
 45 |         "companyName": {
 46 |           "type": "string"
 47 |         },
 48 |         "country": {
 49 |           "type": "string"
 50 |         },
 51 |         "source": {
 52 |           "type": "string"
 53 |         },
 54 |         "dateAdded": {
 55 |           "type": "string"
 56 |         },
 57 |         "dateOfBirth": {
 58 |           "type": "string"
 59 |         },
 60 |         "dnd": {
 61 |           "type": "boolean"
 62 |         },
 63 |         "email": {
 64 |           "type": "string"
 65 |         },
 66 |         "name": {
 67 |           "type": "string"
 68 |         },
 69 |         "firstName": {
 70 |           "type": "string"
 71 |         },
 72 |         "lastName": {
 73 |           "type": "string"
 74 |         },
 75 |         "phone": {
 76 |           "type": "string"
 77 |         },
 78 |         "postalCode": {
 79 |           "type": "string"
 80 |         },
 81 |         "state": {
 82 |           "type": "string"
 83 |         },
 84 |         "tags": {
 85 |           "type": "array"
 86 |         },
 87 |         "website": {
 88 |           "type": "string"
 89 |         },
 90 |         "attachments": {
 91 |           "type": "array"
 92 |         },
 93 |         "assignedTo": {
 94 |           "type": "string"
 95 |         }
 96 |       }
 97 |     },
 98 |     "status": {
 99 |       "type": "string"
100 |     },
101 |     "fulfillmentStatus": {
102 |       "type": "string"
103 |     },
104 |     "currency": {
105 |       "type": "string"
106 |     },
107 |     "amount": {
108 |       "type": "number"
109 |     },
110 |     "liveMode": {
111 |       "type": "boolean"
112 |     },
113 |     "items": {
114 |       "type": "array",
115 |       "items": {
116 |         "type": "object",
117 |         "properties": {
118 |           "name": {
119 |             "type": "string"
120 |           },
121 |           "qty": {
122 |             "type": "number"
123 |           },
124 |           "product": {
125 |             "type": "object"
126 |           },
127 |           "price": {
128 |             "type": "object"
129 |           }
130 |         }
131 |       }
132 |     },
133 |     "amountSummary": {
134 |       "type": "object",
135 |       "properties": {
136 |         "discount": {
137 |           "type": "number"
138 |         },
139 |         "shipping": {
140 |           "type": "number"
141 |         },
142 |         "subtotal": {
143 |           "type": "number"
144 |         },
145 |         "tax": {
146 |           "type": "number"
147 |         }
148 |       }
149 |     },
150 |     "taxSummary": {
151 |       "type": "array",
152 |       "items": {
153 |         "type": "object",
154 |         "properties": {
155 |           "_id": {
156 |             "type": "string"
157 |           },
158 |           "amount": {
159 |             "type": "number"
160 |           },
161 |           "calculation": {
162 |             "type": "string"
163 |           },
164 |           "name": {
165 |             "type": "string"
166 |           },
167 |           "rate": {
168 |             "type": "number"
169 |           }
170 |         }
171 |       }
172 |     },
173 |     "source": {
174 |       "type": "object",
175 |       "properties": {
176 |         "id": {
177 |           "type": "string"
178 |         },
179 |         "name": {
180 |           "type": "string"
181 |         },
182 |         "type": {
183 |           "type": "string"
184 |         },
185 |         "subType": {
186 |           "type": "string"
187 |         },
188 |         "meta": {
189 |           "type": "object"
190 |         }
191 |       }
192 |     },
193 |     "createdAt": {
194 |       "type": "string"
195 |     },
196 |     "updatedAt": {
197 |       "type": "string"
198 |     }
199 |   }
200 | }
201 | ```
202 | 
203 | #### Example
204 | 
205 | ```json
206 | {
207 |   "type": "OrderStatusUpdate",
208 |   "locationId": "Z4Bxl8J4SaPEPLq9IQ8g",
209 |   "_id": "660ed43bfdf9fc05a0de7a40",
210 |   "altId": "Z4Bxl8J4SaPEPLq9IQ8g",
211 |   "altType": "location",
212 |   "status": "completed",
213 |   "taxSummary": [
214 |     {
215 |       "_id": "63770f5cecf298787c752075",
216 |       "name": "10%",
217 |       "calculation": "exclusive",
218 |       "rate": 10,
219 |       "amount": 12.1
220 |     }
221 |   ],
222 |   "fulfillmentStatus": "unfulfilled",
223 |   "contactId": "ff2JstbQJfRuofXzeT0M",
224 |   "currency": "USD",
225 |   "amount": 150.1,
226 |   "liveMode": false,
227 |   "amountSummary": {
228 |     "subtotal": 138,
229 |     "discount": 0,
230 |     "tax": 12.1,
231 |     "shipping": 0
232 |   },
233 |   "source": {
234 |     "type": "website",
235 |     "subType": "store",
236 |     "id": "nohc1pPZJlpZTpxJfLCp",
237 |     "name": "Ecom Store",
238 |     "meta": {
239 |       "stepId": "dca58f2c-943b-4a92-b591-5d79f37df0a1",
240 |       "pageId": "IoJJMciJZIRBSzGZcjl4",
241 |       "domain": "ghl.shareef.me",
242 |       "pageUrl": "/checkout"
243 |     }
244 |   },
245 |   "createdAt": "2024-04-04T16:24:27.036Z",
246 |   "updatedAt": "2024-04-04T16:24:31.297Z",
247 |   "contactSnapshot": {
248 |     "id": "ff2JstbQJfRuofXzeT0M",
249 |     "locationId": "Z4Bxl8J4SaPEPLq9IQ8g",
250 |     "firstName": "Maxwell",
251 |     "lastName": "Schmidt",
252 |     "email": "limof@mailinator.com",
253 |     "phone": "+2389372075506",
254 |     "dnd": false,
255 |     "source": "Ecom Store",
256 |     "address1": "Velit consequuntur ",
257 |     "city": "Eius eveniet provid",
258 |     "state": "Ea provident volupt",
259 |     "postalCode": "61131",
260 |     "tags": [],
261 |     "country": "CV",
262 |     "dateAdded": "2024-04-04T16:24:21.375Z"
263 |   },
264 |   "items": [
265 |     {
266 |       "name": "Men's classic tee - XL / Charcoal",
267 |       "qty": 1,
268 |       "product": {
269 |         "_id": "660ed1ff95e1dc88d5b0d346",
270 |         "name": "Men's classic tee",
271 |         "availableInStore": true,
272 |         "taxes": [],
273 |         "variants": [
274 |           {
275 |             "id": "6xcxyf3ufjm",
276 |             "name": "Size",
277 |             "options": [
278 |               {
279 |                 "id": "pq72pwv2dd",
280 |                 "name": "S"
281 |               },
282 |               {
283 |                 "id": "oxyrtisnrch",
284 |                 "name": "M"
285 |               },
286 |               {
287 |                 "id": "e90dmjc49m7",
288 |                 "name": "L"
289 |               },
290 |               {
291 |                 "id": "100p40ngait",
292 |                 "name": "XL"
293 |               },
294 |               {
295 |                 "id": "1g0zjf4s57l",
296 |                 "name": "2XL"
297 |               },
298 |               {
299 |                 "id": "x3qgphbudz",
300 |                 "name": "3XL"
301 |               },
302 |               {
303 |                 "id": "4spdojmrhlh",
304 |                 "name": "4XL"
305 |               }
306 |             ]
307 |           },
308 |           {
309 |             "id": "06to66ownvc5",
310 |             "name": "Color",
311 |             "options": [
312 |               {
313 |                 "id": "7uhq7ky7bge",
314 |                 "name": "Maroon"
315 |               },
316 |               {
317 |                 "id": "qeac76hvr1c",
318 |                 "name": "Black"
319 |               },
320 |               {
321 |                 "id": "yhgmvthkf49",
322 |                 "name": "Navy"
323 |               },
324 |               {
325 |                 "id": "plg4elfx0sq",
326 |                 "name": "Red"
327 |               },
328 |               {
329 |                 "id": "7etdl015ljk",
330 |                 "name": "Royal"
331 |               },
332 |               {
333 |                 "id": "yj1jw5ga5bk",
334 |                 "name": "Charcoal"
335 |               }
336 |             ]
337 |           }
338 |         ]
339 |       },
340 |       "price": {
341 |         "_id": "660ed20095e1dcd37bb0d392",
342 |         "name": "XL / Charcoal",
343 |         "type": "one_time",
344 |         "currency": "USD",
345 |         "amount": 17,
346 |         "variantOptionIds": ["100p40ngait", "yj1jw5ga5bk"]
347 |       }
348 |     },
349 |     {
350 |       "name": "Tshirt - Green / S",
351 |       "qty": 1,
352 |       "product": {
353 |         "_id": "64f84dea1e2c5ae21f0714dd",
354 |         "name": "Tshirt",
355 |         "description": "<p>Here is the <span style=\"color: rgb(206, 145, 120); color: rgb(206, 145, 120)\">onDeleteMedia</span></p>",
356 |         "availableInStore": true,
357 |         "taxes": [
358 |           {
359 |             "_id": "63770f5cecf298787c752075",
360 |             "calculation": "exclusive",
361 |             "deleted": false,
362 |             "altId": "Z4Bxl8J4SaPEPLq9IQ8g",
363 |             "altType": "location",
364 |             "name": "10%",
365 |             "rate": 10,
366 |             "createdAt": "2022-11-18T04:51:40.067Z",
367 |             "updatedAt": "2022-11-18T04:51:40.067Z",
368 |             "__v": 0
369 |           }
370 |         ],
371 |         "variants": [
372 |           {
373 |             "id": "mhpty6azkx",
374 |             "name": "Color",
375 |             "options": [
376 |               {
377 |                 "id": "j1kri8rtkz",
378 |                 "name": "Red"
379 |               },
380 |               {
381 |                 "id": "qxd87i00pr",
382 |                 "name": "Green"
383 |               }
384 |             ]
385 |           },
386 |           {
387 |             "id": "14ykjkzqfe",
388 |             "name": "Size",
389 |             "options": [
390 |               {
391 |                 "id": "nk794wey5a",
392 |                 "name": "S"
393 |               }
394 |             ]
395 |           }
396 |         ]
397 |       },
398 |       "price": {
399 |         "_id": "64f84dec1e2c5ae21f0714e1",
400 |         "name": "Green / S",
401 |         "type": "one_time",
402 |         "currency": "USD",
403 |         "amount": 121,
404 |         "variantOptionIds": ["qxd87i00pr", "nk794wey5a"]
405 |       }
406 |     }
407 |   ]
408 | }
409 | ```
410 | 


--------------------------------------------------------------------------------
/docs/webhook events/OutboundMessage.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # OutboundMessage
  6 | 
  7 | Called whenever a user sends a message to a contact.
  8 | 
  9 | | Channel   |
 10 | | --------- |
 11 | | Call      |
 12 | | Voicemail |
 13 | | SMS       |
 14 | | GMB       |
 15 | | FB        |
 16 | | IG        |
 17 | | Email     |
 18 | | Live Chat |
 19 | 
 20 | #### Message Schema
 21 | 
 22 | ```json json_schema
 23 | {
 24 |   "type": "object",
 25 |   "properties": {
 26 |     "type": {
 27 |       "type": "string"
 28 |     },
 29 |     "locationId": {
 30 |       "type": "string"
 31 |     },
 32 |     "attachments": {
 33 |       "type": "array"
 34 |     },
 35 |     "body": {
 36 |       "type": "string"
 37 |     },
 38 |     "contactId": {
 39 |       "type": "string"
 40 |     },
 41 |     "contentType": {
 42 |       "type": "string"
 43 |     },
 44 |     "conversationId": {
 45 |       "type": "string"
 46 |     },
 47 |     "dateAdded": {
 48 |       "type": "string"
 49 |     },
 50 |     "direction": {
 51 |       "type": "string"
 52 |     },
 53 |     "messageType": {
 54 |       "type": "string"
 55 |     },
 56 |     "status": {
 57 |       "type": "string"
 58 |     },
 59 |     "messageId": {
 60 |       "type": "string"
 61 |     },
 62 |     "userId": {
 63 |       "type": "string"
 64 |     },
 65 |     "source": {
 66 |       "type": "string"
 67 |     },
 68 |     "conversationProviderId": {
 69 |       "type": "string"
 70 |     },
 71 |     "callDuration": {
 72 |       "type": "number"
 73 |     },
 74 |     "callStatus": {
 75 |       "type": "string"
 76 |     }
 77 |   }
 78 | }
 79 | ```
 80 | 
 81 | #### Example(Message)
 82 | 
 83 | ```json
 84 | {
 85 |   "type": "OutboundMessage",
 86 |   "locationId": "l1C08ntBrFjLS0elLIYU",
 87 |   "attachments": [],
 88 |   "body": "This is a test message",
 89 |   "contactId": "cI08i1Bls3iTB9bKgFJh",
 90 |   "contentType": "text/plain",
 91 |   "conversationId": "fcanlLgpbQgQhderivVs",
 92 |   "dateAdded": "2021-04-21T11:31:45.750Z",
 93 |   "direction": "inbound",
 94 |   "messageType": "SMS",
 95 |   "source": "app",
 96 |   "status": "delivered",
 97 |   "conversationProviderId": "cI08i1Bls3iTB9bKgF01"
 98 | }
 99 | ```
100 | 
101 | #### Example(Call and Voicemail)
102 | 
103 | ```json
104 | {
105 |   "type": "OutboundMessage",
106 |   "locationId": "0d48aEf7q67DAu134bpy", 
107 |   "attachments": ["call recording url"],
108 |   "contactId": "gblakL5aYQC4glDtP1r2t3",
109 |   "conversationId": "SGDqZrzmwTr19d10aHkt9F",
110 |   "dateAdded": "2024-05-08T11:57:42.250Z",
111 |   "direction": "outbound",
112 |   "messageType": "CALL",
113 |   "userId": "xsmF1xxhmC92ZpL1lj7aLa",
114 |   "messageId": "tyW42xCD0HQpb3hhfLcx",
115 |   "status": "completed",
116 |   "callDuration": 120,
117 |   "callStatus": "completed"
118 | }
119 | ```
120 | 
121 | ### Call Status Details
122 | 
123 | For outbound calls:
124 | - When the call is answered by a person, `status` will be `completed` and `callStatus` will be `completed`
125 | - When the call reaches voicemail, `status` will be `completed` and `callStatus` will be `voicemail`
126 | - The `callDuration` field indicates the length of the call in seconds
127 | 
128 | #### Example(Voicemail send through workflow)
129 | 
130 | ```json
131 | {
132 |   "type": "OutboundMessage",
133 |   "locationId": "0d48aEf7q67DAuXUxbpy",
134 |   "attachments": ["voicemail url"],
135 |   "contactId": "gb7xwL5aYQC4glDtP1r5",
136 |   "conversationId": "SGDqZrzmwTr5P7aHkt9F",
137 |   "dateAdded": "2024-05-08T12:04:55.828Z",
138 |   "direction": "outbound",
139 |   "messageType": "VoiceMail",
140 |   "messageId": "hhYtaQM2I9ym8qhU9CmM",
141 |   "status": "completed"
142 | }
143 | ```
144 | 
145 | #### Email Message Schema
146 | 
147 | ```json json_schema
148 | {
149 |   "type": "object",
150 |   "properties": {
151 |     "type": {
152 |       "type": "string"
153 |     },
154 |     "locationId": {
155 |       "type": "string"
156 |     },
157 |     "attachments": {
158 |       "type": "array"
159 |     },
160 |     "body": {
161 |       "type": "string"
162 |     },
163 |     "contactId": {
164 |       "type": "string"
165 |     },
166 |     "conversationId": {
167 |       "type": "string"
168 |     },
169 |     "dateAdded": {
170 |       "type": "string"
171 |     },
172 |     "direction": {
173 |       "type": "string"
174 |     },
175 |     "messageType": {
176 |       "type": "string"
177 |     },
178 |     "emailMessageId": {
179 |       "type": "string"
180 |     },
181 |     "threadId": {
182 |       "type": "string"
183 |     },
184 |     "provider": {
185 |       "type": "string"
186 |     },
187 |     "to": {
188 |       "type": "string"
189 |     },
190 |     "cc": {
191 |       "type": "string"
192 |     },
193 |     "bcc": {
194 |       "type": "string"
195 |     },
196 |     "userId": {
197 |       "type": "string"
198 |     },
199 |     "source": {
200 |       "type": "string"
201 |     },
202 |     "conversationProviderId": {
203 |       "type": "string"
204 |     }
205 |   }
206 | }
207 | ```
208 | 
209 | #### Example(Email)
210 | 
211 | ```json
212 | {
213 |   "type": "OutboundMessage",
214 |   "locationId": "kF4NJ5gzRyQF2gKFD34G",
215 |   "body": "<div style=\"font-family: verdana, geneva; font-size: 11pt;\">Testing Email Notification</div>",
216 |   "contactId": "3bN9f8LYJFG8F232XMUbfq",
217 |   "conversationId": "yCdNo6pwyTLYKgg6V2gj",
218 |   "dateAdded": "2024-01-12T12:59:04.045Z",
219 |   "direction": "outbound",
220 |   "messageType": "Email",
221 |   "emailMessageId": "sddfDSF3G56GHG",
222 |   "from": "Internal Notify <sample@email.service>",
223 |   "threadId": "sddfDSF3G56GHG",
224 |   "subject": "Order Confirmed",
225 |   "to": ["example@email.com"],
226 |   "source": "app",
227 |   "conversationProviderId": "cI08i1Bls3iTB9bKgF01"
228 | }
229 | ```
230 | 


--------------------------------------------------------------------------------
/docs/webhook events/PlanChange.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Plan Change
 6 | 
 7 | Called whenever user changes the plan for a paid app.
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string",
17 |       "example": "PLAN_CHANGE"
18 |     },
19 |     "appId": {
20 |       "type": "string",
21 |       "example": "ve9EPM428h8vShlRW1KT"
22 |     },
23 |     "locationId": {
24 |       "type": "string",
25 |       "example": "otg8dTQqGLh3Q6iQI55w"
26 |     },
27 |     "companyId": {
28 |       "type": "string",
29 |       "example": "otg8dTQqGLh3Q6iQI55w"
30 |     },
31 |     "userId": {
32 |       "type": "string",
33 |       "example": "otg8dTQqGLh3Q6iQI55w"
34 |     },
35 |     "currentPlanId": {
36 |       "type": "string",
37 |       "example": "66a0419a0dffa47fb5f8b22f"
38 |     },
39 |     "newPlanId": {
40 |       "type": "string",
41 |       "example": "66a0419a0dffa47fb5f8b22f"
42 |     }
43 |   }
44 | }
45 | ```
46 | 
47 | #### Example
48 | 
49 | ```json
50 | {
51 |   "type": "PLAN_CHANGE",
52 |   "appId": "ve9EPM428h8vShlRW1KT",
53 |   "locationId": "otg8dTQqGLh3Q6iQI55w",
54 |   "companyId": "otg8dTQqGLh3Q6iQI55w",
55 |   "userId": "otg8dTQqGLh3Q6iQI55w",
56 |   "currentPlanId": "66a0419a0dffa47fb5f8b22f",
57 |   "newPlanId": "66a0419a0dffa47fb5f8b22f"
58 | }
59 | ```
60 | 


--------------------------------------------------------------------------------
/docs/webhook events/PriceCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Price
  6 | 
  7 | Called whenever a price is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "membershipOffers": {
 19 |       "type": "array",
 20 |       "items": {
 21 |         "type": "object",
 22 |         "properties": {
 23 |           "label": {
 24 |             "type": "string"
 25 |           },
 26 |           "value": {
 27 |             "type": "string"
 28 |           },
 29 |           "_id": {
 30 |             "type": "string"
 31 |           }
 32 |         }
 33 |       }
 34 |     },
 35 |     "variantOptionIds": {
 36 |       "type": "array",
 37 |       "items": {
 38 |         "type": "string"
 39 |       }
 40 |     },
 41 |     "locationId": {
 42 |       "type": "string"
 43 |     },
 44 |     "product": {
 45 |       "type": "string"
 46 |     },
 47 |     "userId": {
 48 |       "type": "string"
 49 |     },
 50 |     "name": {
 51 |       "type": "string"
 52 |     },
 53 |     "priceType": {
 54 |       "type": "string"
 55 |     },
 56 |     "currency": {
 57 |       "type": "string"
 58 |     },
 59 |     "amount": {
 60 |       "type": "number"
 61 |     },
 62 |     "recurring": {
 63 |       "type": "object",
 64 |       "properties": {
 65 |         "interval": {
 66 |           "type": "string"
 67 |         },
 68 |         "intervalCount": {
 69 |           "type": "number"
 70 |         }
 71 |       }
 72 |     },
 73 |     "createdAt": {
 74 |       "type": "string"
 75 |     },
 76 |     "updatedAt": {
 77 |       "type": "string"
 78 |     },
 79 |     "compareAtPrice": {
 80 |       "type": "number"
 81 |     },
 82 |     "trackInventory": {
 83 |       "type": "null"
 84 |     },
 85 |     "availableQuantity": {
 86 |       "type": "number"
 87 |     },
 88 |     "allowOutOfStockPurchases": {
 89 |       "type": "boolean"
 90 |     }
 91 |   }
 92 | }
 93 | ```
 94 | 
 95 | #### Example
 96 | 
 97 | ```json{
 98 |   "_id": "655b33aa2209e60b6adb87a7",
 99 |   "membershipOffers": [
100 |     {
101 |       "label": "top_50",
102 |       "value": "50",
103 |       "_id": "655b33aa2209e60b6adb87a7"
104 |     }
105 |   ],
106 |   "variantOptionIds": [
107 |     "h4z7u0im2q8",
108 |     "h3nst2ltsnn"
109 |   ],
110 |   "locationId": "3SwdhCsvxI8Au3KsPJt6",
111 |   "product": "655b33a82209e60b6adb87a5",
112 |   "userId": "6YAtzfzpmHAdj0e8GkKp",
113 |   "name": "Red / S",
114 |   "priceType": "one_time",
115 |   "currency": "INR",
116 |   "amount": 199999,
117 |   "recurring": {
118 |     "interval": "day",
119 |     "intervalCount": 1
120 |   },
121 |   "createdAt": "2023-11-20T10:23:38.645Z",
122 |   "updatedAt": "2024-01-23T09:57:04.852Z",
123 |   "compareAtPrice": 2000000,
124 |   "trackInventory": null,
125 |   "availableQuantity": 5,
126 |   "allowOutOfStockPurchases": true
127 | }
128 | ```
129 | 


--------------------------------------------------------------------------------
/docs/webhook events/PriceDelete.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Price
  6 | 
  7 | Called whenever a price is deleted
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "membershipOffers": {
 19 |       "type": "array",
 20 |       "items": {
 21 |         "type": "object",
 22 |         "properties": {
 23 |           "label": {
 24 |             "type": "string"
 25 |           },
 26 |           "value": {
 27 |             "type": "string"
 28 |           },
 29 |           "_id": {
 30 |             "type": "string"
 31 |           }
 32 |         }
 33 |       }
 34 |     },
 35 |     "variantOptionIds": {
 36 |       "type": "array",
 37 |       "items": {
 38 |         "type": "string"
 39 |       }
 40 |     },
 41 |     "locationId": {
 42 |       "type": "string"
 43 |     },
 44 |     "product": {
 45 |       "type": "string"
 46 |     },
 47 |     "userId": {
 48 |       "type": "string"
 49 |     },
 50 |     "name": {
 51 |       "type": "string"
 52 |     },
 53 |     "type": {
 54 |       "type": "string"
 55 |     },
 56 |     "currency": {
 57 |       "type": "string"
 58 |     },
 59 |     "amount": {
 60 |       "type": "number"
 61 |     },
 62 |     "recurring": {
 63 |       "type": "object",
 64 |       "properties": {
 65 |         "interval": {
 66 |           "type": "string"
 67 |         },
 68 |         "intervalCount": {
 69 |           "type": "number"
 70 |         }
 71 |       }
 72 |     },
 73 |     "createdAt": {
 74 |       "type": "string"
 75 |     },
 76 |     "updatedAt": {
 77 |       "type": "string"
 78 |     },
 79 |     "compareAtPrice": {
 80 |       "type": "number"
 81 |     },
 82 |     "trackInventory": {
 83 |       "type": "null"
 84 |     },
 85 |     "availableQuantity": {
 86 |       "type": "number"
 87 |     },
 88 |     "allowOutOfStockPurchases": {
 89 |       "type": "boolean"
 90 |     }
 91 |   }
 92 | }
 93 | ```
 94 | 
 95 | #### Example
 96 | 
 97 | ```json{
 98 |   "_id": "655b33aa2209e60b6adb87a7",
 99 |   "membershipOffers": [
100 |     {
101 |       "label": "top_50",
102 |       "value": "50",
103 |       "_id": "655b33aa2209e60b6adb87a7"
104 |     }
105 |   ],
106 |   "variantOptionIds": [
107 |     "h4z7u0im2q8",
108 |     "h3nst2ltsnn"
109 |   ],
110 |   "locationId": "3SwdhCsvxI8Au3KsPJt6",
111 |   "product": "655b33a82209e60b6adb87a5",
112 |   "userId": "6YAtzfzpmHAdj0e8GkKp",
113 |   "name": "Red / S",
114 |   "type": "one_time",
115 |   "currency": "INR",
116 |   "amount": 199999,
117 |   "recurring": {
118 |     "interval": "day",
119 |     "intervalCount": 1
120 |   },
121 |   "createdAt": "2023-11-20T10:23:38.645Z",
122 |   "updatedAt": "2024-01-23T09:57:04.852Z",
123 |   "compareAtPrice": 2000000,
124 |   "trackInventory": null,
125 |   "availableQuantity": 5,
126 |   "allowOutOfStockPurchases": true
127 | }
128 | ```
129 | 


--------------------------------------------------------------------------------
/docs/webhook events/PriceUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Price
  6 | 
  7 | Called whenever a price is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "membershipOffers": {
 19 |       "type": "array",
 20 |       "items": {
 21 |         "type": "object",
 22 |         "properties": {
 23 |           "label": {
 24 |             "type": "string"
 25 |           },
 26 |           "value": {
 27 |             "type": "string"
 28 |           },
 29 |           "_id": {
 30 |             "type": "string"
 31 |           }
 32 |         }
 33 |       }
 34 |     },
 35 |     "variantOptionIds": {
 36 |       "type": "array",
 37 |       "items": {
 38 |         "type": "string"
 39 |       }
 40 |     },
 41 |     "locationId": {
 42 |       "type": "string"
 43 |     },
 44 |     "product": {
 45 |       "type": "string"
 46 |     },
 47 |     "userId": {
 48 |       "type": "string"
 49 |     },
 50 |     "name": {
 51 |       "type": "string"
 52 |     },
 53 |     "type": {
 54 |       "type": "string"
 55 |     },
 56 |     "currency": {
 57 |       "type": "string"
 58 |     },
 59 |     "amount": {
 60 |       "type": "number"
 61 |     },
 62 |     "recurring": {
 63 |       "type": "object",
 64 |       "properties": {
 65 |         "interval": {
 66 |           "type": "string"
 67 |         },
 68 |         "intervalCount": {
 69 |           "type": "number"
 70 |         }
 71 |       }
 72 |     },
 73 |     "createdAt": {
 74 |       "type": "string"
 75 |     },
 76 |     "updatedAt": {
 77 |       "type": "string"
 78 |     },
 79 |     "compareAtPrice": {
 80 |       "type": "number"
 81 |     },
 82 |     "trackInventory": {
 83 |       "type": "null"
 84 |     },
 85 |     "availableQuantity": {
 86 |       "type": "number"
 87 |     },
 88 |     "allowOutOfStockPurchases": {
 89 |       "type": "boolean"
 90 |     }
 91 |   }
 92 | }
 93 | ```
 94 | 
 95 | #### Example
 96 | 
 97 | ```json{
 98 |   "_id": "655b33aa2209e60b6adb87a7",
 99 |   "membershipOffers": [
100 |     {
101 |       "label": "top_50",
102 |       "value": "50",
103 |       "_id": "655b33aa2209e60b6adb87a7"
104 |     }
105 |   ],
106 |   "variantOptionIds": [
107 |     "h4z7u0im2q8",
108 |     "h3nst2ltsnn"
109 |   ],
110 |   "locationId": "3SwdhCsvxI8Au3KsPJt6",
111 |   "product": "655b33a82209e60b6adb87a5",
112 |   "userId": "6YAtzfzpmHAdj0e8GkKp",
113 |   "name": "Red / S",
114 |   "type": "one_time",
115 |   "currency": "INR",
116 |   "amount": 199999,
117 |   "recurring": {
118 |     "interval": "day",
119 |     "intervalCount": 1
120 |   },
121 |   "createdAt": "2023-11-20T10:23:38.645Z",
122 |   "updatedAt": "2024-01-23T09:57:04.852Z",
123 |   "compareAtPrice": 2000000,
124 |   "trackInventory": null,
125 |   "availableQuantity": 5,
126 |   "allowOutOfStockPurchases": true
127 | }
128 | ```
129 | 


--------------------------------------------------------------------------------
/docs/webhook events/ProductCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Product
  6 | 
  7 | Called whenever a product is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "description": {
 19 |       "type": "string"
 20 |     },
 21 |     "variants": {
 22 |       "type": "array",
 23 |       "items": {
 24 |         "type": "object",
 25 |         "properties": {
 26 |           "id": {
 27 |             "type": "string"
 28 |           },
 29 |           "name": {
 30 |             "type": "string"
 31 |           },
 32 |           "options": {
 33 |             "type": "array",
 34 |             "items": {
 35 |               "type": "object",
 36 |               "properties": {
 37 |                 "id": {
 38 |                   "type": "string"
 39 |                 },
 40 |                 "name": {
 41 |                   "type": "string"
 42 |                 }
 43 |               }
 44 |             }
 45 |           }
 46 |         }
 47 |       }
 48 |     },
 49 |     "medias": {
 50 |       "type": "array",
 51 |       "items": {
 52 |         "type": "object",
 53 |         "properties": {
 54 |           "id": {
 55 |             "type": "string"
 56 |           },
 57 |           "title": {
 58 |             "type": "string"
 59 |           },
 60 |           "url": {
 61 |             "type": "string"
 62 |           },
 63 |           "type": {
 64 |             "type": "string"
 65 |           },
 66 |           "isFeatured": {
 67 |             "type": "boolean"
 68 |           }
 69 |         }
 70 |       }
 71 |     },
 72 |     "locationId": {
 73 |       "type": "string"
 74 |     },
 75 |     "name": {
 76 |       "type": "string"
 77 |     },
 78 |     "productType": {
 79 |       "type": "string"
 80 |     },
 81 |     "availableInStore": {
 82 |       "type": "boolean"
 83 |     },
 84 |     "userId": {
 85 |       "type": "string"
 86 |     },
 87 |     "createdAt": {
 88 |       "type": "string"
 89 |     },
 90 |     "updatedAt": {
 91 |       "type": "string"
 92 |     },
 93 |     "statementDescriptor": {
 94 |       "type": "string"
 95 |     },
 96 |     "image": {
 97 |       "type": "string"
 98 |     }
 99 |   }
100 | }
101 | ```
102 | 
103 | #### Example
104 | 
105 | ```json
106 | {
107 |   "_id": "655b33a82209e60b6adb87a5",
108 |   "description": "This is a really awesome product",
109 |   "variants": [
110 |     {
111 |       "id": "38s63qmxfr4",
112 |       "name": "Size",
113 |       "options": [
114 |         {
115 |           "id": "h4z7u0im2q8",
116 |           "name": "XL"
117 |         }
118 |       ]
119 |     }
120 |   ],
121 |   "medias": [
122 |     {
123 |       "id": "fzrgusiuu0m",
124 |       "title": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png",
125 |       "url": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png",
126 |       "type": "image",
127 |       "isFeatured": true
128 |     }
129 |   ],
130 |   "locationId": "3SwdhCsvxI8Au3KsPJt6",
131 |   "name": "Awesome Product",
132 |   "productType": "PHYSICAL",
133 |   "availableInStore": true,
134 |   "userId": "6YAtzfzpmHAdj0e8GkKp",
135 |   "createdAt": "2023-11-20T10:23:36.515Z",
136 |   "updatedAt": "2024-01-23T09:57:04.846Z",
137 |   "statementDescriptor": "abcde",
138 |   "image": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
139 | }
140 | ```
141 | 


--------------------------------------------------------------------------------
/docs/webhook events/ProductDelete.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Product
  6 | 
  7 | Called whenever a product is deleted
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "description": {
 19 |       "type": "string"
 20 |     },
 21 |     "variants": {
 22 |       "type": "array",
 23 |       "items": {
 24 |         "type": "object",
 25 |         "properties": {
 26 |           "id": {
 27 |             "type": "string"
 28 |           },
 29 |           "name": {
 30 |             "type": "string"
 31 |           },
 32 |           "options": {
 33 |             "type": "array",
 34 |             "items": {
 35 |               "type": "object",
 36 |               "properties": {
 37 |                 "id": {
 38 |                   "type": "string"
 39 |                 },
 40 |                 "name": {
 41 |                   "type": "string"
 42 |                 }
 43 |               }
 44 |             }
 45 |           }
 46 |         }
 47 |       }
 48 |     },
 49 |     "medias": {
 50 |       "type": "array",
 51 |       "items": {
 52 |         "type": "object",
 53 |         "properties": {
 54 |           "id": {
 55 |             "type": "string"
 56 |           },
 57 |           "title": {
 58 |             "type": "string"
 59 |           },
 60 |           "url": {
 61 |             "type": "string"
 62 |           },
 63 |           "type": {
 64 |             "type": "string"
 65 |           },
 66 |           "isFeatured": {
 67 |             "type": "boolean"
 68 |           }
 69 |         }
 70 |       }
 71 |     },
 72 |     "locationId": {
 73 |       "type": "string"
 74 |     },
 75 |     "name": {
 76 |       "type": "string"
 77 |     },
 78 |     "productType": {
 79 |       "type": "string"
 80 |     },
 81 |     "availableInStore": {
 82 |       "type": "boolean"
 83 |     },
 84 |     "userId": {
 85 |       "type": "string"
 86 |     },
 87 |     "createdAt": {
 88 |       "type": "string"
 89 |     },
 90 |     "updatedAt": {
 91 |       "type": "string"
 92 |     },
 93 |     "statementDescriptor": {
 94 |       "type": "string"
 95 |     },
 96 |     "image": {
 97 |       "type": "string"
 98 |     }
 99 |   }
100 | }
101 | ```
102 | 
103 | #### Example
104 | 
105 | ```json
106 | {
107 |   "_id": "655b33a82209e60b6adb87a5",
108 |   "description": "This is a really awesome product",
109 |   "variants": [
110 |     {
111 |       "id": "38s63qmxfr4",
112 |       "name": "Size",
113 |       "options": [
114 |         {
115 |           "id": "h4z7u0im2q8",
116 |           "name": "XL"
117 |         }
118 |       ]
119 |     }
120 |   ],
121 |   "medias": [
122 |     {
123 |       "id": "fzrgusiuu0m",
124 |       "title": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png",
125 |       "url": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png",
126 |       "type": "image",
127 |       "isFeatured": true
128 |     }
129 |   ],
130 |   "locationId": "3SwdhCsvxI8Au3KsPJt6",
131 |   "name": "Awesome Product",
132 |   "productType": "PHYSICAL",
133 |   "availableInStore": true,
134 |   "userId": "6YAtzfzpmHAdj0e8GkKp",
135 |   "createdAt": "2023-11-20T10:23:36.515Z",
136 |   "updatedAt": "2024-01-23T09:57:04.846Z",
137 |   "statementDescriptor": "abcde",
138 |   "image": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
139 | }
140 | ```
141 | 


--------------------------------------------------------------------------------
/docs/webhook events/ProductUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # Product
  6 | 
  7 | Called whenever a product is updated
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json json_schema
 12 | {
 13 |   "type": "object",
 14 |   "properties": {
 15 |     "_id": {
 16 |       "type": "string"
 17 |     },
 18 |     "description": {
 19 |       "type": "string"
 20 |     },
 21 |     "variants": {
 22 |       "type": "array",
 23 |       "items": {
 24 |         "type": "object",
 25 |         "properties": {
 26 |           "id": {
 27 |             "type": "string"
 28 |           },
 29 |           "name": {
 30 |             "type": "string"
 31 |           },
 32 |           "options": {
 33 |             "type": "array",
 34 |             "items": {
 35 |               "type": "object",
 36 |               "properties": {
 37 |                 "id": {
 38 |                   "type": "string"
 39 |                 },
 40 |                 "name": {
 41 |                   "type": "string"
 42 |                 }
 43 |               }
 44 |             }
 45 |           }
 46 |         }
 47 |       }
 48 |     },
 49 |     "medias": {
 50 |       "type": "array",
 51 |       "items": {
 52 |         "type": "object",
 53 |         "properties": {
 54 |           "id": {
 55 |             "type": "string"
 56 |           },
 57 |           "title": {
 58 |             "type": "string"
 59 |           },
 60 |           "url": {
 61 |             "type": "string"
 62 |           },
 63 |           "type": {
 64 |             "type": "string"
 65 |           },
 66 |           "isFeatured": {
 67 |             "type": "boolean"
 68 |           }
 69 |         }
 70 |       }
 71 |     },
 72 |     "locationId": {
 73 |       "type": "string"
 74 |     },
 75 |     "name": {
 76 |       "type": "string"
 77 |     },
 78 |     "productType": {
 79 |       "type": "string"
 80 |     },
 81 |     "availableInStore": {
 82 |       "type": "boolean"
 83 |     },
 84 |     "userId": {
 85 |       "type": "string"
 86 |     },
 87 |     "createdAt": {
 88 |       "type": "string"
 89 |     },
 90 |     "updatedAt": {
 91 |       "type": "string"
 92 |     },
 93 |     "statementDescriptor": {
 94 |       "type": "string"
 95 |     },
 96 |     "image": {
 97 |       "type": "string"
 98 |     }
 99 |   }
100 | }
101 | ```
102 | 
103 | #### Example
104 | 
105 | ```json
106 | {
107 |   "_id": "655b33a82209e60b6adb87a5",
108 |   "description": "This is a really awesome product",
109 |   "variants": [
110 |     {
111 |       "id": "38s63qmxfr4",
112 |       "name": "Size",
113 |       "options": [
114 |         {
115 |           "id": "h4z7u0im2q8",
116 |           "name": "XL"
117 |         }
118 |       ]
119 |     }
120 |   ],
121 |   "medias": [
122 |     {
123 |       "id": "fzrgusiuu0m",
124 |       "title": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png",
125 |       "url": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png",
126 |       "type": "image",
127 |       "isFeatured": true
128 |     }
129 |   ],
130 |   "locationId": "3SwdhCsvxI8Au3KsPJt6",
131 |   "name": "Awesome Product",
132 |   "productType": "PHYSICAL",
133 |   "availableInStore": true,
134 |   "userId": "6YAtzfzpmHAdj0e8GkKp",
135 |   "createdAt": "2023-11-20T10:23:36.515Z",
136 |   "updatedAt": "2024-01-23T09:57:04.846Z",
137 |   "statementDescriptor": "abcde",
138 |   "image": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
139 | }
140 | ```
141 | 


--------------------------------------------------------------------------------
/docs/webhook events/ProviderOutboundMessage.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Conversation Provider - Outbound Message
 6 | 
 7 | Called whenever a user sends a message to a contact and has a custom provider as the default channel in the settings.
 8 | 
 9 | > Conversation Provider - Outbound Message differs from the structure of our other webhooks which may appear similar upon first glance however, the documentation below is accurate and only what is listed will be necessary for a successful execution.
10 | 
11 | | Channel | Supported Modules                            |
12 | | ------- | -------------------------------------------- |
13 | | SMS     | Web App, Mobile App, Workflows, Bulk Actions |
14 | | Email   | Web App, Mobile App, Workflows, Bulk Actions |
15 | 
16 | #### Schema
17 | 
18 | ```json json_schema
19 | {
20 |   "type": "object",
21 |   "properties": {
22 |     "contactId": {
23 |       "type": "string"
24 |     },
25 |     "locationId": {
26 |       "type": "string"
27 |     },
28 |     "messageId": {
29 |       "type": "string"
30 |     },
31 |     "emailMessageId": {
32 |       "type": "string"
33 |     },
34 |     "type": {
35 |       "type": "Email/SMS"
36 |     },
37 |     "attachments": {
38 |       "type": "array"
39 |     },
40 |     "message": {
41 |       "type": "string"
42 |     },
43 |     "phone": {
44 |       "type": "string"
45 |     },
46 |     "emailTo": {
47 |       "type": "string"
48 |     },
49 |     "emailFrom": {
50 |       "type": "string"
51 |     },
52 |     "html": {
53 |       "type": "string"
54 |     },
55 |     "subject": {
56 |       "type": "string"
57 |     },
58 |     "userId": {
59 |       "type": "string"
60 |     }
61 |   }
62 | }
63 | ```
64 | 
65 | #### Example for SMS
66 | 
67 | ```json
68 | {
69 |   "contactId": "GKBhT6BfwY9mjzXAU3sq",
70 |   "locationId": "GKAWb4yu7A4LSc0skQ6g",
71 |   "messageId": "GKJxs4P5L8dWc5CFUITM",
72 |   "type": "SMS",
73 |   "phone": "+15864603685",
74 |   "message": "The text message to be sent to the contact",
75 |   "attachments": ["https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"],
76 |   "userId": "GK56r6wdJDrkUPd0xsmx"
77 | }
78 | ```
79 | 
80 | #### Example for Email
81 | 
82 | ```json
83 | {
84 |   "contactId": "GKKFF0QB9gV8fGA6zEbr",
85 |   "locationId": "GKifVDyQeo7nwe27vMP0",
86 |   "messageId": "GK56r6wdJDrkUPd0xsmx",
87 |   "emailMessageId": "GK56r6wdJDrkUPd0xsmx",
88 |   "type": "Email",
89 |   "emailTo": ["abc@gmail.com"],
90 |   "emailFrom": "From Name <email@gmail.com>",
91 |   "attachments": ["https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png"],
92 |   "html": "<div style=\"font-family: verdana, geneva; font-size: 11pt;\"><p>Testing an outobund email from custom provider.</p></div>",
93 |   "subject": "Subject from Conversation Page",
94 |   "userId": "GK56r6wdJDrkUPd0xsmx"
95 | }
96 | ```
97 | 


--------------------------------------------------------------------------------
/docs/webhook events/RecordCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Response]
  3 | ---
  4 | 
  5 | # Record Create 
  6 | 
  7 | ## Overview
  8 | 
  9 | This webhook response is triggered when a new record or business is created.
 10 | 
 11 | ## Schema
 12 | 
 13 | The webhook response follows the JSON schema below:
 14 | 
 15 | ```json json_schema
 16 | {
 17 |   "type": "object",
 18 |   "properties": {
 19 |     "type": {
 20 |       "type": "string"
 21 |     },
 22 |     "locationId": {
 23 |       "type": "string"
 24 |     },
 25 |     "owners": {
 26 |       "type": "array",
 27 |       "items": {
 28 |         "type": "string"
 29 |       }
 30 |     },
 31 |     "followers": {
 32 |       "type": "array",
 33 |       "items": {
 34 |         "type": "string"
 35 |       }
 36 |     },
 37 |     "properties": {
 38 |       "type": "array",
 39 |       "items": {
 40 |         "type": "object",
 41 |         "properties": {
 42 |           "key": {
 43 |             "type": "string"
 44 |           },
 45 |           "valueString": {
 46 |             "type": "string"
 47 |           }
 48 |         }
 49 |       }
 50 |     },
 51 |     "id": {
 52 |       "type": "string"
 53 |     },
 54 |     "timestamp": {
 55 |       "type": "string",
 56 |       "format": "date-time"
 57 |     }
 58 |   }
 59 | }
 60 | ```
 61 | 
 62 | ## Field Descriptions
 63 | 
 64 | ### `type`
 65 | - Type: `string`
 66 | - Indicates the type of record created.
 67 | 
 68 | ### `locationId`
 69 | - Type: `string`
 70 | - Identifies the location associated with the created record.
 71 | 
 72 | ### `owners`
 73 | - Type: `array of strings`
 74 | - Represents the unique identifiers of users who own the record.
 75 | 
 76 | ### `followers`
 77 | - Type: `array of strings`
 78 | - List of users who are following the record for updates.
 79 | 
 80 | ### `properties`
 81 | - Type: `array of objects`
 82 | - Contains key-value pairs representing additional details about the record.
 83 |   - **`key`**: The property name.
 84 |   - **`valueString`**: The corresponding value as a string.
 85 | 
 86 | ### `id`
 87 | - Type: `string`
 88 | - Unique identifier for the created record.
 89 | 
 90 | ### `timestamp`
 91 | - Type: `string`
 92 | - Format: `date-time`
 93 | - Represents the date and time when the record was created.
 94 | 
 95 | ## Example Response
 96 | 
 97 | ```json
 98 | {
 99 |   "id": "679b8f9bde6a0c356a0311b3",
100 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P",
101 |   "timestamp": "2025-02-10T08:26:05.961Z",
102 |   "owners": ["60d5ec49f72b2a001f5f9d91"],
103 |   "followers": ["60d5ec49f72b2a001f5f9d93", "60d5ec49f72b2a001f5f9d94"],
104 |   "properties": [
105 |     {
106 |       "key": "pet_name",
107 |       "valueString": "buddy"
108 |     }
109 |   ]
110 | }
111 | ```
112 | 
113 | ## Additional Notes
114 | 
115 | - Ensure that your webhook listener is capable of processing `POST` requests.
116 | - The `owners` and `followers` fields help in managing record access and tracking.
117 | - The `properties` array allows extensibility by enabling dynamic field storage.
118 | 
119 | ---
120 | 


--------------------------------------------------------------------------------
/docs/webhook events/RecordDelete.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Delete Record
 6 | 
 7 | ## Overview
 8 | The `Delete Record` is triggered whenever a record or business (company) is deleted from the system.
 9 | 
10 | ## Schema
11 | The webhook payload follows a structured JSON schema, which defines the format and expected data types of the event payload.
12 | 
13 | ```json json_schema
14 | {
15 |   "type": "object",
16 |   "properties": {
17 |     "type": {
18 |       "type": "string"
19 |     },
20 |     "locationId": {
21 |       "type": "string"
22 |     },
23 |     "owners": {
24 |       "type": "array",
25 |       "items": {
26 |         "type": "string"
27 |       }
28 |     },
29 |     "followers": {
30 |       "type": "array",
31 |       "items": {
32 |         "type": "string"
33 |       }
34 |     },
35 |     "properties": {
36 |       "type": "array",
37 |       "items": {
38 |         "type": "object",
39 |         "properties": {
40 |           "key": {
41 |             "type": "string"
42 |           },
43 |           "valueString": {
44 |             "type": "string"
45 |           }
46 |         }
47 |       }
48 |     },
49 |     "id": {
50 |       "type": "string"
51 |     },
52 |     "timestamp": {
53 |       "type": "string",
54 |       "format": "date-time"
55 |     }
56 |   }
57 | }
58 | ```
59 | 
60 | ## Explanation of Fields
61 | 
62 | | Field        | Type     | Description |
63 | |-------------|----------|-------------|
64 | | `type` | `string` | The type of event. |
65 | | `locationId` | `string` | Unique identifier for the location associated with the deleted record. |
66 | | `owners` | `array of strings` | List of user IDs that were assigned as owners of the deleted record. |
67 | | `followers` | `array of strings` | List of user IDs that were following the deleted record. |
68 | | `properties` | `array of objects` | Key-value pairs containing additional metadata about the record. |
69 | | `id` | `string` | Unique identifier of the deleted record. |
70 | | `timestamp` | `string (ISO 8601 format)` | The timestamp when the deletion event occurred. |
71 | 
72 | ## Example Payload
73 | 
74 | ```json
75 | {
76 |   "id": "679b8f9bde6a0c356a0311b3",
77 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P",
78 |   "timestamp": "2025-02-10T08:26:05.961Z",
79 |   "owners": ["60d5ec49f72b2a001f5f9d91"],
80 |   "followers": ["60d5ec49f72b2a001f5f9d93", "60d5ec49f72b2a001f5f9d94"],
81 |   "properties": [
82 |     {
83 |       "key": "pet_name",
84 |       "valueString": "buddy"
85 |     }
86 |   ]
87 | }
88 | ```
89 | 
90 | 
91 | 
92 | 


--------------------------------------------------------------------------------
/docs/webhook events/RecordUpdate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Response]
  3 | ---
  4 | 
  5 | # Record Update 
  6 | 
  7 | ## Overview
  8 | 
  9 | This webhook response is triggered when a record or business is updated.
 10 | ## Schema
 11 | 
 12 | The webhook response follows the JSON schema below:
 13 | 
 14 | ```json json_schema
 15 | {
 16 |   "type": "object",
 17 |   "properties": {
 18 |     "type": {
 19 |       "type": "string"
 20 |     },
 21 |     "locationId": {
 22 |       "type": "string"
 23 |     },
 24 |     "owners": {
 25 |       "type": "array",
 26 |       "items": {
 27 |         "type": "string"
 28 |       }
 29 |     },
 30 |     "followers": {
 31 |       "type": "array",
 32 |       "items": {
 33 |         "type": "string"
 34 |       }
 35 |     },
 36 |     "properties": {
 37 |       "type": "array",
 38 |       "items": {
 39 |         "type": "object",
 40 |         "properties": {
 41 |           "key": {
 42 |             "type": "string"
 43 |           },
 44 |           "valueString": {
 45 |             "type": "string"
 46 |           }
 47 |         }
 48 |       }
 49 |     },
 50 |     "id": {
 51 |       "type": "string"
 52 |     },
 53 |     "timestamp": {
 54 |       "type": "string",
 55 |       "format": "date-time"
 56 |     }
 57 |   }
 58 | }
 59 | ```
 60 | 
 61 | ## Field Descriptions
 62 | 
 63 | ### `type`
 64 | - Type: `string`
 65 | - Indicates the type of record created.
 66 | 
 67 | ### `locationId`
 68 | - Type: `string`
 69 | - Identifies the location associated with the created record.
 70 | 
 71 | ### `owners`
 72 | - Type: `array of strings`
 73 | - Represents the unique identifiers of users who own the record.
 74 | 
 75 | ### `followers`
 76 | - Type: `array of strings`
 77 | - List of users who are following the record for updates.
 78 | 
 79 | ### `properties`
 80 | - Type: `array of objects`
 81 | - Contains key-value pairs representing additional details about the record.
 82 |   - **`key`**: The property name.
 83 |   - **`valueString`**: The corresponding value as a string.
 84 | 
 85 | ### `id`
 86 | - Type: `string`
 87 | - Unique identifier for the created record.
 88 | 
 89 | ### `timestamp`
 90 | - Type: `string`
 91 | - Format: `date-time`
 92 | - Represents the date and time when the record was created.
 93 | 
 94 | ## Example Response
 95 | 
 96 | ```json
 97 | {
 98 |   "id": "679b8f9bde6a0c356a0311b3",
 99 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P",
100 |   "timestamp": "2025-02-10T08:26:05.961Z",
101 |   "owners": ["60d5ec49f72b2a001f5f9d91"],
102 |   "followers": ["60d5ec49f72b2a001f5f9d93", "60d5ec49f72b2a001f5f9d94"],
103 |   "properties": [
104 |     {
105 |       "key": "pet_name",
106 |       "valueString": "buddy"
107 |     }
108 |   ]
109 | }
110 | ```
111 | 
112 | ## Additional Notes
113 | 
114 | - Ensure that your webhook listener is capable of processing `POST` requests.
115 | - The `owners` and `followers` fields help in managing record access and tracking.
116 | - The `properties` array allows extensibility by enabling dynamic field storage.
117 | 
118 | ---
119 | 


--------------------------------------------------------------------------------
/docs/webhook events/RelationCreate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Response]
 3 | ---
 4 | 
 5 | # Relation Create
 6 | 
 7 | ## Overview
 8 | 
 9 | This webhook response is triggered when an relation between objects is created. 
10 | 
11 | For example, in a business management system, a company may want to establish an association between a custom object record and a contact. In this case:
12 | - The **second object** (contact) would represent a person associated with the custom object record.
13 | - The **first object** (custom object) could represent an entity such as a project or a transaction.
14 | - The system allows for dynamic relationships between entities, facilitating better data management.
15 | 
16 | ## Schema
17 | 
18 | The webhook response follows the JSON schema below:
19 | 
20 | ```json json_schema
21 | {
22 |   "type": "object",
23 |   "properties": {
24 |     "id": {
25 |       "type": "string"
26 |     },
27 |     "firstObjectKey": {
28 |       "type": "string"
29 |     },
30 |     "firstRecordId": {
31 |       "type": "string"
32 |     },
33 |     "secondObjectKey": {
34 |       "type": "string"
35 |     },
36 |     "secondRecordId": {
37 |       "type": "string"
38 |     },
39 |     "associationId": {
40 |       "type": "string"
41 |     },
42 |     "locationId": {
43 |       "type": "string"
44 |     }
45 |   }
46 | }
47 | ```
48 | 
49 | ## Field Descriptions
50 | 
51 | ### `id`
52 | - Type: `string`
53 | - Unique identifier for the created association.
54 | 
55 | ### `firstObjectKey`
56 | - Type: `string`
57 | - Key representing the first object in the association.
58 | 
59 | ### `firstRecordId`
60 | - Type: `string`
61 | - Identifier of the first object’s specific record.
62 | 
63 | ### `secondObjectKey`
64 | - Type: `string`
65 | - Key representing the second object in the association.
66 | 
67 | ### `secondRecordId`
68 | - Type: `string`
69 | - Identifier of the second object’s specific record.
70 | 
71 | ### `associationId`
72 | - Type: `string`
73 | - Unique identifier for the association that was created.
74 | 
75 | ### `locationId`
76 | - Type: `string`
77 | - Identifies the location associated with the created association.
78 | 
79 | 
80 | ## Example Response
81 | 
82 | ```json
83 | {
84 |   "id": "67ae0d741119d218c9d0c477",
85 |   "firstObjectKey": "custom_objects.mad",
86 |   "firstRecordId": "67a349a79b28947ec1f65bb5",
87 |   "secondObjectKey": "contact",
88 |   "secondRecordId": "emqfhnG3g9D9chy9inTz",
89 |   "associationId": "669e5795add2094075906c65",
90 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P"
91 | }
92 | ```
93 | 
94 | ## Additional Notes
95 | 
96 | - The `firstObjectKey` and `secondObjectKey` define the relationship between the created entities.
97 | 


--------------------------------------------------------------------------------
/docs/webhook events/RelationDelete.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Response]
 3 | ---
 4 | 
 5 | # Relation Delete
 6 | 
 7 | ## Overview
 8 | 
 9 | This webhook response is triggered when an existing relation between objects is deleted. 
10 | 
11 | For example, in a business management system, a company may want to remove an relation between a custom object record and a contact. In this case:
12 | - The **first object** (custom object record) could represent an entity such as a project or a transaction.
13 | - The **second object** (contact) would represent a person associated with the custom object.
14 | 
15 | 
16 | ## Schema
17 | 
18 | The webhook response follows the JSON schema below:
19 | 
20 | ```json json_schema
21 | {
22 |   "type": "object",
23 |   "properties": {
24 |     "id": {
25 |       "type": "string"
26 |     },
27 |     "firstObjectKey": {
28 |       "type": "string"
29 |     },
30 |     "firstRecordId": {
31 |       "type": "string"
32 |     },
33 |     "secondObjectKey": {
34 |       "type": "string"
35 |     },
36 |     "secondRecordId": {
37 |       "type": "string"
38 |     },
39 |     "associationId": {
40 |       "type": "string"
41 |     },
42 |     "locationId": {
43 |       "type": "string"
44 |     },
45 | 
46 |   }
47 | }
48 | ```
49 | 
50 | ## Field Descriptions
51 | 
52 | ### `id`
53 | - Type: `string`
54 | - Unique identifier for the deleted association.
55 | 
56 | ### `firstObjectKey`
57 | - Type: `string`
58 | - Key representing the first object in the association.
59 | 
60 | ### `firstRecordId`
61 | - Type: `string`
62 | - Identifier of the first object’s specific record.
63 | 
64 | ### `secondObjectKey`
65 | - Type: `string`
66 | - Key representing the second object in the association.
67 | 
68 | ### `secondRecordId`
69 | - Type: `string`
70 | - Identifier of the second object’s specific record.
71 | 
72 | ### `associationId`
73 | - Type: `string`
74 | - Unique identifier for the association that was deleted.
75 | 
76 | ### `locationId`
77 | - Type: `string`
78 | - Identifies the location associated with the deleted association.
79 | 
80 | 
81 | ## Example Response
82 | 
83 | ```json
84 | {
85 |   "id": "67ae0d741119d218c9d0c477",
86 |   "firstObjectKey": "custom_objects.mad",
87 |   "firstRecordId": "67a349a79b28947ec1f65bb5",
88 |   "secondObjectKey": "contact",
89 |   "secondRecordId": "emqfhnG3g9D9chy9inTz",
90 |   "associationId": "669e5795add2094075906c65",
91 |   "locationId": "eHy2cOSZxMQzQ6Yyvl8P"
92 | }
93 | ```
94 | 
95 | ## Additional Notes
96 | 
97 | - The `firstObjectKey` and `secondObjectKey` define the relationship between the deleted entities.
98 | 
99 | 


--------------------------------------------------------------------------------
/docs/webhook events/TaskComplete.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Task
 6 | 
 7 | Called whenever a task is completed
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "body": {
28 |       "type": "string"
29 |     },
30 |     "contactId": {
31 |       "type": "string"
32 |     },
33 |     "title": {
34 |       "type": "string"
35 |     },
36 |     "dateAdded": {
37 |       "type": "string"
38 |     },
39 |     "dueDate": {
40 |       "type": "string"
41 |     }
42 |   }
43 | }
44 | ```
45 | 
46 | #### Example
47 | 
48 | ```json
49 | {
50 |   "type": "TaskComplete",
51 |   "locationId": "ve9EPM428h8vShlRW1KT",
52 |   "id": "5HrB1IbmnKMBXloldFuP",
53 |   "assignedTo": "bNl8QNGXhIQJLv8eeASQ",
54 |   "body": "testing",
55 |   "contactId": "WFwVrSSjZ2CNHbZThQX2",
56 |   "dateAdded": "2021-11-29T13:37:28.304Z",
57 |   "dueDate": "2021-12-22T06:55:00.000Z",
58 |   "title": "test"
59 | }
60 | ```
61 | 


--------------------------------------------------------------------------------
/docs/webhook events/TaskCreate.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Task
 6 | 
 7 | Called whenever a task is created
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "body": {
28 |       "type": "string"
29 |     },
30 |     "contactId": {
31 |       "type": "string"
32 |     },
33 |     "title": {
34 |       "type": "string"
35 |     },
36 |     "dateAdded": {
37 |       "type": "string"
38 |     },
39 |     "dueDate": {
40 |       "type": "string"
41 |     }
42 |   }
43 | }
44 | ```
45 | 
46 | #### Example
47 | 
48 | ```json
49 | {
50 |   "type": "TaskCreate",
51 |   "locationId": "ve9EPM428h8vShlRW1KT",
52 |   "id": "UlRWGLSXh0ji5qbiGu4i",
53 |   "assignedTo": "63e4qiWDsFJjOYAC8phG",
54 |   "body": "Loram ipsum",
55 |   "contactId": "CWBf1PR9LvvBkcYqiXlc",
56 |   "title": "Loram ipsum",
57 |   "dateAdded": "2021-11-26T12:41:02.193Z",
58 |   "dueDate": "2021-11-26T12:41:02.193Z"
59 | }
60 | ```
61 | 


--------------------------------------------------------------------------------
/docs/webhook events/TaskDelete.md:
--------------------------------------------------------------------------------
 1 | ---
 2 | tags: [Webhook Events]
 3 | ---
 4 | 
 5 | # Task
 6 | 
 7 | Called whenever a task is deleted
 8 | 
 9 | #### Schema
10 | 
11 | ```json json_schema
12 | {
13 |   "type": "object",
14 |   "properties": {
15 |     "type": {
16 |       "type": "string"
17 |     },
18 |     "locationId": {
19 |       "type": "string"
20 |     },
21 |     "id": {
22 |       "type": "string"
23 |     },
24 |     "assignedTo": {
25 |       "type": "string"
26 |     },
27 |     "body": {
28 |       "type": "string"
29 |     },
30 |     "contactId": {
31 |       "type": "string"
32 |     },
33 |     "title": {
34 |       "type": "string"
35 |     },
36 |     "dateAdded": {
37 |       "type": "string"
38 |     },
39 |     "dueDate": {
40 |       "type": "string"
41 |     }
42 |   }
43 | }
44 | ```
45 | 
46 | #### Example
47 | 
48 | ```json
49 | {
50 |   "type": "TaskDelete",
51 |   "locationId": "ve9EPM428h8vShlRW1KT",
52 |   "id": "UlRWGLSXh0ji5qbiGu4i",
53 |   "assignedTo": "63e4qiWDsFJjOYAC8phG",
54 |   "body": "Loram ipsum",
55 |   "contactId": "CWBf1PR9LvvBkcYqiXlc",
56 |   "title": "Loram ipsum",
57 |   "dateAdded": "2021-11-26T12:41:02.193Z",
58 |   "dueDate": "2021-11-26T12:41:02.193Z"
59 | }
60 | ```
61 | 


--------------------------------------------------------------------------------
/docs/webhook events/UserCreate.md:
--------------------------------------------------------------------------------
  1 | ---
  2 | tags: [Webhook Events]
  3 | ---
  4 | 
  5 | # User
  6 | 
  7 | Called whenever a user is created
  8 | 
  9 | #### Schema
 10 | 
 11 | ```json
 12 | {
 13 |   "type": "string",
 14 |   "locationId": "string",
 15 |   "companyId": "string",
 16 |   "id": "string",
 17 |   "firstName": "string",
 18 |   "lastName": "string",
 19 |   "email": "string",
 20 |   "phone": "string",
 21 |   "extension": "string",
 22 |   "role": "string",
 23 |   "permissions": {
 24 |     "adwordsReportingEnabled": "boolean",
 25 |     "affiliateManagerEnabled": "boolean",
 26 |     "agentReportingEnabled": "boolean",
 27 |     "appointmentsEnabled": "boolean",
 28 |     "assignedDataOnly": "boolean",
 29 |     "attributionsReportingEnabled": "boolean",
 30 |     "bloggingEnabled": "boolean",
 31 |     "botService": "boolean",
 32 |     "bulkRequestsEnabled": "boolean",
 33 |     "campaignsEnabled": "boolean",
 34 |     "campaignsReadOnly": "boolean",
 35 |     "cancelSubscriptionEnabled": "boolean",
 36 |     "communitiesEnabled": "boolean",
 37 |     "contactsEnabled": "boolean",
 38 |     "contentAiEnabled": "boolean",
 39 |     "conversationsEnabled": "boolean",
 40 |     "dashboardStatsEnabled": "boolean",
 41 |     "facebookAdsReportingEnabled": "boolean",
 42 |     "funnelsEnabled": "boolean",
 43 |     "invoiceEnabled": "boolean",
 44 |     "leadValueEnabled": "boolean",
 45 |     "marketingEnabled": "boolean",
 46 |     "membershipEnabled": "boolean",
 47 |     "onlineListingsEnabled": "boolean",
 48 |     "opportunitiesEnabled": "boolean",
 49 |     "paymentsEnabled": "boolean",
 50 |     "phoneCallEnabled": "boolean",
 51 |     "recordPaymentEnabled": "boolean",
 52 |     "refundsEnabled": "boolean",
 53 |     "reviewsEnabled": "boolean",
 54 |     "settingsEnabled": "boolean",
 55 |     "socialPlanner": "boolean",
 56 |     "tagsEnabled": "boolean",
 57 |     "triggersEnabled": "boolean",
 58 |     "websitesEnabled": "boolean",
 59 |     "workflowsEnabled": "boolean",
 60 |     "workflowsReadOnly": "boolean"
 61 |   },
 62 |   "locations": ["string"]
 63 | }
 64 | ```
 65 | 
 66 | #### Example (For Sub Account User)
 67 | 
 68 | ```json
 69 | {
 70 |   "type": "UserCreate",
 71 |   "locationId": "ve9EPM428h8vShlRW1KT",
 72 |   "id": "ve9EPM428h8vShlRW1KT",
 73 |   "firstName": "John",
 74 |   "lastName": "Doe",
 75 |   "email": "john.doe+2@example.com",
 76 |   "phone": "+13235559998",
 77 |   "extension": "111",
 78 |   "role": "user",
 79 |   "permissions": {
 80 |     "adwordsReportingEnabled": true,
 81 |     "affiliateManagerEnabled": false,
 82 |     "agentReportingEnabled": true,
 83 |     "appointmentsEnabled": true,
 84 |     "assignedDataOnly": false,
 85 |     "attributionsReportingEnabled": true,
 86 |     "bloggingEnabled": true,
 87 |     "botService": false,
 88 |     "bulkRequestsEnabled": true,
 89 |     "campaignsEnabled": true,
 90 |     "campaignsReadOnly": false,
 91 |     "cancelSubscriptionEnabled": true,
 92 |     "communitiesEnabled": true,
 93 |     "contactsEnabled": true,
 94 |     "contentAiEnabled": true,
 95 |     "conversationsEnabled": true,
 96 |     "dashboardStatsEnabled": true,
 97 |     "facebookAdsReportingEnabled": true,
 98 |     "funnelsEnabled": true,
 99 |     "invoiceEnabled": true,
100 |     "leadValueEnabled": true,
101 |     "marketingEnabled": true,
102 |     "membershipEnabled": true,
103 |     "onlineListingsEnabled": true,
104 |     "opportunitiesEnabled": true,
105 |     "paymentsEnabled": true,
106 |     "phoneCallEnabled": true,
107 |     "recordPaymentEnabled": true,
108 |     "refundsEnabled": true,
109 |     "reviewsEnabled": true,
110 |     "settingsEnabled": true,
111 |     "socialPlanner": true,
112 |     "tagsEnabled": true,
113 |     "triggersEnabled": true,
114 |     "websitesEnabled": true,
115 |     "workflowsEnabled": true,
116 |     "workflowsReadOnly": false
117 |   }
118 | }
119 | ```
120 | 
121 | #### Example (For Agency User)
122 | 
123 | ```json
124 | {
125 |   "type": "UserCreate",
126 |   "companyId": "ve9EPM428h8vShlRW1KT",
127 |   "id": "ve9EPM428h8vShlRW1KT",
128 |   "firstName": "John",
129 |   "lastName": "Doe",
130 |   "email": "john.doe+3@example.com",
131 |   "phone": "+13235559997",
132 |   "extension": "1112",
133 |   "role": "admin",
134 |   "permissions": {
135 |     "adwordsReportingEnabled": true,
136 |     "affiliateManagerEnabled": false,
137 |     "agentReportingEnabled": true,
138 |     "appointmentsEnabled": true,
139 |     "assignedDataOnly": false,
140 |     "attributionsReportingEnabled": true,
141 |     "bloggingEnabled": true,
142 |     "botService": false,
143 |     "bulkRequestsEnabled": true,
144 |     "campaignsEnabled": true,
145 |     "campaignsReadOnly": false,
146 |     "cancelSubscriptionEnabled": true,
147 |     "communitiesEnabled": true,
148 |     "contactsEnabled": true,
149 |     "contentAiEnabled": true,
150 |     "conversationsEnabled": true,
151 |     "dashboardStatsEnabled": true,
152 |     "facebookAdsReportingEnabled": true,
153 |     "funnelsEnabled": true,
154 |     "invoiceEnabled": true,
155 |     "leadValueEnabled": true,
156 |     "marketingEnabled": true,
157 |     "membershipEnabled": true,
158 |     "onlineListingsEnabled": true,
159 |     "opportunitiesEnabled": true,
160 |     "paymentsEnabled": true,
161 |     "phoneCallEnabled": true,
162 |     "recordPaymentEnabled": true,
163 |     "refundsEnabled": true,
164 |     "reviewsEnabled": true,
165 |     "settingsEnabled": true,
166 |     "socialPlanner": true,
167 |     "tagsEnabled": true,
168 |     "triggersEnabled": true,
169 |     "websitesEnabled": true,
170 |     "workflowsEnabled": true,
171 |     "workflowsReadOnly": false
172 |   },
173 |   "locations": ["ve9EPM428h8vShlRW1KT"]
174 | }
175 | ```


--------------------------------------------------------------------------------
/email-isv/email-isv.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/email/verify": {
  5 |       "post": {
  6 |         "operationId": "verify-email",
  7 |         "summary": "Email Verification",
  8 |         "description": "Verify Email",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "locationId",
 34 |             "required": true,
 35 |             "in": "query",
 36 |             "example": "5DP4iH6HLkQsiKESj6rh",
 37 |             "description": "Location Id, The email verification charges will be deducted from this location (if rebilling is enabled) / company wallet",
 38 |             "schema": {
 39 |               "type": "string"
 40 |             }
 41 |           }
 42 |         ],
 43 |         "requestBody": {
 44 |           "required": true,
 45 |           "content": {
 46 |             "application/json": {
 47 |               "schema": {
 48 |                 "$ref": "#/components/schemas/VerificationBodyDto"
 49 |               }
 50 |             }
 51 |           }
 52 |         },
 53 |         "responses": {
 54 |           "201": {
 55 |             "description": "Successful response",
 56 |             "content": {
 57 |               "application/json": {
 58 |                 "schema": {
 59 |                   "oneOf": [
 60 |                     {
 61 |                       "$ref": "#/components/schemas/EmailVerifiedResponseDto"
 62 |                     },
 63 |                     {
 64 |                       "$ref": "#/components/schemas/EmailNotVerifiedResponseDto"
 65 |                     }
 66 |                   ]
 67 |                 }
 68 |               }
 69 |             }
 70 |           },
 71 |           "400": {
 72 |             "description": "Bad Request",
 73 |             "content": {
 74 |               "application/json": {
 75 |                 "schema": {
 76 |                   "$ref": "#/components/schemas/BadRequestDTO"
 77 |                 }
 78 |               }
 79 |             }
 80 |           },
 81 |           "401": {
 82 |             "description": "Unauthorized",
 83 |             "content": {
 84 |               "application/json": {
 85 |                 "schema": {
 86 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 87 |                 }
 88 |               }
 89 |             }
 90 |           },
 91 |           "422": {
 92 |             "description": "Unprocessable Entity",
 93 |             "content": {
 94 |               "application/json": {
 95 |                 "schema": {
 96 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 97 |                 }
 98 |               }
 99 |             }
100 |           }
101 |         },
102 |         "tags": [
103 |           "Email Verification"
104 |         ],
105 |         "security": [
106 |           {
107 |             "Location-Access": []
108 |           }
109 |         ]
110 |       }
111 |     }
112 |   },
113 |   "info": {
114 |     "title": "Email ISV API",
115 |     "description": "Documentation for Email ISV API",
116 |     "version": "1.0",
117 |     "contact": {}
118 |   },
119 |   "tags": [
120 |     {
121 |       "name": "email-isv",
122 |       "description": "Documentation for Email ISV API"
123 |     }
124 |   ],
125 |   "servers": [
126 |     {
127 |       "url": "https://services.leadconnectorhq.com"
128 |     }
129 |   ],
130 |   "components": {
131 |     "securitySchemes": {
132 |       "bearer": {
133 |         "scheme": "bearer",
134 |         "bearerFormat": "JWT",
135 |         "name": "Authorization",
136 |         "in": "header",
137 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
138 |         "type": "http"
139 |       },
140 |       "Location-Access": {
141 |         "scheme": "bearer",
142 |         "bearerFormat": "JWT",
143 |         "name": "Authorization",
144 |         "in": "header",
145 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
146 |         "type": "http"
147 |       },
148 |       "Agency-Access": {
149 |         "scheme": "bearer",
150 |         "bearerFormat": "JWT",
151 |         "name": "Authorization",
152 |         "in": "header",
153 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
154 |         "type": "http"
155 |       }
156 |     },
157 |     "schemas": {
158 |       "BadRequestDTO": {
159 |         "type": "object",
160 |         "properties": {
161 |           "statusCode": {
162 |             "type": "number",
163 |             "example": 400
164 |           },
165 |           "message": {
166 |             "type": "string",
167 |             "example": "Bad Request"
168 |           }
169 |         }
170 |       },
171 |       "UnauthorizedDTO": {
172 |         "type": "object",
173 |         "properties": {
174 |           "statusCode": {
175 |             "type": "number",
176 |             "example": 401
177 |           },
178 |           "message": {
179 |             "type": "string",
180 |             "example": "Invalid token: access token is invalid"
181 |           },
182 |           "error": {
183 |             "type": "string",
184 |             "example": "Unauthorized"
185 |           }
186 |         }
187 |       },
188 |       "EmailNotVerifiedResponseDto": {
189 |         "type": "object",
190 |         "properties": {
191 |           "verified": {
192 |             "type": "boolean",
193 |             "example": false,
194 |             "description": "Email verification not processed"
195 |           },
196 |           "message": {
197 |             "type": "string",
198 |             "example": "Validation is disabled / proper config not found",
199 |             "description": "Email verification failure message"
200 |           },
201 |           "address": {
202 |             "type": "string",
203 |             "example": "abc@xyz.com",
204 |             "description": "Email address"
205 |           }
206 |         },
207 |         "required": [
208 |           "verified"
209 |         ]
210 |       },
211 |       "LeadConnectorRecomandationDto": {
212 |         "type": "object",
213 |         "properties": {
214 |           "isEmailValid": {
215 |             "type": "boolean",
216 |             "example": false,
217 |             "description": "Email verification status"
218 |           }
219 |         }
220 |       },
221 |       "EmailVerifiedResponseDto": {
222 |         "type": "object",
223 |         "properties": {
224 |           "reason": {
225 |             "example": [
226 |               "mailbox_does_not_exist"
227 |             ],
228 |             "description": "Reason for email verification failure",
229 |             "type": "array",
230 |             "items": {
231 |               "type": "string"
232 |             }
233 |           },
234 |           "result": {
235 |             "type": "string",
236 |             "example": "undeliverable",
237 |             "enum": [
238 |               "deliverable",
239 |               "undeliverable",
240 |               "do_not_send",
241 |               "unknown",
242 |               "catch_all"
243 |             ],
244 |             "description": "Email verification result"
245 |           },
246 |           "risk": {
247 |             "type": "string",
248 |             "example": "low",
249 |             "enum": [
250 |               "high",
251 |               "low",
252 |               "medium",
253 |               "unknown"
254 |             ],
255 |             "description": "Risk level of email sending to bounce"
256 |           },
257 |           "address": {
258 |             "type": "string",
259 |             "example": "abc@xyz.com",
260 |             "description": "Email address"
261 |           },
262 |           "leadconnectorRecomendation": {
263 |             "example": {
264 |               "isEmailValid": false
265 |             },
266 |             "description": "Lead Connector email verification recomendation",
267 |             "allOf": [
268 |               {
269 |                 "$ref": "#/components/schemas/LeadConnectorRecomandationDto"
270 |               }
271 |             ]
272 |           }
273 |         },
274 |         "required": [
275 |           "result",
276 |           "risk",
277 |           "address",
278 |           "leadconnectorRecomendation"
279 |         ]
280 |       },
281 |       "VerificationBodyDto": {
282 |         "type": "object",
283 |         "properties": {
284 |           "type": {
285 |             "type": "string",
286 |             "example": "email",
287 |             "enum": [
288 |               "email",
289 |               "contact"
290 |             ],
291 |             "description": "Email Verification type"
292 |           },
293 |           "verify": {
294 |             "type": "string",
295 |             "example": "abc@xyz.com",
296 |             "description": "Email Verification recepient (email address / contactId)"
297 |           }
298 |         },
299 |         "required": [
300 |           "type",
301 |           "verify"
302 |         ]
303 |       },
304 |       "UnprocessableDTO": {
305 |         "type": "object",
306 |         "properties": {
307 |           "statusCode": {
308 |             "type": "number",
309 |             "example": 422
310 |           },
311 |           "message": {
312 |             "example": [
313 |               "Unprocessable Entity"
314 |             ],
315 |             "type": "array",
316 |             "items": {
317 |               "type": "string"
318 |             }
319 |           },
320 |           "error": {
321 |             "type": "string",
322 |             "example": "Unprocessable Entity"
323 |           }
324 |         }
325 |       }
326 |     }
327 |   }
328 | }


--------------------------------------------------------------------------------
/emails/emails.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/emails/schedule": {
   5 |       "get": {
   6 |         "operationId": "fetch-campaigns",
   7 |         "summary": "Get Campaigns",
   8 |         "description": "Get Campaigns",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "locationId",
  22 |             "required": true,
  23 |             "in": "query",
  24 |             "example": "ohjiah0wdg3bzmzacvd6",
  25 |             "description": "Location ID to fetch campaigns from",
  26 |             "schema": {
  27 |               "type": "string"
  28 |             }
  29 |           },
  30 |           {
  31 |             "name": "limit",
  32 |             "required": false,
  33 |             "in": "query",
  34 |             "example": "7",
  35 |             "description": "Maximum number of campaigns to return. Defaults to 10",
  36 |             "schema": {
  37 |               "type": "number"
  38 |             }
  39 |           },
  40 |           {
  41 |             "name": "offset",
  42 |             "required": false,
  43 |             "in": "query",
  44 |             "example": "0",
  45 |             "description": "Number of campaigns to skip for pagination",
  46 |             "schema": {
  47 |               "type": "number"
  48 |             }
  49 |           },
  50 |           {
  51 |             "name": "status",
  52 |             "required": false,
  53 |             "in": "query",
  54 |             "description": "Filter by schedule status",
  55 |             "schema": {
  56 |               "default": "active",
  57 |               "enum": [
  58 |                 "active",
  59 |                 "pause",
  60 |                 "complete",
  61 |                 "cancelled",
  62 |                 "retry",
  63 |                 "draft",
  64 |                 "resend-scheduled"
  65 |               ],
  66 |               "type": "string"
  67 |             }
  68 |           },
  69 |           {
  70 |             "name": "emailStatus",
  71 |             "required": false,
  72 |             "in": "query",
  73 |             "description": "Filter by email delivery status",
  74 |             "schema": {
  75 |               "default": "complete",
  76 |               "enum": [
  77 |                 "all",
  78 |                 "not-started",
  79 |                 "paused",
  80 |                 "cancelled",
  81 |                 "processing",
  82 |                 "resumed",
  83 |                 "next-drip",
  84 |                 "complete",
  85 |                 "success",
  86 |                 "error",
  87 |                 "waiting",
  88 |                 "queued",
  89 |                 "queueing",
  90 |                 "reading",
  91 |                 "scheduled"
  92 |               ],
  93 |               "type": "string"
  94 |             }
  95 |           },
  96 |           {
  97 |             "name": "name",
  98 |             "required": false,
  99 |             "in": "query",
 100 |             "example": "Black Friday Campaign",
 101 |             "description": "Filter campaigns by name",
 102 |             "schema": {
 103 |               "type": "string"
 104 |             }
 105 |           },
 106 |           {
 107 |             "name": "parentId",
 108 |             "required": false,
 109 |             "in": "query",
 110 |             "example": "folder123",
 111 |             "description": "Filter campaigns by parent folder ID",
 112 |             "schema": {
 113 |               "type": "string"
 114 |             }
 115 |           },
 116 |           {
 117 |             "name": "limitedFields",
 118 |             "required": false,
 119 |             "default": false,
 120 |             "example": "false",
 121 |             "in": "query",
 122 |             "description": "When true, returns only essential campaign fields like id, templateDataDownloadUrl, updatedAt, type, templateType, templateId, downloadUrl and isPlainText. When false, returns complete campaign data including meta information, bulkRequestStatusInfo, ABTestInfo, resendScheduleInfo and all other campaign properties",
 123 |             "schema": {
 124 |               "type": "boolean"
 125 |             }
 126 |           },
 127 |           {
 128 |             "name": "archived",
 129 |             "required": false,
 130 |             "example": "false",
 131 |             "in": "query",
 132 |             "description": "Filter archived campaigns",
 133 |             "schema": {
 134 |               "type": "boolean"
 135 |             }
 136 |           },
 137 |           {
 138 |             "name": "campaignsOnly",
 139 |             "required": false,
 140 |             "default": false,
 141 |             "example": "false",
 142 |             "in": "query",
 143 |             "description": "Return only campaigns, excluding folders",
 144 |             "schema": {
 145 |               "type": "boolean"
 146 |             }
 147 |           },
 148 |           {
 149 |             "name": "showStats",
 150 |             "required": false,
 151 |             "default": true,
 152 |             "example": "true",
 153 |             "in": "query",
 154 |             "description": "When true, returns campaign statistics including delivered count, opened count, clicked count and revenue if available for the campaign. When false, returns campaign data without statistics.",
 155 |             "schema": {
 156 |               "type": "boolean"
 157 |             }
 158 |           },
 159 |           {
 160 |             "name": "Version",
 161 |             "in": "header",
 162 |             "description": "API Version",
 163 |             "required": true,
 164 |             "schema": {
 165 |               "type": "string",
 166 |               "enum": [
 167 |                 "2021-07-28"
 168 |               ]
 169 |             }
 170 |           }
 171 |         ],
 172 |         "responses": {
 173 |           "200": {
 174 |             "description": "Success",
 175 |             "content": {
 176 |               "application/json": {
 177 |                 "schema": {
 178 |                   "$ref": "#/components/schemas/ScheduleFetchSuccessfulDTO"
 179 |                 }
 180 |               }
 181 |             }
 182 |           },
 183 |           "400": {
 184 |             "description": "Bad Request",
 185 |             "content": {
 186 |               "application/json": {
 187 |                 "schema": {
 188 |                   "$ref": "#/components/schemas/BadRequestDTO"
 189 |                 }
 190 |               }
 191 |             }
 192 |           },
 193 |           "401": {
 194 |             "description": "Unauthorized",
 195 |             "content": {
 196 |               "application/json": {
 197 |                 "schema": {
 198 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 199 |                 }
 200 |               }
 201 |             }
 202 |           },
 203 |           "403": {
 204 |             "description": "The token does not have access to this location",
 205 |             "content": {
 206 |               "application/json": {
 207 |                 "schema": {
 208 |                   "$ref": "#/components/schemas/InvalidLocationDTO"
 209 |                 }
 210 |               }
 211 |             }
 212 |           },
 213 |           "404": {
 214 |             "description": "Not Found",
 215 |             "content": {
 216 |               "application/json": {
 217 |                 "schema": {
 218 |                   "$ref": "#/components/schemas/NotFoundDTO"
 219 |                 }
 220 |               }
 221 |             }
 222 |           },
 223 |           "422": {
 224 |             "description": "Unprocessable Entity",
 225 |             "content": {
 226 |               "application/json": {
 227 |                 "schema": {
 228 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 229 |                 }
 230 |               }
 231 |             }
 232 |           }
 233 |         },
 234 |         "tags": [
 235 |           "Campaigns"
 236 |         ]
 237 |       }
 238 |     },
 239 |     "/emails/builder": {
 240 |       "post": {
 241 |         "operationId": "create-template",
 242 |         "summary": "Create a new template",
 243 |         "description": "Create a new template",
 244 |         "parameters": [
 245 |           {
 246 |             "name": "Authorization",
 247 |             "in": "header",
 248 |             "description": "Access Token",
 249 |             "required": true,
 250 |             "schema": {
 251 |               "type": "string",
 252 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 253 |             }
 254 |           },
 255 |           {
 256 |             "name": "Version",
 257 |             "in": "header",
 258 |             "description": "API Version",
 259 |             "required": true,
 260 |             "schema": {
 261 |               "type": "string",
 262 |               "enum": [
 263 |                 "2021-07-28"
 264 |               ]
 265 |             }
 266 |           }
 267 |         ],
 268 |         "requestBody": {
 269 |           "required": true,
 270 |           "content": {
 271 |             "application/json": {
 272 |               "schema": {
 273 |                 "$ref": "#/components/schemas/CreateBuilderDto"
 274 |               }
 275 |             }
 276 |           }
 277 |         },
 278 |         "responses": {
 279 |           "201": {
 280 |             "description": "Success",
 281 |             "content": {
 282 |               "application/json": {
 283 |                 "schema": {
 284 |                   "$ref": "#/components/schemas/CreateBuilderSuccesfulResponseDto"
 285 |                 }
 286 |               }
 287 |             }
 288 |           },
 289 |           "400": {
 290 |             "description": "Bad Request",
 291 |             "content": {
 292 |               "application/json": {
 293 |                 "schema": {
 294 |                   "$ref": "#/components/schemas/BadRequestDTO"
 295 |                 }
 296 |               }
 297 |             }
 298 |           },
 299 |           "401": {
 300 |             "description": "Unauthorized",
 301 |             "content": {
 302 |               "application/json": {
 303 |                 "schema": {
 304 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 305 |                 }
 306 |               }
 307 |             }
 308 |           },
 309 |           "404": {
 310 |             "description": "Not Found"
 311 |           },
 312 |           "422": {
 313 |             "description": "Unprocessable Entity",
 314 |             "content": {
 315 |               "application/json": {
 316 |                 "schema": {
 317 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 318 |                 }
 319 |               }
 320 |             }
 321 |           }
 322 |         },
 323 |         "tags": [
 324 |           "Templates"
 325 |         ]
 326 |       },
 327 |       "get": {
 328 |         "operationId": "fetch-template",
 329 |         "summary": "Fetch email templates",
 330 |         "description": "Fetch email templates by location id",
 331 |         "parameters": [
 332 |           {
 333 |             "name": "Authorization",
 334 |             "in": "header",
 335 |             "description": "Access Token",
 336 |             "required": true,
 337 |             "schema": {
 338 |               "type": "string",
 339 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 340 |             }
 341 |           },
 342 |           {
 343 |             "name": "locationId",
 344 |             "required": true,
 345 |             "in": "query",
 346 |             "example": "ve9EPM428h8vShlRW1KT",
 347 |             "schema": {
 348 |               "type": "string"
 349 |             }
 350 |           },
 351 |           {
 352 |             "name": "limit",
 353 |             "required": false,
 354 |             "in": "query",
 355 |             "schema": {
 356 |               "default": 10,
 357 |               "type": "string"
 358 |             }
 359 |           },
 360 |           {
 361 |             "name": "offset",
 362 |             "required": false,
 363 |             "in": "query",
 364 |             "schema": {
 365 |               "default": 0,
 366 |               "type": "string"
 367 |             }
 368 |           },
 369 |           {
 370 |             "name": "search",
 371 |             "required": false,
 372 |             "in": "query",
 373 |             "schema": {
 374 |               "default": "",
 375 |               "type": "string"
 376 |             }
 377 |           },
 378 |           {
 379 |             "name": "sortByDate",
 380 |             "required": false,
 381 |             "in": "query",
 382 |             "schema": {
 383 |               "default": "desc",
 384 |               "type": "string"
 385 |             }
 386 |           },
 387 |           {
 388 |             "name": "archived",
 389 |             "required": false,
 390 |             "in": "query",
 391 |             "schema": {
 392 |               "default": false,
 393 |               "type": "string"
 394 |             }
 395 |           },
 396 |           {
 397 |             "name": "builderVersion",
 398 |             "required": false,
 399 |             "in": "query",
 400 |             "schema": {
 401 |               "default": "2",
 402 |               "enum": [
 403 |                 "1",
 404 |                 "2"
 405 |               ],
 406 |               "type": "string"
 407 |             }
 408 |           },
 409 |           {
 410 |             "name": "name",
 411 |             "required": false,
 412 |             "in": "query",
 413 |             "schema": {
 414 |               "default": "",
 415 |               "type": "string"
 416 |             }
 417 |           },
 418 |           {
 419 |             "name": "parentId",
 420 |             "required": false,
 421 |             "in": "query",
 422 |             "schema": {
 423 |               "default": "",
 424 |               "type": "string"
 425 |             }
 426 |           },
 427 |           {
 428 |             "name": "originId",
 429 |             "required": false,
 430 |             "in": "query",
 431 |             "example": "ve9EPM428h8vShlRW1KT",
 432 |             "schema": {
 433 |               "type": "string"
 434 |             }
 435 |           },
 436 |           {
 437 |             "name": "templatesOnly",
 438 |             "required": false,
 439 |             "in": "query",
 440 |             "schema": {
 441 |               "default": false,
 442 |               "type": "string"
 443 |             }
 444 |           },
 445 |           {
 446 |             "name": "Version",
 447 |             "in": "header",
 448 |             "description": "API Version",
 449 |             "required": true,
 450 |             "schema": {
 451 |               "type": "string",
 452 |               "enum": [
 453 |                 "2021-07-28"
 454 |               ]
 455 |             }
 456 |           }
 457 |         ],
 458 |         "responses": {
 459 |           "200": {
 460 |             "description": "Success",
 461 |             "content": {
 462 |               "application/json": {
 463 |                 "schema": {
 464 |                   "$ref": "#/components/schemas/FetchBuilderSuccesfulResponseDto"
 465 |                 }
 466 |               }
 467 |             }
 468 |           },
 469 |           "400": {
 470 |             "description": "Bad Request",
 471 |             "content": {
 472 |               "application/json": {
 473 |                 "schema": {
 474 |                   "$ref": "#/components/schemas/BadRequestDTO"
 475 |                 }
 476 |               }
 477 |             }
 478 |           },
 479 |           "401": {
 480 |             "description": "Unauthorized",
 481 |             "content": {
 482 |               "application/json": {
 483 |                 "schema": {
 484 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 485 |                 }
 486 |               }
 487 |             }
 488 |           },
 489 |           "404": {
 490 |             "description": "Not Found"
 491 |           },
 492 |           "422": {
 493 |             "description": "Unprocessable Entity",
 494 |             "content": {
 495 |               "application/json": {
 496 |                 "schema": {
 497 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 498 |                 }
 499 |               }
 500 |             }
 501 |           }
 502 |         },
 503 |         "tags": [
 504 |           "Templates"
 505 |         ]
 506 |       }
 507 |     },
 508 |     "/emails/builder/{locationId}/{templateId}": {
 509 |       "delete": {
 510 |         "operationId": "delete-template",
 511 |         "summary": "Delete a template",
 512 |         "description": "Delete a template",
 513 |         "parameters": [
 514 |           {
 515 |             "name": "Authorization",
 516 |             "in": "header",
 517 |             "description": "Access Token",
 518 |             "required": true,
 519 |             "schema": {
 520 |               "type": "string",
 521 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 522 |             }
 523 |           },
 524 |           {
 525 |             "name": "locationId",
 526 |             "required": true,
 527 |             "in": "path",
 528 |             "example": "ve9EPM428h8vShlRW1KT",
 529 |             "schema": {
 530 |               "type": "string"
 531 |             }
 532 |           },
 533 |           {
 534 |             "name": "templateId",
 535 |             "required": true,
 536 |             "in": "path",
 537 |             "example": "zYy3YOUuHxgomU1uYJty",
 538 |             "schema": {
 539 |               "type": "string"
 540 |             }
 541 |           },
 542 |           {
 543 |             "name": "Version",
 544 |             "in": "header",
 545 |             "description": "API Version",
 546 |             "required": true,
 547 |             "schema": {
 548 |               "type": "string",
 549 |               "enum": [
 550 |                 "2021-07-28"
 551 |               ]
 552 |             }
 553 |           }
 554 |         ],
 555 |         "responses": {
 556 |           "200": {
 557 |             "description": "Success",
 558 |             "content": {
 559 |               "application/json": {
 560 |                 "schema": {
 561 |                   "$ref": "#/components/schemas/DeleteBuilderSuccesfulResponseDto"
 562 |                 }
 563 |               }
 564 |             }
 565 |           },
 566 |           "400": {
 567 |             "description": "Bad Request",
 568 |             "content": {
 569 |               "application/json": {
 570 |                 "schema": {
 571 |                   "$ref": "#/components/schemas/BadRequestDTO"
 572 |                 }
 573 |               }
 574 |             }
 575 |           },
 576 |           "401": {
 577 |             "description": "Unauthorized",
 578 |             "content": {
 579 |               "application/json": {
 580 |                 "schema": {
 581 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 582 |                 }
 583 |               }
 584 |             }
 585 |           },
 586 |           "404": {
 587 |             "description": "Not Found"
 588 |           },
 589 |           "422": {
 590 |             "description": "Unprocessable Entity",
 591 |             "content": {
 592 |               "application/json": {
 593 |                 "schema": {
 594 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 595 |                 }
 596 |               }
 597 |             }
 598 |           }
 599 |         },
 600 |         "tags": [
 601 |           "Templates"
 602 |         ]
 603 |       }
 604 |     },
 605 |     "/emails/builder/data": {
 606 |       "post": {
 607 |         "operationId": "update-template",
 608 |         "summary": "Update a template",
 609 |         "description": "Update a template",
 610 |         "parameters": [
 611 |           {
 612 |             "name": "Authorization",
 613 |             "in": "header",
 614 |             "description": "Access Token",
 615 |             "required": true,
 616 |             "schema": {
 617 |               "type": "string",
 618 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 619 |             }
 620 |           },
 621 |           {
 622 |             "name": "Version",
 623 |             "in": "header",
 624 |             "description": "API Version",
 625 |             "required": true,
 626 |             "schema": {
 627 |               "type": "string",
 628 |               "enum": [
 629 |                 "2021-07-28"
 630 |               ]
 631 |             }
 632 |           }
 633 |         ],
 634 |         "requestBody": {
 635 |           "required": true,
 636 |           "content": {
 637 |             "application/json": {
 638 |               "schema": {
 639 |                 "$ref": "#/components/schemas/SaveBuilderDataDto"
 640 |               }
 641 |             }
 642 |           }
 643 |         },
 644 |         "responses": {
 645 |           "201": {
 646 |             "description": "Success",
 647 |             "content": {
 648 |               "application/json": {
 649 |                 "schema": {
 650 |                   "$ref": "#/components/schemas/BuilderUpdateSuccessfulDTO"
 651 |                 }
 652 |               }
 653 |             }
 654 |           },
 655 |           "400": {
 656 |             "description": "Bad Request",
 657 |             "content": {
 658 |               "application/json": {
 659 |                 "schema": {
 660 |                   "$ref": "#/components/schemas/BadRequestDTO"
 661 |                 }
 662 |               }
 663 |             }
 664 |           },
 665 |           "401": {
 666 |             "description": "Unauthorized",
 667 |             "content": {
 668 |               "application/json": {
 669 |                 "schema": {
 670 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 671 |                 }
 672 |               }
 673 |             }
 674 |           },
 675 |           "404": {
 676 |             "description": "Not Found"
 677 |           },
 678 |           "422": {
 679 |             "description": "Unprocessable Entity",
 680 |             "content": {
 681 |               "application/json": {
 682 |                 "schema": {
 683 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 684 |                 }
 685 |               }
 686 |             }
 687 |           }
 688 |         },
 689 |         "tags": [
 690 |           "Templates"
 691 |         ]
 692 |       }
 693 |     }
 694 |   },
 695 |   "info": {
 696 |     "title": "Email API",
 697 |     "description": "Documentation for emails API",
 698 |     "version": "1.0",
 699 |     "contact": {}
 700 |   },
 701 |   "tags": [
 702 |     {
 703 |       "name": "Emails",
 704 |       "description": "Documentation for emails API"
 705 |     }
 706 |   ],
 707 |   "servers": [
 708 |     {
 709 |       "url": "https://services.leadconnectorhq.com"
 710 |     }
 711 |   ],
 712 |   "components": {
 713 |     "securitySchemes": {
 714 |       "bearer": {
 715 |         "scheme": "bearer",
 716 |         "bearerFormat": "JWT",
 717 |         "name": "Authorization",
 718 |         "in": "header",
 719 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 720 |         "type": "http"
 721 |       },
 722 |       "Location-Access": {
 723 |         "scheme": "bearer",
 724 |         "bearerFormat": "JWT",
 725 |         "name": "Authorization",
 726 |         "in": "header",
 727 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 728 |         "type": "http"
 729 |       },
 730 |       "Agency-Access": {
 731 |         "scheme": "bearer",
 732 |         "bearerFormat": "JWT",
 733 |         "name": "Authorization",
 734 |         "in": "header",
 735 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
 736 |         "type": "http"
 737 |       }
 738 |     },
 739 |     "schemas": {
 740 |       "ScheduleDto": {
 741 |         "type": "object",
 742 |         "properties": {
 743 |           "name": {
 744 |             "type": "string",
 745 |             "example": "Untitled new campaign"
 746 |           },
 747 |           "repeatAfter": {
 748 |             "type": "string"
 749 |           },
 750 |           "id": {
 751 |             "type": "string"
 752 |           },
 753 |           "parentId": {
 754 |             "type": "string"
 755 |           },
 756 |           "childCount": {
 757 |             "type": "number"
 758 |           },
 759 |           "campaignType": {
 760 |             "type": "string"
 761 |           },
 762 |           "bulkActionVersion": {
 763 |             "type": "string"
 764 |           },
 765 |           "_id": {
 766 |             "type": "string"
 767 |           },
 768 |           "status": {
 769 |             "type": "string"
 770 |           },
 771 |           "sendDays": {
 772 |             "type": "array",
 773 |             "items": {
 774 |               "type": "string"
 775 |             }
 776 |           },
 777 |           "deleted": {
 778 |             "type": "boolean"
 779 |           },
 780 |           "migrated": {
 781 |             "type": "boolean"
 782 |           },
 783 |           "archived": {
 784 |             "type": "boolean"
 785 |           },
 786 |           "hasTracking": {
 787 |             "type": "boolean"
 788 |           },
 789 |           "isPlainText": {
 790 |             "type": "boolean"
 791 |           },
 792 |           "hasUtmTracking": {
 793 |             "type": "boolean"
 794 |           },
 795 |           "enableResendToUnopened": {
 796 |             "type": "boolean"
 797 |           },
 798 |           "locationId": {
 799 |             "type": "string"
 800 |           },
 801 |           "templateId": {
 802 |             "type": "string"
 803 |           },
 804 |           "templateType": {
 805 |             "type": "string"
 806 |           },
 807 |           "createdAt": {
 808 |             "type": "string"
 809 |           },
 810 |           "updatedAt": {
 811 |             "type": "string"
 812 |           },
 813 |           "__v": {
 814 |             "type": "number"
 815 |           },
 816 |           "documentId": {
 817 |             "type": "string"
 818 |           },
 819 |           "downloadUrl": {
 820 |             "type": "string"
 821 |           },
 822 |           "templateDataDownloadUrl": {
 823 |             "type": "string"
 824 |           },
 825 |           "child": {
 826 |             "type": "array",
 827 |             "items": {
 828 |               "type": "string"
 829 |             }
 830 |           }
 831 |         },
 832 |         "required": [
 833 |           "name",
 834 |           "repeatAfter",
 835 |           "id",
 836 |           "parentId",
 837 |           "childCount",
 838 |           "campaignType",
 839 |           "bulkActionVersion",
 840 |           "_id",
 841 |           "status",
 842 |           "sendDays",
 843 |           "deleted",
 844 |           "migrated",
 845 |           "archived",
 846 |           "hasTracking",
 847 |           "isPlainText",
 848 |           "hasUtmTracking",
 849 |           "enableResendToUnopened",
 850 |           "locationId",
 851 |           "templateId",
 852 |           "templateType",
 853 |           "createdAt",
 854 |           "updatedAt",
 855 |           "__v",
 856 |           "documentId",
 857 |           "downloadUrl",
 858 |           "templateDataDownloadUrl",
 859 |           "child"
 860 |         ]
 861 |       },
 862 |       "ScheduleFetchSuccessfulDTO": {
 863 |         "type": "object",
 864 |         "properties": {
 865 |           "schedules": {
 866 |             "description": "The list of campaigns",
 867 |             "type": "array",
 868 |             "items": {
 869 |               "$ref": "#/components/schemas/ScheduleDto"
 870 |             }
 871 |           },
 872 |           "total": {
 873 |             "description": "The total number of campaigns",
 874 |             "type": "array",
 875 |             "items": {
 876 |               "type": "string"
 877 |             }
 878 |           },
 879 |           "traceId": {
 880 |             "type": "string",
 881 |             "description": "Trace Id"
 882 |           }
 883 |         },
 884 |         "required": [
 885 |           "schedules",
 886 |           "total",
 887 |           "traceId"
 888 |         ]
 889 |       },
 890 |       "BadRequestDTO": {
 891 |         "type": "object",
 892 |         "properties": {
 893 |           "statusCode": {
 894 |             "type": "number",
 895 |             "example": 400
 896 |           },
 897 |           "message": {
 898 |             "type": "string",
 899 |             "example": "Bad Request"
 900 |           }
 901 |         }
 902 |       },
 903 |       "UnauthorizedDTO": {
 904 |         "type": "object",
 905 |         "properties": {
 906 |           "statusCode": {
 907 |             "type": "number",
 908 |             "example": 401
 909 |           },
 910 |           "message": {
 911 |             "type": "string",
 912 |             "example": "Invalid token: access token is invalid"
 913 |           },
 914 |           "error": {
 915 |             "type": "string",
 916 |             "example": "Unauthorized"
 917 |           }
 918 |         }
 919 |       },
 920 |       "InvalidLocationDTO": {
 921 |         "type": "object",
 922 |         "properties": {
 923 |           "statusCode": {
 924 |             "type": "number",
 925 |             "example": 403
 926 |           },
 927 |           "message": {
 928 |             "type": "string",
 929 |             "example": "The token does not have access to this location"
 930 |           }
 931 |         }
 932 |       },
 933 |       "NotFoundDTO": {
 934 |         "type": "object",
 935 |         "properties": {
 936 |           "statusCode": {
 937 |             "type": "number",
 938 |             "example": 404
 939 |           },
 940 |           "message": {
 941 |             "type": "string",
 942 |             "example": "Not Found"
 943 |           },
 944 |           "error": {
 945 |             "type": "string",
 946 |             "example": "The requested resource was not found"
 947 |           }
 948 |         }
 949 |       },
 950 |       "UnprocessableDTO": {
 951 |         "type": "object",
 952 |         "properties": {
 953 |           "statusCode": {
 954 |             "type": "number",
 955 |             "example": 422
 956 |           },
 957 |           "message": {
 958 |             "example": [
 959 |               "Unprocessable Entity"
 960 |             ],
 961 |             "type": "array",
 962 |             "items": {
 963 |               "type": "string"
 964 |             }
 965 |           },
 966 |           "error": {
 967 |             "type": "string",
 968 |             "example": "Unprocessable Entity"
 969 |           }
 970 |         }
 971 |       },
 972 |       "CreateBuilderDto": {
 973 |         "type": "object",
 974 |         "properties": {
 975 |           "locationId": {
 976 |             "type": "string",
 977 |             "example": "ve9EPM428h8vShlRW1KT"
 978 |           },
 979 |           "title": {
 980 |             "type": "string",
 981 |             "example": "template title"
 982 |           },
 983 |           "type": {
 984 |             "type": "string",
 985 |             "enum": [
 986 |               "html",
 987 |               "folder",
 988 |               "import",
 989 |               "builder",
 990 |               "blank"
 991 |             ]
 992 |           },
 993 |           "updatedBy": {
 994 |             "type": "string",
 995 |             "example": "zYy3YOUuHxgomU1uYJty"
 996 |           },
 997 |           "builderVersion": {
 998 |             "type": "string",
 999 |             "enum": [
1000 |               "1",
1001 |               "2"
1002 |             ],
1003 |             "default": "2"
1004 |           },
1005 |           "name": {
1006 |             "type": "string",
1007 |             "example": "Template1"
1008 |           },
1009 |           "parentId": {
1010 |             "type": "string",
1011 |             "example": "zYy3YOUuHxgomU1uYJty"
1012 |           },
1013 |           "templateDataUrl": {
1014 |             "type": "string",
1015 |             "example": ""
1016 |           },
1017 |           "importProvider": {
1018 |             "type": "string",
1019 |             "enum": [
1020 |               "mailchimp",
1021 |               "active_campaign",
1022 |               "kajabi"
1023 |             ]
1024 |           },
1025 |           "importURL": {
1026 |             "type": "string",
1027 |             "example": "https://tplshare.com/fhYJ3Mi"
1028 |           },
1029 |           "templateSource": {
1030 |             "type": "string",
1031 |             "example": "template_library"
1032 |           },
1033 |           "isPlainText": {
1034 |             "type": "boolean",
1035 |             "example": false
1036 |           }
1037 |         },
1038 |         "required": [
1039 |           "locationId",
1040 |           "type",
1041 |           "importProvider"
1042 |         ]
1043 |       },
1044 |       "CreateBuilderSuccesfulResponseDto": {
1045 |         "type": "object",
1046 |         "properties": {
1047 |           "redirect": {
1048 |             "type": "string",
1049 |             "example": "66e811229245fc098765590",
1050 |             "description": "template id"
1051 |           },
1052 |           "traceId": {
1053 |             "type": "string",
1054 |             "example": "0c52e980-41f6-4be7-8c4b-e2c5a13dc3c2",
1055 |             "description": "trace id"
1056 |           }
1057 |         },
1058 |         "required": [
1059 |           "redirect",
1060 |           "traceId"
1061 |         ]
1062 |       },
1063 |       "FetchBuilderSuccesfulResponseDto": {
1064 |         "type": "object",
1065 |         "properties": {
1066 |           "name": {
1067 |             "type": "string",
1068 |             "example": "New Template",
1069 |             "description": "template name"
1070 |           },
1071 |           "updatedBy": {
1072 |             "type": "string",
1073 |             "example": "John Doe",
1074 |             "description": "updated by"
1075 |           },
1076 |           "isPlainText": {
1077 |             "type": "boolean",
1078 |             "example": "false",
1079 |             "description": "plain text based template"
1080 |           },
1081 |           "lastUpdated": {
1082 |             "type": "string",
1083 |             "example": "2024-11-12T12:34:36.070Z",
1084 |             "description": "last updated"
1085 |           },
1086 |           "dateAdded": {
1087 |             "type": "string",
1088 |             "example": "2024-11-12T12:34:36.070Z",
1089 |             "description": "date added"
1090 |           },
1091 |           "previewUrl": {
1092 |             "type": "string",
1093 |             "example": "https://example.com",
1094 |             "description": "preview url"
1095 |           },
1096 |           "id": {
1097 |             "type": "string",
1098 |             "example": "67334b231f2fad724062f52b5",
1099 |             "description": "id"
1100 |           },
1101 |           "version": {
1102 |             "type": "string",
1103 |             "example": "1",
1104 |             "description": "version"
1105 |           },
1106 |           "templateType": {
1107 |             "type": "string",
1108 |             "example": "builder",
1109 |             "description": "type"
1110 |           }
1111 |         }
1112 |       },
1113 |       "DeleteBuilderSuccesfulResponseDto": {
1114 |         "type": "object",
1115 |         "properties": {
1116 |           "ok": {
1117 |             "type": "string",
1118 |             "example": "true",
1119 |             "description": "ok"
1120 |           },
1121 |           "traceId": {
1122 |             "type": "string",
1123 |             "example": "0c52e980-41f6-4be7-8c4b-32332ss",
1124 |             "description": "trace id"
1125 |           }
1126 |         }
1127 |       },
1128 |       "TemplateSettings": {
1129 |         "type": "object",
1130 |         "properties": {}
1131 |       },
1132 |       "IBuilderJsonMapper": {
1133 |         "type": "object",
1134 |         "properties": {
1135 |           "elements": {
1136 |             "type": "array",
1137 |             "items": {
1138 |               "type": "string"
1139 |             }
1140 |           },
1141 |           "attrs": {
1142 |             "type": "object"
1143 |           },
1144 |           "templateSettings": {
1145 |             "$ref": "#/components/schemas/TemplateSettings"
1146 |           }
1147 |         },
1148 |         "required": [
1149 |           "elements",
1150 |           "attrs",
1151 |           "templateSettings"
1152 |         ]
1153 |       },
1154 |       "SaveBuilderDataDto": {
1155 |         "type": "object",
1156 |         "properties": {
1157 |           "locationId": {
1158 |             "type": "string",
1159 |             "example": "ve9EPM428h8vShlRW1KT"
1160 |           },
1161 |           "templateId": {
1162 |             "type": "string",
1163 |             "example": "zYy3YOUuHxgomU1uYJty"
1164 |           },
1165 |           "updatedBy": {
1166 |             "type": "string",
1167 |             "example": "zYy3YOUuHxgomU1uYJty"
1168 |           },
1169 |           "dnd": {
1170 |             "example": "{elements:[], attrs:{}, templateSettings:{}}",
1171 |             "allOf": [
1172 |               {
1173 |                 "$ref": "#/components/schemas/IBuilderJsonMapper"
1174 |               }
1175 |             ]
1176 |           },
1177 |           "html": {
1178 |             "type": "string",
1179 |             "example": ""
1180 |           },
1181 |           "editorType": {
1182 |             "type": "string",
1183 |             "enum": [
1184 |               "html",
1185 |               "builder"
1186 |             ]
1187 |           },
1188 |           "previewText": {
1189 |             "type": "string",
1190 |             "example": "zYy3YOUuHxgomU1uYJty"
1191 |           },
1192 |           "isPlainText": {
1193 |             "type": "boolean",
1194 |             "example": "false"
1195 |           }
1196 |         },
1197 |         "required": [
1198 |           "locationId",
1199 |           "templateId",
1200 |           "updatedBy",
1201 |           "dnd",
1202 |           "html",
1203 |           "editorType"
1204 |         ]
1205 |       },
1206 |       "BuilderUpdateSuccessfulDTO": {
1207 |         "type": "object",
1208 |         "properties": {
1209 |           "ok": {
1210 |             "type": "string",
1211 |             "example": "true",
1212 |             "description": "ok"
1213 |           },
1214 |           "traceId": {
1215 |             "type": "string",
1216 |             "example": "0c52e980-41f6-4be7-8c4b-32332ss",
1217 |             "description": "trace id"
1218 |           },
1219 |           "previewUrl": {
1220 |             "type": "string",
1221 |             "example": "https://example.com",
1222 |             "description": "preview url"
1223 |           },
1224 |           "templateDownloadUrl": {
1225 |             "type": "string",
1226 |             "example": "https://example.com",
1227 |             "description": "template data download url"
1228 |           }
1229 |         }
1230 |       }
1231 |     }
1232 |   }
1233 | }


--------------------------------------------------------------------------------
/forms/forms.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/forms/submissions": {
  5 |       "get": {
  6 |         "operationId": "get-forms-submissions",
  7 |         "summary": "Get Forms Submissions",
  8 |         "description": "Get Forms Submissions",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "locationId",
 34 |             "required": true,
 35 |             "in": "query",
 36 |             "example": "ve9EPM428h8vShlRW1KT",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           },
 41 |           {
 42 |             "name": "page",
 43 |             "required": false,
 44 |             "in": "query",
 45 |             "example": 1,
 46 |             "description": "Page No. By default it will be 1",
 47 |             "schema": {
 48 |               "default": 1,
 49 |               "type": "number"
 50 |             }
 51 |           },
 52 |           {
 53 |             "name": "limit",
 54 |             "required": false,
 55 |             "in": "query",
 56 |             "example": 20,
 57 |             "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
 58 |             "schema": {
 59 |               "default": 20,
 60 |               "type": "number"
 61 |             }
 62 |           },
 63 |           {
 64 |             "name": "formId",
 65 |             "required": false,
 66 |             "in": "query",
 67 |             "example": "jjusM6EOngDExnbo2DbU",
 68 |             "description": "Filter submission by form id",
 69 |             "schema": {
 70 |               "type": "string"
 71 |             }
 72 |           },
 73 |           {
 74 |             "name": "q",
 75 |             "required": false,
 76 |             "in": "query",
 77 |             "example": "john@deo.com",
 78 |             "description": "Filter by contactId, name, email or phone no.",
 79 |             "schema": {
 80 |               "type": "string"
 81 |             }
 82 |           },
 83 |           {
 84 |             "name": "startAt",
 85 |             "required": false,
 86 |             "in": "query",
 87 |             "example": "2020-11-14",
 88 |             "description": "Get submission by starting of this date. By default it will be same date of last month(YYYY-MM-DD).",
 89 |             "schema": {
 90 |               "type": "string"
 91 |             }
 92 |           },
 93 |           {
 94 |             "name": "endAt",
 95 |             "required": false,
 96 |             "in": "query",
 97 |             "example": "2020-12-14",
 98 |             "description": "Get submission by ending of this date. By default it will be current date(YYYY-MM-DD).",
 99 |             "schema": {
100 |               "type": "string"
101 |             }
102 |           }
103 |         ],
104 |         "responses": {
105 |           "200": {
106 |             "description": "Successful response",
107 |             "content": {
108 |               "application/json": {
109 |                 "schema": {
110 |                   "$ref": "#/components/schemas/FormsSubmissionsSuccessfulResponseDto"
111 |                 }
112 |               }
113 |             }
114 |           },
115 |           "400": {
116 |             "description": "Bad Request",
117 |             "content": {
118 |               "application/json": {
119 |                 "schema": {
120 |                   "$ref": "#/components/schemas/BadRequestDTO"
121 |                 }
122 |               }
123 |             }
124 |           },
125 |           "401": {
126 |             "description": "Unauthorized",
127 |             "content": {
128 |               "application/json": {
129 |                 "schema": {
130 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
131 |                 }
132 |               }
133 |             }
134 |           },
135 |           "422": {
136 |             "description": "Unprocessable Entity",
137 |             "content": {
138 |               "application/json": {
139 |                 "schema": {
140 |                   "$ref": "#/components/schemas/UnprocessableDTO"
141 |                 }
142 |               }
143 |             }
144 |           }
145 |         },
146 |         "tags": [
147 |           "Forms"
148 |         ],
149 |         "security": [
150 |           {
151 |             "bearer": []
152 |           }
153 |         ]
154 |       }
155 |     },
156 |     "/forms/upload-custom-files": {
157 |       "post": {
158 |         "operationId": "upload-to-custom-fields",
159 |         "summary": "Upload files to custom fields",
160 |         "description": "Post the necessary fields for the API to upload files. The files need to be a buffer with the key \"< custom_field_id >_< file_id >\". <br /> Here custom field id is the ID of your custom field and file id is a randomly generated id (or uuid) <br /> There is support for multiple file uploads as well. Have multiple fields in the format mentioned.<br />File size is limited to 50 MB.<br /><br /> The allowed file types are: <br> <ul><li>PDF</li><li>DOCX</li><li>DOC</li><li>JPG</li><li>JPEG</li><li>PNG</li><li>GIF</li><li>CSV</li><li>XLSX</li><li>XLS</li><li>MP4</li><li>MPEG</li><li>ZIP</li><li>RAR</li><li>TXT</li><li>SVG</li></ul> <br /><br /> The API will return the updated contact object.",
161 |         "parameters": [
162 |           {
163 |             "name": "Authorization",
164 |             "in": "header",
165 |             "description": "Access Token",
166 |             "required": true,
167 |             "schema": {
168 |               "type": "string",
169 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
170 |             }
171 |           },
172 |           {
173 |             "name": "Version",
174 |             "in": "header",
175 |             "description": "API Version",
176 |             "required": true,
177 |             "schema": {
178 |               "type": "string",
179 |               "enum": [
180 |                 "2021-07-28"
181 |               ]
182 |             }
183 |           },
184 |           {
185 |             "name": "contactId",
186 |             "required": true,
187 |             "in": "query",
188 |             "example": "dtEv6KtI27yF92YPm3Zz",
189 |             "description": "Contact ID to upload the file to.",
190 |             "schema": {
191 |               "type": "string"
192 |             }
193 |           },
194 |           {
195 |             "name": "locationId",
196 |             "required": true,
197 |             "in": "query",
198 |             "example": "quXmPY59n1zgGBabY1bZ",
199 |             "description": "Location ID of the contact.",
200 |             "schema": {
201 |               "type": "string"
202 |             }
203 |           }
204 |         ],
205 |         "responses": {
206 |           "200": {
207 |             "description": "Successful response"
208 |           },
209 |           "400": {
210 |             "description": "Bad Request",
211 |             "content": {
212 |               "application/json": {
213 |                 "schema": {
214 |                   "$ref": "#/components/schemas/BadRequestDTO"
215 |                 }
216 |               }
217 |             }
218 |           },
219 |           "401": {
220 |             "description": "Unauthorized",
221 |             "content": {
222 |               "application/json": {
223 |                 "schema": {
224 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
225 |                 }
226 |               }
227 |             }
228 |           }
229 |         },
230 |         "tags": [
231 |           "Forms"
232 |         ],
233 |         "security": [
234 |           {
235 |             "bearer": []
236 |           }
237 |         ]
238 |       }
239 |     },
240 |     "/forms/": {
241 |       "get": {
242 |         "operationId": "get-forms",
243 |         "summary": "Get Forms",
244 |         "description": "Get Forms",
245 |         "parameters": [
246 |           {
247 |             "name": "Authorization",
248 |             "in": "header",
249 |             "description": "Access Token",
250 |             "required": true,
251 |             "schema": {
252 |               "type": "string",
253 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
254 |             }
255 |           },
256 |           {
257 |             "name": "Version",
258 |             "in": "header",
259 |             "description": "API Version",
260 |             "required": true,
261 |             "schema": {
262 |               "type": "string",
263 |               "enum": [
264 |                 "2021-07-28"
265 |               ]
266 |             }
267 |           },
268 |           {
269 |             "name": "locationId",
270 |             "required": true,
271 |             "in": "query",
272 |             "example": "ve9EPM428h8vShlRW1KT",
273 |             "schema": {
274 |               "type": "string"
275 |             }
276 |           },
277 |           {
278 |             "name": "skip",
279 |             "required": false,
280 |             "in": "query",
281 |             "example": 0,
282 |             "schema": {
283 |               "type": "number"
284 |             }
285 |           },
286 |           {
287 |             "name": "limit",
288 |             "required": false,
289 |             "in": "query",
290 |             "example": 20,
291 |             "description": "Limit Per Page records count. will allow maximum up to 50 and default will be 10",
292 |             "schema": {
293 |               "default": 10,
294 |               "type": "number"
295 |             }
296 |           },
297 |           {
298 |             "name": "type",
299 |             "required": false,
300 |             "in": "query",
301 |             "example": "folder",
302 |             "schema": {
303 |               "type": "string"
304 |             }
305 |           }
306 |         ],
307 |         "responses": {
308 |           "200": {
309 |             "description": "Successful response",
310 |             "content": {
311 |               "application/json": {
312 |                 "schema": {
313 |                   "$ref": "#/components/schemas/FormsSuccessfulResponseDto"
314 |                 }
315 |               }
316 |             }
317 |           },
318 |           "400": {
319 |             "description": "Bad Request",
320 |             "content": {
321 |               "application/json": {
322 |                 "schema": {
323 |                   "$ref": "#/components/schemas/BadRequestDTO"
324 |                 }
325 |               }
326 |             }
327 |           },
328 |           "401": {
329 |             "description": "Unauthorized",
330 |             "content": {
331 |               "application/json": {
332 |                 "schema": {
333 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
334 |                 }
335 |               }
336 |             }
337 |           }
338 |         },
339 |         "tags": [
340 |           "Forms"
341 |         ],
342 |         "security": [
343 |           {
344 |             "bearer": []
345 |           }
346 |         ]
347 |       }
348 |     }
349 |   },
350 |   "info": {
351 |     "title": "Forms API",
352 |     "description": "Documentation for forms API",
353 |     "version": "1.0",
354 |     "contact": {}
355 |   },
356 |   "tags": [
357 |     {
358 |       "name": "Forms",
359 |       "description": "Documentation for forms API"
360 |     }
361 |   ],
362 |   "servers": [
363 |     {
364 |       "url": "https://services.leadconnectorhq.com"
365 |     }
366 |   ],
367 |   "components": {
368 |     "securitySchemes": {
369 |       "bearer": {
370 |         "scheme": "bearer",
371 |         "bearerFormat": "JWT",
372 |         "name": "Authorization",
373 |         "in": "header",
374 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
375 |         "type": "http"
376 |       },
377 |       "Location-Access": {
378 |         "scheme": "bearer",
379 |         "bearerFormat": "JWT",
380 |         "name": "Authorization",
381 |         "in": "header",
382 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
383 |         "type": "http"
384 |       },
385 |       "Agency-Access": {
386 |         "scheme": "bearer",
387 |         "bearerFormat": "JWT",
388 |         "name": "Authorization",
389 |         "in": "header",
390 |         "description": "Use the Access Token generated with user type as Agency.",
391 |         "type": "http"
392 |       }
393 |     },
394 |     "schemas": {
395 |       "BadRequestDTO": {
396 |         "type": "object",
397 |         "properties": {
398 |           "statusCode": {
399 |             "type": "number",
400 |             "example": 400
401 |           },
402 |           "message": {
403 |             "type": "string",
404 |             "example": "Bad Request"
405 |           }
406 |         }
407 |       },
408 |       "UnauthorizedDTO": {
409 |         "type": "object",
410 |         "properties": {
411 |           "statusCode": {
412 |             "type": "number",
413 |             "example": 401
414 |           },
415 |           "message": {
416 |             "type": "string",
417 |             "example": "Invalid token: access token is invalid"
418 |           },
419 |           "error": {
420 |             "type": "string",
421 |             "example": "Unauthorized"
422 |           }
423 |         }
424 |       },
425 |       "PageDetailsSchema": {
426 |         "type": "object",
427 |         "properties": {
428 |           "url": {
429 |             "type": "string",
430 |             "example": "https://example.com"
431 |           },
432 |           "title": {
433 |             "type": "string",
434 |             "example": "Example Page"
435 |           }
436 |         }
437 |       },
438 |       "ContactSessionIds": {
439 |         "type": "object",
440 |         "properties": {
441 |           "ids": {
442 |             "example": [
443 |               "session1",
444 |               "session2"
445 |             ],
446 |             "nullable": true,
447 |             "type": "array",
448 |             "items": {
449 |               "type": "string"
450 |             }
451 |           }
452 |         }
453 |       },
454 |       "EventDataSchema": {
455 |         "type": "object",
456 |         "properties": {
457 |           "fbc": {
458 |             "type": "string",
459 |             "example": "fb.1.123456789.987654321"
460 |           },
461 |           "fbp": {
462 |             "type": "string",
463 |             "example": "fbp.1.987654321.123456789"
464 |           },
465 |           "page": {
466 |             "$ref": "#/components/schemas/PageDetailsSchema"
467 |           },
468 |           "type": {
469 |             "type": "string",
470 |             "example": "page-visit"
471 |           },
472 |           "domain": {
473 |             "type": "string",
474 |             "example": "example.com"
475 |           },
476 |           "medium": {
477 |             "type": "string",
478 |             "example": "form"
479 |           },
480 |           "source": {
481 |             "type": "string",
482 |             "example": "Direct traffic"
483 |           },
484 |           "version": {
485 |             "type": "string",
486 |             "example": "v3"
487 |           },
488 |           "adSource": {
489 |             "type": "string",
490 |             "example": "example-ad-source"
491 |           },
492 |           "mediumId": {
493 |             "type": "string",
494 |             "example": "medium-id-123"
495 |           },
496 |           "parentId": {
497 |             "type": "string",
498 |             "example": "parent-id-456"
499 |           },
500 |           "referrer": {
501 |             "type": "string",
502 |             "example": "https://staging.gohighlevel.com"
503 |           },
504 |           "fbEventId": {
505 |             "type": "string",
506 |             "example": "event-id-789"
507 |           },
508 |           "timestamp": {
509 |             "type": "number",
510 |             "example": 1234567890
511 |           },
512 |           "parentName": {
513 |             "type": "string",
514 |             "example": "Parent Form"
515 |           },
516 |           "fingerprint": {
517 |             "type": "string",
518 |             "example": "example-fingerprint"
519 |           },
520 |           "pageVisitType": {
521 |             "type": "string",
522 |             "example": "form"
523 |           },
524 |           "contactSessionIds": {
525 |             "nullable": true,
526 |             "allOf": [
527 |               {
528 |                 "$ref": "#/components/schemas/ContactSessionIds"
529 |               }
530 |             ]
531 |           }
532 |         }
533 |       },
534 |       "othersSchema": {
535 |         "type": "object",
536 |         "properties": {
537 |           "__submissions_other_field__": {
538 |             "type": "string",
539 |             "example": "john@deo.com"
540 |           },
541 |           "__custom_field_id__": {
542 |             "type": "string",
543 |             "example": "20"
544 |           },
545 |           "eventData": {
546 |             "$ref": "#/components/schemas/EventDataSchema"
547 |           },
548 |           "fieldsOriSequance": {
549 |             "example": [
550 |               "full_name",
551 |               "first_name",
552 |               "last_name",
553 |               "phone",
554 |               "email"
555 |             ],
556 |             "type": "array",
557 |             "items": {
558 |               "type": "string"
559 |             }
560 |           }
561 |         }
562 |       },
563 |       "FormsSubmissionsSubmissionsSchema": {
564 |         "type": "object",
565 |         "properties": {
566 |           "id": {
567 |             "type": "string",
568 |             "example": "38303ec7-629a-49e2-888a-cf8bf0b1f97e"
569 |           },
570 |           "contactId": {
571 |             "type": "string",
572 |             "example": "DWQ45t2IPVxi9LDu1wBl"
573 |           },
574 |           "createdAt": {
575 |             "type": "string",
576 |             "example": "2021-06-23T06:07:04.000Z"
577 |           },
578 |           "formId": {
579 |             "type": "string",
580 |             "example": "YSWdvS4Is98wtIDGnpmI"
581 |           },
582 |           "name": {
583 |             "type": "string",
584 |             "example": "test"
585 |           },
586 |           "email": {
587 |             "type": "string",
588 |             "example": "test@test.com"
589 |           },
590 |           "others": {
591 |             "$ref": "#/components/schemas/othersSchema"
592 |           }
593 |         }
594 |       },
595 |       "metaSchema": {
596 |         "type": "object",
597 |         "properties": {
598 |           "total": {
599 |             "type": "number",
600 |             "example": 1
601 |           },
602 |           "currentPage": {
603 |             "type": "number",
604 |             "example": 1
605 |           },
606 |           "nextPage": {
607 |             "type": "number",
608 |             "example": null,
609 |             "nullable": true
610 |           },
611 |           "prevPage": {
612 |             "type": "number",
613 |             "example": null,
614 |             "nullable": true
615 |           }
616 |         }
617 |       },
618 |       "FormsSubmissionsSuccessfulResponseDto": {
619 |         "type": "object",
620 |         "properties": {
621 |           "submissions": {
622 |             "type": "array",
623 |             "items": {
624 |               "$ref": "#/components/schemas/FormsSubmissionsSubmissionsSchema"
625 |             }
626 |           },
627 |           "meta": {
628 |             "$ref": "#/components/schemas/metaSchema"
629 |           }
630 |         }
631 |       },
632 |       "UnprocessableDTO": {
633 |         "type": "object",
634 |         "properties": {
635 |           "statusCode": {
636 |             "type": "number",
637 |             "example": 422
638 |           },
639 |           "message": {
640 |             "example": [
641 |               "Unprocessable Entity"
642 |             ],
643 |             "type": "array",
644 |             "items": {
645 |               "type": "string"
646 |             }
647 |           },
648 |           "error": {
649 |             "type": "string",
650 |             "example": "Unprocessable Entity"
651 |           }
652 |         }
653 |       },
654 |       "FormsParams": {
655 |         "type": "object",
656 |         "properties": {
657 |           "id": {
658 |             "type": "string",
659 |             "example": "YSWdvS4Is98wtIDGnpmI"
660 |           },
661 |           "name": {
662 |             "type": "string",
663 |             "example": "Form 1"
664 |           },
665 |           "locationId": {
666 |             "type": "string",
667 |             "example": "ve9EPM428h8vShlRW1KT"
668 |           }
669 |         }
670 |       },
671 |       "FormsSuccessfulResponseDto": {
672 |         "type": "object",
673 |         "properties": {
674 |           "forms": {
675 |             "type": "array",
676 |             "items": {
677 |               "$ref": "#/components/schemas/FormsParams"
678 |             }
679 |           },
680 |           "total": {
681 |             "type": "number",
682 |             "example": "20",
683 |             "description": "Total number of forms"
684 |           }
685 |         }
686 |       }
687 |     }
688 |   }
689 | }


--------------------------------------------------------------------------------
/funnels/funnels.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/funnels/lookup/redirect": {
  5 |       "post": {
  6 |         "operationId": "create-redirect",
  7 |         "summary": "Create Redirect",
  8 |         "description": "The \"Create Redirect\" API Allows adding a new url redirect to the system. Use this endpoint to create a url redirect with the specified details. Ensure that the required information is provided in the request payload.",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           }
 32 |         ],
 33 |         "requestBody": {
 34 |           "required": true,
 35 |           "content": {
 36 |             "application/json": {
 37 |               "schema": {
 38 |                 "$ref": "#/components/schemas/CreateRedirectParams"
 39 |               }
 40 |             }
 41 |           }
 42 |         },
 43 |         "responses": {
 44 |           "200": {
 45 |             "description": "Successful response",
 46 |             "content": {
 47 |               "application/json": {
 48 |                 "schema": {
 49 |                   "$ref": "#/components/schemas/CreateRedirectResponseDTO"
 50 |                 }
 51 |               }
 52 |             }
 53 |           },
 54 |           "422": {
 55 |             "description": "Unprocessable Entity",
 56 |             "content": {
 57 |               "application/json": {
 58 |                 "schema": {
 59 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 60 |                 }
 61 |               }
 62 |             }
 63 |           }
 64 |         },
 65 |         "tags": [
 66 |           "Redirect"
 67 |         ],
 68 |         "security": [
 69 |           {
 70 |             "Location-Access": []
 71 |           }
 72 |         ]
 73 |       }
 74 |     },
 75 |     "/funnels/lookup/redirect/{id}": {
 76 |       "patch": {
 77 |         "operationId": "update-redirect-by-id",
 78 |         "summary": "Update Redirect By Id",
 79 |         "description": "The \"Update Redirect By Id\" API Allows updating an existing URL redirect in the system. Use this endpoint to modify a URL redirect with the specified ID using details provided in the request payload.",
 80 |         "parameters": [
 81 |           {
 82 |             "name": "Authorization",
 83 |             "in": "header",
 84 |             "description": "Access Token",
 85 |             "required": true,
 86 |             "schema": {
 87 |               "type": "string",
 88 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 89 |             }
 90 |           },
 91 |           {
 92 |             "name": "Version",
 93 |             "in": "header",
 94 |             "description": "API Version",
 95 |             "required": true,
 96 |             "schema": {
 97 |               "type": "string",
 98 |               "enum": [
 99 |                 "2021-07-28"
100 |               ]
101 |             }
102 |           },
103 |           {
104 |             "name": "id",
105 |             "required": true,
106 |             "in": "path",
107 |             "schema": {
108 |               "type": "string"
109 |             }
110 |           }
111 |         ],
112 |         "requestBody": {
113 |           "required": true,
114 |           "content": {
115 |             "application/json": {
116 |               "schema": {
117 |                 "$ref": "#/components/schemas/UpdateRedirectParams"
118 |               }
119 |             }
120 |           }
121 |         },
122 |         "responses": {
123 |           "200": {
124 |             "description": "Successful response",
125 |             "content": {
126 |               "application/json": {
127 |                 "schema": {
128 |                   "$ref": "#/components/schemas/UpdateRedirectResponseDTO"
129 |                 }
130 |               }
131 |             }
132 |           },
133 |           "422": {
134 |             "description": "Unprocessable Entity",
135 |             "content": {
136 |               "application/json": {
137 |                 "schema": {
138 |                   "$ref": "#/components/schemas/UnprocessableDTO"
139 |                 }
140 |               }
141 |             }
142 |           }
143 |         },
144 |         "tags": [
145 |           "Redirect"
146 |         ],
147 |         "security": [
148 |           {
149 |             "Location-Access": []
150 |           }
151 |         ]
152 |       },
153 |       "delete": {
154 |         "operationId": "delete-redirect-by-id",
155 |         "summary": "Delete Redirect By Id",
156 |         "description": "The \"Delete Redirect By Id\" API Allows deletion of a URL redirect from the system using its unique identifier. Use this endpoint to delete a URL redirect with the specified ID using details provided in the request payload.",
157 |         "parameters": [
158 |           {
159 |             "name": "Authorization",
160 |             "in": "header",
161 |             "description": "Access Token",
162 |             "required": true,
163 |             "schema": {
164 |               "type": "string",
165 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
166 |             }
167 |           },
168 |           {
169 |             "name": "Version",
170 |             "in": "header",
171 |             "description": "API Version",
172 |             "required": true,
173 |             "schema": {
174 |               "type": "string",
175 |               "enum": [
176 |                 "2021-07-28"
177 |               ]
178 |             }
179 |           },
180 |           {
181 |             "name": "id",
182 |             "required": true,
183 |             "in": "path",
184 |             "schema": {
185 |               "type": "string"
186 |             }
187 |           },
188 |           {
189 |             "name": "locationId",
190 |             "required": true,
191 |             "in": "query",
192 |             "example": "6p2RxpgtMKQwO3E6IUaT",
193 |             "schema": {
194 |               "type": "string"
195 |             }
196 |           }
197 |         ],
198 |         "responses": {
199 |           "200": {
200 |             "description": "Successful response - URL redirect deleted successfully",
201 |             "content": {
202 |               "application/json": {
203 |                 "schema": {
204 |                   "$ref": "#/components/schemas/DeleteRedirectResponseDTO"
205 |                 }
206 |               }
207 |             }
208 |           },
209 |           "422": {
210 |             "description": "Unprocessable Entity - The provided data is invalid or incomplete"
211 |           }
212 |         },
213 |         "tags": [
214 |           "Redirect"
215 |         ],
216 |         "security": [
217 |           {
218 |             "Location-Access": []
219 |           }
220 |         ]
221 |       }
222 |     },
223 |     "/funnels/lookup/redirect/list": {
224 |       "get": {
225 |         "operationId": "fetch-redirects-list",
226 |         "summary": "Fetch List of Redirects",
227 |         "description": "Retrieves a list of all URL redirects based on the given query parameters.",
228 |         "parameters": [
229 |           {
230 |             "name": "Authorization",
231 |             "in": "header",
232 |             "description": "Access Token",
233 |             "required": true,
234 |             "schema": {
235 |               "type": "string",
236 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
237 |             }
238 |           },
239 |           {
240 |             "name": "Version",
241 |             "in": "header",
242 |             "description": "API Version",
243 |             "required": true,
244 |             "schema": {
245 |               "type": "string",
246 |               "enum": [
247 |                 "2021-07-28"
248 |               ]
249 |             }
250 |           },
251 |           {
252 |             "name": "locationId",
253 |             "required": true,
254 |             "in": "query",
255 |             "example": "6p2RxpgtMKQwO3E6IUaT",
256 |             "schema": {
257 |               "type": "string"
258 |             }
259 |           },
260 |           {
261 |             "name": "limit",
262 |             "required": true,
263 |             "in": "query",
264 |             "example": 20,
265 |             "schema": {
266 |               "type": "number"
267 |             }
268 |           },
269 |           {
270 |             "name": "offset",
271 |             "required": true,
272 |             "in": "query",
273 |             "example": 10,
274 |             "schema": {
275 |               "type": "number"
276 |             }
277 |           },
278 |           {
279 |             "name": "search",
280 |             "required": false,
281 |             "in": "query",
282 |             "example": "example.com/test",
283 |             "schema": {
284 |               "type": "string"
285 |             }
286 |           }
287 |         ],
288 |         "responses": {
289 |           "200": {
290 |             "description": "Successful response - List of URL redirects returned",
291 |             "content": {
292 |               "application/json": {
293 |                 "schema": {
294 |                   "$ref": "#/components/schemas/RedirectListResponseDTO"
295 |                 }
296 |               }
297 |             }
298 |           },
299 |           "422": {
300 |             "description": "Unprocessable Entity - The provided data is invalid or incomplete"
301 |           }
302 |         },
303 |         "tags": [
304 |           "Redirect"
305 |         ],
306 |         "security": [
307 |           {
308 |             "Location-Access": []
309 |           }
310 |         ]
311 |       }
312 |     },
313 |     "/funnels/funnel/list": {
314 |       "get": {
315 |         "operationId": "getFunnels",
316 |         "summary": "Fetch List of Funnels",
317 |         "description": "Retrieves a list of all funnels based on the given query parameters.",
318 |         "parameters": [
319 |           {
320 |             "name": "Authorization",
321 |             "in": "header",
322 |             "description": "Access Token",
323 |             "required": true,
324 |             "schema": {
325 |               "type": "string",
326 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
327 |             }
328 |           },
329 |           {
330 |             "name": "locationId",
331 |             "required": true,
332 |             "in": "query",
333 |             "schema": {
334 |               "type": "string"
335 |             }
336 |           },
337 |           {
338 |             "name": "type",
339 |             "required": false,
340 |             "in": "query",
341 |             "schema": {
342 |               "type": "string"
343 |             }
344 |           },
345 |           {
346 |             "name": "category",
347 |             "required": false,
348 |             "in": "query",
349 |             "schema": {
350 |               "type": "string"
351 |             }
352 |           },
353 |           {
354 |             "name": "offset",
355 |             "required": false,
356 |             "in": "query",
357 |             "schema": {
358 |               "type": "string"
359 |             }
360 |           },
361 |           {
362 |             "name": "limit",
363 |             "required": false,
364 |             "in": "query",
365 |             "schema": {
366 |               "type": "string"
367 |             }
368 |           },
369 |           {
370 |             "name": "parentId",
371 |             "required": false,
372 |             "in": "query",
373 |             "schema": {
374 |               "type": "string"
375 |             }
376 |           },
377 |           {
378 |             "name": "name",
379 |             "required": false,
380 |             "in": "query",
381 |             "schema": {
382 |               "type": "string"
383 |             }
384 |           }
385 |         ],
386 |         "responses": {
387 |           "200": {
388 |             "description": "Successful response - List of funnels returned",
389 |             "content": {
390 |               "application/json": {
391 |                 "schema": {
392 |                   "$ref": "#/components/schemas/FunnelListResponseDTO"
393 |                 }
394 |               }
395 |             }
396 |           }
397 |         },
398 |         "tags": [
399 |           "Funnel"
400 |         ],
401 |         "security": [
402 |           {
403 |             "Location-Access": []
404 |           }
405 |         ]
406 |       }
407 |     },
408 |     "/funnels/page": {
409 |       "get": {
410 |         "operationId": "getPagesByFunnelId",
411 |         "summary": "Fetch list of funnel pages",
412 |         "description": "Retrieves a list of all funnel pages based on the given query parameters.",
413 |         "parameters": [
414 |           {
415 |             "name": "Authorization",
416 |             "in": "header",
417 |             "description": "Access Token",
418 |             "required": true,
419 |             "schema": {
420 |               "type": "string",
421 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
422 |             }
423 |           },
424 |           {
425 |             "name": "locationId",
426 |             "required": true,
427 |             "in": "query",
428 |             "schema": {
429 |               "type": "string"
430 |             }
431 |           },
432 |           {
433 |             "name": "funnelId",
434 |             "required": true,
435 |             "in": "query",
436 |             "schema": {
437 |               "type": "string"
438 |             }
439 |           },
440 |           {
441 |             "name": "name",
442 |             "required": false,
443 |             "in": "query",
444 |             "schema": {
445 |               "type": "string"
446 |             }
447 |           },
448 |           {
449 |             "name": "limit",
450 |             "required": true,
451 |             "in": "query",
452 |             "schema": {
453 |               "type": "number"
454 |             }
455 |           },
456 |           {
457 |             "name": "offset",
458 |             "required": true,
459 |             "in": "query",
460 |             "schema": {
461 |               "type": "number"
462 |             }
463 |           }
464 |         ],
465 |         "responses": {
466 |           "200": {
467 |             "description": "Successful response - List of funnel pages returned",
468 |             "content": {
469 |               "application/json": {
470 |                 "schema": {
471 |                   "$ref": "#/components/schemas/FunnelPageResponseDTO"
472 |                 }
473 |               }
474 |             }
475 |           }
476 |         },
477 |         "tags": [
478 |           "Funnel"
479 |         ],
480 |         "security": [
481 |           {
482 |             "Location-Access": []
483 |           }
484 |         ]
485 |       }
486 |     },
487 |     "/funnels/page/count": {
488 |       "get": {
489 |         "operationId": "getPagesCountByFunnelId",
490 |         "summary": "Fetch count of funnel pages",
491 |         "description": "Retrieves count of all funnel pages based on the given query parameters.",
492 |         "parameters": [
493 |           {
494 |             "name": "Authorization",
495 |             "in": "header",
496 |             "description": "Access Token",
497 |             "required": false,
498 |             "schema": {
499 |               "type": "string",
500 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
501 |             }
502 |           },
503 |           {
504 |             "name": "locationId",
505 |             "required": true,
506 |             "in": "query",
507 |             "schema": {
508 |               "type": "string"
509 |             }
510 |           },
511 |           {
512 |             "name": "funnelId",
513 |             "required": true,
514 |             "in": "query",
515 |             "schema": {
516 |               "type": "string"
517 |             }
518 |           },
519 |           {
520 |             "name": "name",
521 |             "required": false,
522 |             "in": "query",
523 |             "schema": {
524 |               "type": "string"
525 |             }
526 |           }
527 |         ],
528 |         "responses": {
529 |           "200": {
530 |             "description": "Successful response - Count of funnel pages returned",
531 |             "content": {
532 |               "application/json": {
533 |                 "schema": {
534 |                   "$ref": "#/components/schemas/FunnelPageCountResponseDTO"
535 |                 }
536 |               }
537 |             }
538 |           }
539 |         },
540 |         "tags": [
541 |           "Funnel"
542 |         ],
543 |         "security": [
544 |           {
545 |             "Location-Access": []
546 |           }
547 |         ]
548 |       }
549 |     }
550 |   },
551 |   "info": {
552 |     "title": "Funnels API",
553 |     "description": "Documentation for funnels API",
554 |     "version": "1.0",
555 |     "contact": {}
556 |   },
557 |   "tags": [
558 |     {
559 |       "name": "Funnels",
560 |       "description": "Documentation for funnels API"
561 |     }
562 |   ],
563 |   "servers": [
564 |     {
565 |       "url": "https://services.leadconnectorhq.com"
566 |     }
567 |   ],
568 |   "components": {
569 |     "securitySchemes": {
570 |       "bearer": {
571 |         "scheme": "bearer",
572 |         "bearerFormat": "JWT",
573 |         "name": "Authorization",
574 |         "in": "header",
575 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
576 |         "type": "http"
577 |       },
578 |       "Location-Access": {
579 |         "scheme": "bearer",
580 |         "bearerFormat": "JWT",
581 |         "name": "Authorization",
582 |         "in": "header",
583 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
584 |         "type": "http"
585 |       },
586 |       "Agency-Access": {
587 |         "scheme": "bearer",
588 |         "bearerFormat": "JWT",
589 |         "name": "Authorization",
590 |         "in": "header",
591 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
592 |         "type": "http"
593 |       }
594 |     },
595 |     "schemas": {
596 |       "CreateRedirectParams": {
597 |         "type": "object",
598 |         "properties": {
599 |           "locationId": {
600 |             "type": "string",
601 |             "example": "6p2RxpgtMKQwO3E6IUaT"
602 |           },
603 |           "domain": {
604 |             "type": "string",
605 |             "example": "example.com"
606 |           },
607 |           "path": {
608 |             "type": "string",
609 |             "example": "/Hello"
610 |           },
611 |           "target": {
612 |             "type": "string",
613 |             "example": "https://www.google.com"
614 |           },
615 |           "action": {
616 |             "type": "string",
617 |             "example": "URL",
618 |             "enum": [
619 |               "funnel",
620 |               "website",
621 |               "url",
622 |               "all"
623 |             ]
624 |           }
625 |         },
626 |         "required": [
627 |           "locationId",
628 |           "domain",
629 |           "path",
630 |           "target",
631 |           "action"
632 |         ]
633 |       },
634 |       "RedirectResponseDTO": {
635 |         "type": "object",
636 |         "properties": {
637 |           "id": {
638 |             "type": "string",
639 |             "example": "6p2RxpgtMKQwO3E6IUaT",
640 |             "description": "Unique identifier of the redirect"
641 |           },
642 |           "locationId": {
643 |             "type": "string",
644 |             "example": "6p2RxpgtMKQwO3E6IUaT",
645 |             "description": "Identifier of the location associated with the redirect"
646 |           },
647 |           "domain": {
648 |             "type": "string",
649 |             "example": "www.example.com",
650 |             "description": "Domain where the redirect occurs"
651 |           },
652 |           "path": {
653 |             "type": "string",
654 |             "example": "/old-path",
655 |             "description": "Original path that will be redirected"
656 |           },
657 |           "pathLowercase": {
658 |             "type": "string",
659 |             "example": "/old-path",
660 |             "description": "Lowercase version of the original path"
661 |           },
662 |           "type": {
663 |             "type": "string",
664 |             "example": "Permanent",
665 |             "description": "Type of redirect (e.g., Permanent, Temporary)"
666 |           },
667 |           "target": {
668 |             "type": "string",
669 |             "example": "https://www.example.com/new-path",
670 |             "description": "Target URL to which the original path will be redirected"
671 |           },
672 |           "action": {
673 |             "type": "string",
674 |             "example": "url",
675 |             "description": "Action performed by the redirect"
676 |           }
677 |         },
678 |         "required": [
679 |           "id",
680 |           "locationId",
681 |           "domain",
682 |           "path",
683 |           "pathLowercase",
684 |           "type",
685 |           "target",
686 |           "action"
687 |         ]
688 |       },
689 |       "CreateRedirectResponseDTO": {
690 |         "type": "object",
691 |         "properties": {
692 |           "data": {
693 |             "description": "Data containing details of the created redirect",
694 |             "allOf": [
695 |               {
696 |                 "$ref": "#/components/schemas/RedirectResponseDTO"
697 |               }
698 |             ]
699 |           }
700 |         },
701 |         "required": [
702 |           "data"
703 |         ]
704 |       },
705 |       "UpdateRedirectParams": {
706 |         "type": "object",
707 |         "properties": {
708 |           "target": {
709 |             "type": "string",
710 |             "example": "https://www.google.com"
711 |           },
712 |           "action": {
713 |             "type": "string",
714 |             "example": "URL",
715 |             "enum": [
716 |               "funnel",
717 |               "website",
718 |               "url",
719 |               "all"
720 |             ]
721 |           },
722 |           "locationId": {
723 |             "type": "string",
724 |             "example": "6p2RxpgtMKQwO3E6IUaT"
725 |           }
726 |         },
727 |         "required": [
728 |           "target",
729 |           "action",
730 |           "locationId"
731 |         ]
732 |       },
733 |       "RedirectListResponseDTO": {
734 |         "type": "object",
735 |         "properties": {
736 |           "data": {
737 |             "type": "object",
738 |             "example": {
739 |               "count": 42,
740 |               "data": []
741 |             },
742 |             "description": "Object containing the count of redirects and an array of redirect data"
743 |           }
744 |         },
745 |         "required": [
746 |           "data"
747 |         ]
748 |       },
749 |       "DeleteRedirectResponseDTO": {
750 |         "type": "object",
751 |         "properties": {
752 |           "data": {
753 |             "type": "object",
754 |             "example": {
755 |               "status": "ok"
756 |             },
757 |             "description": "Status of the delete operation"
758 |           }
759 |         },
760 |         "required": [
761 |           "data"
762 |         ]
763 |       },
764 |       "UpdateRedirectResponseDTO": {
765 |         "type": "object",
766 |         "properties": {
767 |           "data": {
768 |             "description": "Data containing details of the updated redirect",
769 |             "allOf": [
770 |               {
771 |                 "$ref": "#/components/schemas/RedirectResponseDTO"
772 |               }
773 |             ]
774 |           }
775 |         },
776 |         "required": [
777 |           "data"
778 |         ]
779 |       },
780 |       "UnprocessableDTO": {
781 |         "type": "object",
782 |         "properties": {
783 |           "statusCode": {
784 |             "type": "number",
785 |             "example": 422
786 |           },
787 |           "message": {
788 |             "example": [
789 |               "Unprocessable Entity"
790 |             ],
791 |             "type": "array",
792 |             "items": {
793 |               "type": "string"
794 |             }
795 |           },
796 |           "error": {
797 |             "type": "string",
798 |             "example": "Unprocessable Entity"
799 |           }
800 |         }
801 |       },
802 |       "FunnelPageResponseDTO": {
803 |         "type": "object",
804 |         "properties": {
805 |           "_id": {
806 |             "type": "string",
807 |             "example": "0yJbP3q7t7pLmeTWRAE2"
808 |           },
809 |           "locationId": {
810 |             "type": "string",
811 |             "example": "ojQjykmwNIU88vfsfzvH"
812 |           },
813 |           "funnelId": {
814 |             "type": "string",
815 |             "example": "iucJ6TdFZiddhq9f6znh"
816 |           },
817 |           "name": {
818 |             "type": "string",
819 |             "example": "Home"
820 |           },
821 |           "stepId": {
822 |             "type": "string",
823 |             "example": "343bf634-3aa6-4ade-b963-2d3cd0bf2ede"
824 |           },
825 |           "deleted": {
826 |             "type": "string",
827 |             "example": false
828 |           },
829 |           "updatedAt": {
830 |             "type": "string",
831 |             "example": "2024-04-18T12:25:23.029Z"
832 |           }
833 |         },
834 |         "required": [
835 |           "locationId",
836 |           "name",
837 |           "funnelId",
838 |           "stepId",
839 |           "deleted",
840 |           "updatedAt",
841 |           "_id"
842 |         ]
843 |       },
844 |       "FunnelPageCountResponseDTO": {
845 |         "type": "object",
846 |         "properties": {
847 |           "count": {
848 |             "type": "number",
849 |             "example": 20
850 |           }
851 |         },
852 |         "required": [
853 |           "count"
854 |         ]
855 |       },
856 |       "FunnelListResponseDTO": {
857 |         "type": "object",
858 |         "properties": {
859 |           "funnels": {
860 |             "type": "object",
861 |             "example": {
862 |               "_id": "SkIDfu0S4m3NYQyvWHC6",
863 |               "dateAdded": "2024-04-29T15:00:05.681Z",
864 |               "dateUpdated": "2024-04-29T15:00:28.465Z",
865 |               "deleted": false,
866 |               "domainId": "",
867 |               "locationId": "ojQjykmwNIU88vfsfzvH",
868 |               "name": "Chaitanya Copy",
869 |               "orderFormVersion": 2,
870 |               "originId": "hAmyh7jrJH5FfEEKAJ9z",
871 |               "steps": [
872 |                 {
873 |                   "id": "f5d178c0-8bbb-4cd4-927c-691c68a62c59",
874 |                   "name": "Step 1",
875 |                   "originId": "80b2f227-5bc8-4ca5-980d-817745ea4e8b",
876 |                   "pages": [
877 |                     "2IhBmBcQRx9JXV1JZsRt"
878 |                   ],
879 |                   "products": [],
880 |                   "sequence": 1,
881 |                   "type": "optin_funnel_page",
882 |                   "url": "/newtestifypath"
883 |                 }
884 |               ],
885 |               "type": "funnel",
886 |               "updatedAt": "2024-04-29T15:00:34.233Z",
887 |               "faviconUrl": "",
888 |               "globalSectionVersion": 1,
889 |               "globalSectionsPath": "funnel/SkIDfu0S4m3NYQyvWHC6/global-sections-1",
890 |               "globalSectionsUrl": "https://firebasestorage.googleapis.com/v0/b/highlevel-staging.appspot.com/o/funnel%2FSkIDfu0S4m3NYQyvWHC6%2Fglobal-sections-1?alt=media&token=9cc5c211-093b-4751-aeba-19282ac92955",
891 |               "isStoreActive": false,
892 |               "trackingCodeBody": "",
893 |               "trackingCodeHead": "",
894 |               "url": "/chaitanya"
895 |             }
896 |           },
897 |           "count": {
898 |             "type": "number",
899 |             "example": 24
900 |           },
901 |           "traceId": {
902 |             "type": "string",
903 |             "example": "03774d31-a57e-4b4f-95c7-315ce61969f1"
904 |           }
905 |         },
906 |         "required": [
907 |           "funnels",
908 |           "count",
909 |           "traceId"
910 |         ]
911 |       }
912 |     }
913 |   }
914 | }


--------------------------------------------------------------------------------
/invoices/invoices.json:
--------------------------------------------------------------------------------
    1 | {
    2 |   "openapi": "3.0.0",
    3 |   "paths": {
    4 |     "/invoices/template": {
    5 |       "post": {
    6 |         "operationId": "create-invoice-template",
    7 |         "summary": "Create template",
    8 |         "description": "API to create a template",
    9 |         "parameters": [
   10 |           {
   11 |             "name": "Authorization",
   12 |             "in": "header",
   13 |             "description": "Access Token",
   14 |             "required": true,
   15 |             "schema": {
   16 |               "type": "string",
   17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
   18 |             }
   19 |           },
   20 |           {
   21 |             "name": "Version",
   22 |             "in": "header",
   23 |             "description": "API Version",
   24 |             "required": true,
   25 |             "schema": {
   26 |               "type": "string",
   27 |               "enum": [
   28 |                 "2021-07-28"
   29 |               ]
   30 |             }
   31 |           }
   32 |         ],
   33 |         "requestBody": {
   34 |           "required": true,
   35 |           "content": {
   36 |             "application/json": {
   37 |               "schema": {
   38 |                 "$ref": "#/components/schemas/CreateInvoiceTemplateDto"
   39 |               }
   40 |             }
   41 |           }
   42 |         },
   43 |         "responses": {
   44 |           "200": {
   45 |             "description": "Successful response",
   46 |             "content": {
   47 |               "application/json": {
   48 |                 "schema": {
   49 |                   "$ref": "#/components/schemas/CreateInvoiceTemplateResponseDto"
   50 |                 }
   51 |               }
   52 |             }
   53 |           },
   54 |           "400": {
   55 |             "description": "Bad Request",
   56 |             "content": {
   57 |               "application/json": {
   58 |                 "schema": {
   59 |                   "$ref": "#/components/schemas/BadRequestDTO"
   60 |                 }
   61 |               }
   62 |             }
   63 |           },
   64 |           "401": {
   65 |             "description": "Unauthorized",
   66 |             "content": {
   67 |               "application/json": {
   68 |                 "schema": {
   69 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
   70 |                 }
   71 |               }
   72 |             }
   73 |           },
   74 |           "422": {
   75 |             "description": "Unprocessable Entity",
   76 |             "content": {
   77 |               "application/json": {
   78 |                 "schema": {
   79 |                   "$ref": "#/components/schemas/UnprocessableDTO"
   80 |                 }
   81 |               }
   82 |             }
   83 |           }
   84 |         },
   85 |         "tags": [
   86 |           "Template"
   87 |         ],
   88 |         "security": [
   89 |           {
   90 |             "Location-Access": []
   91 |           },
   92 |           {
   93 |             "Agency-Access": []
   94 |           }
   95 |         ]
   96 |       },
   97 |       "get": {
   98 |         "operationId": "list-invoice-templates",
   99 |         "summary": "List templates",
  100 |         "description": "API to get list of templates",
  101 |         "parameters": [
  102 |           {
  103 |             "name": "Authorization",
  104 |             "in": "header",
  105 |             "description": "Access Token",
  106 |             "required": true,
  107 |             "schema": {
  108 |               "type": "string",
  109 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  110 |             }
  111 |           },
  112 |           {
  113 |             "name": "Version",
  114 |             "in": "header",
  115 |             "description": "API Version",
  116 |             "required": true,
  117 |             "schema": {
  118 |               "type": "string",
  119 |               "enum": [
  120 |                 "2021-07-28"
  121 |               ]
  122 |             }
  123 |           },
  124 |           {
  125 |             "name": "altId",
  126 |             "required": true,
  127 |             "in": "query",
  128 |             "description": "location Id / company Id based on altType",
  129 |             "example": "6578278e879ad2646715ba9c",
  130 |             "schema": {
  131 |               "type": "string"
  132 |             }
  133 |           },
  134 |           {
  135 |             "name": "altType",
  136 |             "required": true,
  137 |             "in": "query",
  138 |             "description": "Alt Type",
  139 |             "example": "location",
  140 |             "schema": {
  141 |               "enum": [
  142 |                 "location"
  143 |               ],
  144 |               "type": "string"
  145 |             }
  146 |           },
  147 |           {
  148 |             "name": "status",
  149 |             "required": false,
  150 |             "in": "query",
  151 |             "description": "status to be filtered",
  152 |             "schema": {
  153 |               "type": "string"
  154 |             }
  155 |           },
  156 |           {
  157 |             "name": "startAt",
  158 |             "required": false,
  159 |             "in": "query",
  160 |             "description": "startAt in YYYY-MM-DD format",
  161 |             "example": "2023-01-01",
  162 |             "schema": {
  163 |               "type": "string"
  164 |             }
  165 |           },
  166 |           {
  167 |             "name": "endAt",
  168 |             "required": false,
  169 |             "in": "query",
  170 |             "description": "endAt in YYYY-MM-DD format",
  171 |             "example": "2023-01-01",
  172 |             "schema": {
  173 |               "type": "string"
  174 |             }
  175 |           },
  176 |           {
  177 |             "name": "search",
  178 |             "required": false,
  179 |             "in": "query",
  180 |             "description": "To search for an invoice by id / name / email / phoneNo",
  181 |             "example": "Alex",
  182 |             "schema": {
  183 |               "type": "string"
  184 |             }
  185 |           },
  186 |           {
  187 |             "name": "paymentMode",
  188 |             "required": false,
  189 |             "in": "query",
  190 |             "description": "payment mode",
  191 |             "example": "live",
  192 |             "schema": {
  193 |               "enum": [
  194 |                 "default",
  195 |                 "live",
  196 |                 "test"
  197 |               ],
  198 |               "type": "string"
  199 |             }
  200 |           },
  201 |           {
  202 |             "name": "limit",
  203 |             "required": true,
  204 |             "in": "query",
  205 |             "description": "Limit the number of items to return",
  206 |             "example": 10,
  207 |             "schema": {
  208 |               "type": "string"
  209 |             }
  210 |           },
  211 |           {
  212 |             "name": "offset",
  213 |             "required": true,
  214 |             "in": "query",
  215 |             "description": "Number of items to skip",
  216 |             "example": 10,
  217 |             "schema": {
  218 |               "type": "string"
  219 |             }
  220 |           }
  221 |         ],
  222 |         "responses": {
  223 |           "200": {
  224 |             "description": "Successful response",
  225 |             "content": {
  226 |               "application/json": {
  227 |                 "schema": {
  228 |                   "$ref": "#/components/schemas/ListTemplatesResponseDto"
  229 |                 }
  230 |               }
  231 |             }
  232 |           },
  233 |           "400": {
  234 |             "description": "Bad Request",
  235 |             "content": {
  236 |               "application/json": {
  237 |                 "schema": {
  238 |                   "$ref": "#/components/schemas/BadRequestDTO"
  239 |                 }
  240 |               }
  241 |             }
  242 |           },
  243 |           "401": {
  244 |             "description": "Unauthorized",
  245 |             "content": {
  246 |               "application/json": {
  247 |                 "schema": {
  248 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  249 |                 }
  250 |               }
  251 |             }
  252 |           },
  253 |           "422": {
  254 |             "description": "Unprocessable Entity",
  255 |             "content": {
  256 |               "application/json": {
  257 |                 "schema": {
  258 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  259 |                 }
  260 |               }
  261 |             }
  262 |           }
  263 |         },
  264 |         "tags": [
  265 |           "Template"
  266 |         ],
  267 |         "security": [
  268 |           {
  269 |             "Location-Access": []
  270 |           },
  271 |           {
  272 |             "Agency-Access": []
  273 |           }
  274 |         ]
  275 |       }
  276 |     },
  277 |     "/invoices/template/{templateId}": {
  278 |       "get": {
  279 |         "operationId": "get-invoice-template",
  280 |         "summary": "Get an template",
  281 |         "description": "API to get an template by template id",
  282 |         "parameters": [
  283 |           {
  284 |             "name": "Authorization",
  285 |             "in": "header",
  286 |             "description": "Access Token",
  287 |             "required": true,
  288 |             "schema": {
  289 |               "type": "string",
  290 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  291 |             }
  292 |           },
  293 |           {
  294 |             "name": "Version",
  295 |             "in": "header",
  296 |             "description": "API Version",
  297 |             "required": true,
  298 |             "schema": {
  299 |               "type": "string",
  300 |               "enum": [
  301 |                 "2021-07-28"
  302 |               ]
  303 |             }
  304 |           },
  305 |           {
  306 |             "name": "templateId",
  307 |             "required": true,
  308 |             "in": "path",
  309 |             "description": "Template Id",
  310 |             "example": "6578278e879ad2646715ba9c",
  311 |             "schema": {
  312 |               "type": "string"
  313 |             }
  314 |           },
  315 |           {
  316 |             "name": "altId",
  317 |             "required": true,
  318 |             "in": "query",
  319 |             "description": "location Id / company Id based on altType",
  320 |             "example": "6578278e879ad2646715ba9c",
  321 |             "schema": {
  322 |               "type": "string"
  323 |             }
  324 |           },
  325 |           {
  326 |             "name": "altType",
  327 |             "required": true,
  328 |             "in": "query",
  329 |             "description": "Alt Type",
  330 |             "example": "location",
  331 |             "schema": {
  332 |               "enum": [
  333 |                 "location"
  334 |               ],
  335 |               "type": "string"
  336 |             }
  337 |           }
  338 |         ],
  339 |         "responses": {
  340 |           "200": {
  341 |             "description": "Successful response",
  342 |             "content": {
  343 |               "application/json": {
  344 |                 "schema": {
  345 |                   "$ref": "#/components/schemas/GetTemplateResponseDto"
  346 |                 }
  347 |               }
  348 |             }
  349 |           },
  350 |           "400": {
  351 |             "description": "Bad Request",
  352 |             "content": {
  353 |               "application/json": {
  354 |                 "schema": {
  355 |                   "$ref": "#/components/schemas/BadRequestDTO"
  356 |                 }
  357 |               }
  358 |             }
  359 |           },
  360 |           "401": {
  361 |             "description": "Unauthorized",
  362 |             "content": {
  363 |               "application/json": {
  364 |                 "schema": {
  365 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  366 |                 }
  367 |               }
  368 |             }
  369 |           },
  370 |           "422": {
  371 |             "description": "Unprocessable Entity",
  372 |             "content": {
  373 |               "application/json": {
  374 |                 "schema": {
  375 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  376 |                 }
  377 |               }
  378 |             }
  379 |           }
  380 |         },
  381 |         "tags": [
  382 |           "Template"
  383 |         ],
  384 |         "security": [
  385 |           {
  386 |             "Location-Access": []
  387 |           },
  388 |           {
  389 |             "Agency-Access": []
  390 |           }
  391 |         ]
  392 |       },
  393 |       "put": {
  394 |         "operationId": "update-invoice-template",
  395 |         "summary": "Update template",
  396 |         "description": "API to update an template by template id",
  397 |         "parameters": [
  398 |           {
  399 |             "name": "Authorization",
  400 |             "in": "header",
  401 |             "description": "Access Token",
  402 |             "required": true,
  403 |             "schema": {
  404 |               "type": "string",
  405 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  406 |             }
  407 |           },
  408 |           {
  409 |             "name": "Version",
  410 |             "in": "header",
  411 |             "description": "API Version",
  412 |             "required": true,
  413 |             "schema": {
  414 |               "type": "string",
  415 |               "enum": [
  416 |                 "2021-07-28"
  417 |               ]
  418 |             }
  419 |           },
  420 |           {
  421 |             "name": "templateId",
  422 |             "required": true,
  423 |             "in": "path",
  424 |             "description": "Template Id",
  425 |             "example": "6578278e879ad2646715ba9c",
  426 |             "schema": {
  427 |               "type": "string"
  428 |             }
  429 |           }
  430 |         ],
  431 |         "requestBody": {
  432 |           "required": true,
  433 |           "content": {
  434 |             "application/json": {
  435 |               "schema": {
  436 |                 "$ref": "#/components/schemas/UpdateInvoiceTemplateDto"
  437 |               }
  438 |             }
  439 |           }
  440 |         },
  441 |         "responses": {
  442 |           "200": {
  443 |             "description": "Successful response",
  444 |             "content": {
  445 |               "application/json": {
  446 |                 "schema": {
  447 |                   "$ref": "#/components/schemas/UpdateInvoiceTemplateResponseDto"
  448 |                 }
  449 |               }
  450 |             }
  451 |           },
  452 |           "400": {
  453 |             "description": "Bad Request",
  454 |             "content": {
  455 |               "application/json": {
  456 |                 "schema": {
  457 |                   "$ref": "#/components/schemas/BadRequestDTO"
  458 |                 }
  459 |               }
  460 |             }
  461 |           },
  462 |           "401": {
  463 |             "description": "Unauthorized",
  464 |             "content": {
  465 |               "application/json": {
  466 |                 "schema": {
  467 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  468 |                 }
  469 |               }
  470 |             }
  471 |           },
  472 |           "422": {
  473 |             "description": "Unprocessable Entity",
  474 |             "content": {
  475 |               "application/json": {
  476 |                 "schema": {
  477 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  478 |                 }
  479 |               }
  480 |             }
  481 |           }
  482 |         },
  483 |         "tags": [
  484 |           "Template"
  485 |         ],
  486 |         "security": [
  487 |           {
  488 |             "Location-Access": []
  489 |           },
  490 |           {
  491 |             "Agency-Access": []
  492 |           }
  493 |         ]
  494 |       },
  495 |       "delete": {
  496 |         "operationId": "delete-invoice-template",
  497 |         "summary": "Delete template",
  498 |         "description": "API to update an template by template id",
  499 |         "parameters": [
  500 |           {
  501 |             "name": "Authorization",
  502 |             "in": "header",
  503 |             "description": "Access Token",
  504 |             "required": true,
  505 |             "schema": {
  506 |               "type": "string",
  507 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  508 |             }
  509 |           },
  510 |           {
  511 |             "name": "Version",
  512 |             "in": "header",
  513 |             "description": "API Version",
  514 |             "required": true,
  515 |             "schema": {
  516 |               "type": "string",
  517 |               "enum": [
  518 |                 "2021-07-28"
  519 |               ]
  520 |             }
  521 |           },
  522 |           {
  523 |             "name": "templateId",
  524 |             "required": true,
  525 |             "in": "path",
  526 |             "description": "Template Id",
  527 |             "example": "6578278e879ad2646715ba9c",
  528 |             "schema": {
  529 |               "type": "string"
  530 |             }
  531 |           },
  532 |           {
  533 |             "name": "altId",
  534 |             "required": true,
  535 |             "in": "query",
  536 |             "description": "location Id / company Id based on altType",
  537 |             "example": "6578278e879ad2646715ba9c",
  538 |             "schema": {
  539 |               "type": "string"
  540 |             }
  541 |           },
  542 |           {
  543 |             "name": "altType",
  544 |             "required": true,
  545 |             "in": "query",
  546 |             "description": "Alt Type",
  547 |             "example": "location",
  548 |             "schema": {
  549 |               "enum": [
  550 |                 "location"
  551 |               ],
  552 |               "type": "string"
  553 |             }
  554 |           }
  555 |         ],
  556 |         "responses": {
  557 |           "200": {
  558 |             "description": "Successful response",
  559 |             "content": {
  560 |               "application/json": {
  561 |                 "schema": {
  562 |                   "$ref": "#/components/schemas/DeleteInvoiceTemplateResponseDto"
  563 |                 }
  564 |               }
  565 |             }
  566 |           },
  567 |           "400": {
  568 |             "description": "Bad Request",
  569 |             "content": {
  570 |               "application/json": {
  571 |                 "schema": {
  572 |                   "$ref": "#/components/schemas/BadRequestDTO"
  573 |                 }
  574 |               }
  575 |             }
  576 |           },
  577 |           "401": {
  578 |             "description": "Unauthorized",
  579 |             "content": {
  580 |               "application/json": {
  581 |                 "schema": {
  582 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  583 |                 }
  584 |               }
  585 |             }
  586 |           },
  587 |           "422": {
  588 |             "description": "Unprocessable Entity",
  589 |             "content": {
  590 |               "application/json": {
  591 |                 "schema": {
  592 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  593 |                 }
  594 |               }
  595 |             }
  596 |           }
  597 |         },
  598 |         "tags": [
  599 |           "Template"
  600 |         ],
  601 |         "security": [
  602 |           {
  603 |             "Location-Access": []
  604 |           },
  605 |           {
  606 |             "Agency-Access": []
  607 |           }
  608 |         ]
  609 |       }
  610 |     },
  611 |     "/invoices/template/{templateId}/late-fees-configuration": {
  612 |       "patch": {
  613 |         "operationId": "update-invoice-late-fees-configuration",
  614 |         "summary": "Update template late fees configuration",
  615 |         "description": "API to update template late fees configuration by template id",
  616 |         "parameters": [
  617 |           {
  618 |             "name": "Authorization",
  619 |             "in": "header",
  620 |             "description": "Access Token",
  621 |             "required": true,
  622 |             "schema": {
  623 |               "type": "string",
  624 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  625 |             }
  626 |           },
  627 |           {
  628 |             "name": "Version",
  629 |             "in": "header",
  630 |             "description": "API Version",
  631 |             "required": true,
  632 |             "schema": {
  633 |               "type": "string",
  634 |               "enum": [
  635 |                 "2021-07-28"
  636 |               ]
  637 |             }
  638 |           },
  639 |           {
  640 |             "name": "templateId",
  641 |             "required": true,
  642 |             "in": "path",
  643 |             "description": "Template Id",
  644 |             "example": "6578278e879ad2646715ba9c",
  645 |             "schema": {
  646 |               "type": "string"
  647 |             }
  648 |           }
  649 |         ],
  650 |         "requestBody": {
  651 |           "required": true,
  652 |           "content": {
  653 |             "application/json": {
  654 |               "schema": {
  655 |                 "$ref": "#/components/schemas/UpdateInvoiceLateFeesConfigurationDto"
  656 |               }
  657 |             }
  658 |           }
  659 |         },
  660 |         "responses": {
  661 |           "200": {
  662 |             "description": "Successful response",
  663 |             "content": {
  664 |               "application/json": {
  665 |                 "schema": {
  666 |                   "$ref": "#/components/schemas/UpdateInvoiceTemplateResponseDto"
  667 |                 }
  668 |               }
  669 |             }
  670 |           },
  671 |           "400": {
  672 |             "description": "Bad Request",
  673 |             "content": {
  674 |               "application/json": {
  675 |                 "schema": {
  676 |                   "$ref": "#/components/schemas/BadRequestDTO"
  677 |                 }
  678 |               }
  679 |             }
  680 |           },
  681 |           "401": {
  682 |             "description": "Unauthorized",
  683 |             "content": {
  684 |               "application/json": {
  685 |                 "schema": {
  686 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  687 |                 }
  688 |               }
  689 |             }
  690 |           },
  691 |           "422": {
  692 |             "description": "Unprocessable Entity",
  693 |             "content": {
  694 |               "application/json": {
  695 |                 "schema": {
  696 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  697 |                 }
  698 |               }
  699 |             }
  700 |           }
  701 |         },
  702 |         "tags": [
  703 |           "Template"
  704 |         ],
  705 |         "security": [
  706 |           {
  707 |             "Location-Access": []
  708 |           },
  709 |           {
  710 |             "Agency-Access": []
  711 |           }
  712 |         ]
  713 |       }
  714 |     },
  715 |     "/invoices/template/{templateId}/payment-methods-configuration": {
  716 |       "patch": {
  717 |         "operationId": "update-invoice-late-fees-configuration",
  718 |         "summary": "Update template late fees configuration",
  719 |         "description": "API to update template late fees configuration by template id",
  720 |         "parameters": [
  721 |           {
  722 |             "name": "Authorization",
  723 |             "in": "header",
  724 |             "description": "Access Token",
  725 |             "required": true,
  726 |             "schema": {
  727 |               "type": "string",
  728 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  729 |             }
  730 |           },
  731 |           {
  732 |             "name": "Version",
  733 |             "in": "header",
  734 |             "description": "API Version",
  735 |             "required": true,
  736 |             "schema": {
  737 |               "type": "string",
  738 |               "enum": [
  739 |                 "2021-07-28"
  740 |               ]
  741 |             }
  742 |           },
  743 |           {
  744 |             "name": "templateId",
  745 |             "required": true,
  746 |             "in": "path",
  747 |             "description": "Template Id",
  748 |             "example": "6578278e879ad2646715ba9c",
  749 |             "schema": {
  750 |               "type": "string"
  751 |             }
  752 |           }
  753 |         ],
  754 |         "requestBody": {
  755 |           "required": true,
  756 |           "content": {
  757 |             "application/json": {
  758 |               "schema": {
  759 |                 "$ref": "#/components/schemas/UpdatePaymentMethodsConfigurationDto"
  760 |               }
  761 |             }
  762 |           }
  763 |         },
  764 |         "responses": {
  765 |           "200": {
  766 |             "description": "Successful response",
  767 |             "content": {
  768 |               "application/json": {
  769 |                 "schema": {
  770 |                   "$ref": "#/components/schemas/UpdateInvoiceTemplateResponseDto"
  771 |                 }
  772 |               }
  773 |             }
  774 |           },
  775 |           "400": {
  776 |             "description": "Bad Request",
  777 |             "content": {
  778 |               "application/json": {
  779 |                 "schema": {
  780 |                   "$ref": "#/components/schemas/BadRequestDTO"
  781 |                 }
  782 |               }
  783 |             }
  784 |           },
  785 |           "401": {
  786 |             "description": "Unauthorized",
  787 |             "content": {
  788 |               "application/json": {
  789 |                 "schema": {
  790 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  791 |                 }
  792 |               }
  793 |             }
  794 |           },
  795 |           "422": {
  796 |             "description": "Unprocessable Entity",
  797 |             "content": {
  798 |               "application/json": {
  799 |                 "schema": {
  800 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  801 |                 }
  802 |               }
  803 |             }
  804 |           }
  805 |         },
  806 |         "tags": [
  807 |           "Template"
  808 |         ],
  809 |         "security": [
  810 |           {
  811 |             "Location-Access": []
  812 |           },
  813 |           {
  814 |             "Agency-Access": []
  815 |           }
  816 |         ]
  817 |       }
  818 |     },
  819 |     "/invoices/schedule": {
  820 |       "post": {
  821 |         "operationId": "create-invoice-schedule",
  822 |         "summary": "Create Invoice Schedule",
  823 |         "description": "API to create an invoice Schedule",
  824 |         "parameters": [
  825 |           {
  826 |             "name": "Authorization",
  827 |             "in": "header",
  828 |             "description": "Access Token",
  829 |             "required": true,
  830 |             "schema": {
  831 |               "type": "string",
  832 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  833 |             }
  834 |           },
  835 |           {
  836 |             "name": "Version",
  837 |             "in": "header",
  838 |             "description": "API Version",
  839 |             "required": true,
  840 |             "schema": {
  841 |               "type": "string",
  842 |               "enum": [
  843 |                 "2021-07-28"
  844 |               ]
  845 |             }
  846 |           }
  847 |         ],
  848 |         "requestBody": {
  849 |           "required": true,
  850 |           "content": {
  851 |             "application/json": {
  852 |               "schema": {
  853 |                 "$ref": "#/components/schemas/CreateInvoiceScheduleDto"
  854 |               }
  855 |             }
  856 |           }
  857 |         },
  858 |         "responses": {
  859 |           "200": {
  860 |             "description": "Successful response",
  861 |             "content": {
  862 |               "application/json": {
  863 |                 "schema": {
  864 |                   "$ref": "#/components/schemas/CreateInvoiceScheduleResponseDto"
  865 |                 }
  866 |               }
  867 |             }
  868 |           },
  869 |           "400": {
  870 |             "description": "Bad Request",
  871 |             "content": {
  872 |               "application/json": {
  873 |                 "schema": {
  874 |                   "$ref": "#/components/schemas/BadRequestDTO"
  875 |                 }
  876 |               }
  877 |             }
  878 |           },
  879 |           "401": {
  880 |             "description": "Unauthorized",
  881 |             "content": {
  882 |               "application/json": {
  883 |                 "schema": {
  884 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  885 |                 }
  886 |               }
  887 |             }
  888 |           },
  889 |           "422": {
  890 |             "description": "Unprocessable Entity",
  891 |             "content": {
  892 |               "application/json": {
  893 |                 "schema": {
  894 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  895 |                 }
  896 |               }
  897 |             }
  898 |           }
  899 |         },
  900 |         "tags": [
  901 |           "Schedule"
  902 |         ],
  903 |         "security": [
  904 |           {
  905 |             "Location-Access": []
  906 |           },
  907 |           {
  908 |             "Agency-Access": []
  909 |           }
  910 |         ]
  911 |       },
  912 |       "get": {
  913 |         "operationId": "list-invoice-schedules",
  914 |         "summary": "List schedules",
  915 |         "description": "API to get list of schedules",
  916 |         "parameters": [
  917 |           {
  918 |             "name": "Authorization",
  919 |             "in": "header",
  920 |             "description": "Access Token",
  921 |             "required": true,
  922 |             "schema": {
  923 |               "type": "string",
  924 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  925 |             }
  926 |           },
  927 |           {
  928 |             "name": "Version",
  929 |             "in": "header",
  930 |             "description": "API Version",
  931 |             "required": true,
  932 |             "schema": {
  933 |               "type": "string",
  934 |               "enum": [
  935 |                 "2021-07-28"
  936 |               ]
  937 |             }
  938 |           },
  939 |           {
  940 |             "name": "altId",
  941 |             "required": true,
  942 |             "in": "query",
  943 |             "description": "location Id / company Id based on altType",
  944 |             "example": "6578278e879ad2646715ba9c",
  945 |             "schema": {
  946 |               "type": "string"
  947 |             }
  948 |           },
  949 |           {
  950 |             "name": "altType",
  951 |             "required": true,
  952 |             "in": "query",
  953 |             "description": "Alt Type",
  954 |             "example": "location",
  955 |             "schema": {
  956 |               "enum": [
  957 |                 "location"
  958 |               ],
  959 |               "type": "string"
  960 |             }
  961 |           },
  962 |           {
  963 |             "name": "status",
  964 |             "required": false,
  965 |             "in": "query",
  966 |             "description": "status to be filtered",
  967 |             "schema": {
  968 |               "type": "string"
  969 |             }
  970 |           },
  971 |           {
  972 |             "name": "startAt",
  973 |             "required": false,
  974 |             "in": "query",
  975 |             "description": "startAt in YYYY-MM-DD format",
  976 |             "example": "2023-01-01",
  977 |             "schema": {
  978 |               "type": "string"
  979 |             }
  980 |           },
  981 |           {
  982 |             "name": "endAt",
  983 |             "required": false,
  984 |             "in": "query",
  985 |             "description": "endAt in YYYY-MM-DD format",
  986 |             "example": "2023-01-01",
  987 |             "schema": {
  988 |               "type": "string"
  989 |             }
  990 |           },
  991 |           {
  992 |             "name": "search",
  993 |             "required": false,
  994 |             "in": "query",
  995 |             "description": "To search for an invoice by id / name / email / phoneNo",
  996 |             "example": "Alex",
  997 |             "schema": {
  998 |               "type": "string"
  999 |             }
 1000 |           },
 1001 |           {
 1002 |             "name": "paymentMode",
 1003 |             "required": false,
 1004 |             "in": "query",
 1005 |             "description": "payment mode",
 1006 |             "example": "live",
 1007 |             "schema": {
 1008 |               "enum": [
 1009 |                 "default",
 1010 |                 "live",
 1011 |                 "test"
 1012 |               ],
 1013 |               "type": "string"
 1014 |             }
 1015 |           },
 1016 |           {
 1017 |             "name": "limit",
 1018 |             "required": true,
 1019 |             "in": "query",
 1020 |             "description": "Limit the number of items to return",
 1021 |             "example": 10,
 1022 |             "schema": {
 1023 |               "type": "string"
 1024 |             }
 1025 |           },
 1026 |           {
 1027 |             "name": "offset",
 1028 |             "required": true,
 1029 |             "in": "query",
 1030 |             "description": "Number of items to skip",
 1031 |             "example": 10,
 1032 |             "schema": {
 1033 |               "type": "string"
 1034 |             }
 1035 |           }
 1036 |         ],
 1037 |         "responses": {
 1038 |           "200": {
 1039 |             "description": "Successful response",
 1040 |             "content": {
 1041 |               "application/json": {
 1042 |                 "schema": {
 1043 |                   "$ref": "#/components/schemas/ListSchedulesResponseDto"
 1044 |                 }
 1045 |               }
 1046 |             }
 1047 |           },
 1048 |           "400": {
 1049 |             "description": "Bad Request",
 1050 |             "content": {
 1051 |               "application/json": {
 1052 |                 "schema": {
 1053 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1054 |                 }
 1055 |               }
 1056 |             }
 1057 |           },
 1058 |           "401": {
 1059 |             "description": "Unauthorized",
 1060 |             "content": {
 1061 |               "application/json": {
 1062 |                 "schema": {
 1063 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1064 |                 }
 1065 |               }
 1066 |             }
 1067 |           },
 1068 |           "422": {
 1069 |             "description": "Unprocessable Entity",
 1070 |             "content": {
 1071 |               "application/json": {
 1072 |                 "schema": {
 1073 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1074 |                 }
 1075 |               }
 1076 |             }
 1077 |           }
 1078 |         },
 1079 |         "tags": [
 1080 |           "Schedule"
 1081 |         ],
 1082 |         "security": [
 1083 |           {
 1084 |             "Location-Access": []
 1085 |           },
 1086 |           {
 1087 |             "Agency-Access": []
 1088 |           }
 1089 |         ]
 1090 |       }
 1091 |     },
 1092 |     "/invoices/schedule/{scheduleId}": {
 1093 |       "get": {
 1094 |         "operationId": "get-invoice-schedule",
 1095 |         "summary": "Get an schedule",
 1096 |         "description": "API to get an schedule by schedule id",
 1097 |         "parameters": [
 1098 |           {
 1099 |             "name": "Authorization",
 1100 |             "in": "header",
 1101 |             "description": "Access Token",
 1102 |             "required": true,
 1103 |             "schema": {
 1104 |               "type": "string",
 1105 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1106 |             }
 1107 |           },
 1108 |           {
 1109 |             "name": "Version",
 1110 |             "in": "header",
 1111 |             "description": "API Version",
 1112 |             "required": true,
 1113 |             "schema": {
 1114 |               "type": "string",
 1115 |               "enum": [
 1116 |                 "2021-07-28"
 1117 |               ]
 1118 |             }
 1119 |           },
 1120 |           {
 1121 |             "name": "scheduleId",
 1122 |             "required": true,
 1123 |             "in": "path",
 1124 |             "description": "Schedule Id",
 1125 |             "example": "6578278e879ad2646715ba9c",
 1126 |             "schema": {
 1127 |               "type": "string"
 1128 |             }
 1129 |           },
 1130 |           {
 1131 |             "name": "altId",
 1132 |             "required": true,
 1133 |             "in": "query",
 1134 |             "description": "location Id / company Id based on altType",
 1135 |             "example": "6578278e879ad2646715ba9c",
 1136 |             "schema": {
 1137 |               "type": "string"
 1138 |             }
 1139 |           },
 1140 |           {
 1141 |             "name": "altType",
 1142 |             "required": true,
 1143 |             "in": "query",
 1144 |             "description": "Alt Type",
 1145 |             "example": "location",
 1146 |             "schema": {
 1147 |               "enum": [
 1148 |                 "location"
 1149 |               ],
 1150 |               "type": "string"
 1151 |             }
 1152 |           }
 1153 |         ],
 1154 |         "responses": {
 1155 |           "200": {
 1156 |             "description": "Successful response",
 1157 |             "content": {
 1158 |               "application/json": {
 1159 |                 "schema": {
 1160 |                   "$ref": "#/components/schemas/GetScheduleResponseDto"
 1161 |                 }
 1162 |               }
 1163 |             }
 1164 |           },
 1165 |           "400": {
 1166 |             "description": "Bad Request",
 1167 |             "content": {
 1168 |               "application/json": {
 1169 |                 "schema": {
 1170 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1171 |                 }
 1172 |               }
 1173 |             }
 1174 |           },
 1175 |           "401": {
 1176 |             "description": "Unauthorized",
 1177 |             "content": {
 1178 |               "application/json": {
 1179 |                 "schema": {
 1180 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1181 |                 }
 1182 |               }
 1183 |             }
 1184 |           },
 1185 |           "422": {
 1186 |             "description": "Unprocessable Entity",
 1187 |             "content": {
 1188 |               "application/json": {
 1189 |                 "schema": {
 1190 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1191 |                 }
 1192 |               }
 1193 |             }
 1194 |           }
 1195 |         },
 1196 |         "tags": [
 1197 |           "Schedule"
 1198 |         ],
 1199 |         "security": [
 1200 |           {
 1201 |             "Location-Access": []
 1202 |           },
 1203 |           {
 1204 |             "Agency-Access": []
 1205 |           }
 1206 |         ]
 1207 |       },
 1208 |       "put": {
 1209 |         "operationId": "update-invoice-schedule",
 1210 |         "summary": "Update schedule",
 1211 |         "description": "API to update an schedule by schedule id",
 1212 |         "parameters": [
 1213 |           {
 1214 |             "name": "Authorization",
 1215 |             "in": "header",
 1216 |             "description": "Access Token",
 1217 |             "required": true,
 1218 |             "schema": {
 1219 |               "type": "string",
 1220 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1221 |             }
 1222 |           },
 1223 |           {
 1224 |             "name": "Version",
 1225 |             "in": "header",
 1226 |             "description": "API Version",
 1227 |             "required": true,
 1228 |             "schema": {
 1229 |               "type": "string",
 1230 |               "enum": [
 1231 |                 "2021-07-28"
 1232 |               ]
 1233 |             }
 1234 |           },
 1235 |           {
 1236 |             "name": "scheduleId",
 1237 |             "required": true,
 1238 |             "in": "path",
 1239 |             "description": "Schedule Id",
 1240 |             "example": "6578278e879ad2646715ba9c",
 1241 |             "schema": {
 1242 |               "type": "string"
 1243 |             }
 1244 |           }
 1245 |         ],
 1246 |         "requestBody": {
 1247 |           "required": true,
 1248 |           "content": {
 1249 |             "application/json": {
 1250 |               "schema": {
 1251 |                 "$ref": "#/components/schemas/UpdateInvoiceScheduleDto"
 1252 |               }
 1253 |             }
 1254 |           }
 1255 |         },
 1256 |         "responses": {
 1257 |           "200": {
 1258 |             "description": "Successful response",
 1259 |             "content": {
 1260 |               "application/json": {
 1261 |                 "schema": {
 1262 |                   "$ref": "#/components/schemas/UpdateInvoiceScheduleResponseDto"
 1263 |                 }
 1264 |               }
 1265 |             }
 1266 |           },
 1267 |           "400": {
 1268 |             "description": "Bad Request",
 1269 |             "content": {
 1270 |               "application/json": {
 1271 |                 "schema": {
 1272 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1273 |                 }
 1274 |               }
 1275 |             }
 1276 |           },
 1277 |           "401": {
 1278 |             "description": "Unauthorized",
 1279 |             "content": {
 1280 |               "application/json": {
 1281 |                 "schema": {
 1282 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1283 |                 }
 1284 |               }
 1285 |             }
 1286 |           },
 1287 |           "422": {
 1288 |             "description": "Unprocessable Entity",
 1289 |             "content": {
 1290 |               "application/json": {
 1291 |                 "schema": {
 1292 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1293 |                 }
 1294 |               }
 1295 |             }
 1296 |           }
 1297 |         },
 1298 |         "tags": [
 1299 |           "Schedule"
 1300 |         ],
 1301 |         "security": [
 1302 |           {
 1303 |             "Location-Access": []
 1304 |           },
 1305 |           {
 1306 |             "Agency-Access": []
 1307 |           }
 1308 |         ]
 1309 |       },
 1310 |       "delete": {
 1311 |         "operationId": "delete-invoice-schedule",
 1312 |         "summary": "Delete schedule",
 1313 |         "description": "API to delete an schedule by schedule id",
 1314 |         "parameters": [
 1315 |           {
 1316 |             "name": "Authorization",
 1317 |             "in": "header",
 1318 |             "description": "Access Token",
 1319 |             "required": true,
 1320 |             "schema": {
 1321 |               "type": "string",
 1322 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1323 |             }
 1324 |           },
 1325 |           {
 1326 |             "name": "Version",
 1327 |             "in": "header",
 1328 |             "description": "API Version",
 1329 |             "required": true,
 1330 |             "schema": {
 1331 |               "type": "string",
 1332 |               "enum": [
 1333 |                 "2021-07-28"
 1334 |               ]
 1335 |             }
 1336 |           },
 1337 |           {
 1338 |             "name": "scheduleId",
 1339 |             "required": true,
 1340 |             "in": "path",
 1341 |             "description": "Schedule Id",
 1342 |             "example": "6578278e879ad2646715ba9c",
 1343 |             "schema": {
 1344 |               "type": "string"
 1345 |             }
 1346 |           },
 1347 |           {
 1348 |             "name": "altId",
 1349 |             "required": true,
 1350 |             "in": "query",
 1351 |             "description": "location Id / company Id based on altType",
 1352 |             "example": "6578278e879ad2646715ba9c",
 1353 |             "schema": {
 1354 |               "type": "string"
 1355 |             }
 1356 |           },
 1357 |           {
 1358 |             "name": "altType",
 1359 |             "required": true,
 1360 |             "in": "query",
 1361 |             "description": "Alt Type",
 1362 |             "example": "location",
 1363 |             "schema": {
 1364 |               "enum": [
 1365 |                 "location"
 1366 |               ],
 1367 |               "type": "string"
 1368 |             }
 1369 |           }
 1370 |         ],
 1371 |         "responses": {
 1372 |           "200": {
 1373 |             "description": "Successful response",
 1374 |             "content": {
 1375 |               "application/json": {
 1376 |                 "schema": {
 1377 |                   "$ref": "#/components/schemas/DeleteInvoiceScheduleResponseDto"
 1378 |                 }
 1379 |               }
 1380 |             }
 1381 |           },
 1382 |           "400": {
 1383 |             "description": "Bad Request",
 1384 |             "content": {
 1385 |               "application/json": {
 1386 |                 "schema": {
 1387 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1388 |                 }
 1389 |               }
 1390 |             }
 1391 |           },
 1392 |           "401": {
 1393 |             "description": "Unauthorized",
 1394 |             "content": {
 1395 |               "application/json": {
 1396 |                 "schema": {
 1397 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1398 |                 }
 1399 |               }
 1400 |             }
 1401 |           },
 1402 |           "422": {
 1403 |             "description": "Unprocessable Entity",
 1404 |             "content": {
 1405 |               "application/json": {
 1406 |                 "schema": {
 1407 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1408 |                 }
 1409 |               }
 1410 |             }
 1411 |           }
 1412 |         },
 1413 |         "tags": [
 1414 |           "Schedule"
 1415 |         ],
 1416 |         "security": [
 1417 |           {
 1418 |             "Location-Access": []
 1419 |           },
 1420 |           {
 1421 |             "Agency-Access": []
 1422 |           }
 1423 |         ]
 1424 |       }
 1425 |     },
 1426 |     "/invoices/schedule/{scheduleId}/updateAndSchedule": {
 1427 |       "post": {
 1428 |         "operationId": "update-and-schedule-invoice-schedule",
 1429 |         "summary": "Update scheduled recurring invoice",
 1430 |         "description": "API to update scheduled recurring invoice",
 1431 |         "parameters": [
 1432 |           {
 1433 |             "name": "Authorization",
 1434 |             "in": "header",
 1435 |             "description": "Access Token",
 1436 |             "required": true,
 1437 |             "schema": {
 1438 |               "type": "string",
 1439 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1440 |             }
 1441 |           },
 1442 |           {
 1443 |             "name": "Version",
 1444 |             "in": "header",
 1445 |             "description": "API Version",
 1446 |             "required": true,
 1447 |             "schema": {
 1448 |               "type": "string",
 1449 |               "enum": [
 1450 |                 "2021-07-28"
 1451 |               ]
 1452 |             }
 1453 |           },
 1454 |           {
 1455 |             "name": "scheduleId",
 1456 |             "required": true,
 1457 |             "in": "path",
 1458 |             "description": "Schedule Id",
 1459 |             "example": "6578278e879ad2646715ba9c",
 1460 |             "schema": {
 1461 |               "type": "string"
 1462 |             }
 1463 |           }
 1464 |         ],
 1465 |         "responses": {
 1466 |           "200": {
 1467 |             "description": "Successful response",
 1468 |             "content": {
 1469 |               "application/json": {
 1470 |                 "schema": {
 1471 |                   "$ref": "#/components/schemas/UpdateAndScheduleInvoiceScheduleResponseDto"
 1472 |                 }
 1473 |               }
 1474 |             }
 1475 |           },
 1476 |           "400": {
 1477 |             "description": "Bad Request",
 1478 |             "content": {
 1479 |               "application/json": {
 1480 |                 "schema": {
 1481 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1482 |                 }
 1483 |               }
 1484 |             }
 1485 |           },
 1486 |           "401": {
 1487 |             "description": "Unauthorized",
 1488 |             "content": {
 1489 |               "application/json": {
 1490 |                 "schema": {
 1491 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1492 |                 }
 1493 |               }
 1494 |             }
 1495 |           },
 1496 |           "422": {
 1497 |             "description": "Unprocessable Entity",
 1498 |             "content": {
 1499 |               "application/json": {
 1500 |                 "schema": {
 1501 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1502 |                 }
 1503 |               }
 1504 |             }
 1505 |           }
 1506 |         },
 1507 |         "tags": [
 1508 |           "Schedule"
 1509 |         ],
 1510 |         "security": [
 1511 |           {
 1512 |             "Location-Access": []
 1513 |           },
 1514 |           {
 1515 |             "Agency-Access": []
 1516 |           }
 1517 |         ]
 1518 |       }
 1519 |     },
 1520 |     "/invoices/schedule/{scheduleId}/schedule": {
 1521 |       "post": {
 1522 |         "operationId": "schedule-invoice-schedule",
 1523 |         "summary": "Schedule an schedule invoice",
 1524 |         "description": "API to schedule an schedule invoice to start sending to the customer",
 1525 |         "parameters": [
 1526 |           {
 1527 |             "name": "Authorization",
 1528 |             "in": "header",
 1529 |             "description": "Access Token",
 1530 |             "required": true,
 1531 |             "schema": {
 1532 |               "type": "string",
 1533 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1534 |             }
 1535 |           },
 1536 |           {
 1537 |             "name": "Version",
 1538 |             "in": "header",
 1539 |             "description": "API Version",
 1540 |             "required": true,
 1541 |             "schema": {
 1542 |               "type": "string",
 1543 |               "enum": [
 1544 |                 "2021-07-28"
 1545 |               ]
 1546 |             }
 1547 |           },
 1548 |           {
 1549 |             "name": "scheduleId",
 1550 |             "required": true,
 1551 |             "in": "path",
 1552 |             "description": "Schedule Id",
 1553 |             "example": "6578278e879ad2646715ba9c",
 1554 |             "schema": {
 1555 |               "type": "string"
 1556 |             }
 1557 |           }
 1558 |         ],
 1559 |         "requestBody": {
 1560 |           "required": true,
 1561 |           "content": {
 1562 |             "application/json": {
 1563 |               "schema": {
 1564 |                 "$ref": "#/components/schemas/ScheduleInvoiceScheduleDto"
 1565 |               }
 1566 |             }
 1567 |           }
 1568 |         },
 1569 |         "responses": {
 1570 |           "200": {
 1571 |             "description": "Successful response",
 1572 |             "content": {
 1573 |               "application/json": {
 1574 |                 "schema": {
 1575 |                   "$ref": "#/components/schemas/ScheduleInvoiceScheduleResponseDto"
 1576 |                 }
 1577 |               }
 1578 |             }
 1579 |           },
 1580 |           "400": {
 1581 |             "description": "Bad Request",
 1582 |             "content": {
 1583 |               "application/json": {
 1584 |                 "schema": {
 1585 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1586 |                 }
 1587 |               }
 1588 |             }
 1589 |           },
 1590 |           "401": {
 1591 |             "description": "Unauthorized",
 1592 |             "content": {
 1593 |               "application/json": {
 1594 |                 "schema": {
 1595 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1596 |                 }
 1597 |               }
 1598 |             }
 1599 |           },
 1600 |           "422": {
 1601 |             "description": "Unprocessable Entity",
 1602 |             "content": {
 1603 |               "application/json": {
 1604 |                 "schema": {
 1605 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1606 |                 }
 1607 |               }
 1608 |             }
 1609 |           }
 1610 |         },
 1611 |         "tags": [
 1612 |           "Schedule"
 1613 |         ],
 1614 |         "security": [
 1615 |           {
 1616 |             "Location-Access": []
 1617 |           },
 1618 |           {
 1619 |             "Agency-Access": []
 1620 |           }
 1621 |         ]
 1622 |       }
 1623 |     },
 1624 |     "/invoices/schedule/{scheduleId}/auto-payment": {
 1625 |       "post": {
 1626 |         "operationId": "auto-payment-invoice-schedule",
 1627 |         "summary": "Manage Auto payment for an schedule invoice",
 1628 |         "description": "API to manage auto payment for a schedule",
 1629 |         "parameters": [
 1630 |           {
 1631 |             "name": "Authorization",
 1632 |             "in": "header",
 1633 |             "description": "Access Token",
 1634 |             "required": true,
 1635 |             "schema": {
 1636 |               "type": "string",
 1637 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1638 |             }
 1639 |           },
 1640 |           {
 1641 |             "name": "Version",
 1642 |             "in": "header",
 1643 |             "description": "API Version",
 1644 |             "required": true,
 1645 |             "schema": {
 1646 |               "type": "string",
 1647 |               "enum": [
 1648 |                 "2021-07-28"
 1649 |               ]
 1650 |             }
 1651 |           },
 1652 |           {
 1653 |             "name": "scheduleId",
 1654 |             "required": true,
 1655 |             "in": "path",
 1656 |             "description": "Schedule Id",
 1657 |             "example": "6578278e879ad2646715ba9c",
 1658 |             "schema": {
 1659 |               "type": "string"
 1660 |             }
 1661 |           }
 1662 |         ],
 1663 |         "requestBody": {
 1664 |           "required": true,
 1665 |           "content": {
 1666 |             "application/json": {
 1667 |               "schema": {
 1668 |                 "$ref": "#/components/schemas/AutoPaymentScheduleDto"
 1669 |               }
 1670 |             }
 1671 |           }
 1672 |         },
 1673 |         "responses": {
 1674 |           "200": {
 1675 |             "description": "Successful response",
 1676 |             "content": {
 1677 |               "application/json": {
 1678 |                 "schema": {
 1679 |                   "$ref": "#/components/schemas/AutoPaymentInvoiceScheduleResponseDto"
 1680 |                 }
 1681 |               }
 1682 |             }
 1683 |           },
 1684 |           "400": {
 1685 |             "description": "Bad Request",
 1686 |             "content": {
 1687 |               "application/json": {
 1688 |                 "schema": {
 1689 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1690 |                 }
 1691 |               }
 1692 |             }
 1693 |           },
 1694 |           "401": {
 1695 |             "description": "Unauthorized",
 1696 |             "content": {
 1697 |               "application/json": {
 1698 |                 "schema": {
 1699 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1700 |                 }
 1701 |               }
 1702 |             }
 1703 |           },
 1704 |           "422": {
 1705 |             "description": "Unprocessable Entity",
 1706 |             "content": {
 1707 |               "application/json": {
 1708 |                 "schema": {
 1709 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1710 |                 }
 1711 |               }
 1712 |             }
 1713 |           }
 1714 |         },
 1715 |         "tags": [
 1716 |           "Schedule"
 1717 |         ],
 1718 |         "security": [
 1719 |           {
 1720 |             "Location-Access": []
 1721 |           },
 1722 |           {
 1723 |             "Agency-Access": []
 1724 |           }
 1725 |         ]
 1726 |       }
 1727 |     },
 1728 |     "/invoices/schedule/{scheduleId}/cancel": {
 1729 |       "post": {
 1730 |         "operationId": "cancel-invoice-schedule",
 1731 |         "summary": "Cancel an scheduled invoice",
 1732 |         "description": "API to cancel a scheduled invoice by schedule id",
 1733 |         "parameters": [
 1734 |           {
 1735 |             "name": "Authorization",
 1736 |             "in": "header",
 1737 |             "description": "Access Token",
 1738 |             "required": true,
 1739 |             "schema": {
 1740 |               "type": "string",
 1741 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1742 |             }
 1743 |           },
 1744 |           {
 1745 |             "name": "Version",
 1746 |             "in": "header",
 1747 |             "description": "API Version",
 1748 |             "required": true,
 1749 |             "schema": {
 1750 |               "type": "string",
 1751 |               "enum": [
 1752 |                 "2021-07-28"
 1753 |               ]
 1754 |             }
 1755 |           },
 1756 |           {
 1757 |             "name": "scheduleId",
 1758 |             "required": true,
 1759 |             "in": "path",
 1760 |             "description": "Schedule Id",
 1761 |             "example": "6578278e879ad2646715ba9c",
 1762 |             "schema": {
 1763 |               "type": "string"
 1764 |             }
 1765 |           }
 1766 |         ],
 1767 |         "requestBody": {
 1768 |           "required": true,
 1769 |           "content": {
 1770 |             "application/json": {
 1771 |               "schema": {
 1772 |                 "$ref": "#/components/schemas/CancelInvoiceScheduleDto"
 1773 |               }
 1774 |             }
 1775 |           }
 1776 |         },
 1777 |         "responses": {
 1778 |           "200": {
 1779 |             "description": "Successful response",
 1780 |             "content": {
 1781 |               "application/json": {
 1782 |                 "schema": {
 1783 |                   "$ref": "#/components/schemas/CancelInvoiceScheduleResponseDto"
 1784 |                 }
 1785 |               }
 1786 |             }
 1787 |           },
 1788 |           "400": {
 1789 |             "description": "Bad Request",
 1790 |             "content": {
 1791 |               "application/json": {
 1792 |                 "schema": {
 1793 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1794 |                 }
 1795 |               }
 1796 |             }
 1797 |           },
 1798 |           "401": {
 1799 |             "description": "Unauthorized",
 1800 |             "content": {
 1801 |               "application/json": {
 1802 |                 "schema": {
 1803 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1804 |                 }
 1805 |               }
 1806 |             }
 1807 |           },
 1808 |           "422": {
 1809 |             "description": "Unprocessable Entity",
 1810 |             "content": {
 1811 |               "application/json": {
 1812 |                 "schema": {
 1813 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1814 |                 }
 1815 |               }
 1816 |             }
 1817 |           }
 1818 |         },
 1819 |         "tags": [
 1820 |           "Schedule"
 1821 |         ],
 1822 |         "security": [
 1823 |           {
 1824 |             "Location-Access": []
 1825 |           },
 1826 |           {
 1827 |             "Agency-Access": []
 1828 |           }
 1829 |         ]
 1830 |       }
 1831 |     },
 1832 |     "/invoices/text2pay": {
 1833 |       "post": {
 1834 |         "operationId": "text2pay-invoice",
 1835 |         "summary": "Create & Send",
 1836 |         "description": "API to create or update a text2pay invoice",
 1837 |         "parameters": [
 1838 |           {
 1839 |             "name": "Authorization",
 1840 |             "in": "header",
 1841 |             "description": "Access Token",
 1842 |             "required": true,
 1843 |             "schema": {
 1844 |               "type": "string",
 1845 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1846 |             }
 1847 |           },
 1848 |           {
 1849 |             "name": "Version",
 1850 |             "in": "header",
 1851 |             "description": "API Version",
 1852 |             "required": true,
 1853 |             "schema": {
 1854 |               "type": "string",
 1855 |               "enum": [
 1856 |                 "2021-07-28"
 1857 |               ]
 1858 |             }
 1859 |           }
 1860 |         ],
 1861 |         "requestBody": {
 1862 |           "required": true,
 1863 |           "content": {
 1864 |             "application/json": {
 1865 |               "schema": {
 1866 |                 "$ref": "#/components/schemas/Text2PayDto"
 1867 |               }
 1868 |             }
 1869 |           }
 1870 |         },
 1871 |         "responses": {
 1872 |           "200": {
 1873 |             "description": "Successful response",
 1874 |             "content": {
 1875 |               "application/json": {
 1876 |                 "schema": {
 1877 |                   "$ref": "#/components/schemas/Text2PayInvoiceResponseDto"
 1878 |                 }
 1879 |               }
 1880 |             }
 1881 |           },
 1882 |           "400": {
 1883 |             "description": "Bad Request",
 1884 |             "content": {
 1885 |               "application/json": {
 1886 |                 "schema": {
 1887 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1888 |                 }
 1889 |               }
 1890 |             }
 1891 |           },
 1892 |           "401": {
 1893 |             "description": "Unauthorized",
 1894 |             "content": {
 1895 |               "application/json": {
 1896 |                 "schema": {
 1897 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1898 |                 }
 1899 |               }
 1900 |             }
 1901 |           },
 1902 |           "422": {
 1903 |             "description": "Unprocessable Entity",
 1904 |             "content": {
 1905 |               "application/json": {
 1906 |                 "schema": {
 1907 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 1908 |                 }
 1909 |               }
 1910 |             }
 1911 |           }
 1912 |         },
 1913 |         "tags": [
 1914 |           "Text2Pay"
 1915 |         ],
 1916 |         "security": [
 1917 |           {
 1918 |             "Location-Access": []
 1919 |           }
 1920 |         ]
 1921 |       }
 1922 |     },
 1923 |     "/invoices/generate-invoice-number": {
 1924 |       "get": {
 1925 |         "operationId": "generate-invoice-number",
 1926 |         "summary": "Generate Invoice Number",
 1927 |         "description": "Get the next invoice number for the given location",
 1928 |         "parameters": [
 1929 |           {
 1930 |             "name": "Authorization",
 1931 |             "in": "header",
 1932 |             "description": "Access Token",
 1933 |             "required": true,
 1934 |             "schema": {
 1935 |               "type": "string",
 1936 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 1937 |             }
 1938 |           },
 1939 |           {
 1940 |             "name": "Version",
 1941 |             "in": "header",
 1942 |             "description": "API Version",
 1943 |             "required": true,
 1944 |             "schema": {
 1945 |               "type": "string",
 1946 |               "enum": [
 1947 |                 "2021-07-28"
 1948 |               ]
 1949 |             }
 1950 |           },
 1951 |           {
 1952 |             "name": "altId",
 1953 |             "required": true,
 1954 |             "in": "query",
 1955 |             "description": "Location Id",
 1956 |             "schema": {
 1957 |               "type": "string"
 1958 |             }
 1959 |           },
 1960 |           {
 1961 |             "name": "altType",
 1962 |             "required": true,
 1963 |             "in": "query",
 1964 |             "schema": {
 1965 |               "enum": [
 1966 |                 "location"
 1967 |               ],
 1968 |               "type": "string"
 1969 |             }
 1970 |           }
 1971 |         ],
 1972 |         "responses": {
 1973 |           "200": {
 1974 |             "description": "Successful response",
 1975 |             "content": {
 1976 |               "application/json": {
 1977 |                 "schema": {
 1978 |                   "$ref": "#/components/schemas/GenerateInvoiceNumberResponseDto"
 1979 |                 }
 1980 |               }
 1981 |             }
 1982 |           },
 1983 |           "400": {
 1984 |             "description": "Bad Request",
 1985 |             "content": {
 1986 |               "application/json": {
 1987 |                 "schema": {
 1988 |                   "$ref": "#/components/schemas/BadRequestDTO"
 1989 |                 }
 1990 |               }
 1991 |             }
 1992 |           },
 1993 |           "401": {
 1994 |             "description": "Unauthorized",
 1995 |             "content": {
 1996 |               "application/json": {
 1997 |                 "schema": {
 1998 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 1999 |                 }
 2000 |               }
 2001 |             }
 2002 |           },
 2003 |           "422": {
 2004 |             "description": "Unprocessable Entity",
 2005 |             "content": {
 2006 |               "application/json": {
 2007 |                 "schema": {
 2008 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2009 |                 }
 2010 |               }
 2011 |             }
 2012 |           }
 2013 |         },
 2014 |         "tags": [
 2015 |           "Invoice"
 2016 |         ],
 2017 |         "security": [
 2018 |           {
 2019 |             "Location-Access": []
 2020 |           },
 2021 |           {
 2022 |             "Agency-Access": []
 2023 |           }
 2024 |         ]
 2025 |       }
 2026 |     },
 2027 |     "/invoices/{invoiceId}": {
 2028 |       "get": {
 2029 |         "operationId": "get-invoice",
 2030 |         "summary": "Get invoice",
 2031 |         "description": "API to get invoice by invoice id",
 2032 |         "parameters": [
 2033 |           {
 2034 |             "name": "Authorization",
 2035 |             "in": "header",
 2036 |             "description": "Access Token",
 2037 |             "required": true,
 2038 |             "schema": {
 2039 |               "type": "string",
 2040 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2041 |             }
 2042 |           },
 2043 |           {
 2044 |             "name": "Version",
 2045 |             "in": "header",
 2046 |             "description": "API Version",
 2047 |             "required": true,
 2048 |             "schema": {
 2049 |               "type": "string",
 2050 |               "enum": [
 2051 |                 "2021-07-28"
 2052 |               ]
 2053 |             }
 2054 |           },
 2055 |           {
 2056 |             "name": "invoiceId",
 2057 |             "required": true,
 2058 |             "in": "path",
 2059 |             "description": "Invoice Id",
 2060 |             "example": "6578278e879ad2646715ba9c",
 2061 |             "schema": {
 2062 |               "type": "string"
 2063 |             }
 2064 |           },
 2065 |           {
 2066 |             "name": "altId",
 2067 |             "required": true,
 2068 |             "in": "query",
 2069 |             "description": "location Id / company Id based on altType",
 2070 |             "example": "6578278e879ad2646715ba9c",
 2071 |             "schema": {
 2072 |               "type": "string"
 2073 |             }
 2074 |           },
 2075 |           {
 2076 |             "name": "altType",
 2077 |             "required": true,
 2078 |             "in": "query",
 2079 |             "description": "Alt Type",
 2080 |             "example": "location",
 2081 |             "schema": {
 2082 |               "enum": [
 2083 |                 "location"
 2084 |               ],
 2085 |               "type": "string"
 2086 |             }
 2087 |           }
 2088 |         ],
 2089 |         "responses": {
 2090 |           "200": {
 2091 |             "description": "Successful response",
 2092 |             "content": {
 2093 |               "application/json": {
 2094 |                 "schema": {
 2095 |                   "$ref": "#/components/schemas/GetInvoiceResponseDto"
 2096 |                 }
 2097 |               }
 2098 |             }
 2099 |           },
 2100 |           "400": {
 2101 |             "description": "Bad Request",
 2102 |             "content": {
 2103 |               "application/json": {
 2104 |                 "schema": {
 2105 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2106 |                 }
 2107 |               }
 2108 |             }
 2109 |           },
 2110 |           "401": {
 2111 |             "description": "Unauthorized",
 2112 |             "content": {
 2113 |               "application/json": {
 2114 |                 "schema": {
 2115 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2116 |                 }
 2117 |               }
 2118 |             }
 2119 |           },
 2120 |           "422": {
 2121 |             "description": "Unprocessable Entity",
 2122 |             "content": {
 2123 |               "application/json": {
 2124 |                 "schema": {
 2125 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2126 |                 }
 2127 |               }
 2128 |             }
 2129 |           }
 2130 |         },
 2131 |         "tags": [
 2132 |           "Invoice"
 2133 |         ],
 2134 |         "security": [
 2135 |           {
 2136 |             "Location-Access": []
 2137 |           },
 2138 |           {
 2139 |             "Agency-Access": []
 2140 |           }
 2141 |         ]
 2142 |       },
 2143 |       "put": {
 2144 |         "operationId": "update-invoice",
 2145 |         "summary": "Update invoice",
 2146 |         "description": "API to update invoice by invoice id",
 2147 |         "parameters": [
 2148 |           {
 2149 |             "name": "Authorization",
 2150 |             "in": "header",
 2151 |             "description": "Access Token",
 2152 |             "required": true,
 2153 |             "schema": {
 2154 |               "type": "string",
 2155 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2156 |             }
 2157 |           },
 2158 |           {
 2159 |             "name": "Version",
 2160 |             "in": "header",
 2161 |             "description": "API Version",
 2162 |             "required": true,
 2163 |             "schema": {
 2164 |               "type": "string",
 2165 |               "enum": [
 2166 |                 "2021-07-28"
 2167 |               ]
 2168 |             }
 2169 |           },
 2170 |           {
 2171 |             "name": "invoiceId",
 2172 |             "required": true,
 2173 |             "in": "path",
 2174 |             "description": "Invoice Id",
 2175 |             "example": "6578278e879ad2646715ba9c",
 2176 |             "schema": {
 2177 |               "type": "string"
 2178 |             }
 2179 |           }
 2180 |         ],
 2181 |         "requestBody": {
 2182 |           "required": true,
 2183 |           "content": {
 2184 |             "application/json": {
 2185 |               "schema": {
 2186 |                 "$ref": "#/components/schemas/UpdateInvoiceDto"
 2187 |               }
 2188 |             }
 2189 |           }
 2190 |         },
 2191 |         "responses": {
 2192 |           "200": {
 2193 |             "description": "Successful response",
 2194 |             "content": {
 2195 |               "application/json": {
 2196 |                 "schema": {
 2197 |                   "$ref": "#/components/schemas/UpdateInvoiceResponseDto"
 2198 |                 }
 2199 |               }
 2200 |             }
 2201 |           },
 2202 |           "400": {
 2203 |             "description": "Bad Request",
 2204 |             "content": {
 2205 |               "application/json": {
 2206 |                 "schema": {
 2207 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2208 |                 }
 2209 |               }
 2210 |             }
 2211 |           },
 2212 |           "401": {
 2213 |             "description": "Unauthorized",
 2214 |             "content": {
 2215 |               "application/json": {
 2216 |                 "schema": {
 2217 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2218 |                 }
 2219 |               }
 2220 |             }
 2221 |           },
 2222 |           "422": {
 2223 |             "description": "Unprocessable Entity",
 2224 |             "content": {
 2225 |               "application/json": {
 2226 |                 "schema": {
 2227 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2228 |                 }
 2229 |               }
 2230 |             }
 2231 |           }
 2232 |         },
 2233 |         "tags": [
 2234 |           "Invoice"
 2235 |         ],
 2236 |         "security": [
 2237 |           {
 2238 |             "Location-Access": []
 2239 |           },
 2240 |           {
 2241 |             "Agency-Access": []
 2242 |           }
 2243 |         ]
 2244 |       },
 2245 |       "delete": {
 2246 |         "operationId": "delete-invoice",
 2247 |         "summary": "Delete invoice",
 2248 |         "description": "API to delete invoice by invoice id",
 2249 |         "parameters": [
 2250 |           {
 2251 |             "name": "Authorization",
 2252 |             "in": "header",
 2253 |             "description": "Access Token",
 2254 |             "required": true,
 2255 |             "schema": {
 2256 |               "type": "string",
 2257 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2258 |             }
 2259 |           },
 2260 |           {
 2261 |             "name": "Version",
 2262 |             "in": "header",
 2263 |             "description": "API Version",
 2264 |             "required": true,
 2265 |             "schema": {
 2266 |               "type": "string",
 2267 |               "enum": [
 2268 |                 "2021-07-28"
 2269 |               ]
 2270 |             }
 2271 |           },
 2272 |           {
 2273 |             "name": "invoiceId",
 2274 |             "required": true,
 2275 |             "in": "path",
 2276 |             "description": "Invoice Id",
 2277 |             "example": "6578278e879ad2646715ba9c",
 2278 |             "schema": {
 2279 |               "type": "string"
 2280 |             }
 2281 |           },
 2282 |           {
 2283 |             "name": "altId",
 2284 |             "required": true,
 2285 |             "in": "query",
 2286 |             "description": "location Id / company Id based on altType",
 2287 |             "example": "6578278e879ad2646715ba9c",
 2288 |             "schema": {
 2289 |               "type": "string"
 2290 |             }
 2291 |           },
 2292 |           {
 2293 |             "name": "altType",
 2294 |             "required": true,
 2295 |             "in": "query",
 2296 |             "description": "Alt Type",
 2297 |             "example": "location",
 2298 |             "schema": {
 2299 |               "enum": [
 2300 |                 "location"
 2301 |               ],
 2302 |               "type": "string"
 2303 |             }
 2304 |           }
 2305 |         ],
 2306 |         "responses": {
 2307 |           "200": {
 2308 |             "description": "Successful response",
 2309 |             "content": {
 2310 |               "application/json": {
 2311 |                 "schema": {
 2312 |                   "$ref": "#/components/schemas/DeleteInvoiceResponseDto"
 2313 |                 }
 2314 |               }
 2315 |             }
 2316 |           },
 2317 |           "400": {
 2318 |             "description": "Bad Request",
 2319 |             "content": {
 2320 |               "application/json": {
 2321 |                 "examples": {
 2322 |                   "UnableToFindInvoiceResponse": {
 2323 |                     "value": {
 2324 |                       "statusCode": 400,
 2325 |                       "message": "Unable to find an invoice with the given invoice id"
 2326 |                     }
 2327 |                   },
 2328 |                   "DeleteDraftInvoiceBadResponse": {
 2329 |                     "value": {
 2330 |                       "statusCode": 400,
 2331 |                       "message": "Invoice status need to be draft to delete an invoice"
 2332 |                     }
 2333 |                   }
 2334 |                 }
 2335 |               }
 2336 |             }
 2337 |           },
 2338 |           "401": {
 2339 |             "description": "Unauthorized",
 2340 |             "content": {
 2341 |               "application/json": {
 2342 |                 "schema": {
 2343 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2344 |                 }
 2345 |               }
 2346 |             }
 2347 |           },
 2348 |           "422": {
 2349 |             "description": "Unprocessable Entity",
 2350 |             "content": {
 2351 |               "application/json": {
 2352 |                 "schema": {
 2353 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2354 |                 }
 2355 |               }
 2356 |             }
 2357 |           }
 2358 |         },
 2359 |         "tags": [
 2360 |           "Invoice"
 2361 |         ],
 2362 |         "security": [
 2363 |           {
 2364 |             "Location-Access": []
 2365 |           },
 2366 |           {
 2367 |             "Agency-Access": []
 2368 |           }
 2369 |         ]
 2370 |       }
 2371 |     },
 2372 |     "/invoices/{invoiceId}/late-fees-configuration": {
 2373 |       "patch": {
 2374 |         "operationId": "update-invoice-late-fees-configuration",
 2375 |         "summary": "Update invoice late fees configuration",
 2376 |         "description": "API to update invoice late fees configuration by invoice id",
 2377 |         "parameters": [
 2378 |           {
 2379 |             "name": "Authorization",
 2380 |             "in": "header",
 2381 |             "description": "Access Token",
 2382 |             "required": true,
 2383 |             "schema": {
 2384 |               "type": "string",
 2385 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2386 |             }
 2387 |           },
 2388 |           {
 2389 |             "name": "Version",
 2390 |             "in": "header",
 2391 |             "description": "API Version",
 2392 |             "required": true,
 2393 |             "schema": {
 2394 |               "type": "string",
 2395 |               "enum": [
 2396 |                 "2021-07-28"
 2397 |               ]
 2398 |             }
 2399 |           },
 2400 |           {
 2401 |             "name": "invoiceId",
 2402 |             "required": true,
 2403 |             "in": "path",
 2404 |             "description": "Invoice Id",
 2405 |             "example": "6578278e879ad2646715ba9c",
 2406 |             "schema": {
 2407 |               "type": "string"
 2408 |             }
 2409 |           }
 2410 |         ],
 2411 |         "requestBody": {
 2412 |           "required": true,
 2413 |           "content": {
 2414 |             "application/json": {
 2415 |               "schema": {
 2416 |                 "$ref": "#/components/schemas/UpdateInvoiceLateFeesConfigurationDto"
 2417 |               }
 2418 |             }
 2419 |           }
 2420 |         },
 2421 |         "responses": {
 2422 |           "200": {
 2423 |             "description": "Successful response",
 2424 |             "content": {
 2425 |               "application/json": {
 2426 |                 "schema": {
 2427 |                   "$ref": "#/components/schemas/UpdateInvoiceResponseDto"
 2428 |                 }
 2429 |               }
 2430 |             }
 2431 |           },
 2432 |           "400": {
 2433 |             "description": "Bad Request",
 2434 |             "content": {
 2435 |               "application/json": {
 2436 |                 "schema": {
 2437 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2438 |                 }
 2439 |               }
 2440 |             }
 2441 |           },
 2442 |           "401": {
 2443 |             "description": "Unauthorized",
 2444 |             "content": {
 2445 |               "application/json": {
 2446 |                 "schema": {
 2447 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2448 |                 }
 2449 |               }
 2450 |             }
 2451 |           },
 2452 |           "422": {
 2453 |             "description": "Unprocessable Entity",
 2454 |             "content": {
 2455 |               "application/json": {
 2456 |                 "schema": {
 2457 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2458 |                 }
 2459 |               }
 2460 |             }
 2461 |           }
 2462 |         },
 2463 |         "tags": [
 2464 |           "Invoice"
 2465 |         ],
 2466 |         "security": [
 2467 |           {
 2468 |             "Location-Access": []
 2469 |           },
 2470 |           {
 2471 |             "Agency-Access": []
 2472 |           }
 2473 |         ]
 2474 |       }
 2475 |     },
 2476 |     "/invoices/{invoiceId}/void": {
 2477 |       "post": {
 2478 |         "operationId": "void-invoice",
 2479 |         "summary": "Void invoice",
 2480 |         "description": "API to delete invoice by invoice id",
 2481 |         "parameters": [
 2482 |           {
 2483 |             "name": "Authorization",
 2484 |             "in": "header",
 2485 |             "description": "Access Token",
 2486 |             "required": true,
 2487 |             "schema": {
 2488 |               "type": "string",
 2489 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2490 |             }
 2491 |           },
 2492 |           {
 2493 |             "name": "Version",
 2494 |             "in": "header",
 2495 |             "description": "API Version",
 2496 |             "required": true,
 2497 |             "schema": {
 2498 |               "type": "string",
 2499 |               "enum": [
 2500 |                 "2021-07-28"
 2501 |               ]
 2502 |             }
 2503 |           },
 2504 |           {
 2505 |             "name": "invoiceId",
 2506 |             "required": true,
 2507 |             "in": "path",
 2508 |             "description": "Invoice Id",
 2509 |             "example": "6578278e879ad2646715ba9c",
 2510 |             "schema": {
 2511 |               "type": "string"
 2512 |             }
 2513 |           }
 2514 |         ],
 2515 |         "requestBody": {
 2516 |           "required": true,
 2517 |           "content": {
 2518 |             "application/json": {
 2519 |               "schema": {
 2520 |                 "$ref": "#/components/schemas/VoidInvoiceDto"
 2521 |               }
 2522 |             }
 2523 |           }
 2524 |         },
 2525 |         "responses": {
 2526 |           "200": {
 2527 |             "description": "Successful response",
 2528 |             "content": {
 2529 |               "application/json": {
 2530 |                 "schema": {
 2531 |                   "$ref": "#/components/schemas/VoidInvoiceResponseDto"
 2532 |                 }
 2533 |               }
 2534 |             }
 2535 |           },
 2536 |           "400": {
 2537 |             "description": "Bad Request",
 2538 |             "content": {
 2539 |               "application/json": {
 2540 |                 "examples": {
 2541 |                   "UnableToFindInvoiceResponse": {
 2542 |                     "value": {
 2543 |                       "statusCode": 400,
 2544 |                       "message": "Unable to find an invoice with the given invoice id"
 2545 |                     }
 2546 |                   },
 2547 |                   "VoidDraftInvoiceBadResponse": {
 2548 |                     "value": {
 2549 |                       "statusCode": 400,
 2550 |                       "message": "Can not void draft invoice. You can delete draft invoice!"
 2551 |                     }
 2552 |                   },
 2553 |                   "VoidProviderInvoiceBadResponse": {
 2554 |                     "value": {
 2555 |                       "statusCode": 400,
 2556 |                       "message": "To void an invoice which has received payment through the payment provider, the corresponding transaction needs to be refunded first"
 2557 |                     }
 2558 |                   }
 2559 |                 }
 2560 |               }
 2561 |             }
 2562 |           },
 2563 |           "401": {
 2564 |             "description": "Unauthorized",
 2565 |             "content": {
 2566 |               "application/json": {
 2567 |                 "schema": {
 2568 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2569 |                 }
 2570 |               }
 2571 |             }
 2572 |           },
 2573 |           "422": {
 2574 |             "description": "Unprocessable Entity",
 2575 |             "content": {
 2576 |               "application/json": {
 2577 |                 "schema": {
 2578 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2579 |                 }
 2580 |               }
 2581 |             }
 2582 |           }
 2583 |         },
 2584 |         "tags": [
 2585 |           "Invoice"
 2586 |         ],
 2587 |         "security": [
 2588 |           {
 2589 |             "Location-Access": []
 2590 |           },
 2591 |           {
 2592 |             "Agency-Access": []
 2593 |           }
 2594 |         ]
 2595 |       }
 2596 |     },
 2597 |     "/invoices/{invoiceId}/send": {
 2598 |       "post": {
 2599 |         "operationId": "send-invoice",
 2600 |         "summary": "Send invoice",
 2601 |         "description": "API to send invoice by invoice id",
 2602 |         "parameters": [
 2603 |           {
 2604 |             "name": "Authorization",
 2605 |             "in": "header",
 2606 |             "description": "Access Token",
 2607 |             "required": true,
 2608 |             "schema": {
 2609 |               "type": "string",
 2610 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2611 |             }
 2612 |           },
 2613 |           {
 2614 |             "name": "Version",
 2615 |             "in": "header",
 2616 |             "description": "API Version",
 2617 |             "required": true,
 2618 |             "schema": {
 2619 |               "type": "string",
 2620 |               "enum": [
 2621 |                 "2021-07-28"
 2622 |               ]
 2623 |             }
 2624 |           },
 2625 |           {
 2626 |             "name": "invoiceId",
 2627 |             "required": true,
 2628 |             "in": "path",
 2629 |             "description": "Invoice Id",
 2630 |             "example": "6578278e879ad2646715ba9c",
 2631 |             "schema": {
 2632 |               "type": "string"
 2633 |             }
 2634 |           }
 2635 |         ],
 2636 |         "requestBody": {
 2637 |           "required": true,
 2638 |           "content": {
 2639 |             "application/json": {
 2640 |               "schema": {
 2641 |                 "$ref": "#/components/schemas/SendInvoiceDto"
 2642 |               }
 2643 |             }
 2644 |           }
 2645 |         },
 2646 |         "responses": {
 2647 |           "200": {
 2648 |             "description": "Successful response",
 2649 |             "content": {
 2650 |               "application/json": {
 2651 |                 "schema": {
 2652 |                   "$ref": "#/components/schemas/SendInvoicesResponseDto"
 2653 |                 }
 2654 |               }
 2655 |             }
 2656 |           },
 2657 |           "400": {
 2658 |             "description": "Bad Request",
 2659 |             "content": {
 2660 |               "application/json": {
 2661 |                 "schema": {
 2662 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2663 |                 }
 2664 |               }
 2665 |             }
 2666 |           },
 2667 |           "401": {
 2668 |             "description": "Unauthorized",
 2669 |             "content": {
 2670 |               "application/json": {
 2671 |                 "schema": {
 2672 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2673 |                 }
 2674 |               }
 2675 |             }
 2676 |           },
 2677 |           "422": {
 2678 |             "description": "Unprocessable Entity",
 2679 |             "content": {
 2680 |               "application/json": {
 2681 |                 "schema": {
 2682 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2683 |                 }
 2684 |               }
 2685 |             }
 2686 |           }
 2687 |         },
 2688 |         "tags": [
 2689 |           "Invoice"
 2690 |         ],
 2691 |         "security": [
 2692 |           {
 2693 |             "Location-Access": []
 2694 |           },
 2695 |           {
 2696 |             "Agency-Access": []
 2697 |           }
 2698 |         ]
 2699 |       }
 2700 |     },
 2701 |     "/invoices/{invoiceId}/record-payment": {
 2702 |       "post": {
 2703 |         "operationId": "record-invoice",
 2704 |         "summary": "Record a manual payment for an invoice",
 2705 |         "description": "API to record manual payment for an invoice by invoice id",
 2706 |         "parameters": [
 2707 |           {
 2708 |             "name": "Authorization",
 2709 |             "in": "header",
 2710 |             "description": "Access Token",
 2711 |             "required": true,
 2712 |             "schema": {
 2713 |               "type": "string",
 2714 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2715 |             }
 2716 |           },
 2717 |           {
 2718 |             "name": "Version",
 2719 |             "in": "header",
 2720 |             "description": "API Version",
 2721 |             "required": true,
 2722 |             "schema": {
 2723 |               "type": "string",
 2724 |               "enum": [
 2725 |                 "2021-07-28"
 2726 |               ]
 2727 |             }
 2728 |           },
 2729 |           {
 2730 |             "name": "invoiceId",
 2731 |             "required": true,
 2732 |             "in": "path",
 2733 |             "description": "Invoice Id",
 2734 |             "example": "6578278e879ad2646715ba9c",
 2735 |             "schema": {
 2736 |               "type": "string"
 2737 |             }
 2738 |           }
 2739 |         ],
 2740 |         "requestBody": {
 2741 |           "required": true,
 2742 |           "content": {
 2743 |             "application/json": {
 2744 |               "schema": {
 2745 |                 "$ref": "#/components/schemas/RecordPaymentDto"
 2746 |               }
 2747 |             }
 2748 |           }
 2749 |         },
 2750 |         "responses": {
 2751 |           "200": {
 2752 |             "description": "Successful response",
 2753 |             "content": {
 2754 |               "application/json": {
 2755 |                 "schema": {
 2756 |                   "$ref": "#/components/schemas/RecordPaymentResponseDto"
 2757 |                 }
 2758 |               }
 2759 |             }
 2760 |           },
 2761 |           "400": {
 2762 |             "description": "Bad Request",
 2763 |             "content": {
 2764 |               "application/json": {
 2765 |                 "schema": {
 2766 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2767 |                 }
 2768 |               }
 2769 |             }
 2770 |           },
 2771 |           "401": {
 2772 |             "description": "Unauthorized",
 2773 |             "content": {
 2774 |               "application/json": {
 2775 |                 "schema": {
 2776 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2777 |                 }
 2778 |               }
 2779 |             }
 2780 |           },
 2781 |           "422": {
 2782 |             "description": "Unprocessable Entity",
 2783 |             "content": {
 2784 |               "application/json": {
 2785 |                 "schema": {
 2786 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2787 |                 }
 2788 |               }
 2789 |             }
 2790 |           }
 2791 |         },
 2792 |         "tags": [
 2793 |           "Invoice"
 2794 |         ],
 2795 |         "security": [
 2796 |           {
 2797 |             "Location-Access": []
 2798 |           },
 2799 |           {
 2800 |             "Agency-Access": []
 2801 |           }
 2802 |         ]
 2803 |       }
 2804 |     },
 2805 |     "/invoices/stats/last-visited-at": {
 2806 |       "patch": {
 2807 |         "operationId": "update-invoice-last-visited-at",
 2808 |         "summary": "Update invoice last visited at",
 2809 |         "description": "API to update invoice last visited at by invoice id",
 2810 |         "parameters": [
 2811 |           {
 2812 |             "name": "Authorization",
 2813 |             "in": "header",
 2814 |             "description": "Access Token",
 2815 |             "required": true,
 2816 |             "schema": {
 2817 |               "type": "string",
 2818 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2819 |             }
 2820 |           },
 2821 |           {
 2822 |             "name": "Version",
 2823 |             "in": "header",
 2824 |             "description": "API Version",
 2825 |             "required": true,
 2826 |             "schema": {
 2827 |               "type": "string",
 2828 |               "enum": [
 2829 |                 "2021-07-28"
 2830 |               ]
 2831 |             }
 2832 |           }
 2833 |         ],
 2834 |         "requestBody": {
 2835 |           "required": true,
 2836 |           "content": {
 2837 |             "application/json": {
 2838 |               "schema": {
 2839 |                 "$ref": "#/components/schemas/PatchInvoiceStatsLastViewedDto"
 2840 |               }
 2841 |             }
 2842 |           }
 2843 |         },
 2844 |         "responses": {
 2845 |           "200": {
 2846 |             "description": ""
 2847 |           },
 2848 |           "400": {
 2849 |             "description": "Bad Request",
 2850 |             "content": {
 2851 |               "application/json": {
 2852 |                 "schema": {
 2853 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2854 |                 }
 2855 |               }
 2856 |             }
 2857 |           },
 2858 |           "401": {
 2859 |             "description": "Unauthorized",
 2860 |             "content": {
 2861 |               "application/json": {
 2862 |                 "schema": {
 2863 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2864 |                 }
 2865 |               }
 2866 |             }
 2867 |           }
 2868 |         },
 2869 |         "tags": [
 2870 |           "Invoice"
 2871 |         ],
 2872 |         "security": [
 2873 |           {
 2874 |             "Location-Access": []
 2875 |           },
 2876 |           {
 2877 |             "Agency-Access": []
 2878 |           }
 2879 |         ]
 2880 |       }
 2881 |     },
 2882 |     "/invoices/estimate": {
 2883 |       "post": {
 2884 |         "operationId": "create-new-estimate",
 2885 |         "summary": "Create New Estimate",
 2886 |         "description": "Create a new estimate with the provided details",
 2887 |         "parameters": [
 2888 |           {
 2889 |             "name": "Authorization",
 2890 |             "in": "header",
 2891 |             "description": "Access Token",
 2892 |             "required": true,
 2893 |             "schema": {
 2894 |               "type": "string",
 2895 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2896 |             }
 2897 |           },
 2898 |           {
 2899 |             "name": "Version",
 2900 |             "in": "header",
 2901 |             "description": "API Version",
 2902 |             "required": true,
 2903 |             "schema": {
 2904 |               "type": "string",
 2905 |               "enum": [
 2906 |                 "2021-07-28"
 2907 |               ]
 2908 |             }
 2909 |           }
 2910 |         ],
 2911 |         "requestBody": {
 2912 |           "required": true,
 2913 |           "content": {
 2914 |             "application/json": {
 2915 |               "schema": {
 2916 |                 "$ref": "#/components/schemas/CreateEstimatesDto"
 2917 |               }
 2918 |             }
 2919 |           }
 2920 |         },
 2921 |         "responses": {
 2922 |           "201": {
 2923 |             "description": "Created",
 2924 |             "content": {
 2925 |               "application/json": {
 2926 |                 "schema": {
 2927 |                   "$ref": "#/components/schemas/EstimateResponseDto"
 2928 |                 }
 2929 |               }
 2930 |             }
 2931 |           },
 2932 |           "400": {
 2933 |             "description": "Bad Request",
 2934 |             "content": {
 2935 |               "application/json": {
 2936 |                 "schema": {
 2937 |                   "$ref": "#/components/schemas/BadRequestDTO"
 2938 |                 }
 2939 |               }
 2940 |             }
 2941 |           },
 2942 |           "401": {
 2943 |             "description": "Unauthorized",
 2944 |             "content": {
 2945 |               "application/json": {
 2946 |                 "schema": {
 2947 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 2948 |                 }
 2949 |               }
 2950 |             }
 2951 |           },
 2952 |           "422": {
 2953 |             "description": "Unprocessable Entity",
 2954 |             "content": {
 2955 |               "application/json": {
 2956 |                 "schema": {
 2957 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 2958 |                 }
 2959 |               }
 2960 |             }
 2961 |           }
 2962 |         },
 2963 |         "tags": [
 2964 |           "Estimate"
 2965 |         ],
 2966 |         "security": [
 2967 |           {
 2968 |             "Location-Access": []
 2969 |           },
 2970 |           {
 2971 |             "Agency-Access": []
 2972 |           }
 2973 |         ]
 2974 |       }
 2975 |     },
 2976 |     "/invoices/estimate/{estimateId}": {
 2977 |       "put": {
 2978 |         "operationId": "update-estimate",
 2979 |         "summary": "Update Estimate",
 2980 |         "description": "Update an existing estimate with new details",
 2981 |         "parameters": [
 2982 |           {
 2983 |             "name": "Authorization",
 2984 |             "in": "header",
 2985 |             "description": "Access Token",
 2986 |             "required": true,
 2987 |             "schema": {
 2988 |               "type": "string",
 2989 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 2990 |             }
 2991 |           },
 2992 |           {
 2993 |             "name": "Version",
 2994 |             "in": "header",
 2995 |             "description": "API Version",
 2996 |             "required": true,
 2997 |             "schema": {
 2998 |               "type": "string",
 2999 |               "enum": [
 3000 |                 "2021-07-28"
 3001 |               ]
 3002 |             }
 3003 |           },
 3004 |           {
 3005 |             "name": "estimateId",
 3006 |             "required": true,
 3007 |             "in": "path",
 3008 |             "description": "Estimate Id",
 3009 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 3010 |             "schema": {
 3011 |               "type": "string"
 3012 |             }
 3013 |           }
 3014 |         ],
 3015 |         "requestBody": {
 3016 |           "required": true,
 3017 |           "content": {
 3018 |             "application/json": {
 3019 |               "schema": {
 3020 |                 "$ref": "#/components/schemas/UpdateEstimateDto"
 3021 |               }
 3022 |             }
 3023 |           }
 3024 |         },
 3025 |         "responses": {
 3026 |           "200": {
 3027 |             "description": "Successfully updated",
 3028 |             "content": {
 3029 |               "application/json": {
 3030 |                 "schema": {
 3031 |                   "$ref": "#/components/schemas/EstimateResponseDto"
 3032 |                 }
 3033 |               }
 3034 |             }
 3035 |           },
 3036 |           "400": {
 3037 |             "description": "Bad Request",
 3038 |             "content": {
 3039 |               "application/json": {
 3040 |                 "schema": {
 3041 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3042 |                 }
 3043 |               }
 3044 |             }
 3045 |           },
 3046 |           "401": {
 3047 |             "description": "Unauthorized",
 3048 |             "content": {
 3049 |               "application/json": {
 3050 |                 "schema": {
 3051 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3052 |                 }
 3053 |               }
 3054 |             }
 3055 |           },
 3056 |           "422": {
 3057 |             "description": "Unprocessable Entity",
 3058 |             "content": {
 3059 |               "application/json": {
 3060 |                 "schema": {
 3061 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3062 |                 }
 3063 |               }
 3064 |             }
 3065 |           }
 3066 |         },
 3067 |         "tags": [
 3068 |           "Estimate"
 3069 |         ],
 3070 |         "security": [
 3071 |           {
 3072 |             "Location-Access": []
 3073 |           },
 3074 |           {
 3075 |             "Agency-Access": []
 3076 |           }
 3077 |         ]
 3078 |       },
 3079 |       "delete": {
 3080 |         "operationId": "delete-estimate",
 3081 |         "summary": "Delete Estimate",
 3082 |         "description": "Delete an existing estimate",
 3083 |         "parameters": [
 3084 |           {
 3085 |             "name": "Authorization",
 3086 |             "in": "header",
 3087 |             "description": "Access Token",
 3088 |             "required": true,
 3089 |             "schema": {
 3090 |               "type": "string",
 3091 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3092 |             }
 3093 |           },
 3094 |           {
 3095 |             "name": "Version",
 3096 |             "in": "header",
 3097 |             "description": "API Version",
 3098 |             "required": true,
 3099 |             "schema": {
 3100 |               "type": "string",
 3101 |               "enum": [
 3102 |                 "2021-07-28"
 3103 |               ]
 3104 |             }
 3105 |           },
 3106 |           {
 3107 |             "name": "estimateId",
 3108 |             "required": true,
 3109 |             "in": "path",
 3110 |             "description": "Estimate Id",
 3111 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 3112 |             "schema": {
 3113 |               "type": "string"
 3114 |             }
 3115 |           }
 3116 |         ],
 3117 |         "requestBody": {
 3118 |           "required": true,
 3119 |           "content": {
 3120 |             "application/json": {
 3121 |               "schema": {
 3122 |                 "$ref": "#/components/schemas/AltDto"
 3123 |               }
 3124 |             }
 3125 |           }
 3126 |         },
 3127 |         "responses": {
 3128 |           "200": {
 3129 |             "description": "Successfully Deleted",
 3130 |             "content": {
 3131 |               "application/json": {
 3132 |                 "schema": {
 3133 |                   "$ref": "#/components/schemas/EstimateResponseDto"
 3134 |                 }
 3135 |               }
 3136 |             }
 3137 |           },
 3138 |           "400": {
 3139 |             "description": "Bad Request",
 3140 |             "content": {
 3141 |               "application/json": {
 3142 |                 "schema": {
 3143 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3144 |                 }
 3145 |               }
 3146 |             }
 3147 |           },
 3148 |           "401": {
 3149 |             "description": "Unauthorized",
 3150 |             "content": {
 3151 |               "application/json": {
 3152 |                 "schema": {
 3153 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3154 |                 }
 3155 |               }
 3156 |             }
 3157 |           },
 3158 |           "422": {
 3159 |             "description": "Unprocessable Entity",
 3160 |             "content": {
 3161 |               "application/json": {
 3162 |                 "schema": {
 3163 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3164 |                 }
 3165 |               }
 3166 |             }
 3167 |           }
 3168 |         },
 3169 |         "tags": [
 3170 |           "Estimate"
 3171 |         ],
 3172 |         "security": [
 3173 |           {
 3174 |             "Location-Access": []
 3175 |           },
 3176 |           {
 3177 |             "Agency-Access": []
 3178 |           }
 3179 |         ]
 3180 |       }
 3181 |     },
 3182 |     "/invoices/estimate/number/generate": {
 3183 |       "get": {
 3184 |         "operationId": "generate-estimate-number",
 3185 |         "summary": "Generate Estimate Number",
 3186 |         "description": "Get the next estimate number for the given location",
 3187 |         "parameters": [
 3188 |           {
 3189 |             "name": "Authorization",
 3190 |             "in": "header",
 3191 |             "description": "Access Token",
 3192 |             "required": true,
 3193 |             "schema": {
 3194 |               "type": "string",
 3195 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3196 |             }
 3197 |           },
 3198 |           {
 3199 |             "name": "Version",
 3200 |             "in": "header",
 3201 |             "description": "API Version",
 3202 |             "required": true,
 3203 |             "schema": {
 3204 |               "type": "string",
 3205 |               "enum": [
 3206 |                 "2021-07-28"
 3207 |               ]
 3208 |             }
 3209 |           },
 3210 |           {
 3211 |             "name": "altId",
 3212 |             "required": true,
 3213 |             "in": "query",
 3214 |             "description": "Location Id or Agency Id",
 3215 |             "example": "6578278e879ad2646715ba9c",
 3216 |             "schema": {
 3217 |               "type": "string"
 3218 |             }
 3219 |           },
 3220 |           {
 3221 |             "name": "altType",
 3222 |             "required": true,
 3223 |             "in": "query",
 3224 |             "schema": {
 3225 |               "enum": [
 3226 |                 "location"
 3227 |               ],
 3228 |               "type": "string"
 3229 |             }
 3230 |           }
 3231 |         ],
 3232 |         "responses": {
 3233 |           "200": {
 3234 |             "description": "Successful response",
 3235 |             "content": {
 3236 |               "application/json": {
 3237 |                 "schema": {
 3238 |                   "$ref": "#/components/schemas/GenerateEstimateNumberResponse"
 3239 |                 }
 3240 |               }
 3241 |             }
 3242 |           },
 3243 |           "400": {
 3244 |             "description": "Bad Request",
 3245 |             "content": {
 3246 |               "application/json": {
 3247 |                 "schema": {
 3248 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3249 |                 }
 3250 |               }
 3251 |             }
 3252 |           },
 3253 |           "401": {
 3254 |             "description": "Unauthorized",
 3255 |             "content": {
 3256 |               "application/json": {
 3257 |                 "schema": {
 3258 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3259 |                 }
 3260 |               }
 3261 |             }
 3262 |           },
 3263 |           "422": {
 3264 |             "description": "Unprocessable Entity",
 3265 |             "content": {
 3266 |               "application/json": {
 3267 |                 "schema": {
 3268 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3269 |                 }
 3270 |               }
 3271 |             }
 3272 |           }
 3273 |         },
 3274 |         "tags": [
 3275 |           "Estimate"
 3276 |         ],
 3277 |         "security": [
 3278 |           {
 3279 |             "Location-Access": []
 3280 |           },
 3281 |           {
 3282 |             "Agency-Access": []
 3283 |           }
 3284 |         ]
 3285 |       }
 3286 |     },
 3287 |     "/invoices/estimate/{estimateId}/send": {
 3288 |       "post": {
 3289 |         "operationId": "send-estimate",
 3290 |         "summary": "Send Estimate",
 3291 |         "description": "API to send estimate by estimate id",
 3292 |         "parameters": [
 3293 |           {
 3294 |             "name": "Authorization",
 3295 |             "in": "header",
 3296 |             "description": "Access Token",
 3297 |             "required": true,
 3298 |             "schema": {
 3299 |               "type": "string",
 3300 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3301 |             }
 3302 |           },
 3303 |           {
 3304 |             "name": "Version",
 3305 |             "in": "header",
 3306 |             "description": "API Version",
 3307 |             "required": true,
 3308 |             "schema": {
 3309 |               "type": "string",
 3310 |               "enum": [
 3311 |                 "2021-07-28"
 3312 |               ]
 3313 |             }
 3314 |           },
 3315 |           {
 3316 |             "name": "estimateId",
 3317 |             "required": true,
 3318 |             "in": "path",
 3319 |             "description": "Estimate Id",
 3320 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 3321 |             "schema": {
 3322 |               "type": "string"
 3323 |             }
 3324 |           }
 3325 |         ],
 3326 |         "requestBody": {
 3327 |           "required": true,
 3328 |           "content": {
 3329 |             "application/json": {
 3330 |               "schema": {
 3331 |                 "$ref": "#/components/schemas/SendEstimateDto"
 3332 |               }
 3333 |             }
 3334 |           }
 3335 |         },
 3336 |         "responses": {
 3337 |           "201": {
 3338 |             "description": "Created",
 3339 |             "content": {
 3340 |               "application/json": {
 3341 |                 "schema": {
 3342 |                   "$ref": "#/components/schemas/EstimateResponseDto"
 3343 |                 }
 3344 |               }
 3345 |             }
 3346 |           },
 3347 |           "400": {
 3348 |             "description": "Bad Request",
 3349 |             "content": {
 3350 |               "application/json": {
 3351 |                 "schema": {
 3352 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3353 |                 }
 3354 |               }
 3355 |             }
 3356 |           },
 3357 |           "401": {
 3358 |             "description": "Unauthorized",
 3359 |             "content": {
 3360 |               "application/json": {
 3361 |                 "schema": {
 3362 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3363 |                 }
 3364 |               }
 3365 |             }
 3366 |           },
 3367 |           "422": {
 3368 |             "description": "Unprocessable Entity",
 3369 |             "content": {
 3370 |               "application/json": {
 3371 |                 "schema": {
 3372 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3373 |                 }
 3374 |               }
 3375 |             }
 3376 |           }
 3377 |         },
 3378 |         "tags": [
 3379 |           "Estimate"
 3380 |         ],
 3381 |         "security": [
 3382 |           {
 3383 |             "Location-Access": []
 3384 |           },
 3385 |           {
 3386 |             "Agency-Access": []
 3387 |           }
 3388 |         ]
 3389 |       }
 3390 |     },
 3391 |     "/invoices/estimate/{estimateId}/invoice": {
 3392 |       "post": {
 3393 |         "operationId": "create-invoice-from-estimate",
 3394 |         "summary": "Create Invoice from Estimate",
 3395 |         "description": "Create a new invoice from an existing estimate",
 3396 |         "parameters": [
 3397 |           {
 3398 |             "name": "Authorization",
 3399 |             "in": "header",
 3400 |             "description": "Access Token",
 3401 |             "required": true,
 3402 |             "schema": {
 3403 |               "type": "string",
 3404 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3405 |             }
 3406 |           },
 3407 |           {
 3408 |             "name": "Version",
 3409 |             "in": "header",
 3410 |             "description": "API Version",
 3411 |             "required": true,
 3412 |             "schema": {
 3413 |               "type": "string",
 3414 |               "enum": [
 3415 |                 "2021-07-28"
 3416 |               ]
 3417 |             }
 3418 |           },
 3419 |           {
 3420 |             "name": "estimateId",
 3421 |             "required": true,
 3422 |             "in": "path",
 3423 |             "description": "Estimate Id",
 3424 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 3425 |             "schema": {
 3426 |               "type": "string"
 3427 |             }
 3428 |           }
 3429 |         ],
 3430 |         "requestBody": {
 3431 |           "required": true,
 3432 |           "content": {
 3433 |             "application/json": {
 3434 |               "schema": {
 3435 |                 "$ref": "#/components/schemas/CreateInvoiceFromEstimateDto"
 3436 |               }
 3437 |             }
 3438 |           }
 3439 |         },
 3440 |         "responses": {
 3441 |           "200": {
 3442 |             "description": "Successfully Created",
 3443 |             "content": {
 3444 |               "application/json": {
 3445 |                 "schema": {
 3446 |                   "$ref": "#/components/schemas/CreateInvoiceFromEstimateResponseDTO"
 3447 |                 }
 3448 |               }
 3449 |             }
 3450 |           },
 3451 |           "400": {
 3452 |             "description": "Bad Request",
 3453 |             "content": {
 3454 |               "application/json": {
 3455 |                 "schema": {
 3456 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3457 |                 }
 3458 |               }
 3459 |             }
 3460 |           },
 3461 |           "401": {
 3462 |             "description": "Unauthorized",
 3463 |             "content": {
 3464 |               "application/json": {
 3465 |                 "schema": {
 3466 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3467 |                 }
 3468 |               }
 3469 |             }
 3470 |           },
 3471 |           "422": {
 3472 |             "description": "Unprocessable Entity",
 3473 |             "content": {
 3474 |               "application/json": {
 3475 |                 "schema": {
 3476 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3477 |                 }
 3478 |               }
 3479 |             }
 3480 |           }
 3481 |         },
 3482 |         "tags": [
 3483 |           "Estimate"
 3484 |         ],
 3485 |         "security": [
 3486 |           {
 3487 |             "Location-Access": []
 3488 |           },
 3489 |           {
 3490 |             "Agency-Access": []
 3491 |           }
 3492 |         ]
 3493 |       }
 3494 |     },
 3495 |     "/invoices/estimate/list": {
 3496 |       "get": {
 3497 |         "operationId": "list-estimates",
 3498 |         "summary": "List Estimates",
 3499 |         "description": "Get a paginated list of estimates",
 3500 |         "parameters": [
 3501 |           {
 3502 |             "name": "Authorization",
 3503 |             "in": "header",
 3504 |             "description": "Access Token",
 3505 |             "required": true,
 3506 |             "schema": {
 3507 |               "type": "string",
 3508 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3509 |             }
 3510 |           },
 3511 |           {
 3512 |             "name": "Version",
 3513 |             "in": "header",
 3514 |             "description": "API Version",
 3515 |             "required": true,
 3516 |             "schema": {
 3517 |               "type": "string",
 3518 |               "enum": [
 3519 |                 "2021-07-28"
 3520 |               ]
 3521 |             }
 3522 |           },
 3523 |           {
 3524 |             "name": "altId",
 3525 |             "required": true,
 3526 |             "in": "query",
 3527 |             "description": "Location Id or Agency Id",
 3528 |             "example": "6578278e879ad2646715ba9c",
 3529 |             "schema": {
 3530 |               "type": "string"
 3531 |             }
 3532 |           },
 3533 |           {
 3534 |             "name": "altType",
 3535 |             "required": true,
 3536 |             "in": "query",
 3537 |             "schema": {
 3538 |               "enum": [
 3539 |                 "location"
 3540 |               ],
 3541 |               "type": "string"
 3542 |             }
 3543 |           },
 3544 |           {
 3545 |             "name": "startAt",
 3546 |             "required": false,
 3547 |             "in": "query",
 3548 |             "description": "startAt in YYYY-MM-DD format",
 3549 |             "example": "2023-01-01",
 3550 |             "schema": {
 3551 |               "type": "string"
 3552 |             }
 3553 |           },
 3554 |           {
 3555 |             "name": "endAt",
 3556 |             "required": false,
 3557 |             "in": "query",
 3558 |             "description": "endAt in YYYY-MM-DD format",
 3559 |             "example": "2023-01-01",
 3560 |             "schema": {
 3561 |               "type": "string"
 3562 |             }
 3563 |           },
 3564 |           {
 3565 |             "name": "search",
 3566 |             "required": false,
 3567 |             "in": "query",
 3568 |             "description": "search text for estimates name",
 3569 |             "example": "Home services estimate",
 3570 |             "schema": {
 3571 |               "type": "string"
 3572 |             }
 3573 |           },
 3574 |           {
 3575 |             "name": "status",
 3576 |             "required": false,
 3577 |             "in": "query",
 3578 |             "description": "estimate status",
 3579 |             "example": "sent",
 3580 |             "schema": {
 3581 |               "enum": [
 3582 |                 "all",
 3583 |                 "draft",
 3584 |                 "sent",
 3585 |                 "accepted",
 3586 |                 "declined",
 3587 |                 "invoiced",
 3588 |                 "viewed"
 3589 |               ],
 3590 |               "type": "string"
 3591 |             }
 3592 |           },
 3593 |           {
 3594 |             "name": "contactId",
 3595 |             "required": false,
 3596 |             "in": "query",
 3597 |             "description": "Contact ID for the estimate",
 3598 |             "example": "AmuzcoPBpgKeccNsFlib",
 3599 |             "schema": {
 3600 |               "type": "string"
 3601 |             }
 3602 |           },
 3603 |           {
 3604 |             "name": "limit",
 3605 |             "required": true,
 3606 |             "in": "query",
 3607 |             "description": "Limit the number of items to return",
 3608 |             "example": 10,
 3609 |             "schema": {
 3610 |               "type": "string"
 3611 |             }
 3612 |           },
 3613 |           {
 3614 |             "name": "offset",
 3615 |             "required": true,
 3616 |             "in": "query",
 3617 |             "description": "Number of items to skip",
 3618 |             "example": 10,
 3619 |             "schema": {
 3620 |               "type": "string"
 3621 |             }
 3622 |           }
 3623 |         ],
 3624 |         "responses": {
 3625 |           "200": {
 3626 |             "description": "Successful response",
 3627 |             "content": {
 3628 |               "application/json": {
 3629 |                 "schema": {
 3630 |                   "$ref": "#/components/schemas/ListEstimatesResponseDTO"
 3631 |                 }
 3632 |               }
 3633 |             }
 3634 |           },
 3635 |           "400": {
 3636 |             "description": "Bad Request",
 3637 |             "content": {
 3638 |               "application/json": {
 3639 |                 "schema": {
 3640 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3641 |                 }
 3642 |               }
 3643 |             }
 3644 |           },
 3645 |           "401": {
 3646 |             "description": "Unauthorized",
 3647 |             "content": {
 3648 |               "application/json": {
 3649 |                 "schema": {
 3650 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3651 |                 }
 3652 |               }
 3653 |             }
 3654 |           },
 3655 |           "422": {
 3656 |             "description": "Unprocessable Entity",
 3657 |             "content": {
 3658 |               "application/json": {
 3659 |                 "schema": {
 3660 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3661 |                 }
 3662 |               }
 3663 |             }
 3664 |           }
 3665 |         },
 3666 |         "tags": [
 3667 |           "Estimate"
 3668 |         ],
 3669 |         "security": [
 3670 |           {
 3671 |             "Location-Access": []
 3672 |           },
 3673 |           {
 3674 |             "Agency-Access": []
 3675 |           }
 3676 |         ]
 3677 |       }
 3678 |     },
 3679 |     "/invoices/estimate/stats/last-visited-at": {
 3680 |       "patch": {
 3681 |         "operationId": "update-estimate-last-visited-at",
 3682 |         "summary": "Update estimate last visited at",
 3683 |         "description": "API to update estimate last visited at by estimate id",
 3684 |         "parameters": [
 3685 |           {
 3686 |             "name": "Authorization",
 3687 |             "in": "header",
 3688 |             "description": "Access Token",
 3689 |             "required": true,
 3690 |             "schema": {
 3691 |               "type": "string",
 3692 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3693 |             }
 3694 |           },
 3695 |           {
 3696 |             "name": "Version",
 3697 |             "in": "header",
 3698 |             "description": "API Version",
 3699 |             "required": true,
 3700 |             "schema": {
 3701 |               "type": "string",
 3702 |               "enum": [
 3703 |                 "2021-07-28"
 3704 |               ]
 3705 |             }
 3706 |           }
 3707 |         ],
 3708 |         "requestBody": {
 3709 |           "required": true,
 3710 |           "content": {
 3711 |             "application/json": {
 3712 |               "schema": {
 3713 |                 "$ref": "#/components/schemas/EstimateIdParam"
 3714 |               }
 3715 |             }
 3716 |           }
 3717 |         },
 3718 |         "responses": {
 3719 |           "200": {
 3720 |             "description": ""
 3721 |           },
 3722 |           "400": {
 3723 |             "description": "Bad Request",
 3724 |             "content": {
 3725 |               "application/json": {
 3726 |                 "schema": {
 3727 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3728 |                 }
 3729 |               }
 3730 |             }
 3731 |           },
 3732 |           "401": {
 3733 |             "description": "Unauthorized",
 3734 |             "content": {
 3735 |               "application/json": {
 3736 |                 "schema": {
 3737 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3738 |                 }
 3739 |               }
 3740 |             }
 3741 |           }
 3742 |         },
 3743 |         "tags": [
 3744 |           "Estimate"
 3745 |         ],
 3746 |         "security": [
 3747 |           {
 3748 |             "Location-Access": []
 3749 |           },
 3750 |           {
 3751 |             "Agency-Access": []
 3752 |           }
 3753 |         ]
 3754 |       }
 3755 |     },
 3756 |     "/invoices/estimate/template": {
 3757 |       "get": {
 3758 |         "operationId": "list-estimate-templates",
 3759 |         "summary": "List Estimate Templates",
 3760 |         "description": "Get a list of estimate templates or a specific template by ID",
 3761 |         "parameters": [
 3762 |           {
 3763 |             "name": "Authorization",
 3764 |             "in": "header",
 3765 |             "description": "Access Token",
 3766 |             "required": true,
 3767 |             "schema": {
 3768 |               "type": "string",
 3769 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3770 |             }
 3771 |           },
 3772 |           {
 3773 |             "name": "Version",
 3774 |             "in": "header",
 3775 |             "description": "API Version",
 3776 |             "required": true,
 3777 |             "schema": {
 3778 |               "type": "string",
 3779 |               "enum": [
 3780 |                 "2021-07-28"
 3781 |               ]
 3782 |             }
 3783 |           },
 3784 |           {
 3785 |             "name": "altId",
 3786 |             "required": true,
 3787 |             "in": "query",
 3788 |             "description": "Location Id or Agency Id",
 3789 |             "example": "6578278e879ad2646715ba9c",
 3790 |             "schema": {
 3791 |               "type": "string"
 3792 |             }
 3793 |           },
 3794 |           {
 3795 |             "name": "altType",
 3796 |             "required": true,
 3797 |             "in": "query",
 3798 |             "schema": {
 3799 |               "enum": [
 3800 |                 "location"
 3801 |               ],
 3802 |               "type": "string"
 3803 |             }
 3804 |           },
 3805 |           {
 3806 |             "name": "search",
 3807 |             "required": false,
 3808 |             "in": "query",
 3809 |             "description": "To search for an estimate template by id / name",
 3810 |             "example": "Alex",
 3811 |             "schema": {
 3812 |               "type": "string"
 3813 |             }
 3814 |           },
 3815 |           {
 3816 |             "name": "limit",
 3817 |             "required": true,
 3818 |             "in": "query",
 3819 |             "description": "Limit the number of items to return",
 3820 |             "example": 10,
 3821 |             "schema": {
 3822 |               "type": "string"
 3823 |             }
 3824 |           },
 3825 |           {
 3826 |             "name": "offset",
 3827 |             "required": true,
 3828 |             "in": "query",
 3829 |             "description": "Number of items to skip",
 3830 |             "example": 10,
 3831 |             "schema": {
 3832 |               "type": "string"
 3833 |             }
 3834 |           }
 3835 |         ],
 3836 |         "responses": {
 3837 |           "200": {
 3838 |             "description": "Successful response",
 3839 |             "content": {
 3840 |               "application/json": {
 3841 |                 "schema": {
 3842 |                   "$ref": "#/components/schemas/ListEstimateTemplateResponseDTO"
 3843 |                 }
 3844 |               }
 3845 |             }
 3846 |           },
 3847 |           "400": {
 3848 |             "description": "Bad Request",
 3849 |             "content": {
 3850 |               "application/json": {
 3851 |                 "schema": {
 3852 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3853 |                 }
 3854 |               }
 3855 |             }
 3856 |           },
 3857 |           "401": {
 3858 |             "description": "Unauthorized",
 3859 |             "content": {
 3860 |               "application/json": {
 3861 |                 "schema": {
 3862 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3863 |                 }
 3864 |               }
 3865 |             }
 3866 |           },
 3867 |           "422": {
 3868 |             "description": "Unprocessable Entity",
 3869 |             "content": {
 3870 |               "application/json": {
 3871 |                 "schema": {
 3872 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3873 |                 }
 3874 |               }
 3875 |             }
 3876 |           }
 3877 |         },
 3878 |         "tags": [
 3879 |           "Estimate"
 3880 |         ],
 3881 |         "security": [
 3882 |           {
 3883 |             "Location-Access": []
 3884 |           },
 3885 |           {
 3886 |             "Agency-Access": []
 3887 |           }
 3888 |         ]
 3889 |       },
 3890 |       "post": {
 3891 |         "operationId": "create-estimate-template",
 3892 |         "summary": "Create Estimate Template",
 3893 |         "description": "Create a new estimate template",
 3894 |         "parameters": [
 3895 |           {
 3896 |             "name": "Authorization",
 3897 |             "in": "header",
 3898 |             "description": "Access Token",
 3899 |             "required": true,
 3900 |             "schema": {
 3901 |               "type": "string",
 3902 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3903 |             }
 3904 |           },
 3905 |           {
 3906 |             "name": "Version",
 3907 |             "in": "header",
 3908 |             "description": "API Version",
 3909 |             "required": true,
 3910 |             "schema": {
 3911 |               "type": "string",
 3912 |               "enum": [
 3913 |                 "2021-07-28"
 3914 |               ]
 3915 |             }
 3916 |           }
 3917 |         ],
 3918 |         "requestBody": {
 3919 |           "required": true,
 3920 |           "content": {
 3921 |             "application/json": {
 3922 |               "schema": {
 3923 |                 "$ref": "#/components/schemas/EstimateTemplatesDto"
 3924 |               }
 3925 |             }
 3926 |           }
 3927 |         },
 3928 |         "responses": {
 3929 |           "201": {
 3930 |             "description": "Successfully created",
 3931 |             "content": {
 3932 |               "application/json": {
 3933 |                 "schema": {
 3934 |                   "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
 3935 |                 }
 3936 |               }
 3937 |             }
 3938 |           },
 3939 |           "400": {
 3940 |             "description": "Bad Request",
 3941 |             "content": {
 3942 |               "application/json": {
 3943 |                 "schema": {
 3944 |                   "$ref": "#/components/schemas/BadRequestDTO"
 3945 |                 }
 3946 |               }
 3947 |             }
 3948 |           },
 3949 |           "401": {
 3950 |             "description": "Unauthorized",
 3951 |             "content": {
 3952 |               "application/json": {
 3953 |                 "schema": {
 3954 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 3955 |                 }
 3956 |               }
 3957 |             }
 3958 |           },
 3959 |           "422": {
 3960 |             "description": "Unprocessable Entity",
 3961 |             "content": {
 3962 |               "application/json": {
 3963 |                 "schema": {
 3964 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 3965 |                 }
 3966 |               }
 3967 |             }
 3968 |           }
 3969 |         },
 3970 |         "tags": [
 3971 |           "Estimate"
 3972 |         ],
 3973 |         "security": [
 3974 |           {
 3975 |             "Location-Access": []
 3976 |           },
 3977 |           {
 3978 |             "Agency-Access": []
 3979 |           }
 3980 |         ]
 3981 |       }
 3982 |     },
 3983 |     "/invoices/estimate/template/{templateId}": {
 3984 |       "put": {
 3985 |         "operationId": "update-estimate-template",
 3986 |         "summary": "Update Estimate Template",
 3987 |         "description": "Update an existing estimate template",
 3988 |         "parameters": [
 3989 |           {
 3990 |             "name": "Authorization",
 3991 |             "in": "header",
 3992 |             "description": "Access Token",
 3993 |             "required": true,
 3994 |             "schema": {
 3995 |               "type": "string",
 3996 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 3997 |             }
 3998 |           },
 3999 |           {
 4000 |             "name": "Version",
 4001 |             "in": "header",
 4002 |             "description": "API Version",
 4003 |             "required": true,
 4004 |             "schema": {
 4005 |               "type": "string",
 4006 |               "enum": [
 4007 |                 "2021-07-28"
 4008 |               ]
 4009 |             }
 4010 |           },
 4011 |           {
 4012 |             "name": "templateId",
 4013 |             "required": true,
 4014 |             "in": "path",
 4015 |             "description": "Template Id",
 4016 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 4017 |             "schema": {
 4018 |               "type": "string"
 4019 |             }
 4020 |           }
 4021 |         ],
 4022 |         "requestBody": {
 4023 |           "required": true,
 4024 |           "content": {
 4025 |             "application/json": {
 4026 |               "schema": {
 4027 |                 "$ref": "#/components/schemas/EstimateTemplatesDto"
 4028 |               }
 4029 |             }
 4030 |           }
 4031 |         },
 4032 |         "responses": {
 4033 |           "200": {
 4034 |             "description": "Successfully updated",
 4035 |             "content": {
 4036 |               "application/json": {
 4037 |                 "schema": {
 4038 |                   "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
 4039 |                 }
 4040 |               }
 4041 |             }
 4042 |           },
 4043 |           "400": {
 4044 |             "description": "Bad Request",
 4045 |             "content": {
 4046 |               "application/json": {
 4047 |                 "schema": {
 4048 |                   "$ref": "#/components/schemas/BadRequestDTO"
 4049 |                 }
 4050 |               }
 4051 |             }
 4052 |           },
 4053 |           "401": {
 4054 |             "description": "Unauthorized",
 4055 |             "content": {
 4056 |               "application/json": {
 4057 |                 "schema": {
 4058 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 4059 |                 }
 4060 |               }
 4061 |             }
 4062 |           },
 4063 |           "422": {
 4064 |             "description": "Unprocessable Entity",
 4065 |             "content": {
 4066 |               "application/json": {
 4067 |                 "schema": {
 4068 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 4069 |                 }
 4070 |               }
 4071 |             }
 4072 |           }
 4073 |         },
 4074 |         "tags": [
 4075 |           "Estimate"
 4076 |         ],
 4077 |         "security": [
 4078 |           {
 4079 |             "Location-Access": []
 4080 |           },
 4081 |           {
 4082 |             "Agency-Access": []
 4083 |           }
 4084 |         ]
 4085 |       },
 4086 |       "delete": {
 4087 |         "operationId": "delete-estimate-template",
 4088 |         "summary": "Delete Estimate Template",
 4089 |         "description": "Delete an existing estimate template",
 4090 |         "parameters": [
 4091 |           {
 4092 |             "name": "Authorization",
 4093 |             "in": "header",
 4094 |             "description": "Access Token",
 4095 |             "required": true,
 4096 |             "schema": {
 4097 |               "type": "string",
 4098 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 4099 |             }
 4100 |           },
 4101 |           {
 4102 |             "name": "Version",
 4103 |             "in": "header",
 4104 |             "description": "API Version",
 4105 |             "required": true,
 4106 |             "schema": {
 4107 |               "type": "string",
 4108 |               "enum": [
 4109 |                 "2021-07-28"
 4110 |               ]
 4111 |             }
 4112 |           },
 4113 |           {
 4114 |             "name": "templateId",
 4115 |             "required": true,
 4116 |             "in": "path",
 4117 |             "description": "Template Id",
 4118 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 4119 |             "schema": {
 4120 |               "type": "string"
 4121 |             }
 4122 |           }
 4123 |         ],
 4124 |         "requestBody": {
 4125 |           "required": true,
 4126 |           "content": {
 4127 |             "application/json": {
 4128 |               "schema": {
 4129 |                 "$ref": "#/components/schemas/AltDto"
 4130 |               }
 4131 |             }
 4132 |           }
 4133 |         },
 4134 |         "responses": {
 4135 |           "200": {
 4136 |             "description": "Successfully deleted",
 4137 |             "content": {
 4138 |               "application/json": {
 4139 |                 "schema": {
 4140 |                   "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
 4141 |                 }
 4142 |               }
 4143 |             }
 4144 |           },
 4145 |           "400": {
 4146 |             "description": "Bad Request",
 4147 |             "content": {
 4148 |               "application/json": {
 4149 |                 "schema": {
 4150 |                   "$ref": "#/components/schemas/BadRequestDTO"
 4151 |                 }
 4152 |               }
 4153 |             }
 4154 |           },
 4155 |           "401": {
 4156 |             "description": "Unauthorized",
 4157 |             "content": {
 4158 |               "application/json": {
 4159 |                 "schema": {
 4160 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 4161 |                 }
 4162 |               }
 4163 |             }
 4164 |           },
 4165 |           "422": {
 4166 |             "description": "Unprocessable Entity",
 4167 |             "content": {
 4168 |               "application/json": {
 4169 |                 "schema": {
 4170 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 4171 |                 }
 4172 |               }
 4173 |             }
 4174 |           }
 4175 |         },
 4176 |         "tags": [
 4177 |           "Estimate"
 4178 |         ],
 4179 |         "security": [
 4180 |           {
 4181 |             "Location-Access": []
 4182 |           },
 4183 |           {
 4184 |             "Agency-Access": []
 4185 |           }
 4186 |         ]
 4187 |       }
 4188 |     },
 4189 |     "/invoices/estimate/template/preview": {
 4190 |       "get": {
 4191 |         "operationId": "preview-estimate-template",
 4192 |         "summary": "Preview Estimate Template",
 4193 |         "description": "Get a preview of an estimate template",
 4194 |         "parameters": [
 4195 |           {
 4196 |             "name": "Authorization",
 4197 |             "in": "header",
 4198 |             "description": "Access Token",
 4199 |             "required": true,
 4200 |             "schema": {
 4201 |               "type": "string",
 4202 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 4203 |             }
 4204 |           },
 4205 |           {
 4206 |             "name": "Version",
 4207 |             "in": "header",
 4208 |             "description": "API Version",
 4209 |             "required": true,
 4210 |             "schema": {
 4211 |               "type": "string",
 4212 |               "enum": [
 4213 |                 "2021-07-28"
 4214 |               ]
 4215 |             }
 4216 |           },
 4217 |           {
 4218 |             "name": "altId",
 4219 |             "required": true,
 4220 |             "in": "query",
 4221 |             "description": "Location Id or Agency Id",
 4222 |             "example": "6578278e879ad2646715ba9c",
 4223 |             "schema": {
 4224 |               "type": "string"
 4225 |             }
 4226 |           },
 4227 |           {
 4228 |             "name": "altType",
 4229 |             "required": true,
 4230 |             "in": "query",
 4231 |             "schema": {
 4232 |               "enum": [
 4233 |                 "location"
 4234 |               ],
 4235 |               "type": "string"
 4236 |             }
 4237 |           },
 4238 |           {
 4239 |             "name": "templateId",
 4240 |             "required": true,
 4241 |             "in": "query",
 4242 |             "description": "Template Id",
 4243 |             "example": "5f9d6d8b1b2d2c001f2d9e4b",
 4244 |             "schema": {
 4245 |               "type": "string"
 4246 |             }
 4247 |           }
 4248 |         ],
 4249 |         "responses": {
 4250 |           "200": {
 4251 |             "description": "Successful response",
 4252 |             "content": {
 4253 |               "application/json": {
 4254 |                 "schema": {
 4255 |                   "$ref": "#/components/schemas/EstimateTemplateResponseDTO"
 4256 |                 }
 4257 |               }
 4258 |             }
 4259 |           },
 4260 |           "400": {
 4261 |             "description": "Bad Request",
 4262 |             "content": {
 4263 |               "application/json": {
 4264 |                 "schema": {
 4265 |                   "$ref": "#/components/schemas/BadRequestDTO"
 4266 |                 }
 4267 |               }
 4268 |             }
 4269 |           },
 4270 |           "401": {
 4271 |             "description": "Unauthorized",
 4272 |             "content": {
 4273 |               "application/json": {
 4274 |                 "schema": {
 4275 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 4276 |                 }
 4277 |               }
 4278 |             }
 4279 |           },
 4280 |           "422": {
 4281 |             "description": "Unprocessable Entity",
 4282 |             "content": {
 4283 |               "application/json": {
 4284 |                 "schema": {
 4285 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 4286 |                 }
 4287 |               }
 4288 |             }
 4289 |           }
 4290 |         },
 4291 |         "tags": [
 4292 |           "Estimate"
 4293 |         ],
 4294 |         "security": [
 4295 |           {
 4296 |             "Location-Access": []
 4297 |           },
 4298 |           {
 4299 |             "Agency-Access": []
 4300 |           }
 4301 |         ]
 4302 |       }
 4303 |     },
 4304 |     "/invoices/": {
 4305 |       "post": {
 4306 |         "operationId": "create-invoice",
 4307 |         "summary": "Create Invoice",
 4308 |         "description": "API to create an invoice",
 4309 |         "parameters": [
 4310 |           {
 4311 |             "name": "Authorization",
 4312 |             "in": "header",
 4313 |             "description": "Access Token",
 4314 |             "required": true,
 4315 |             "schema": {
 4316 |               "type": "string",
 4317 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 4318 |             }
 4319 |           },
 4320 |           {
 4321 |             "name": "Version",
 4322 |             "in": "header",
 4323 |             "description": "API Version",
 4324 |             "required": true,
 4325 |             "schema": {
 4326 |               "type": "string",
 4327 |               "enum": [
 4328 |                 "2021-07-28"
 4329 |               ]
 4330 |             }
 4331 |           }
 4332 |         ],
 4333 |         "requestBody": {
 4334 |           "required": true,
 4335 |           "content": {
 4336 |             "application/json": {
 4337 |               "schema": {
 4338 |                 "$ref": "#/components/schemas/CreateInvoiceDto"
 4339 |               }
 4340 |             }
 4341 |           }
 4342 |         },
 4343 |         "responses": {
 4344 |           "200": {
 4345 |             "description": "Successful response",
 4346 |             "content": {
 4347 |               "application/json": {
 4348 |                 "schema": {
 4349 |                   "$ref": "#/components/schemas/CreateInvoiceResponseDto"
 4350 |                 }
 4351 |               }
 4352 |             }
 4353 |           },
 4354 |           "400": {
 4355 |             "description": "Bad Request",
 4356 |             "content": {
 4357 |               "application/json": {
 4358 |                 "schema": {
 4359 |                   "$ref": "#/components/schemas/BadRequestDTO"
 4360 |                 }
 4361 |               }
 4362 |             }
 4363 |           },
 4364 |           "401": {
 4365 |             "description": "Unauthorized",
 4366 |             "content": {
 4367 |               "application/json": {
 4368 |                 "schema": {
 4369 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 4370 |                 }
 4371 |               }
 4372 |             }
 4373 |           },
 4374 |           "422": {
 4375 |             "description": "Unprocessable Entity",
 4376 |             "content": {
 4377 |               "application/json": {
 4378 |                 "schema": {
 4379 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 4380 |                 }
 4381 |               }
 4382 |             }
 4383 |           }
 4384 |         },
 4385 |         "tags": [
 4386 |           "Invoice"
 4387 |         ],
 4388 |         "security": [
 4389 |           {
 4390 |             "Location-Access": []
 4391 |           },
 4392 |           {
 4393 |             "Agency-Access": []
 4394 |           }
 4395 |         ]
 4396 |       },
 4397 |       "get": {
 4398 |         "operationId": "list-invoices",
 4399 |         "summary": "List invoices",
 4400 |         "description": "API to get list of invoices",
 4401 |         "parameters": [
 4402 |           {
 4403 |             "name": "Authorization",
 4404 |             "in": "header",
 4405 |             "description": "Access Token",
 4406 |             "required": true,
 4407 |             "schema": {
 4408 |               "type": "string",
 4409 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 4410 |             }
 4411 |           },
 4412 |           {
 4413 |             "name": "Version",
 4414 |             "in": "header",
 4415 |             "description": "API Version",
 4416 |             "required": true,
 4417 |             "schema": {
 4418 |               "type": "string",
 4419 |               "enum": [
 4420 |                 "2021-07-28"
 4421 |               ]
 4422 |             }
 4423 |           },
 4424 |           {
 4425 |             "name": "altId",
 4426 |             "required": true,
 4427 |             "in": "query",
 4428 |             "description": "location Id / company Id based on altType",
 4429 |             "example": "6578278e879ad2646715ba9c",
 4430 |             "schema": {
 4431 |               "type": "string"
 4432 |             }
 4433 |           },
 4434 |           {
 4435 |             "name": "altType",
 4436 |             "required": true,
 4437 |             "in": "query",
 4438 |             "description": "Alt Type",
 4439 |             "example": "location",
 4440 |             "schema": {
 4441 |               "enum": [
 4442 |                 "location"
 4443 |               ],
 4444 |               "type": "string"
 4445 |             }
 4446 |           },
 4447 |           {
 4448 |             "name": "status",
 4449 |             "required": false,
 4450 |             "in": "query",
 4451 |             "description": "status to be filtered",
 4452 |             "schema": {
 4453 |               "type": "string"
 4454 |             }
 4455 |           },
 4456 |           {
 4457 |             "name": "startAt",
 4458 |             "required": false,
 4459 |             "in": "query",
 4460 |             "description": "startAt in YYYY-MM-DD format",
 4461 |             "example": "2023-01-01",
 4462 |             "schema": {
 4463 |               "type": "string"
 4464 |             }
 4465 |           },
 4466 |           {
 4467 |             "name": "endAt",
 4468 |             "required": false,
 4469 |             "in": "query",
 4470 |             "description": "endAt in YYYY-MM-DD format",
 4471 |             "example": "2023-01-01",
 4472 |             "schema": {
 4473 |               "type": "string"
 4474 |             }
 4475 |           },
 4476 |           {
 4477 |             "name": "search",
 4478 |             "required": false,
 4479 |             "in": "query",
 4480 |             "description": "To search for an invoice by id / name / email / phoneNo",
 4481 |             "example": "Alex",
 4482 |             "schema": {
 4483 |               "type": "string"
 4484 |             }
 4485 |           },
 4486 |           {
 4487 |             "name": "paymentMode",
 4488 |             "required": false,
 4489 |             "in": "query",
 4490 |             "description": "payment mode",
 4491 |             "example": "live",
 4492 |             "schema": {
 4493 |               "enum": [
 4494 |                 "default",
 4495 |                 "live",
 4496 |                 "test"
 4497 |               ],
 4498 |               "type": "string"
 4499 |             }
 4500 |           },
 4501 |           {
 4502 |             "name": "contactId",
 4503 |             "required": false,
 4504 |             "in": "query",
 4505 |             "description": "Contact ID for the invoice",
 4506 |             "example": "AmuzcoPBpgKeccNsFlib",
 4507 |             "schema": {
 4508 |               "type": "string"
 4509 |             }
 4510 |           },
 4511 |           {
 4512 |             "name": "limit",
 4513 |             "required": true,
 4514 |             "in": "query",
 4515 |             "description": "Limit the number of items to return",
 4516 |             "example": 10,
 4517 |             "schema": {
 4518 |               "type": "string"
 4519 |             }
 4520 |           },
 4521 |           {
 4522 |             "name": "offset",
 4523 |             "required": true,
 4524 |             "in": "query",
 4525 |             "description": "Number of items to skip",
 4526 |             "example": 10,
 4527 |             "schema": {
 4528 |               "type": "string"
 4529 |             }
 4530 |           },
 4531 |           {
 4532 |             "name": "sortField",
 4533 |             "required": false,
 4534 |             "in": "query",
 4535 |             "description": "The field on which sorting should be applied",
 4536 |             "example": "issueDate",
 4537 |             "schema": {
 4538 |               "enum": [
 4539 |                 "issueDate"
 4540 |               ],
 4541 |               "type": "string"
 4542 |             }
 4543 |           },
 4544 |           {
 4545 |             "name": "sortOrder",
 4546 |             "required": false,
 4547 |             "in": "query",
 4548 |             "description": "The order of sort which should be applied for the sortField",
 4549 |             "example": "descend",
 4550 |             "schema": {
 4551 |               "enum": [
 4552 |                 "ascend",
 4553 |                 "descend"
 4554 |               ],
 4555 |               "type": "string"
 4556 |             }
 4557 |           }
 4558 |         ],
 4559 |         "responses": {
 4560 |           "200": {
 4561 |             "description": "Successful response",
 4562 |             "content": {
 4563 |               "application/json": {
 4564 |                 "schema": {
 4565 |                   "$ref": "#/components/schemas/ListInvoicesResponseDto"
 4566 |                 }
 4567 |               }
 4568 |             }
 4569 |           },
 4570 |           "400": {
 4571 |             "description": "Bad Request",
 4572 |             "content": {
 4573 |               "application/json": {
 4574 |                 "schema": {
 4575 |                   "$ref": "#/components/schemas/BadRequestDTO"
 4576 |                 }
 4577 |               }
 4578 |             }
 4579 |           },
 4580 |           "401": {
 4581 |             "description": "Unauthorized",
 4582 |             "content": {
 4583 |               "application/json": {
 4584 |                 "schema": {
 4585 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 4586 |                 }
 4587 |               }
 4588 |             }
 4589 |           },
 4590 |           "422": {
 4591 |             "description": "Unprocessable Entity",
 4592 |             "content": {
 4593 |               "application/json": {
 4594 |                 "schema": {
 4595 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 4596 |                 }
 4597 |               }
 4598 |             }
 4599 |           }
 4600 |         },
 4601 |         "tags": [
 4602 |           "Invoice"
 4603 |         ],
 4604 |         "security": [
 4605 |           {
 4606 |             "Location-Access": []
 4607 |           },
 4608 |           {
 4609 |             "Agency-Access": []
 4610 |           }
 4611 |         ]
 4612 |       }
 4613 |     }
 4614 |   },
 4615 |   "info": {
 4616 |     "title": "Invoice API",
 4617 |     "description": "Documentation for invoice API",
 4618 |     "version": "1.0",
 4619 |     "contact": {}
 4620 |   },
 4621 |   "tags": [
 4622 |     {
 4623 |       "name": "Invoice",
 4624 |       "description": "Documentation for invoice API"
 4625 |     }
 4626 |   ],
 4627 |   "servers": [
 4628 |     {
 4629 |       "url": "https://services.leadconnectorhq.com"
 4630 |     }
 4631 |   ],
 4632 |   "components": {
 4633 |     "securitySchemes": {
 4634 |       "bearer": {
 4635 |         "scheme": "bearer",
 4636 |         "bearerFormat": "JWT",
 4637 |         "name": "Authorization",
 4638 |         "in": "header",
 4639 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 4640 |         "type": "http"
 4641 |       },
 4642 |       "Location-Access": {
 4643 |         "scheme": "bearer",
 4644 |         "bearerFormat": "JWT",
 4645 |         "name": "Authorization",
 4646 |         "in": "header",
 4647 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 4648 |         "type": "http"
 4649 |       },
 4650 |       "Agency-Access": {
 4651 |         "scheme": "bearer",
 4652 |         "bearerFormat": "JWT",
 4653 |         "name": "Authorization",
 4654 |         "in": "header",
 4655 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
 4656 |         "type": "http"
 4657 |       }
 4658 |     },
 4659 |     "schemas": {
 4660 |       "BadRequestDTO": {
 4661 |         "type": "object",
 4662 |         "properties": {
 4663 |           "statusCode": {
 4664 |             "type": "number",
 4665 |             "example": 400
 4666 |           },
 4667 |           "message": {
 4668 |             "type": "string",
 4669 |             "example": "Bad Request"
 4670 |           }
 4671 |         }
 4672 |       },
 4673 |       "UnauthorizedDTO": {
 4674 |         "type": "object",
 4675 |         "properties": {
 4676 |           "statusCode": {
 4677 |             "type": "number",
 4678 |             "example": 401
 4679 |           },
 4680 |           "message": {
 4681 |             "type": "string",
 4682 |             "example": "Invalid token: access token is invalid"
 4683 |           },
 4684 |           "error": {
 4685 |             "type": "string",
 4686 |             "example": "Unauthorized"
 4687 |           }
 4688 |         }
 4689 |       },
 4690 |       "AddressDto": {
 4691 |         "type": "object",
 4692 |         "properties": {
 4693 |           "addressLine1": {
 4694 |             "type": "string",
 4695 |             "description": "Address Line 1",
 4696 |             "example": "9931 Beechwood"
 4697 |           },
 4698 |           "addressLine2": {
 4699 |             "type": "string",
 4700 |             "description": "Address Line 2",
 4701 |             "example": "Beechwood"
 4702 |           },
 4703 |           "city": {
 4704 |             "type": "string",
 4705 |             "description": "City",
 4706 |             "example": "St. Houston"
 4707 |           },
 4708 |           "state": {
 4709 |             "type": "string",
 4710 |             "description": "State",
 4711 |             "example": "TX"
 4712 |           },
 4713 |           "countryCode": {
 4714 |             "type": "string",
 4715 |             "description": "Country Code",
 4716 |             "example": "US"
 4717 |           },
 4718 |           "postalCode": {
 4719 |             "type": "string",
 4720 |             "description": "Postal Code",
 4721 |             "example": "559-6993"
 4722 |           }
 4723 |         }
 4724 |       },
 4725 |       "BusinessDetailsDto": {
 4726 |         "type": "object",
 4727 |         "properties": {
 4728 |           "logoUrl": {
 4729 |             "type": "string",
 4730 |             "description": "Business Logo URL",
 4731 |             "example": "https://example.com/logo.png"
 4732 |           },
 4733 |           "name": {
 4734 |             "type": "string",
 4735 |             "description": "Business Name",
 4736 |             "example": "ABC Corp."
 4737 |           },
 4738 |           "phoneNo": {
 4739 |             "type": "string",
 4740 |             "description": "Business Phone Number",
 4741 |             "example": "+1-214-559-6993"
 4742 |           },
 4743 |           "address": {
 4744 |             "description": "Business Address",
 4745 |             "example": "9931 Beechwood, TX",
 4746 |             "allOf": [
 4747 |               {
 4748 |                 "$ref": "#/components/schemas/AddressDto"
 4749 |               }
 4750 |             ]
 4751 |           },
 4752 |           "website": {
 4753 |             "type": "string",
 4754 |             "description": "Business Website Link",
 4755 |             "example": "wwww.example.com"
 4756 |           },
 4757 |           "customValues": {
 4758 |             "description": "Custom Values",
 4759 |             "type": "array",
 4760 |             "items": {
 4761 |               "type": "string"
 4762 |             }
 4763 |           }
 4764 |         }
 4765 |       },
 4766 |       "ItemTaxDto": {
 4767 |         "type": "object",
 4768 |         "properties": {
 4769 |           "_id": {
 4770 |             "type": "string"
 4771 |           },
 4772 |           "name": {
 4773 |             "type": "string"
 4774 |           },
 4775 |           "rate": {
 4776 |             "type": "number"
 4777 |           },
 4778 |           "calculation": {
 4779 |             "type": "string",
 4780 |             "enum": [
 4781 |               "exclusive"
 4782 |             ]
 4783 |           },
 4784 |           "description": {
 4785 |             "type": "string"
 4786 |           },
 4787 |           "taxId": {
 4788 |             "type": "string"
 4789 |           }
 4790 |         },
 4791 |         "required": [
 4792 |           "_id",
 4793 |           "name",
 4794 |           "rate",
 4795 |           "calculation"
 4796 |         ]
 4797 |       },
 4798 |       "InvoiceItemDto": {
 4799 |         "type": "object",
 4800 |         "properties": {
 4801 |           "name": {
 4802 |             "type": "string",
 4803 |             "description": "Invoice Item Name",
 4804 |             "example": "ABC Product"
 4805 |           },
 4806 |           "description": {
 4807 |             "type": "string",
 4808 |             "description": "Invoice descriptions",
 4809 |             "example": "ABC Corp."
 4810 |           },
 4811 |           "productId": {
 4812 |             "type": "string",
 4813 |             "description": "Product Id",
 4814 |             "example": "6578278e879ad2646715ba9c"
 4815 |           },
 4816 |           "priceId": {
 4817 |             "type": "string",
 4818 |             "description": "Price Id",
 4819 |             "example": "6578278e879ad2646715ba9c"
 4820 |           },
 4821 |           "currency": {
 4822 |             "type": "string",
 4823 |             "description": "Currency",
 4824 |             "example": "USD"
 4825 |           },
 4826 |           "amount": {
 4827 |             "type": "number",
 4828 |             "description": "Product amount",
 4829 |             "example": 999
 4830 |           },
 4831 |           "qty": {
 4832 |             "type": "number",
 4833 |             "description": "Product Quantity",
 4834 |             "example": 1
 4835 |           },
 4836 |           "taxes": {
 4837 |             "description": "Tax",
 4838 |             "type": "array",
 4839 |             "items": {
 4840 |               "$ref": "#/components/schemas/ItemTaxDto"
 4841 |             }
 4842 |           },
 4843 |           "automaticTaxCategoryId": {
 4844 |             "type": "string",
 4845 |             "description": "Tax category id for calculating automatic tax",
 4846 |             "example": "6578278e879ad2646715ba9c"
 4847 |           },
 4848 |           "isSetupFeeItem": {
 4849 |             "type": "boolean",
 4850 |             "description": "Setupfee item, only created when 1st invoice of recurring schedule is generated"
 4851 |           },
 4852 |           "type": {
 4853 |             "type": "string",
 4854 |             "description": "Price type of the item",
 4855 |             "example": "one_time",
 4856 |             "enum": [
 4857 |               "one_time",
 4858 |               "recurring"
 4859 |             ]
 4860 |           },
 4861 |           "taxInclusive": {
 4862 |             "type": "boolean",
 4863 |             "description": "true if item amount is tax inclusive",
 4864 |             "example": true,
 4865 |             "default": false
 4866 |           }
 4867 |         },
 4868 |         "required": [
 4869 |           "name",
 4870 |           "currency",
 4871 |           "amount",
 4872 |           "qty"
 4873 |         ]
 4874 |       },
 4875 |       "DiscountDto": {
 4876 |         "type": "object",
 4877 |         "properties": {
 4878 |           "value": {
 4879 |             "type": "number",
 4880 |             "description": "Discount Value",
 4881 |             "example": 10,
 4882 |             "default": 0
 4883 |           },
 4884 |           "type": {
 4885 |             "type": "string",
 4886 |             "description": "Discount type",
 4887 |             "enum": [
 4888 |               "percentage",
 4889 |               "fixed"
 4890 |             ],
 4891 |             "example": "percentage",
 4892 |             "default": "percentage"
 4893 |           },
 4894 |           "validOnProductIds": {
 4895 |             "description": "Product Ids on which discount is applicable",
 4896 |             "example": "[ '6579751d56f60276e5bd4154' ]",
 4897 |             "type": "array",
 4898 |             "items": {
 4899 |               "type": "string"
 4900 |             }
 4901 |           }
 4902 |         },
 4903 |         "required": [
 4904 |           "type"
 4905 |         ]
 4906 |       },
 4907 |       "TipsConfigurationDto": {
 4908 |         "type": "object",
 4909 |         "properties": {
 4910 |           "tipsPercentage": {
 4911 |             "description": "Percentage of tips allowed",
 4912 |             "example": [
 4913 |               5,
 4914 |               10,
 4915 |               15
 4916 |             ],
 4917 |             "type": "array",
 4918 |             "items": {
 4919 |               "type": "string"
 4920 |             }
 4921 |           },
 4922 |           "tipsEnabled": {
 4923 |             "type": "boolean",
 4924 |             "description": "Tips enabled status",
 4925 |             "example": true
 4926 |           }
 4927 |         },
 4928 |         "required": [
 4929 |           "tipsPercentage",
 4930 |           "tipsEnabled"
 4931 |         ]
 4932 |       },
 4933 |       "LateFeesFrequencyDto": {
 4934 |         "type": "object",
 4935 |         "properties": {
 4936 |           "intervalCount": {
 4937 |             "type": "number",
 4938 |             "description": "Late fees interval count",
 4939 |             "example": 10
 4940 |           },
 4941 |           "interval": {
 4942 |             "type": "string",
 4943 |             "description": "Late fees interval",
 4944 |             "example": "day",
 4945 |             "enum": [
 4946 |               "minute",
 4947 |               "hour",
 4948 |               "day",
 4949 |               "week",
 4950 |               "month",
 4951 |               "one_time"
 4952 |             ]
 4953 |           }
 4954 |         },
 4955 |         "required": [
 4956 |           "interval"
 4957 |         ]
 4958 |       },
 4959 |       "LateFeesGraceDto": {
 4960 |         "type": "object",
 4961 |         "properties": {
 4962 |           "intervalCount": {
 4963 |             "type": "number",
 4964 |             "description": "Late fees grace interval count",
 4965 |             "example": 10
 4966 |           },
 4967 |           "interval": {
 4968 |             "type": "string",
 4969 |             "description": "Late fees grace interval",
 4970 |             "example": "day",
 4971 |             "enum": [
 4972 |               "day"
 4973 |             ]
 4974 |           }
 4975 |         },
 4976 |         "required": [
 4977 |           "intervalCount",
 4978 |           "interval"
 4979 |         ]
 4980 |       },
 4981 |       "LateFeesMaxFeesDto": {
 4982 |         "type": "object",
 4983 |         "properties": {
 4984 |           "type": {
 4985 |             "type": "string",
 4986 |             "example": "fixed",
 4987 |             "enum": [
 4988 |               "fixed"
 4989 |             ]
 4990 |           },
 4991 |           "value": {
 4992 |             "type": "number",
 4993 |             "example": "Max late fees to pay",
 4994 |             "description": "10"
 4995 |           }
 4996 |         },
 4997 |         "required": [
 4998 |           "type",
 4999 |           "value"
 5000 |         ]
 5001 |       },
 5002 |       "LateFeesConfigurationDto": {
 5003 |         "type": "object",
 5004 |         "properties": {
 5005 |           "enable": {
 5006 |             "type": "boolean",
 5007 |             "description": "Enable late fees",
 5008 |             "example": true
 5009 |           },
 5010 |           "value": {
 5011 |             "type": "number",
 5012 |             "description": "Late Fees Value",
 5013 |             "example": 10
 5014 |           },
 5015 |           "type": {
 5016 |             "type": "string",
 5017 |             "description": "Late Fees Type",
 5018 |             "example": "fixed",
 5019 |             "enum": [
 5020 |               "fixed",
 5021 |               "percentage"
 5022 |             ]
 5023 |           },
 5024 |           "frequency": {
 5025 |             "description": "Late Fees Frequency",
 5026 |             "allOf": [
 5027 |               {
 5028 |                 "$ref": "#/components/schemas/LateFeesFrequencyDto"
 5029 |               }
 5030 |             ]
 5031 |           },
 5032 |           "grace": {
 5033 |             "description": "Late Fees Grace",
 5034 |             "allOf": [
 5035 |               {
 5036 |                 "$ref": "#/components/schemas/LateFeesGraceDto"
 5037 |               }
 5038 |             ]
 5039 |           },
 5040 |           "maxLateFees": {
 5041 |             "description": "Max late fees payable",
 5042 |             "allOf": [
 5043 |               {
 5044 |                 "$ref": "#/components/schemas/LateFeesMaxFeesDto"
 5045 |               }
 5046 |             ]
 5047 |           }
 5048 |         },
 5049 |         "required": [
 5050 |           "enable",
 5051 |           "value",
 5052 |           "type",
 5053 |           "frequency"
 5054 |         ]
 5055 |       },
 5056 |       "StripePaymentMethodDto": {
 5057 |         "type": "object",
 5058 |         "properties": {
 5059 |           "enableBankDebitOnly": {
 5060 |             "type": "boolean",
 5061 |             "description": "Enable Bank Debit Only",
 5062 |             "example": false
 5063 |           }
 5064 |         },
 5065 |         "required": [
 5066 |           "enableBankDebitOnly"
 5067 |         ]
 5068 |       },
 5069 |       "PaymentMethodDto": {
 5070 |         "type": "object",
 5071 |         "properties": {
 5072 |           "stripe": {
 5073 |             "description": "Payment Method",
 5074 |             "allOf": [
 5075 |               {
 5076 |                 "$ref": "#/components/schemas/StripePaymentMethodDto"
 5077 |               }
 5078 |             ]
 5079 |           }
 5080 |         },
 5081 |         "required": [
 5082 |           "stripe"
 5083 |         ]
 5084 |       },
 5085 |       "CreateInvoiceTemplateDto": {
 5086 |         "type": "object",
 5087 |         "properties": {
 5088 |           "altId": {
 5089 |             "type": "string",
 5090 |             "description": "location Id / company Id based on altType",
 5091 |             "example": "6578278e879ad2646715ba9c"
 5092 |           },
 5093 |           "altType": {
 5094 |             "type": "string",
 5095 |             "description": "Alt Type",
 5096 |             "enum": [
 5097 |               "location"
 5098 |             ],
 5099 |             "example": "location"
 5100 |           },
 5101 |           "internal": {
 5102 |             "type": "boolean"
 5103 |           },
 5104 |           "name": {
 5105 |             "type": "string",
 5106 |             "description": "Name of the template",
 5107 |             "example": "New Template"
 5108 |           },
 5109 |           "businessDetails": {
 5110 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 5111 |           },
 5112 |           "currency": {
 5113 |             "type": "string"
 5114 |           },
 5115 |           "items": {
 5116 |             "type": "array",
 5117 |             "items": {
 5118 |               "$ref": "#/components/schemas/InvoiceItemDto"
 5119 |             }
 5120 |           },
 5121 |           "automaticTaxesEnabled": {
 5122 |             "type": "boolean",
 5123 |             "description": "Automatic taxes enabled for the Invoice",
 5124 |             "example": true
 5125 |           },
 5126 |           "discount": {
 5127 |             "$ref": "#/components/schemas/DiscountDto"
 5128 |           },
 5129 |           "termsNotes": {
 5130 |             "type": "string"
 5131 |           },
 5132 |           "title": {
 5133 |             "type": "string",
 5134 |             "description": "Template title",
 5135 |             "example": "New Template"
 5136 |           },
 5137 |           "tipsConfiguration": {
 5138 |             "description": "Configuration for tips on invoices",
 5139 |             "allOf": [
 5140 |               {
 5141 |                 "$ref": "#/components/schemas/TipsConfigurationDto"
 5142 |               }
 5143 |             ]
 5144 |           },
 5145 |           "lateFeesConfiguration": {
 5146 |             "description": "Late fees configuration for the invoices",
 5147 |             "allOf": [
 5148 |               {
 5149 |                 "$ref": "#/components/schemas/LateFeesConfigurationDto"
 5150 |               }
 5151 |             ]
 5152 |           },
 5153 |           "invoiceNumberPrefix": {
 5154 |             "type": "string",
 5155 |             "description": "prefix for invoice number",
 5156 |             "example": "INV-"
 5157 |           },
 5158 |           "paymentMethods": {
 5159 |             "description": "Payment Methods for Invoices",
 5160 |             "allOf": [
 5161 |               {
 5162 |                 "$ref": "#/components/schemas/PaymentMethodDto"
 5163 |               }
 5164 |             ]
 5165 |           },
 5166 |           "attachments": {
 5167 |             "description": "attachments for the invoice",
 5168 |             "type": "array",
 5169 |             "items": {
 5170 |               "type": "string"
 5171 |             }
 5172 |           }
 5173 |         },
 5174 |         "required": [
 5175 |           "altId",
 5176 |           "altType",
 5177 |           "name",
 5178 |           "businessDetails",
 5179 |           "currency",
 5180 |           "items"
 5181 |         ]
 5182 |       },
 5183 |       "CreateInvoiceTemplateResponseDto": {
 5184 |         "type": "object",
 5185 |         "properties": {
 5186 |           "_id": {
 5187 |             "type": "string",
 5188 |             "description": "Template Id",
 5189 |             "example": "6578278e879ad2646715ba9c"
 5190 |           },
 5191 |           "altId": {
 5192 |             "type": "string",
 5193 |             "description": "Location Id or Agency Id",
 5194 |             "example": "6578278e879ad2646715ba9c"
 5195 |           },
 5196 |           "altType": {
 5197 |             "type": "string",
 5198 |             "enum": [
 5199 |               "location"
 5200 |             ]
 5201 |           },
 5202 |           "name": {
 5203 |             "type": "string",
 5204 |             "description": "Name of the Template",
 5205 |             "example": "New Template"
 5206 |           },
 5207 |           "businessDetails": {
 5208 |             "description": "Business Details",
 5209 |             "example": {
 5210 |               "name": "Alex",
 5211 |               "address": {
 5212 |                 "addressLine1": "9931 Beechwood",
 5213 |                 "city": "St. Houston",
 5214 |                 "state": "TX",
 5215 |                 "countryCode": "USA",
 5216 |                 "postalCode": "559-6993"
 5217 |               },
 5218 |               "phoneNo": "+1-214-559-6993",
 5219 |               "website": "www.example.com"
 5220 |             },
 5221 |             "allOf": [
 5222 |               {
 5223 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 5224 |               }
 5225 |             ]
 5226 |           },
 5227 |           "currency": {
 5228 |             "type": "string",
 5229 |             "description": "Currency",
 5230 |             "example": "USD"
 5231 |           },
 5232 |           "discount": {
 5233 |             "description": "Discount",
 5234 |             "example": {
 5235 |               "type": "percentage",
 5236 |               "value": 0
 5237 |             },
 5238 |             "allOf": [
 5239 |               {
 5240 |                 "$ref": "#/components/schemas/DiscountDto"
 5241 |               }
 5242 |             ]
 5243 |           },
 5244 |           "items": {
 5245 |             "description": "Invoice Items",
 5246 |             "example": [
 5247 |               {
 5248 |                 "taxes": [],
 5249 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 5250 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 5251 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 5252 |                 "currency": "USD",
 5253 |                 "name": "Macbook Pro",
 5254 |                 "qty": 1,
 5255 |                 "amount": 999
 5256 |               }
 5257 |             ],
 5258 |             "type": "array",
 5259 |             "items": {
 5260 |               "type": "string"
 5261 |             }
 5262 |           },
 5263 |           "invoiceNumberPrefix": {
 5264 |             "type": "string",
 5265 |             "description": "prefix for invoice number",
 5266 |             "example": "INV-"
 5267 |           },
 5268 |           "total": {
 5269 |             "type": "number",
 5270 |             "description": "Total Amount",
 5271 |             "example": 999
 5272 |           },
 5273 |           "createdAt": {
 5274 |             "type": "string",
 5275 |             "description": "created at",
 5276 |             "example": "2023-12-12T09:27:42.355Z"
 5277 |           },
 5278 |           "updatedAt": {
 5279 |             "type": "string",
 5280 |             "description": "updated at",
 5281 |             "example": "2023-12-12T09:27:42.355Z"
 5282 |           }
 5283 |         },
 5284 |         "required": [
 5285 |           "_id",
 5286 |           "altId",
 5287 |           "altType",
 5288 |           "name",
 5289 |           "businessDetails",
 5290 |           "currency",
 5291 |           "items",
 5292 |           "total",
 5293 |           "createdAt",
 5294 |           "updatedAt"
 5295 |         ]
 5296 |       },
 5297 |       "UnprocessableDTO": {
 5298 |         "type": "object",
 5299 |         "properties": {
 5300 |           "statusCode": {
 5301 |             "type": "number",
 5302 |             "example": 422
 5303 |           },
 5304 |           "message": {
 5305 |             "example": [
 5306 |               "Unprocessable Entity"
 5307 |             ],
 5308 |             "type": "array",
 5309 |             "items": {
 5310 |               "type": "string"
 5311 |             }
 5312 |           },
 5313 |           "error": {
 5314 |             "type": "string",
 5315 |             "example": "Unprocessable Entity"
 5316 |           }
 5317 |         }
 5318 |       },
 5319 |       "GetTemplateResponseDto": {
 5320 |         "type": "object",
 5321 |         "properties": {
 5322 |           "_id": {
 5323 |             "type": "string",
 5324 |             "description": "Template Id",
 5325 |             "example": "6578278e879ad2646715ba9c"
 5326 |           },
 5327 |           "altId": {
 5328 |             "type": "string",
 5329 |             "description": "Location Id or Agency Id",
 5330 |             "example": "6578278e879ad2646715ba9c"
 5331 |           },
 5332 |           "altType": {
 5333 |             "type": "string",
 5334 |             "enum": [
 5335 |               "location"
 5336 |             ]
 5337 |           },
 5338 |           "name": {
 5339 |             "type": "string",
 5340 |             "description": "Name of the Template",
 5341 |             "example": "New Template"
 5342 |           },
 5343 |           "businessDetails": {
 5344 |             "description": "Business Details",
 5345 |             "example": {
 5346 |               "name": "Alex",
 5347 |               "address": {
 5348 |                 "addressLine1": "9931 Beechwood",
 5349 |                 "city": "St. Houston",
 5350 |                 "state": "TX",
 5351 |                 "countryCode": "USA",
 5352 |                 "postalCode": "559-6993"
 5353 |               },
 5354 |               "phoneNo": "+1-214-559-6993",
 5355 |               "website": "www.example.com"
 5356 |             },
 5357 |             "allOf": [
 5358 |               {
 5359 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 5360 |               }
 5361 |             ]
 5362 |           },
 5363 |           "currency": {
 5364 |             "type": "string",
 5365 |             "description": "Currency",
 5366 |             "example": "USD"
 5367 |           },
 5368 |           "discount": {
 5369 |             "description": "Discount",
 5370 |             "example": {
 5371 |               "type": "percentage",
 5372 |               "value": 0
 5373 |             },
 5374 |             "allOf": [
 5375 |               {
 5376 |                 "$ref": "#/components/schemas/DiscountDto"
 5377 |               }
 5378 |             ]
 5379 |           },
 5380 |           "items": {
 5381 |             "description": "Invoice Items",
 5382 |             "example": [
 5383 |               {
 5384 |                 "taxes": [],
 5385 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 5386 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 5387 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 5388 |                 "currency": "USD",
 5389 |                 "name": "Macbook Pro",
 5390 |                 "qty": 1,
 5391 |                 "amount": 999
 5392 |               }
 5393 |             ],
 5394 |             "type": "array",
 5395 |             "items": {
 5396 |               "type": "string"
 5397 |             }
 5398 |           },
 5399 |           "invoiceNumberPrefix": {
 5400 |             "type": "string",
 5401 |             "description": "prefix for invoice number",
 5402 |             "example": "INV-"
 5403 |           },
 5404 |           "total": {
 5405 |             "type": "number",
 5406 |             "description": "Total Amount",
 5407 |             "example": 999
 5408 |           },
 5409 |           "createdAt": {
 5410 |             "type": "string",
 5411 |             "description": "created at",
 5412 |             "example": "2023-12-12T09:27:42.355Z"
 5413 |           },
 5414 |           "updatedAt": {
 5415 |             "type": "string",
 5416 |             "description": "updated at",
 5417 |             "example": "2023-12-12T09:27:42.355Z"
 5418 |           }
 5419 |         },
 5420 |         "required": [
 5421 |           "_id",
 5422 |           "altId",
 5423 |           "altType",
 5424 |           "name",
 5425 |           "businessDetails",
 5426 |           "currency",
 5427 |           "items",
 5428 |           "total",
 5429 |           "createdAt",
 5430 |           "updatedAt"
 5431 |         ]
 5432 |       },
 5433 |       "ListTemplatesResponseDto": {
 5434 |         "type": "object",
 5435 |         "properties": {
 5436 |           "data": {
 5437 |             "type": "array",
 5438 |             "items": {
 5439 |               "$ref": "#/components/schemas/GetTemplateResponseDto"
 5440 |             }
 5441 |           },
 5442 |           "totalCount": {
 5443 |             "type": "number",
 5444 |             "description": "Total number of Templates",
 5445 |             "example": 100
 5446 |           }
 5447 |         },
 5448 |         "required": [
 5449 |           "data",
 5450 |           "totalCount"
 5451 |         ]
 5452 |       },
 5453 |       "UpdateInvoiceTemplateDto": {
 5454 |         "type": "object",
 5455 |         "properties": {
 5456 |           "altId": {
 5457 |             "type": "string",
 5458 |             "description": "location Id / company Id based on altType",
 5459 |             "example": "6578278e879ad2646715ba9c"
 5460 |           },
 5461 |           "altType": {
 5462 |             "type": "string",
 5463 |             "description": "Alt Type",
 5464 |             "enum": [
 5465 |               "location"
 5466 |             ],
 5467 |             "example": "location"
 5468 |           },
 5469 |           "internal": {
 5470 |             "type": "boolean"
 5471 |           },
 5472 |           "name": {
 5473 |             "type": "string",
 5474 |             "description": "Name of the template",
 5475 |             "example": "New Template"
 5476 |           },
 5477 |           "businessDetails": {
 5478 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 5479 |           },
 5480 |           "currency": {
 5481 |             "type": "string"
 5482 |           },
 5483 |           "items": {
 5484 |             "type": "array",
 5485 |             "items": {
 5486 |               "$ref": "#/components/schemas/InvoiceItemDto"
 5487 |             }
 5488 |           },
 5489 |           "discount": {
 5490 |             "$ref": "#/components/schemas/DiscountDto"
 5491 |           },
 5492 |           "termsNotes": {
 5493 |             "type": "string"
 5494 |           },
 5495 |           "title": {
 5496 |             "type": "string",
 5497 |             "description": "Template title",
 5498 |             "example": "New Template"
 5499 |           }
 5500 |         },
 5501 |         "required": [
 5502 |           "altId",
 5503 |           "altType",
 5504 |           "name",
 5505 |           "businessDetails",
 5506 |           "currency",
 5507 |           "items"
 5508 |         ]
 5509 |       },
 5510 |       "UpdateInvoiceTemplateResponseDto": {
 5511 |         "type": "object",
 5512 |         "properties": {
 5513 |           "_id": {
 5514 |             "type": "string",
 5515 |             "description": "Template Id",
 5516 |             "example": "6578278e879ad2646715ba9c"
 5517 |           },
 5518 |           "altId": {
 5519 |             "type": "string",
 5520 |             "description": "Location Id or Agency Id",
 5521 |             "example": "6578278e879ad2646715ba9c"
 5522 |           },
 5523 |           "altType": {
 5524 |             "type": "string",
 5525 |             "enum": [
 5526 |               "location"
 5527 |             ]
 5528 |           },
 5529 |           "name": {
 5530 |             "type": "string",
 5531 |             "description": "Name of the Template",
 5532 |             "example": "New Template"
 5533 |           },
 5534 |           "businessDetails": {
 5535 |             "description": "Business Details",
 5536 |             "example": {
 5537 |               "name": "Alex",
 5538 |               "address": {
 5539 |                 "addressLine1": "9931 Beechwood",
 5540 |                 "city": "St. Houston",
 5541 |                 "state": "TX",
 5542 |                 "countryCode": "USA",
 5543 |                 "postalCode": "559-6993"
 5544 |               },
 5545 |               "phoneNo": "+1-214-559-6993",
 5546 |               "website": "www.example.com"
 5547 |             },
 5548 |             "allOf": [
 5549 |               {
 5550 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 5551 |               }
 5552 |             ]
 5553 |           },
 5554 |           "currency": {
 5555 |             "type": "string",
 5556 |             "description": "Currency",
 5557 |             "example": "USD"
 5558 |           },
 5559 |           "discount": {
 5560 |             "description": "Discount",
 5561 |             "example": {
 5562 |               "type": "percentage",
 5563 |               "value": 0
 5564 |             },
 5565 |             "allOf": [
 5566 |               {
 5567 |                 "$ref": "#/components/schemas/DiscountDto"
 5568 |               }
 5569 |             ]
 5570 |           },
 5571 |           "items": {
 5572 |             "description": "Invoice Items",
 5573 |             "example": [
 5574 |               {
 5575 |                 "taxes": [],
 5576 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 5577 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 5578 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 5579 |                 "currency": "USD",
 5580 |                 "name": "Macbook Pro",
 5581 |                 "qty": 1,
 5582 |                 "amount": 999
 5583 |               }
 5584 |             ],
 5585 |             "type": "array",
 5586 |             "items": {
 5587 |               "type": "string"
 5588 |             }
 5589 |           },
 5590 |           "invoiceNumberPrefix": {
 5591 |             "type": "string",
 5592 |             "description": "prefix for invoice number",
 5593 |             "example": "INV-"
 5594 |           },
 5595 |           "total": {
 5596 |             "type": "number",
 5597 |             "description": "Total Amount",
 5598 |             "example": 999
 5599 |           },
 5600 |           "createdAt": {
 5601 |             "type": "string",
 5602 |             "description": "created at",
 5603 |             "example": "2023-12-12T09:27:42.355Z"
 5604 |           },
 5605 |           "updatedAt": {
 5606 |             "type": "string",
 5607 |             "description": "updated at",
 5608 |             "example": "2023-12-12T09:27:42.355Z"
 5609 |           }
 5610 |         },
 5611 |         "required": [
 5612 |           "_id",
 5613 |           "altId",
 5614 |           "altType",
 5615 |           "name",
 5616 |           "businessDetails",
 5617 |           "currency",
 5618 |           "items",
 5619 |           "total",
 5620 |           "createdAt",
 5621 |           "updatedAt"
 5622 |         ]
 5623 |       },
 5624 |       "UpdateInvoiceLateFeesConfigurationDto": {
 5625 |         "type": "object",
 5626 |         "properties": {
 5627 |           "altId": {
 5628 |             "type": "string",
 5629 |             "description": "location Id / company Id based on altType",
 5630 |             "example": "6578278e879ad2646715ba9c"
 5631 |           },
 5632 |           "altType": {
 5633 |             "type": "string",
 5634 |             "description": "Alt Type",
 5635 |             "enum": [
 5636 |               "location"
 5637 |             ],
 5638 |             "example": "location"
 5639 |           },
 5640 |           "lateFeesConfiguration": {
 5641 |             "description": "late fees configuration",
 5642 |             "allOf": [
 5643 |               {
 5644 |                 "$ref": "#/components/schemas/LateFeesConfigurationDto"
 5645 |               }
 5646 |             ]
 5647 |           }
 5648 |         },
 5649 |         "required": [
 5650 |           "altId",
 5651 |           "altType",
 5652 |           "lateFeesConfiguration"
 5653 |         ]
 5654 |       },
 5655 |       "UpdatePaymentMethodsConfigurationDto": {
 5656 |         "type": "object",
 5657 |         "properties": {
 5658 |           "altId": {
 5659 |             "type": "string",
 5660 |             "description": "location Id / company Id based on altType",
 5661 |             "example": "6578278e879ad2646715ba9c"
 5662 |           },
 5663 |           "altType": {
 5664 |             "type": "string",
 5665 |             "description": "Alt Type",
 5666 |             "enum": [
 5667 |               "location"
 5668 |             ],
 5669 |             "example": "location"
 5670 |           },
 5671 |           "paymentMethods": {
 5672 |             "description": "Payment Methods for Invoices",
 5673 |             "allOf": [
 5674 |               {
 5675 |                 "$ref": "#/components/schemas/PaymentMethodDto"
 5676 |               }
 5677 |             ]
 5678 |           }
 5679 |         },
 5680 |         "required": [
 5681 |           "altId",
 5682 |           "altType"
 5683 |         ]
 5684 |       },
 5685 |       "DeleteInvoiceTemplateResponseDto": {
 5686 |         "type": "object",
 5687 |         "properties": {
 5688 |           "success": {
 5689 |             "type": "boolean",
 5690 |             "description": "success",
 5691 |             "example": true
 5692 |           }
 5693 |         },
 5694 |         "required": [
 5695 |           "success"
 5696 |         ]
 5697 |       },
 5698 |       "AdditionalEmailsDto": {
 5699 |         "type": "object",
 5700 |         "properties": {
 5701 |           "email": {
 5702 |             "type": "string",
 5703 |             "example": "alex@example.com"
 5704 |           }
 5705 |         },
 5706 |         "required": [
 5707 |           "email"
 5708 |         ]
 5709 |       },
 5710 |       "ContactDetailsDto": {
 5711 |         "type": "object",
 5712 |         "properties": {
 5713 |           "id": {
 5714 |             "type": "string",
 5715 |             "description": "Contact ID",
 5716 |             "example": "6578278e879ad2646715ba9c"
 5717 |           },
 5718 |           "name": {
 5719 |             "type": "string",
 5720 |             "description": "Contact Name",
 5721 |             "example": "Alex"
 5722 |           },
 5723 |           "phoneNo": {
 5724 |             "type": "string",
 5725 |             "description": "Contact Phone Number",
 5726 |             "example": "+1234567890"
 5727 |           },
 5728 |           "email": {
 5729 |             "type": "string",
 5730 |             "description": "Contact Email",
 5731 |             "example": "alex@example.com"
 5732 |           },
 5733 |           "additionalEmails": {
 5734 |             "description": "Secondary email addresses for the contact to be saved",
 5735 |             "type": "array",
 5736 |             "items": {
 5737 |               "$ref": "#/components/schemas/AdditionalEmailsDto"
 5738 |             }
 5739 |           },
 5740 |           "companyName": {
 5741 |             "type": "string",
 5742 |             "description": "Contact Company Name",
 5743 |             "example": "ABC Corp."
 5744 |           },
 5745 |           "address": {
 5746 |             "$ref": "#/components/schemas/AddressDto"
 5747 |           },
 5748 |           "customFields": {
 5749 |             "description": "Custom Values",
 5750 |             "type": "array",
 5751 |             "items": {
 5752 |               "type": "string"
 5753 |             }
 5754 |           }
 5755 |         },
 5756 |         "required": [
 5757 |           "id",
 5758 |           "name"
 5759 |         ]
 5760 |       },
 5761 |       "CustomRRuleOptionsDto": {
 5762 |         "type": "object",
 5763 |         "properties": {
 5764 |           "intervalType": {
 5765 |             "type": "string",
 5766 |             "enum": [
 5767 |               "yearly",
 5768 |               "monthly",
 5769 |               "weekly",
 5770 |               "daily",
 5771 |               "hourly",
 5772 |               "minutely",
 5773 |               "secondly"
 5774 |             ],
 5775 |             "example": "monthly"
 5776 |           },
 5777 |           "interval": {
 5778 |             "type": "number",
 5779 |             "example": 2
 5780 |           },
 5781 |           "startDate": {
 5782 |             "type": "string",
 5783 |             "description": "Start date in YYYY-MM-DD format",
 5784 |             "example": "2023-01-01"
 5785 |           },
 5786 |           "startTime": {
 5787 |             "type": "string",
 5788 |             "description": "Start time in HH:mm:ss format",
 5789 |             "example": "20:45:00"
 5790 |           },
 5791 |           "endDate": {
 5792 |             "type": "string",
 5793 |             "description": "End date in YYYY-MM-DD format",
 5794 |             "example": "2029-11-01"
 5795 |           },
 5796 |           "endTime": {
 5797 |             "type": "string",
 5798 |             "description": "End time in HH:mm:ss format",
 5799 |             "example": "18:45:00"
 5800 |           },
 5801 |           "dayOfMonth": {
 5802 |             "type": "number",
 5803 |             "description": "-1, 1, 2, 3, ..., 27, 28",
 5804 |             "example": 15
 5805 |           },
 5806 |           "dayOfWeek": {
 5807 |             "type": "string",
 5808 |             "enum": [
 5809 |               "mo",
 5810 |               "tu",
 5811 |               "we",
 5812 |               "th",
 5813 |               "fr",
 5814 |               "sa",
 5815 |               "su"
 5816 |             ],
 5817 |             "example": "mo"
 5818 |           },
 5819 |           "numOfWeek": {
 5820 |             "type": "number",
 5821 |             "description": "-1, 1, 2, 3, 4",
 5822 |             "example": -1
 5823 |           },
 5824 |           "monthOfYear": {
 5825 |             "type": "string",
 5826 |             "enum": [
 5827 |               "jan",
 5828 |               "feb",
 5829 |               "mar",
 5830 |               "apr",
 5831 |               "may",
 5832 |               "jun",
 5833 |               "jul",
 5834 |               "aug",
 5835 |               "sep",
 5836 |               "oct",
 5837 |               "nov",
 5838 |               "dec"
 5839 |             ],
 5840 |             "example": "jan"
 5841 |           },
 5842 |           "count": {
 5843 |             "type": "number",
 5844 |             "description": "Max number of task executions",
 5845 |             "example": 10
 5846 |           },
 5847 |           "daysBefore": {
 5848 |             "type": "number",
 5849 |             "description": "Execute task number of days before",
 5850 |             "example": 5
 5851 |           },
 5852 |           "useStartAsPrimaryUserAccepted": {
 5853 |             "type": "boolean",
 5854 |             "description": "Start as primary user accepted date",
 5855 |             "example": true
 5856 |           },
 5857 |           "endType": {
 5858 |             "type": "string",
 5859 |             "description": "End type like after, by, count",
 5860 |             "example": "by"
 5861 |           }
 5862 |         },
 5863 |         "required": [
 5864 |           "intervalType",
 5865 |           "interval",
 5866 |           "startDate"
 5867 |         ]
 5868 |       },
 5869 |       "ScheduleOptionsDto": {
 5870 |         "type": "object",
 5871 |         "properties": {
 5872 |           "executeAt": {
 5873 |             "type": "string"
 5874 |           },
 5875 |           "rrule": {
 5876 |             "$ref": "#/components/schemas/CustomRRuleOptionsDto"
 5877 |           }
 5878 |         }
 5879 |       },
 5880 |       "AttachmentsDto": {
 5881 |         "type": "object",
 5882 |         "properties": {
 5883 |           "id": {
 5884 |             "type": "string",
 5885 |             "description": "Id of the file selected",
 5886 |             "example": "6241712be68f7a98102ba272"
 5887 |           },
 5888 |           "name": {
 5889 |             "type": "string",
 5890 |             "description": "Name of the file ",
 5891 |             "example": "Electronics.pdf"
 5892 |           },
 5893 |           "url": {
 5894 |             "type": "string",
 5895 |             "description": "URL of the file",
 5896 |             "example": "https://example.com/digital-delivery"
 5897 |           },
 5898 |           "type": {
 5899 |             "type": "string",
 5900 |             "description": "Type of the file"
 5901 |           },
 5902 |           "size": {
 5903 |             "type": "number",
 5904 |             "description": "Size of the file",
 5905 |             "example": 10000
 5906 |           }
 5907 |         },
 5908 |         "required": [
 5909 |           "id",
 5910 |           "name",
 5911 |           "url",
 5912 |           "type",
 5913 |           "size"
 5914 |         ]
 5915 |       },
 5916 |       "CreateInvoiceScheduleDto": {
 5917 |         "type": "object",
 5918 |         "properties": {
 5919 |           "altId": {
 5920 |             "type": "string",
 5921 |             "description": "location Id / company Id based on altType",
 5922 |             "example": "6578278e879ad2646715ba9c"
 5923 |           },
 5924 |           "altType": {
 5925 |             "type": "string",
 5926 |             "description": "Alt Type",
 5927 |             "enum": [
 5928 |               "location"
 5929 |             ],
 5930 |             "example": "location"
 5931 |           },
 5932 |           "name": {
 5933 |             "type": "string"
 5934 |           },
 5935 |           "contactDetails": {
 5936 |             "$ref": "#/components/schemas/ContactDetailsDto"
 5937 |           },
 5938 |           "schedule": {
 5939 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 5940 |           },
 5941 |           "liveMode": {
 5942 |             "type": "boolean"
 5943 |           },
 5944 |           "businessDetails": {
 5945 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 5946 |           },
 5947 |           "currency": {
 5948 |             "type": "string"
 5949 |           },
 5950 |           "items": {
 5951 |             "type": "array",
 5952 |             "items": {
 5953 |               "$ref": "#/components/schemas/InvoiceItemDto"
 5954 |             }
 5955 |           },
 5956 |           "automaticTaxesEnabled": {
 5957 |             "type": "boolean",
 5958 |             "description": "Automatic taxes enabled for the Invoice",
 5959 |             "example": true
 5960 |           },
 5961 |           "discount": {
 5962 |             "$ref": "#/components/schemas/DiscountDto"
 5963 |           },
 5964 |           "termsNotes": {
 5965 |             "type": "string"
 5966 |           },
 5967 |           "title": {
 5968 |             "type": "string"
 5969 |           },
 5970 |           "tipsConfiguration": {
 5971 |             "description": "Configuration for tips on invoices",
 5972 |             "allOf": [
 5973 |               {
 5974 |                 "$ref": "#/components/schemas/TipsConfigurationDto"
 5975 |               }
 5976 |             ]
 5977 |           },
 5978 |           "lateFeesConfiguration": {
 5979 |             "description": "Late fees configuration for the invoices",
 5980 |             "allOf": [
 5981 |               {
 5982 |                 "$ref": "#/components/schemas/LateFeesConfigurationDto"
 5983 |               }
 5984 |             ]
 5985 |           },
 5986 |           "invoiceNumberPrefix": {
 5987 |             "type": "string",
 5988 |             "description": "prefix for invoice number",
 5989 |             "example": "INV-"
 5990 |           },
 5991 |           "paymentMethods": {
 5992 |             "description": "Payment Methods for Invoices",
 5993 |             "allOf": [
 5994 |               {
 5995 |                 "$ref": "#/components/schemas/PaymentMethodDto"
 5996 |               }
 5997 |             ]
 5998 |           },
 5999 |           "attachments": {
 6000 |             "description": "attachments for the invoice",
 6001 |             "type": "array",
 6002 |             "items": {
 6003 |               "$ref": "#/components/schemas/AttachmentsDto"
 6004 |             }
 6005 |           }
 6006 |         },
 6007 |         "required": [
 6008 |           "altId",
 6009 |           "altType",
 6010 |           "name",
 6011 |           "contactDetails",
 6012 |           "schedule",
 6013 |           "liveMode",
 6014 |           "businessDetails",
 6015 |           "currency",
 6016 |           "items",
 6017 |           "discount"
 6018 |         ]
 6019 |       },
 6020 |       "DefaultInvoiceResponseDto": {
 6021 |         "type": "object",
 6022 |         "properties": {
 6023 |           "_id": {
 6024 |             "type": "string",
 6025 |             "description": "Invoice Id",
 6026 |             "example": "6578278e879ad2646715ba9c"
 6027 |           },
 6028 |           "status": {
 6029 |             "type": "string",
 6030 |             "description": "Invoice Status",
 6031 |             "example": "draft",
 6032 |             "enum": [
 6033 |               "draft",
 6034 |               "sent",
 6035 |               "payment_processing",
 6036 |               "paid",
 6037 |               "void",
 6038 |               "partially_paid"
 6039 |             ]
 6040 |           },
 6041 |           "liveMode": {
 6042 |             "type": "boolean",
 6043 |             "description": "Live Mode",
 6044 |             "example": false
 6045 |           },
 6046 |           "amountPaid": {
 6047 |             "type": "number",
 6048 |             "description": "Amount Paid",
 6049 |             "example": 0
 6050 |           },
 6051 |           "altId": {
 6052 |             "type": "string",
 6053 |             "description": "Location Id or Agency Id",
 6054 |             "example": "6578278e879ad2646715ba9c"
 6055 |           },
 6056 |           "altType": {
 6057 |             "type": "string",
 6058 |             "enum": [
 6059 |               "location"
 6060 |             ]
 6061 |           },
 6062 |           "name": {
 6063 |             "type": "string",
 6064 |             "description": "Name of the invoice",
 6065 |             "example": "New Invoice"
 6066 |           },
 6067 |           "businessDetails": {
 6068 |             "type": "object",
 6069 |             "description": "Business Details",
 6070 |             "example": {
 6071 |               "name": "Alex",
 6072 |               "address": {
 6073 |                 "addressLine1": "9931 Beechwood",
 6074 |                 "city": "St. Houston",
 6075 |                 "state": "TX",
 6076 |                 "countryCode": "USA",
 6077 |                 "postalCode": "559-6993"
 6078 |               },
 6079 |               "phoneNo": "+1-214-559-6993",
 6080 |               "website": "www.example.com"
 6081 |             }
 6082 |           },
 6083 |           "invoiceNumber": {
 6084 |             "type": "number",
 6085 |             "description": "Invoice Number",
 6086 |             "example": "19"
 6087 |           },
 6088 |           "currency": {
 6089 |             "type": "string",
 6090 |             "description": "Currency",
 6091 |             "example": "USD"
 6092 |           },
 6093 |           "contactDetails": {
 6094 |             "type": "object",
 6095 |             "description": "Contact Details",
 6096 |             "example": {
 6097 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 6098 |               "phoneNo": "+1-214-559-6993",
 6099 |               "email": "alex@example.com",
 6100 |               "customFields": [],
 6101 |               "name": "Alex",
 6102 |               "address": {
 6103 |                 "countryCode": "US"
 6104 |               }
 6105 |             }
 6106 |           },
 6107 |           "issueDate": {
 6108 |             "type": "string",
 6109 |             "description": "Issue date in YYYY-MM-DD format",
 6110 |             "example": "2023-01-01"
 6111 |           },
 6112 |           "dueDate": {
 6113 |             "type": "string",
 6114 |             "description": "Due date in YYYY-MM-DD format",
 6115 |             "example": "2023-01-01"
 6116 |           },
 6117 |           "discount": {
 6118 |             "type": "object",
 6119 |             "description": "Discount",
 6120 |             "example": {
 6121 |               "type": "percentage",
 6122 |               "value": 0
 6123 |             }
 6124 |           },
 6125 |           "invoiceItems": {
 6126 |             "description": "Invoice Items",
 6127 |             "example": [
 6128 |               {
 6129 |                 "taxes": [],
 6130 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 6131 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 6132 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 6133 |                 "currency": "USD",
 6134 |                 "name": "Macbook Pro",
 6135 |                 "qty": 1,
 6136 |                 "amount": 999
 6137 |               }
 6138 |             ],
 6139 |             "type": "array",
 6140 |             "items": {
 6141 |               "type": "string"
 6142 |             }
 6143 |           },
 6144 |           "total": {
 6145 |             "type": "number",
 6146 |             "description": "Total Amount",
 6147 |             "example": 999
 6148 |           },
 6149 |           "title": {
 6150 |             "type": "string",
 6151 |             "description": "Title",
 6152 |             "example": "INVOICE"
 6153 |           },
 6154 |           "amountDue": {
 6155 |             "type": "number",
 6156 |             "description": "Total Amount Due",
 6157 |             "example": 999
 6158 |           },
 6159 |           "createdAt": {
 6160 |             "type": "string",
 6161 |             "description": "created at",
 6162 |             "example": "2023-12-12T09:27:42.355Z"
 6163 |           },
 6164 |           "updatedAt": {
 6165 |             "type": "string",
 6166 |             "description": "updated at",
 6167 |             "example": "2023-12-12T09:27:42.355Z"
 6168 |           },
 6169 |           "automaticTaxesEnabled": {
 6170 |             "type": "boolean",
 6171 |             "description": "Automatic taxes enabled for the Invoice",
 6172 |             "example": true
 6173 |           },
 6174 |           "automaticTaxesCalculated": {
 6175 |             "type": "boolean",
 6176 |             "description": "Is Automatic taxes calculated for the Invoice items",
 6177 |             "example": true
 6178 |           },
 6179 |           "paymentSchedule": {
 6180 |             "type": "object",
 6181 |             "description": "split invoice into payment schedule summing up to full invoice amount"
 6182 |           }
 6183 |         },
 6184 |         "required": [
 6185 |           "_id",
 6186 |           "status",
 6187 |           "liveMode",
 6188 |           "amountPaid",
 6189 |           "altId",
 6190 |           "altType",
 6191 |           "name",
 6192 |           "businessDetails",
 6193 |           "invoiceNumber",
 6194 |           "currency",
 6195 |           "contactDetails",
 6196 |           "issueDate",
 6197 |           "dueDate",
 6198 |           "invoiceItems",
 6199 |           "total",
 6200 |           "title",
 6201 |           "amountDue",
 6202 |           "createdAt",
 6203 |           "updatedAt"
 6204 |         ]
 6205 |       },
 6206 |       "CreateInvoiceScheduleResponseDto": {
 6207 |         "type": "object",
 6208 |         "properties": {
 6209 |           "_id": {
 6210 |             "type": "string",
 6211 |             "description": "Schedule Id",
 6212 |             "example": "6578278e879ad2646715ba9c"
 6213 |           },
 6214 |           "status": {
 6215 |             "type": "object",
 6216 |             "description": "Schedule Status",
 6217 |             "example": "draft"
 6218 |           },
 6219 |           "liveMode": {
 6220 |             "type": "boolean",
 6221 |             "description": "Live Mode",
 6222 |             "example": false
 6223 |           },
 6224 |           "altId": {
 6225 |             "type": "string",
 6226 |             "description": "Location Id or Agency Id",
 6227 |             "example": "6578278e879ad2646715ba9c"
 6228 |           },
 6229 |           "altType": {
 6230 |             "type": "string",
 6231 |             "enum": [
 6232 |               "location"
 6233 |             ]
 6234 |           },
 6235 |           "name": {
 6236 |             "type": "string",
 6237 |             "description": "Name of the invoice",
 6238 |             "example": "New Invoice"
 6239 |           },
 6240 |           "schedule": {
 6241 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 6242 |           },
 6243 |           "invoices": {
 6244 |             "description": "List of invoices",
 6245 |             "type": "array",
 6246 |             "items": {
 6247 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 6248 |             }
 6249 |           },
 6250 |           "businessDetails": {
 6251 |             "description": "Business Details",
 6252 |             "example": {
 6253 |               "name": "Alex",
 6254 |               "address": {
 6255 |                 "addressLine1": "9931 Beechwood",
 6256 |                 "city": "St. Houston",
 6257 |                 "state": "TX",
 6258 |                 "countryCode": "USA",
 6259 |                 "postalCode": "559-6993"
 6260 |               },
 6261 |               "phoneNo": "+1-214-559-6993",
 6262 |               "website": "www.example.com"
 6263 |             },
 6264 |             "allOf": [
 6265 |               {
 6266 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 6267 |               }
 6268 |             ]
 6269 |           },
 6270 |           "currency": {
 6271 |             "type": "string",
 6272 |             "description": "Currency",
 6273 |             "example": "USD"
 6274 |           },
 6275 |           "contactDetails": {
 6276 |             "description": "Contact Details",
 6277 |             "example": {
 6278 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 6279 |               "phoneNo": "+1-214-559-6993",
 6280 |               "email": "alex@example.com",
 6281 |               "customFields": [],
 6282 |               "name": "Alex",
 6283 |               "address": {
 6284 |                 "countryCode": "US"
 6285 |               }
 6286 |             },
 6287 |             "allOf": [
 6288 |               {
 6289 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 6290 |               }
 6291 |             ]
 6292 |           },
 6293 |           "discount": {
 6294 |             "description": "Discount",
 6295 |             "example": {
 6296 |               "type": "percentage",
 6297 |               "value": 0
 6298 |             },
 6299 |             "allOf": [
 6300 |               {
 6301 |                 "$ref": "#/components/schemas/DiscountDto"
 6302 |               }
 6303 |             ]
 6304 |           },
 6305 |           "items": {
 6306 |             "description": "Invoice Items",
 6307 |             "example": [
 6308 |               {
 6309 |                 "taxes": [],
 6310 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 6311 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 6312 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 6313 |                 "currency": "USD",
 6314 |                 "name": "Macbook Pro",
 6315 |                 "qty": 1,
 6316 |                 "amount": 999
 6317 |               }
 6318 |             ],
 6319 |             "type": "array",
 6320 |             "items": {
 6321 |               "type": "string"
 6322 |             }
 6323 |           },
 6324 |           "total": {
 6325 |             "type": "number",
 6326 |             "description": "Total Amount",
 6327 |             "example": 999
 6328 |           },
 6329 |           "title": {
 6330 |             "type": "string",
 6331 |             "description": "Title",
 6332 |             "example": "INVOICE"
 6333 |           },
 6334 |           "termsNotes": {
 6335 |             "type": "string",
 6336 |             "description": "Terms notes",
 6337 |             "example": "Confidential"
 6338 |           },
 6339 |           "compiledTermsNotes": {
 6340 |             "type": "string",
 6341 |             "description": "Compiled terms notes",
 6342 |             "example": "Confidential"
 6343 |           },
 6344 |           "createdAt": {
 6345 |             "type": "string",
 6346 |             "description": "created at",
 6347 |             "example": "2023-12-12T09:27:42.355Z"
 6348 |           },
 6349 |           "updatedAt": {
 6350 |             "type": "string",
 6351 |             "description": "updated at",
 6352 |             "example": "2023-12-12T09:27:42.355Z"
 6353 |           }
 6354 |         },
 6355 |         "required": [
 6356 |           "_id",
 6357 |           "status",
 6358 |           "liveMode",
 6359 |           "altId",
 6360 |           "altType",
 6361 |           "name",
 6362 |           "invoices",
 6363 |           "businessDetails",
 6364 |           "currency",
 6365 |           "contactDetails",
 6366 |           "items",
 6367 |           "total",
 6368 |           "title",
 6369 |           "termsNotes",
 6370 |           "compiledTermsNotes",
 6371 |           "createdAt",
 6372 |           "updatedAt"
 6373 |         ]
 6374 |       },
 6375 |       "GetScheduleResponseDto": {
 6376 |         "type": "object",
 6377 |         "properties": {
 6378 |           "_id": {
 6379 |             "type": "string",
 6380 |             "description": "Schedule Id",
 6381 |             "example": "6578278e879ad2646715ba9c"
 6382 |           },
 6383 |           "status": {
 6384 |             "type": "object",
 6385 |             "description": "Schedule Status",
 6386 |             "example": "draft"
 6387 |           },
 6388 |           "liveMode": {
 6389 |             "type": "boolean",
 6390 |             "description": "Live Mode",
 6391 |             "example": false
 6392 |           },
 6393 |           "altId": {
 6394 |             "type": "string",
 6395 |             "description": "Location Id or Agency Id",
 6396 |             "example": "6578278e879ad2646715ba9c"
 6397 |           },
 6398 |           "altType": {
 6399 |             "type": "string",
 6400 |             "enum": [
 6401 |               "location"
 6402 |             ]
 6403 |           },
 6404 |           "name": {
 6405 |             "type": "string",
 6406 |             "description": "Name of the invoice",
 6407 |             "example": "New Invoice"
 6408 |           },
 6409 |           "schedule": {
 6410 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 6411 |           },
 6412 |           "invoices": {
 6413 |             "description": "List of invoices",
 6414 |             "type": "array",
 6415 |             "items": {
 6416 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 6417 |             }
 6418 |           },
 6419 |           "businessDetails": {
 6420 |             "description": "Business Details",
 6421 |             "example": {
 6422 |               "name": "Alex",
 6423 |               "address": {
 6424 |                 "addressLine1": "9931 Beechwood",
 6425 |                 "city": "St. Houston",
 6426 |                 "state": "TX",
 6427 |                 "countryCode": "USA",
 6428 |                 "postalCode": "559-6993"
 6429 |               },
 6430 |               "phoneNo": "+1-214-559-6993",
 6431 |               "website": "www.example.com"
 6432 |             },
 6433 |             "allOf": [
 6434 |               {
 6435 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 6436 |               }
 6437 |             ]
 6438 |           },
 6439 |           "currency": {
 6440 |             "type": "string",
 6441 |             "description": "Currency",
 6442 |             "example": "USD"
 6443 |           },
 6444 |           "contactDetails": {
 6445 |             "description": "Contact Details",
 6446 |             "example": {
 6447 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 6448 |               "phoneNo": "+1-214-559-6993",
 6449 |               "email": "alex@example.com",
 6450 |               "customFields": [],
 6451 |               "name": "Alex",
 6452 |               "address": {
 6453 |                 "countryCode": "US"
 6454 |               }
 6455 |             },
 6456 |             "allOf": [
 6457 |               {
 6458 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 6459 |               }
 6460 |             ]
 6461 |           },
 6462 |           "discount": {
 6463 |             "description": "Discount",
 6464 |             "example": {
 6465 |               "type": "percentage",
 6466 |               "value": 0
 6467 |             },
 6468 |             "allOf": [
 6469 |               {
 6470 |                 "$ref": "#/components/schemas/DiscountDto"
 6471 |               }
 6472 |             ]
 6473 |           },
 6474 |           "items": {
 6475 |             "description": "Invoice Items",
 6476 |             "example": [
 6477 |               {
 6478 |                 "taxes": [],
 6479 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 6480 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 6481 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 6482 |                 "currency": "USD",
 6483 |                 "name": "Macbook Pro",
 6484 |                 "qty": 1,
 6485 |                 "amount": 999
 6486 |               }
 6487 |             ],
 6488 |             "type": "array",
 6489 |             "items": {
 6490 |               "type": "string"
 6491 |             }
 6492 |           },
 6493 |           "total": {
 6494 |             "type": "number",
 6495 |             "description": "Total Amount",
 6496 |             "example": 999
 6497 |           },
 6498 |           "title": {
 6499 |             "type": "string",
 6500 |             "description": "Title",
 6501 |             "example": "INVOICE"
 6502 |           },
 6503 |           "termsNotes": {
 6504 |             "type": "string",
 6505 |             "description": "Terms notes",
 6506 |             "example": "Confidential"
 6507 |           },
 6508 |           "compiledTermsNotes": {
 6509 |             "type": "string",
 6510 |             "description": "Compiled terms notes",
 6511 |             "example": "Confidential"
 6512 |           },
 6513 |           "createdAt": {
 6514 |             "type": "string",
 6515 |             "description": "created at",
 6516 |             "example": "2023-12-12T09:27:42.355Z"
 6517 |           },
 6518 |           "updatedAt": {
 6519 |             "type": "string",
 6520 |             "description": "updated at",
 6521 |             "example": "2023-12-12T09:27:42.355Z"
 6522 |           }
 6523 |         },
 6524 |         "required": [
 6525 |           "_id",
 6526 |           "status",
 6527 |           "liveMode",
 6528 |           "altId",
 6529 |           "altType",
 6530 |           "name",
 6531 |           "invoices",
 6532 |           "businessDetails",
 6533 |           "currency",
 6534 |           "contactDetails",
 6535 |           "items",
 6536 |           "total",
 6537 |           "title",
 6538 |           "termsNotes",
 6539 |           "compiledTermsNotes",
 6540 |           "createdAt",
 6541 |           "updatedAt"
 6542 |         ]
 6543 |       },
 6544 |       "ListSchedulesResponseDto": {
 6545 |         "type": "object",
 6546 |         "properties": {
 6547 |           "schedules": {
 6548 |             "type": "array",
 6549 |             "items": {
 6550 |               "$ref": "#/components/schemas/GetScheduleResponseDto"
 6551 |             }
 6552 |           },
 6553 |           "total": {
 6554 |             "type": "number",
 6555 |             "description": "Total number of Schedules",
 6556 |             "example": 100
 6557 |           }
 6558 |         },
 6559 |         "required": [
 6560 |           "schedules",
 6561 |           "total"
 6562 |         ]
 6563 |       },
 6564 |       "UpdateInvoiceScheduleDto": {
 6565 |         "type": "object",
 6566 |         "properties": {
 6567 |           "altId": {
 6568 |             "type": "string",
 6569 |             "description": "location Id / company Id based on altType",
 6570 |             "example": "6578278e879ad2646715ba9c"
 6571 |           },
 6572 |           "altType": {
 6573 |             "type": "string",
 6574 |             "description": "Alt Type",
 6575 |             "enum": [
 6576 |               "location"
 6577 |             ],
 6578 |             "example": "location"
 6579 |           },
 6580 |           "name": {
 6581 |             "type": "string"
 6582 |           },
 6583 |           "contactDetails": {
 6584 |             "$ref": "#/components/schemas/ContactDetailsDto"
 6585 |           },
 6586 |           "schedule": {
 6587 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 6588 |           },
 6589 |           "liveMode": {
 6590 |             "type": "boolean"
 6591 |           },
 6592 |           "businessDetails": {
 6593 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 6594 |           },
 6595 |           "currency": {
 6596 |             "type": "string"
 6597 |           },
 6598 |           "items": {
 6599 |             "type": "array",
 6600 |             "items": {
 6601 |               "$ref": "#/components/schemas/InvoiceItemDto"
 6602 |             }
 6603 |           },
 6604 |           "discount": {
 6605 |             "$ref": "#/components/schemas/DiscountDto"
 6606 |           },
 6607 |           "termsNotes": {
 6608 |             "type": "string"
 6609 |           },
 6610 |           "title": {
 6611 |             "type": "string"
 6612 |           },
 6613 |           "attachments": {
 6614 |             "description": "attachments for the invoice",
 6615 |             "type": "array",
 6616 |             "items": {
 6617 |               "$ref": "#/components/schemas/AttachmentsDto"
 6618 |             }
 6619 |           }
 6620 |         },
 6621 |         "required": [
 6622 |           "altId",
 6623 |           "altType",
 6624 |           "name",
 6625 |           "contactDetails",
 6626 |           "schedule",
 6627 |           "liveMode",
 6628 |           "businessDetails",
 6629 |           "currency",
 6630 |           "items",
 6631 |           "discount"
 6632 |         ]
 6633 |       },
 6634 |       "UpdateInvoiceScheduleResponseDto": {
 6635 |         "type": "object",
 6636 |         "properties": {
 6637 |           "_id": {
 6638 |             "type": "string",
 6639 |             "description": "Schedule Id",
 6640 |             "example": "6578278e879ad2646715ba9c"
 6641 |           },
 6642 |           "status": {
 6643 |             "type": "object",
 6644 |             "description": "Schedule Status",
 6645 |             "example": "draft"
 6646 |           },
 6647 |           "liveMode": {
 6648 |             "type": "boolean",
 6649 |             "description": "Live Mode",
 6650 |             "example": false
 6651 |           },
 6652 |           "altId": {
 6653 |             "type": "string",
 6654 |             "description": "Location Id or Agency Id",
 6655 |             "example": "6578278e879ad2646715ba9c"
 6656 |           },
 6657 |           "altType": {
 6658 |             "type": "string",
 6659 |             "enum": [
 6660 |               "location"
 6661 |             ]
 6662 |           },
 6663 |           "name": {
 6664 |             "type": "string",
 6665 |             "description": "Name of the invoice",
 6666 |             "example": "New Invoice"
 6667 |           },
 6668 |           "schedule": {
 6669 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 6670 |           },
 6671 |           "invoices": {
 6672 |             "description": "List of invoices",
 6673 |             "type": "array",
 6674 |             "items": {
 6675 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 6676 |             }
 6677 |           },
 6678 |           "businessDetails": {
 6679 |             "description": "Business Details",
 6680 |             "example": {
 6681 |               "name": "Alex",
 6682 |               "address": {
 6683 |                 "addressLine1": "9931 Beechwood",
 6684 |                 "city": "St. Houston",
 6685 |                 "state": "TX",
 6686 |                 "countryCode": "USA",
 6687 |                 "postalCode": "559-6993"
 6688 |               },
 6689 |               "phoneNo": "+1-214-559-6993",
 6690 |               "website": "www.example.com"
 6691 |             },
 6692 |             "allOf": [
 6693 |               {
 6694 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 6695 |               }
 6696 |             ]
 6697 |           },
 6698 |           "currency": {
 6699 |             "type": "string",
 6700 |             "description": "Currency",
 6701 |             "example": "USD"
 6702 |           },
 6703 |           "contactDetails": {
 6704 |             "description": "Contact Details",
 6705 |             "example": {
 6706 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 6707 |               "phoneNo": "+1-214-559-6993",
 6708 |               "email": "alex@example.com",
 6709 |               "customFields": [],
 6710 |               "name": "Alex",
 6711 |               "address": {
 6712 |                 "countryCode": "US"
 6713 |               }
 6714 |             },
 6715 |             "allOf": [
 6716 |               {
 6717 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 6718 |               }
 6719 |             ]
 6720 |           },
 6721 |           "discount": {
 6722 |             "description": "Discount",
 6723 |             "example": {
 6724 |               "type": "percentage",
 6725 |               "value": 0
 6726 |             },
 6727 |             "allOf": [
 6728 |               {
 6729 |                 "$ref": "#/components/schemas/DiscountDto"
 6730 |               }
 6731 |             ]
 6732 |           },
 6733 |           "items": {
 6734 |             "description": "Invoice Items",
 6735 |             "example": [
 6736 |               {
 6737 |                 "taxes": [],
 6738 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 6739 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 6740 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 6741 |                 "currency": "USD",
 6742 |                 "name": "Macbook Pro",
 6743 |                 "qty": 1,
 6744 |                 "amount": 999
 6745 |               }
 6746 |             ],
 6747 |             "type": "array",
 6748 |             "items": {
 6749 |               "type": "string"
 6750 |             }
 6751 |           },
 6752 |           "total": {
 6753 |             "type": "number",
 6754 |             "description": "Total Amount",
 6755 |             "example": 999
 6756 |           },
 6757 |           "title": {
 6758 |             "type": "string",
 6759 |             "description": "Title",
 6760 |             "example": "INVOICE"
 6761 |           },
 6762 |           "termsNotes": {
 6763 |             "type": "string",
 6764 |             "description": "Terms notes",
 6765 |             "example": "Confidential"
 6766 |           },
 6767 |           "compiledTermsNotes": {
 6768 |             "type": "string",
 6769 |             "description": "Compiled terms notes",
 6770 |             "example": "Confidential"
 6771 |           },
 6772 |           "createdAt": {
 6773 |             "type": "string",
 6774 |             "description": "created at",
 6775 |             "example": "2023-12-12T09:27:42.355Z"
 6776 |           },
 6777 |           "updatedAt": {
 6778 |             "type": "string",
 6779 |             "description": "updated at",
 6780 |             "example": "2023-12-12T09:27:42.355Z"
 6781 |           }
 6782 |         },
 6783 |         "required": [
 6784 |           "_id",
 6785 |           "status",
 6786 |           "liveMode",
 6787 |           "altId",
 6788 |           "altType",
 6789 |           "name",
 6790 |           "invoices",
 6791 |           "businessDetails",
 6792 |           "currency",
 6793 |           "contactDetails",
 6794 |           "items",
 6795 |           "total",
 6796 |           "title",
 6797 |           "termsNotes",
 6798 |           "compiledTermsNotes",
 6799 |           "createdAt",
 6800 |           "updatedAt"
 6801 |         ]
 6802 |       },
 6803 |       "DeleteInvoiceScheduleResponseDto": {
 6804 |         "type": "object",
 6805 |         "properties": {
 6806 |           "success": {
 6807 |             "type": "boolean",
 6808 |             "description": "success",
 6809 |             "example": true
 6810 |           }
 6811 |         },
 6812 |         "required": [
 6813 |           "success"
 6814 |         ]
 6815 |       },
 6816 |       "UpdateAndScheduleInvoiceScheduleResponseDto": {
 6817 |         "type": "object",
 6818 |         "properties": {
 6819 |           "_id": {
 6820 |             "type": "string",
 6821 |             "description": "Schedule Id",
 6822 |             "example": "6578278e879ad2646715ba9c"
 6823 |           },
 6824 |           "status": {
 6825 |             "type": "object",
 6826 |             "description": "Schedule Status",
 6827 |             "example": "draft"
 6828 |           },
 6829 |           "liveMode": {
 6830 |             "type": "boolean",
 6831 |             "description": "Live Mode",
 6832 |             "example": false
 6833 |           },
 6834 |           "altId": {
 6835 |             "type": "string",
 6836 |             "description": "Location Id or Agency Id",
 6837 |             "example": "6578278e879ad2646715ba9c"
 6838 |           },
 6839 |           "altType": {
 6840 |             "type": "string",
 6841 |             "enum": [
 6842 |               "location"
 6843 |             ]
 6844 |           },
 6845 |           "name": {
 6846 |             "type": "string",
 6847 |             "description": "Name of the invoice",
 6848 |             "example": "New Invoice"
 6849 |           },
 6850 |           "schedule": {
 6851 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 6852 |           },
 6853 |           "invoices": {
 6854 |             "description": "List of invoices",
 6855 |             "type": "array",
 6856 |             "items": {
 6857 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 6858 |             }
 6859 |           },
 6860 |           "businessDetails": {
 6861 |             "description": "Business Details",
 6862 |             "example": {
 6863 |               "name": "Alex",
 6864 |               "address": {
 6865 |                 "addressLine1": "9931 Beechwood",
 6866 |                 "city": "St. Houston",
 6867 |                 "state": "TX",
 6868 |                 "countryCode": "USA",
 6869 |                 "postalCode": "559-6993"
 6870 |               },
 6871 |               "phoneNo": "+1-214-559-6993",
 6872 |               "website": "www.example.com"
 6873 |             },
 6874 |             "allOf": [
 6875 |               {
 6876 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 6877 |               }
 6878 |             ]
 6879 |           },
 6880 |           "currency": {
 6881 |             "type": "string",
 6882 |             "description": "Currency",
 6883 |             "example": "USD"
 6884 |           },
 6885 |           "contactDetails": {
 6886 |             "description": "Contact Details",
 6887 |             "example": {
 6888 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 6889 |               "phoneNo": "+1-214-559-6993",
 6890 |               "email": "alex@example.com",
 6891 |               "customFields": [],
 6892 |               "name": "Alex",
 6893 |               "address": {
 6894 |                 "countryCode": "US"
 6895 |               }
 6896 |             },
 6897 |             "allOf": [
 6898 |               {
 6899 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 6900 |               }
 6901 |             ]
 6902 |           },
 6903 |           "discount": {
 6904 |             "description": "Discount",
 6905 |             "example": {
 6906 |               "type": "percentage",
 6907 |               "value": 0
 6908 |             },
 6909 |             "allOf": [
 6910 |               {
 6911 |                 "$ref": "#/components/schemas/DiscountDto"
 6912 |               }
 6913 |             ]
 6914 |           },
 6915 |           "items": {
 6916 |             "description": "Invoice Items",
 6917 |             "example": [
 6918 |               {
 6919 |                 "taxes": [],
 6920 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 6921 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 6922 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 6923 |                 "currency": "USD",
 6924 |                 "name": "Macbook Pro",
 6925 |                 "qty": 1,
 6926 |                 "amount": 999
 6927 |               }
 6928 |             ],
 6929 |             "type": "array",
 6930 |             "items": {
 6931 |               "type": "string"
 6932 |             }
 6933 |           },
 6934 |           "total": {
 6935 |             "type": "number",
 6936 |             "description": "Total Amount",
 6937 |             "example": 999
 6938 |           },
 6939 |           "title": {
 6940 |             "type": "string",
 6941 |             "description": "Title",
 6942 |             "example": "INVOICE"
 6943 |           },
 6944 |           "termsNotes": {
 6945 |             "type": "string",
 6946 |             "description": "Terms notes",
 6947 |             "example": "Confidential"
 6948 |           },
 6949 |           "compiledTermsNotes": {
 6950 |             "type": "string",
 6951 |             "description": "Compiled terms notes",
 6952 |             "example": "Confidential"
 6953 |           },
 6954 |           "createdAt": {
 6955 |             "type": "string",
 6956 |             "description": "created at",
 6957 |             "example": "2023-12-12T09:27:42.355Z"
 6958 |           },
 6959 |           "updatedAt": {
 6960 |             "type": "string",
 6961 |             "description": "updated at",
 6962 |             "example": "2023-12-12T09:27:42.355Z"
 6963 |           }
 6964 |         },
 6965 |         "required": [
 6966 |           "_id",
 6967 |           "status",
 6968 |           "liveMode",
 6969 |           "altId",
 6970 |           "altType",
 6971 |           "name",
 6972 |           "invoices",
 6973 |           "businessDetails",
 6974 |           "currency",
 6975 |           "contactDetails",
 6976 |           "items",
 6977 |           "total",
 6978 |           "title",
 6979 |           "termsNotes",
 6980 |           "compiledTermsNotes",
 6981 |           "createdAt",
 6982 |           "updatedAt"
 6983 |         ]
 6984 |       },
 6985 |       "CardDto": {
 6986 |         "type": "object",
 6987 |         "properties": {
 6988 |           "brand": {
 6989 |             "type": "string"
 6990 |           },
 6991 |           "last4": {
 6992 |             "type": "string"
 6993 |           }
 6994 |         },
 6995 |         "required": [
 6996 |           "brand",
 6997 |           "last4"
 6998 |         ]
 6999 |       },
 7000 |       "USBankAccountDto": {
 7001 |         "type": "object",
 7002 |         "properties": {
 7003 |           "bank_name": {
 7004 |             "type": "string"
 7005 |           },
 7006 |           "last4": {
 7007 |             "type": "string"
 7008 |           }
 7009 |         },
 7010 |         "required": [
 7011 |           "bank_name",
 7012 |           "last4"
 7013 |         ]
 7014 |       },
 7015 |       "SepaDirectDebitDTO": {
 7016 |         "type": "object",
 7017 |         "properties": {
 7018 |           "bank_code": {
 7019 |             "type": "string"
 7020 |           },
 7021 |           "last4": {
 7022 |             "type": "string"
 7023 |           },
 7024 |           "branch_code": {
 7025 |             "type": "string"
 7026 |           }
 7027 |         },
 7028 |         "required": [
 7029 |           "bank_code",
 7030 |           "last4",
 7031 |           "branch_code"
 7032 |         ]
 7033 |       },
 7034 |       "BacsDirectDebitDTO": {
 7035 |         "type": "object",
 7036 |         "properties": {
 7037 |           "sort_code": {
 7038 |             "type": "string"
 7039 |           },
 7040 |           "last4": {
 7041 |             "type": "string"
 7042 |           }
 7043 |         },
 7044 |         "required": [
 7045 |           "sort_code",
 7046 |           "last4"
 7047 |         ]
 7048 |       },
 7049 |       "BecsDirectDebitDTO": {
 7050 |         "type": "object",
 7051 |         "properties": {
 7052 |           "bsb_number": {
 7053 |             "type": "string"
 7054 |           },
 7055 |           "last4": {
 7056 |             "type": "string"
 7057 |           }
 7058 |         },
 7059 |         "required": [
 7060 |           "bsb_number",
 7061 |           "last4"
 7062 |         ]
 7063 |       },
 7064 |       "AutoPaymentDetailsDto": {
 7065 |         "type": "object",
 7066 |         "properties": {
 7067 |           "enable": {
 7068 |             "type": "boolean"
 7069 |           },
 7070 |           "type": {
 7071 |             "type": "string"
 7072 |           },
 7073 |           "paymentMethodId": {
 7074 |             "type": "string"
 7075 |           },
 7076 |           "customerId": {
 7077 |             "type": "string"
 7078 |           },
 7079 |           "card": {
 7080 |             "$ref": "#/components/schemas/CardDto"
 7081 |           },
 7082 |           "usBankAccount": {
 7083 |             "$ref": "#/components/schemas/USBankAccountDto"
 7084 |           },
 7085 |           "sepaDirectDebit": {
 7086 |             "$ref": "#/components/schemas/SepaDirectDebitDTO"
 7087 |           },
 7088 |           "bacsDirectDebit": {
 7089 |             "$ref": "#/components/schemas/BacsDirectDebitDTO"
 7090 |           },
 7091 |           "becsDirectDebit": {
 7092 |             "$ref": "#/components/schemas/BecsDirectDebitDTO"
 7093 |           },
 7094 |           "cardId": {
 7095 |             "type": "string"
 7096 |           }
 7097 |         },
 7098 |         "required": [
 7099 |           "enable"
 7100 |         ]
 7101 |       },
 7102 |       "ScheduleInvoiceScheduleDto": {
 7103 |         "type": "object",
 7104 |         "properties": {
 7105 |           "altId": {
 7106 |             "type": "string",
 7107 |             "description": "location Id / company Id based on altType",
 7108 |             "example": "6578278e879ad2646715ba9c"
 7109 |           },
 7110 |           "altType": {
 7111 |             "type": "string",
 7112 |             "description": "Alt Type",
 7113 |             "enum": [
 7114 |               "location"
 7115 |             ],
 7116 |             "example": "location"
 7117 |           },
 7118 |           "liveMode": {
 7119 |             "type": "boolean"
 7120 |           },
 7121 |           "autoPayment": {
 7122 |             "description": "auto-payment configuration",
 7123 |             "allOf": [
 7124 |               {
 7125 |                 "$ref": "#/components/schemas/AutoPaymentDetailsDto"
 7126 |               }
 7127 |             ]
 7128 |           }
 7129 |         },
 7130 |         "required": [
 7131 |           "altId",
 7132 |           "altType",
 7133 |           "liveMode"
 7134 |         ]
 7135 |       },
 7136 |       "ScheduleInvoiceScheduleResponseDto": {
 7137 |         "type": "object",
 7138 |         "properties": {
 7139 |           "_id": {
 7140 |             "type": "string",
 7141 |             "description": "Schedule Id",
 7142 |             "example": "6578278e879ad2646715ba9c"
 7143 |           },
 7144 |           "status": {
 7145 |             "type": "object",
 7146 |             "description": "Schedule Status",
 7147 |             "example": "draft"
 7148 |           },
 7149 |           "liveMode": {
 7150 |             "type": "boolean",
 7151 |             "description": "Live Mode",
 7152 |             "example": false
 7153 |           },
 7154 |           "altId": {
 7155 |             "type": "string",
 7156 |             "description": "Location Id or Agency Id",
 7157 |             "example": "6578278e879ad2646715ba9c"
 7158 |           },
 7159 |           "altType": {
 7160 |             "type": "string",
 7161 |             "enum": [
 7162 |               "location"
 7163 |             ]
 7164 |           },
 7165 |           "name": {
 7166 |             "type": "string",
 7167 |             "description": "Name of the invoice",
 7168 |             "example": "New Invoice"
 7169 |           },
 7170 |           "schedule": {
 7171 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 7172 |           },
 7173 |           "invoices": {
 7174 |             "description": "List of invoices",
 7175 |             "type": "array",
 7176 |             "items": {
 7177 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 7178 |             }
 7179 |           },
 7180 |           "businessDetails": {
 7181 |             "description": "Business Details",
 7182 |             "example": {
 7183 |               "name": "Alex",
 7184 |               "address": {
 7185 |                 "addressLine1": "9931 Beechwood",
 7186 |                 "city": "St. Houston",
 7187 |                 "state": "TX",
 7188 |                 "countryCode": "USA",
 7189 |                 "postalCode": "559-6993"
 7190 |               },
 7191 |               "phoneNo": "+1-214-559-6993",
 7192 |               "website": "www.example.com"
 7193 |             },
 7194 |             "allOf": [
 7195 |               {
 7196 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 7197 |               }
 7198 |             ]
 7199 |           },
 7200 |           "currency": {
 7201 |             "type": "string",
 7202 |             "description": "Currency",
 7203 |             "example": "USD"
 7204 |           },
 7205 |           "contactDetails": {
 7206 |             "description": "Contact Details",
 7207 |             "example": {
 7208 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 7209 |               "phoneNo": "+1-214-559-6993",
 7210 |               "email": "alex@example.com",
 7211 |               "customFields": [],
 7212 |               "name": "Alex",
 7213 |               "address": {
 7214 |                 "countryCode": "US"
 7215 |               }
 7216 |             },
 7217 |             "allOf": [
 7218 |               {
 7219 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 7220 |               }
 7221 |             ]
 7222 |           },
 7223 |           "discount": {
 7224 |             "description": "Discount",
 7225 |             "example": {
 7226 |               "type": "percentage",
 7227 |               "value": 0
 7228 |             },
 7229 |             "allOf": [
 7230 |               {
 7231 |                 "$ref": "#/components/schemas/DiscountDto"
 7232 |               }
 7233 |             ]
 7234 |           },
 7235 |           "items": {
 7236 |             "description": "Invoice Items",
 7237 |             "example": [
 7238 |               {
 7239 |                 "taxes": [],
 7240 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 7241 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 7242 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 7243 |                 "currency": "USD",
 7244 |                 "name": "Macbook Pro",
 7245 |                 "qty": 1,
 7246 |                 "amount": 999
 7247 |               }
 7248 |             ],
 7249 |             "type": "array",
 7250 |             "items": {
 7251 |               "type": "string"
 7252 |             }
 7253 |           },
 7254 |           "total": {
 7255 |             "type": "number",
 7256 |             "description": "Total Amount",
 7257 |             "example": 999
 7258 |           },
 7259 |           "title": {
 7260 |             "type": "string",
 7261 |             "description": "Title",
 7262 |             "example": "INVOICE"
 7263 |           },
 7264 |           "termsNotes": {
 7265 |             "type": "string",
 7266 |             "description": "Terms notes",
 7267 |             "example": "Confidential"
 7268 |           },
 7269 |           "compiledTermsNotes": {
 7270 |             "type": "string",
 7271 |             "description": "Compiled terms notes",
 7272 |             "example": "Confidential"
 7273 |           },
 7274 |           "createdAt": {
 7275 |             "type": "string",
 7276 |             "description": "created at",
 7277 |             "example": "2023-12-12T09:27:42.355Z"
 7278 |           },
 7279 |           "updatedAt": {
 7280 |             "type": "string",
 7281 |             "description": "updated at",
 7282 |             "example": "2023-12-12T09:27:42.355Z"
 7283 |           }
 7284 |         },
 7285 |         "required": [
 7286 |           "_id",
 7287 |           "status",
 7288 |           "liveMode",
 7289 |           "altId",
 7290 |           "altType",
 7291 |           "name",
 7292 |           "invoices",
 7293 |           "businessDetails",
 7294 |           "currency",
 7295 |           "contactDetails",
 7296 |           "items",
 7297 |           "total",
 7298 |           "title",
 7299 |           "termsNotes",
 7300 |           "compiledTermsNotes",
 7301 |           "createdAt",
 7302 |           "updatedAt"
 7303 |         ]
 7304 |       },
 7305 |       "AutoPaymentScheduleDto": {
 7306 |         "type": "object",
 7307 |         "properties": {
 7308 |           "altId": {
 7309 |             "type": "string",
 7310 |             "description": "location Id / company Id based on altType",
 7311 |             "example": "6578278e879ad2646715ba9c"
 7312 |           },
 7313 |           "altType": {
 7314 |             "type": "string",
 7315 |             "description": "Alt Type",
 7316 |             "enum": [
 7317 |               "location"
 7318 |             ],
 7319 |             "example": "location"
 7320 |           },
 7321 |           "id": {
 7322 |             "type": "string"
 7323 |           },
 7324 |           "autoPayment": {
 7325 |             "description": "auto-payment configuration",
 7326 |             "allOf": [
 7327 |               {
 7328 |                 "$ref": "#/components/schemas/AutoPaymentDetailsDto"
 7329 |               }
 7330 |             ]
 7331 |           }
 7332 |         },
 7333 |         "required": [
 7334 |           "altId",
 7335 |           "altType",
 7336 |           "id",
 7337 |           "autoPayment"
 7338 |         ]
 7339 |       },
 7340 |       "AutoPaymentInvoiceScheduleResponseDto": {
 7341 |         "type": "object",
 7342 |         "properties": {
 7343 |           "_id": {
 7344 |             "type": "string",
 7345 |             "description": "Schedule Id",
 7346 |             "example": "6578278e879ad2646715ba9c"
 7347 |           },
 7348 |           "status": {
 7349 |             "type": "object",
 7350 |             "description": "Schedule Status",
 7351 |             "example": "draft"
 7352 |           },
 7353 |           "liveMode": {
 7354 |             "type": "boolean",
 7355 |             "description": "Live Mode",
 7356 |             "example": false
 7357 |           },
 7358 |           "altId": {
 7359 |             "type": "string",
 7360 |             "description": "Location Id or Agency Id",
 7361 |             "example": "6578278e879ad2646715ba9c"
 7362 |           },
 7363 |           "altType": {
 7364 |             "type": "string",
 7365 |             "enum": [
 7366 |               "location"
 7367 |             ]
 7368 |           },
 7369 |           "name": {
 7370 |             "type": "string",
 7371 |             "description": "Name of the invoice",
 7372 |             "example": "New Invoice"
 7373 |           },
 7374 |           "schedule": {
 7375 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 7376 |           },
 7377 |           "invoices": {
 7378 |             "description": "List of invoices",
 7379 |             "type": "array",
 7380 |             "items": {
 7381 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 7382 |             }
 7383 |           },
 7384 |           "businessDetails": {
 7385 |             "description": "Business Details",
 7386 |             "example": {
 7387 |               "name": "Alex",
 7388 |               "address": {
 7389 |                 "addressLine1": "9931 Beechwood",
 7390 |                 "city": "St. Houston",
 7391 |                 "state": "TX",
 7392 |                 "countryCode": "USA",
 7393 |                 "postalCode": "559-6993"
 7394 |               },
 7395 |               "phoneNo": "+1-214-559-6993",
 7396 |               "website": "www.example.com"
 7397 |             },
 7398 |             "allOf": [
 7399 |               {
 7400 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 7401 |               }
 7402 |             ]
 7403 |           },
 7404 |           "currency": {
 7405 |             "type": "string",
 7406 |             "description": "Currency",
 7407 |             "example": "USD"
 7408 |           },
 7409 |           "contactDetails": {
 7410 |             "description": "Contact Details",
 7411 |             "example": {
 7412 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 7413 |               "phoneNo": "+1-214-559-6993",
 7414 |               "email": "alex@example.com",
 7415 |               "customFields": [],
 7416 |               "name": "Alex",
 7417 |               "address": {
 7418 |                 "countryCode": "US"
 7419 |               }
 7420 |             },
 7421 |             "allOf": [
 7422 |               {
 7423 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 7424 |               }
 7425 |             ]
 7426 |           },
 7427 |           "discount": {
 7428 |             "description": "Discount",
 7429 |             "example": {
 7430 |               "type": "percentage",
 7431 |               "value": 0
 7432 |             },
 7433 |             "allOf": [
 7434 |               {
 7435 |                 "$ref": "#/components/schemas/DiscountDto"
 7436 |               }
 7437 |             ]
 7438 |           },
 7439 |           "items": {
 7440 |             "description": "Invoice Items",
 7441 |             "example": [
 7442 |               {
 7443 |                 "taxes": [],
 7444 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 7445 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 7446 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 7447 |                 "currency": "USD",
 7448 |                 "name": "Macbook Pro",
 7449 |                 "qty": 1,
 7450 |                 "amount": 999
 7451 |               }
 7452 |             ],
 7453 |             "type": "array",
 7454 |             "items": {
 7455 |               "type": "string"
 7456 |             }
 7457 |           },
 7458 |           "total": {
 7459 |             "type": "number",
 7460 |             "description": "Total Amount",
 7461 |             "example": 999
 7462 |           },
 7463 |           "title": {
 7464 |             "type": "string",
 7465 |             "description": "Title",
 7466 |             "example": "INVOICE"
 7467 |           },
 7468 |           "termsNotes": {
 7469 |             "type": "string",
 7470 |             "description": "Terms notes",
 7471 |             "example": "Confidential"
 7472 |           },
 7473 |           "compiledTermsNotes": {
 7474 |             "type": "string",
 7475 |             "description": "Compiled terms notes",
 7476 |             "example": "Confidential"
 7477 |           },
 7478 |           "createdAt": {
 7479 |             "type": "string",
 7480 |             "description": "created at",
 7481 |             "example": "2023-12-12T09:27:42.355Z"
 7482 |           },
 7483 |           "updatedAt": {
 7484 |             "type": "string",
 7485 |             "description": "updated at",
 7486 |             "example": "2023-12-12T09:27:42.355Z"
 7487 |           }
 7488 |         },
 7489 |         "required": [
 7490 |           "_id",
 7491 |           "status",
 7492 |           "liveMode",
 7493 |           "altId",
 7494 |           "altType",
 7495 |           "name",
 7496 |           "invoices",
 7497 |           "businessDetails",
 7498 |           "currency",
 7499 |           "contactDetails",
 7500 |           "items",
 7501 |           "total",
 7502 |           "title",
 7503 |           "termsNotes",
 7504 |           "compiledTermsNotes",
 7505 |           "createdAt",
 7506 |           "updatedAt"
 7507 |         ]
 7508 |       },
 7509 |       "CancelInvoiceScheduleDto": {
 7510 |         "type": "object",
 7511 |         "properties": {
 7512 |           "altId": {
 7513 |             "type": "string",
 7514 |             "description": "location Id / company Id based on altType",
 7515 |             "example": "6578278e879ad2646715ba9c"
 7516 |           },
 7517 |           "altType": {
 7518 |             "type": "string",
 7519 |             "description": "Alt Type",
 7520 |             "enum": [
 7521 |               "location"
 7522 |             ],
 7523 |             "example": "location"
 7524 |           }
 7525 |         },
 7526 |         "required": [
 7527 |           "altId",
 7528 |           "altType"
 7529 |         ]
 7530 |       },
 7531 |       "CancelInvoiceScheduleResponseDto": {
 7532 |         "type": "object",
 7533 |         "properties": {
 7534 |           "_id": {
 7535 |             "type": "string",
 7536 |             "description": "Schedule Id",
 7537 |             "example": "6578278e879ad2646715ba9c"
 7538 |           },
 7539 |           "status": {
 7540 |             "type": "object",
 7541 |             "description": "Schedule Status",
 7542 |             "example": "draft"
 7543 |           },
 7544 |           "liveMode": {
 7545 |             "type": "boolean",
 7546 |             "description": "Live Mode",
 7547 |             "example": false
 7548 |           },
 7549 |           "altId": {
 7550 |             "type": "string",
 7551 |             "description": "Location Id or Agency Id",
 7552 |             "example": "6578278e879ad2646715ba9c"
 7553 |           },
 7554 |           "altType": {
 7555 |             "type": "string",
 7556 |             "enum": [
 7557 |               "location"
 7558 |             ]
 7559 |           },
 7560 |           "name": {
 7561 |             "type": "string",
 7562 |             "description": "Name of the invoice",
 7563 |             "example": "New Invoice"
 7564 |           },
 7565 |           "schedule": {
 7566 |             "$ref": "#/components/schemas/ScheduleOptionsDto"
 7567 |           },
 7568 |           "invoices": {
 7569 |             "description": "List of invoices",
 7570 |             "type": "array",
 7571 |             "items": {
 7572 |               "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 7573 |             }
 7574 |           },
 7575 |           "businessDetails": {
 7576 |             "description": "Business Details",
 7577 |             "example": {
 7578 |               "name": "Alex",
 7579 |               "address": {
 7580 |                 "addressLine1": "9931 Beechwood",
 7581 |                 "city": "St. Houston",
 7582 |                 "state": "TX",
 7583 |                 "countryCode": "USA",
 7584 |                 "postalCode": "559-6993"
 7585 |               },
 7586 |               "phoneNo": "+1-214-559-6993",
 7587 |               "website": "www.example.com"
 7588 |             },
 7589 |             "allOf": [
 7590 |               {
 7591 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 7592 |               }
 7593 |             ]
 7594 |           },
 7595 |           "currency": {
 7596 |             "type": "string",
 7597 |             "description": "Currency",
 7598 |             "example": "USD"
 7599 |           },
 7600 |           "contactDetails": {
 7601 |             "description": "Contact Details",
 7602 |             "example": {
 7603 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 7604 |               "phoneNo": "+1-214-559-6993",
 7605 |               "email": "alex@example.com",
 7606 |               "customFields": [],
 7607 |               "name": "Alex",
 7608 |               "address": {
 7609 |                 "countryCode": "US"
 7610 |               }
 7611 |             },
 7612 |             "allOf": [
 7613 |               {
 7614 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 7615 |               }
 7616 |             ]
 7617 |           },
 7618 |           "discount": {
 7619 |             "description": "Discount",
 7620 |             "example": {
 7621 |               "type": "percentage",
 7622 |               "value": 0
 7623 |             },
 7624 |             "allOf": [
 7625 |               {
 7626 |                 "$ref": "#/components/schemas/DiscountDto"
 7627 |               }
 7628 |             ]
 7629 |           },
 7630 |           "items": {
 7631 |             "description": "Invoice Items",
 7632 |             "example": [
 7633 |               {
 7634 |                 "taxes": [],
 7635 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 7636 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 7637 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 7638 |                 "currency": "USD",
 7639 |                 "name": "Macbook Pro",
 7640 |                 "qty": 1,
 7641 |                 "amount": 999
 7642 |               }
 7643 |             ],
 7644 |             "type": "array",
 7645 |             "items": {
 7646 |               "type": "string"
 7647 |             }
 7648 |           },
 7649 |           "total": {
 7650 |             "type": "number",
 7651 |             "description": "Total Amount",
 7652 |             "example": 999
 7653 |           },
 7654 |           "title": {
 7655 |             "type": "string",
 7656 |             "description": "Title",
 7657 |             "example": "INVOICE"
 7658 |           },
 7659 |           "termsNotes": {
 7660 |             "type": "string",
 7661 |             "description": "Terms notes",
 7662 |             "example": "Confidential"
 7663 |           },
 7664 |           "compiledTermsNotes": {
 7665 |             "type": "string",
 7666 |             "description": "Compiled terms notes",
 7667 |             "example": "Confidential"
 7668 |           },
 7669 |           "createdAt": {
 7670 |             "type": "string",
 7671 |             "description": "created at",
 7672 |             "example": "2023-12-12T09:27:42.355Z"
 7673 |           },
 7674 |           "updatedAt": {
 7675 |             "type": "string",
 7676 |             "description": "updated at",
 7677 |             "example": "2023-12-12T09:27:42.355Z"
 7678 |           }
 7679 |         },
 7680 |         "required": [
 7681 |           "_id",
 7682 |           "status",
 7683 |           "liveMode",
 7684 |           "altId",
 7685 |           "altType",
 7686 |           "name",
 7687 |           "invoices",
 7688 |           "businessDetails",
 7689 |           "currency",
 7690 |           "contactDetails",
 7691 |           "items",
 7692 |           "total",
 7693 |           "title",
 7694 |           "termsNotes",
 7695 |           "compiledTermsNotes",
 7696 |           "createdAt",
 7697 |           "updatedAt"
 7698 |         ]
 7699 |       },
 7700 |       "SentToDto": {
 7701 |         "type": "object",
 7702 |         "properties": {
 7703 |           "email": {
 7704 |             "description": "Email Address",
 7705 |             "example": [
 7706 |               "alex@example.com"
 7707 |             ],
 7708 |             "type": "array",
 7709 |             "items": {
 7710 |               "type": "string"
 7711 |             }
 7712 |           },
 7713 |           "emailCc": {
 7714 |             "description": "cc to be kept in any sent out emails",
 7715 |             "example": [
 7716 |               "alex@example.com"
 7717 |             ],
 7718 |             "type": "array",
 7719 |             "items": {
 7720 |               "type": "string"
 7721 |             }
 7722 |           },
 7723 |           "emailBcc": {
 7724 |             "description": "bcc to be kept in any sent out emails",
 7725 |             "example": [
 7726 |               "alex@example.com"
 7727 |             ],
 7728 |             "type": "array",
 7729 |             "items": {
 7730 |               "type": "string"
 7731 |             }
 7732 |           },
 7733 |           "phoneNo": {
 7734 |             "description": "Contact Phone Number",
 7735 |             "example": [
 7736 |               "+1-214-559-6993"
 7737 |             ],
 7738 |             "type": "array",
 7739 |             "items": {
 7740 |               "type": "string"
 7741 |             }
 7742 |           }
 7743 |         },
 7744 |         "required": [
 7745 |           "email"
 7746 |         ]
 7747 |       },
 7748 |       "PaymentScheduleDto": {
 7749 |         "type": "object",
 7750 |         "properties": {
 7751 |           "type": {
 7752 |             "type": "string",
 7753 |             "description": "Payment schedule type",
 7754 |             "enum": [
 7755 |               "fixed",
 7756 |               "percentage"
 7757 |             ],
 7758 |             "example": "percentage"
 7759 |           },
 7760 |           "schedules": {
 7761 |             "description": "payment schedule item",
 7762 |             "type": "array",
 7763 |             "items": {
 7764 |               "type": "string"
 7765 |             }
 7766 |           }
 7767 |         },
 7768 |         "required": [
 7769 |           "type",
 7770 |           "schedules"
 7771 |         ]
 7772 |       },
 7773 |       "Text2PayDto": {
 7774 |         "type": "object",
 7775 |         "properties": {
 7776 |           "altId": {
 7777 |             "type": "string",
 7778 |             "description": "location Id / company Id based on altType",
 7779 |             "example": "6578278e879ad2646715ba9c"
 7780 |           },
 7781 |           "altType": {
 7782 |             "type": "string",
 7783 |             "description": "Alt Type",
 7784 |             "enum": [
 7785 |               "location"
 7786 |             ],
 7787 |             "example": "location"
 7788 |           },
 7789 |           "name": {
 7790 |             "type": "string",
 7791 |             "description": "Invoice Name",
 7792 |             "example": "New Invoice"
 7793 |           },
 7794 |           "currency": {
 7795 |             "type": "string",
 7796 |             "description": "Currency code",
 7797 |             "example": "USD"
 7798 |           },
 7799 |           "items": {
 7800 |             "description": "An array of items for the invoice.",
 7801 |             "type": "array",
 7802 |             "items": {
 7803 |               "$ref": "#/components/schemas/InvoiceItemDto"
 7804 |             }
 7805 |           },
 7806 |           "termsNotes": {
 7807 |             "type": "string",
 7808 |             "description": "Terms notes, Also supports HTML markups",
 7809 |             "example": "<p>This is a default terms.</p>"
 7810 |           },
 7811 |           "title": {
 7812 |             "type": "string",
 7813 |             "description": "Title for the invoice",
 7814 |             "example": "INVOICE"
 7815 |           },
 7816 |           "contactDetails": {
 7817 |             "description": "Contact information to send the invoice to",
 7818 |             "allOf": [
 7819 |               {
 7820 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 7821 |               }
 7822 |             ]
 7823 |           },
 7824 |           "invoiceNumber": {
 7825 |             "type": "string",
 7826 |             "description": "Invoice Number",
 7827 |             "example": "1001"
 7828 |           },
 7829 |           "issueDate": {
 7830 |             "type": "string",
 7831 |             "description": "Issue date in YYYY-MM-DD format",
 7832 |             "example": "2023-01-01"
 7833 |           },
 7834 |           "dueDate": {
 7835 |             "type": "string",
 7836 |             "description": "Due date in YYYY-MM-DD format",
 7837 |             "example": "2023-01-14"
 7838 |           },
 7839 |           "sentTo": {
 7840 |             "$ref": "#/components/schemas/SentToDto"
 7841 |           },
 7842 |           "liveMode": {
 7843 |             "type": "boolean"
 7844 |           },
 7845 |           "automaticTaxesEnabled": {
 7846 |             "type": "boolean",
 7847 |             "description": "Automatic taxes enabled for the Invoice",
 7848 |             "example": true
 7849 |           },
 7850 |           "paymentSchedule": {
 7851 |             "description": "split invoice into payment schedule summing up to full invoice amount",
 7852 |             "allOf": [
 7853 |               {
 7854 |                 "$ref": "#/components/schemas/PaymentScheduleDto"
 7855 |               }
 7856 |             ]
 7857 |           },
 7858 |           "lateFeesConfiguration": {
 7859 |             "description": "late fees configuration",
 7860 |             "allOf": [
 7861 |               {
 7862 |                 "$ref": "#/components/schemas/LateFeesConfigurationDto"
 7863 |               }
 7864 |             ]
 7865 |           },
 7866 |           "tipsConfiguration": {
 7867 |             "description": "tips configuration for the invoice",
 7868 |             "allOf": [
 7869 |               {
 7870 |                 "$ref": "#/components/schemas/TipsConfigurationDto"
 7871 |               }
 7872 |             ]
 7873 |           },
 7874 |           "invoiceNumberPrefix": {
 7875 |             "type": "string",
 7876 |             "description": "prefix for invoice number",
 7877 |             "example": "INV-"
 7878 |           },
 7879 |           "paymentMethods": {
 7880 |             "description": "Payment Methods for Invoices",
 7881 |             "allOf": [
 7882 |               {
 7883 |                 "$ref": "#/components/schemas/PaymentMethodDto"
 7884 |               }
 7885 |             ]
 7886 |           },
 7887 |           "attachments": {
 7888 |             "description": "attachments for the invoice",
 7889 |             "type": "array",
 7890 |             "items": {
 7891 |               "$ref": "#/components/schemas/AttachmentsDto"
 7892 |             }
 7893 |           },
 7894 |           "id": {
 7895 |             "type": "string",
 7896 |             "description": "id of invoice to update. If skipped, a new invoice will be created"
 7897 |           },
 7898 |           "includeTermsNote": {
 7899 |             "type": "boolean",
 7900 |             "description": "include terms & notes with receipts",
 7901 |             "example": true
 7902 |           },
 7903 |           "action": {
 7904 |             "type": "string",
 7905 |             "description": "create invoice in draft mode or send mode",
 7906 |             "example": "draft",
 7907 |             "enum": [
 7908 |               "draft",
 7909 |               "send"
 7910 |             ]
 7911 |           },
 7912 |           "userId": {
 7913 |             "type": "string",
 7914 |             "description": "id of user generating invoice"
 7915 |           },
 7916 |           "discount": {
 7917 |             "$ref": "#/components/schemas/DiscountDto"
 7918 |           },
 7919 |           "businessDetails": {
 7920 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 7921 |           }
 7922 |         },
 7923 |         "required": [
 7924 |           "altId",
 7925 |           "altType",
 7926 |           "name",
 7927 |           "currency",
 7928 |           "items",
 7929 |           "contactDetails",
 7930 |           "issueDate",
 7931 |           "sentTo",
 7932 |           "liveMode",
 7933 |           "action",
 7934 |           "userId"
 7935 |         ]
 7936 |       },
 7937 |       "Text2PayInvoiceResponseDto": {
 7938 |         "type": "object",
 7939 |         "properties": {
 7940 |           "invoice": {
 7941 |             "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 7942 |           },
 7943 |           "invoiceUrl": {
 7944 |             "type": "string",
 7945 |             "description": "preview url of generated invoice"
 7946 |           }
 7947 |         },
 7948 |         "required": [
 7949 |           "invoice",
 7950 |           "invoiceUrl"
 7951 |         ]
 7952 |       },
 7953 |       "GenerateInvoiceNumberResponseDto": {
 7954 |         "type": "object",
 7955 |         "properties": {
 7956 |           "invoiceNumber": {
 7957 |             "type": "number",
 7958 |             "description": "Invoice Number",
 7959 |             "example": "19"
 7960 |           }
 7961 |         }
 7962 |       },
 7963 |       "CreateInvoiceDto": {
 7964 |         "type": "object",
 7965 |         "properties": {
 7966 |           "altId": {
 7967 |             "type": "string",
 7968 |             "description": "location Id / company Id based on altType",
 7969 |             "example": "6578278e879ad2646715ba9c"
 7970 |           },
 7971 |           "altType": {
 7972 |             "type": "string",
 7973 |             "description": "Alt Type",
 7974 |             "enum": [
 7975 |               "location"
 7976 |             ],
 7977 |             "example": "location"
 7978 |           },
 7979 |           "name": {
 7980 |             "type": "string",
 7981 |             "description": "Invoice Name",
 7982 |             "example": "New Invoice"
 7983 |           },
 7984 |           "businessDetails": {
 7985 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 7986 |           },
 7987 |           "currency": {
 7988 |             "type": "string",
 7989 |             "description": "Currency code",
 7990 |             "example": "USD"
 7991 |           },
 7992 |           "items": {
 7993 |             "description": "An array of items for the invoice.",
 7994 |             "type": "array",
 7995 |             "items": {
 7996 |               "$ref": "#/components/schemas/InvoiceItemDto"
 7997 |             }
 7998 |           },
 7999 |           "discount": {
 8000 |             "$ref": "#/components/schemas/DiscountDto"
 8001 |           },
 8002 |           "termsNotes": {
 8003 |             "type": "string",
 8004 |             "description": "Terms notes, Also supports HTML markups",
 8005 |             "example": "<p>This is a default terms.</p>"
 8006 |           },
 8007 |           "title": {
 8008 |             "type": "string",
 8009 |             "description": "Title for the invoice",
 8010 |             "example": "INVOICE"
 8011 |           },
 8012 |           "contactDetails": {
 8013 |             "description": "Contact information to send the invoice to",
 8014 |             "allOf": [
 8015 |               {
 8016 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 8017 |               }
 8018 |             ]
 8019 |           },
 8020 |           "invoiceNumber": {
 8021 |             "type": "string",
 8022 |             "description": "Invoice Number",
 8023 |             "example": "1001"
 8024 |           },
 8025 |           "issueDate": {
 8026 |             "type": "string",
 8027 |             "description": "Issue date in YYYY-MM-DD format",
 8028 |             "example": "2023-01-01"
 8029 |           },
 8030 |           "dueDate": {
 8031 |             "type": "string",
 8032 |             "description": "Due date in YYYY-MM-DD format",
 8033 |             "example": "2023-01-14"
 8034 |           },
 8035 |           "sentTo": {
 8036 |             "$ref": "#/components/schemas/SentToDto"
 8037 |           },
 8038 |           "liveMode": {
 8039 |             "type": "boolean"
 8040 |           },
 8041 |           "automaticTaxesEnabled": {
 8042 |             "type": "boolean",
 8043 |             "description": "Automatic taxes enabled for the Invoice",
 8044 |             "example": true
 8045 |           },
 8046 |           "paymentSchedule": {
 8047 |             "description": "split invoice into payment schedule summing up to full invoice amount",
 8048 |             "allOf": [
 8049 |               {
 8050 |                 "$ref": "#/components/schemas/PaymentScheduleDto"
 8051 |               }
 8052 |             ]
 8053 |           },
 8054 |           "lateFeesConfiguration": {
 8055 |             "description": "late fees configuration",
 8056 |             "allOf": [
 8057 |               {
 8058 |                 "$ref": "#/components/schemas/LateFeesConfigurationDto"
 8059 |               }
 8060 |             ]
 8061 |           },
 8062 |           "tipsConfiguration": {
 8063 |             "description": "tips configuration for the invoice",
 8064 |             "allOf": [
 8065 |               {
 8066 |                 "$ref": "#/components/schemas/TipsConfigurationDto"
 8067 |               }
 8068 |             ]
 8069 |           },
 8070 |           "invoiceNumberPrefix": {
 8071 |             "type": "string",
 8072 |             "description": "prefix for invoice number",
 8073 |             "example": "INV-"
 8074 |           },
 8075 |           "paymentMethods": {
 8076 |             "description": "Payment Methods for Invoices",
 8077 |             "allOf": [
 8078 |               {
 8079 |                 "$ref": "#/components/schemas/PaymentMethodDto"
 8080 |               }
 8081 |             ]
 8082 |           },
 8083 |           "attachments": {
 8084 |             "description": "attachments for the invoice",
 8085 |             "type": "array",
 8086 |             "items": {
 8087 |               "$ref": "#/components/schemas/AttachmentsDto"
 8088 |             }
 8089 |           }
 8090 |         },
 8091 |         "required": [
 8092 |           "altId",
 8093 |           "altType",
 8094 |           "name",
 8095 |           "businessDetails",
 8096 |           "currency",
 8097 |           "items",
 8098 |           "discount",
 8099 |           "contactDetails",
 8100 |           "issueDate",
 8101 |           "sentTo",
 8102 |           "liveMode"
 8103 |         ]
 8104 |       },
 8105 |       "OldCreateInvoiceDTO": {
 8106 |         "type": "object",
 8107 |         "properties": {}
 8108 |       },
 8109 |       "CreateInvoiceResponseDto": {
 8110 |         "type": "object",
 8111 |         "properties": {
 8112 |           "_id": {
 8113 |             "type": "string",
 8114 |             "description": "Invoice Id",
 8115 |             "example": "6578278e879ad2646715ba9c"
 8116 |           },
 8117 |           "status": {
 8118 |             "type": "string",
 8119 |             "description": "Invoice Status",
 8120 |             "example": "draft",
 8121 |             "enum": [
 8122 |               "draft",
 8123 |               "sent",
 8124 |               "payment_processing",
 8125 |               "paid",
 8126 |               "void",
 8127 |               "partially_paid"
 8128 |             ]
 8129 |           },
 8130 |           "liveMode": {
 8131 |             "type": "boolean",
 8132 |             "description": "Live Mode",
 8133 |             "example": false
 8134 |           },
 8135 |           "amountPaid": {
 8136 |             "type": "number",
 8137 |             "description": "Amount Paid",
 8138 |             "example": 0
 8139 |           },
 8140 |           "altId": {
 8141 |             "type": "string",
 8142 |             "description": "Location Id or Agency Id",
 8143 |             "example": "6578278e879ad2646715ba9c"
 8144 |           },
 8145 |           "altType": {
 8146 |             "type": "string",
 8147 |             "enum": [
 8148 |               "location"
 8149 |             ]
 8150 |           },
 8151 |           "name": {
 8152 |             "type": "string",
 8153 |             "description": "Name of the invoice",
 8154 |             "example": "New Invoice"
 8155 |           },
 8156 |           "businessDetails": {
 8157 |             "type": "object",
 8158 |             "description": "Business Details",
 8159 |             "example": {
 8160 |               "name": "Alex",
 8161 |               "address": {
 8162 |                 "addressLine1": "9931 Beechwood",
 8163 |                 "city": "St. Houston",
 8164 |                 "state": "TX",
 8165 |                 "countryCode": "USA",
 8166 |                 "postalCode": "559-6993"
 8167 |               },
 8168 |               "phoneNo": "+1-214-559-6993",
 8169 |               "website": "www.example.com"
 8170 |             }
 8171 |           },
 8172 |           "invoiceNumber": {
 8173 |             "type": "number",
 8174 |             "description": "Invoice Number",
 8175 |             "example": "19"
 8176 |           },
 8177 |           "currency": {
 8178 |             "type": "string",
 8179 |             "description": "Currency",
 8180 |             "example": "USD"
 8181 |           },
 8182 |           "contactDetails": {
 8183 |             "type": "object",
 8184 |             "description": "Contact Details",
 8185 |             "example": {
 8186 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 8187 |               "phoneNo": "+1-214-559-6993",
 8188 |               "email": "alex@example.com",
 8189 |               "customFields": [],
 8190 |               "name": "Alex",
 8191 |               "address": {
 8192 |                 "countryCode": "US"
 8193 |               }
 8194 |             }
 8195 |           },
 8196 |           "issueDate": {
 8197 |             "type": "string",
 8198 |             "description": "Issue date in YYYY-MM-DD format",
 8199 |             "example": "2023-01-01"
 8200 |           },
 8201 |           "dueDate": {
 8202 |             "type": "string",
 8203 |             "description": "Due date in YYYY-MM-DD format",
 8204 |             "example": "2023-01-01"
 8205 |           },
 8206 |           "discount": {
 8207 |             "type": "object",
 8208 |             "description": "Discount",
 8209 |             "example": {
 8210 |               "type": "percentage",
 8211 |               "value": 0
 8212 |             }
 8213 |           },
 8214 |           "invoiceItems": {
 8215 |             "description": "Invoice Items",
 8216 |             "example": [
 8217 |               {
 8218 |                 "taxes": [],
 8219 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 8220 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 8221 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 8222 |                 "currency": "USD",
 8223 |                 "name": "Macbook Pro",
 8224 |                 "qty": 1,
 8225 |                 "amount": 999
 8226 |               }
 8227 |             ],
 8228 |             "type": "array",
 8229 |             "items": {
 8230 |               "type": "string"
 8231 |             }
 8232 |           },
 8233 |           "total": {
 8234 |             "type": "number",
 8235 |             "description": "Total Amount",
 8236 |             "example": 999
 8237 |           },
 8238 |           "title": {
 8239 |             "type": "string",
 8240 |             "description": "Title",
 8241 |             "example": "INVOICE"
 8242 |           },
 8243 |           "amountDue": {
 8244 |             "type": "number",
 8245 |             "description": "Total Amount Due",
 8246 |             "example": 999
 8247 |           },
 8248 |           "createdAt": {
 8249 |             "type": "string",
 8250 |             "description": "created at",
 8251 |             "example": "2023-12-12T09:27:42.355Z"
 8252 |           },
 8253 |           "updatedAt": {
 8254 |             "type": "string",
 8255 |             "description": "updated at",
 8256 |             "example": "2023-12-12T09:27:42.355Z"
 8257 |           },
 8258 |           "automaticTaxesEnabled": {
 8259 |             "type": "boolean",
 8260 |             "description": "Automatic taxes enabled for the Invoice",
 8261 |             "example": true
 8262 |           },
 8263 |           "automaticTaxesCalculated": {
 8264 |             "type": "boolean",
 8265 |             "description": "Is Automatic taxes calculated for the Invoice items",
 8266 |             "example": true
 8267 |           },
 8268 |           "paymentSchedule": {
 8269 |             "type": "object",
 8270 |             "description": "split invoice into payment schedule summing up to full invoice amount"
 8271 |           }
 8272 |         },
 8273 |         "required": [
 8274 |           "_id",
 8275 |           "status",
 8276 |           "liveMode",
 8277 |           "amountPaid",
 8278 |           "altId",
 8279 |           "altType",
 8280 |           "name",
 8281 |           "businessDetails",
 8282 |           "invoiceNumber",
 8283 |           "currency",
 8284 |           "contactDetails",
 8285 |           "issueDate",
 8286 |           "dueDate",
 8287 |           "invoiceItems",
 8288 |           "total",
 8289 |           "title",
 8290 |           "amountDue",
 8291 |           "createdAt",
 8292 |           "updatedAt"
 8293 |         ]
 8294 |       },
 8295 |       "TotalSummaryDto": {
 8296 |         "type": "object",
 8297 |         "properties": {
 8298 |           "subTotal": {
 8299 |             "type": "number",
 8300 |             "description": "subTotal",
 8301 |             "example": 999
 8302 |           },
 8303 |           "discount": {
 8304 |             "type": "number",
 8305 |             "description": "discount",
 8306 |             "example": 0
 8307 |           },
 8308 |           "tax": {
 8309 |             "type": "number",
 8310 |             "description": "tax",
 8311 |             "example": 0
 8312 |           }
 8313 |         },
 8314 |         "required": [
 8315 |           "subTotal",
 8316 |           "discount",
 8317 |           "tax"
 8318 |         ]
 8319 |       },
 8320 |       "ReminderExecutionDetailsList": {
 8321 |         "type": "object",
 8322 |         "properties": {}
 8323 |       },
 8324 |       "ReminderDto": {
 8325 |         "type": "object",
 8326 |         "properties": {
 8327 |           "enabled": {
 8328 |             "type": "boolean",
 8329 |             "description": "Flag indicating if the reminder is enabled or not",
 8330 |             "example": true
 8331 |           },
 8332 |           "emailTemplate": {
 8333 |             "type": "string",
 8334 |             "description": "Email template to be used for sending reminders",
 8335 |             "example": "default"
 8336 |           },
 8337 |           "smsTemplate": {
 8338 |             "type": "string",
 8339 |             "description": "SMS template to be used for sending reminders",
 8340 |             "example": "default"
 8341 |           },
 8342 |           "emailSubject": {
 8343 |             "type": "string",
 8344 |             "description": "Subject of the reminder",
 8345 |             "example": "Reminder"
 8346 |           },
 8347 |           "reminderId": {
 8348 |             "type": "string",
 8349 |             "description": "Unique identifier for the reminder",
 8350 |             "example": "9333e45f-a27d-4659-90e5-76c5ef06d094"
 8351 |           },
 8352 |           "reminderName": {
 8353 |             "type": "string",
 8354 |             "description": "Name of the reminder",
 8355 |             "example": "Special Reminder"
 8356 |           },
 8357 |           "reminderTime": {
 8358 |             "type": "string",
 8359 |             "description": "Time condition for the reminder",
 8360 |             "example": "before",
 8361 |             "enum": [
 8362 |               "before",
 8363 |               "after"
 8364 |             ]
 8365 |           },
 8366 |           "intervalType": {
 8367 |             "type": "string",
 8368 |             "description": "Interval type for the reminder",
 8369 |             "example": "daily",
 8370 |             "enum": [
 8371 |               "yearly",
 8372 |               "monthly",
 8373 |               "weekly",
 8374 |               "daily",
 8375 |               "hourly",
 8376 |               "minutely",
 8377 |               "secondly"
 8378 |             ]
 8379 |           },
 8380 |           "maxReminders": {
 8381 |             "type": "number",
 8382 |             "description": "Maximum number of reminders that can be sent",
 8383 |             "example": 3
 8384 |           },
 8385 |           "reminderInvoiceCondition": {
 8386 |             "type": "string",
 8387 |             "description": "Condition for sending the reminder",
 8388 |             "example": "invoice_sent",
 8389 |             "enum": [
 8390 |               "invoice_sent",
 8391 |               "invoice_overdue"
 8392 |             ]
 8393 |           },
 8394 |           "reminderNumber": {
 8395 |             "type": "number",
 8396 |             "description": "frequency gap of the reminder to exeucte",
 8397 |             "example": 10
 8398 |           },
 8399 |           "startTime": {
 8400 |             "type": "string",
 8401 |             "description": "Business Hour Start Time",
 8402 |             "example": "9:00 AM"
 8403 |           },
 8404 |           "endTime": {
 8405 |             "type": "string",
 8406 |             "description": "Business Hour End Time",
 8407 |             "example": "5:00 PM"
 8408 |           },
 8409 |           "timezone": {
 8410 |             "type": "string",
 8411 |             "description": "Timezone at which reminder will be sent",
 8412 |             "example": "businessTZ"
 8413 |           }
 8414 |         },
 8415 |         "required": [
 8416 |           "enabled",
 8417 |           "emailTemplate",
 8418 |           "smsTemplate",
 8419 |           "emailSubject",
 8420 |           "reminderId",
 8421 |           "reminderName",
 8422 |           "reminderTime",
 8423 |           "intervalType",
 8424 |           "maxReminders",
 8425 |           "reminderInvoiceCondition",
 8426 |           "reminderNumber"
 8427 |         ]
 8428 |       },
 8429 |       "ReminderSettingsDto": {
 8430 |         "type": "object",
 8431 |         "properties": {
 8432 |           "defaultEmailTemplateId": {
 8433 |             "type": "string",
 8434 |             "description": "default template Id of reminder",
 8435 |             "example": "dhwjqi2899012990w2u"
 8436 |           },
 8437 |           "reminders": {
 8438 |             "description": "List of reminders",
 8439 |             "type": "array",
 8440 |             "items": {
 8441 |               "$ref": "#/components/schemas/ReminderDto"
 8442 |             }
 8443 |           }
 8444 |         },
 8445 |         "required": [
 8446 |           "defaultEmailTemplateId",
 8447 |           "reminders"
 8448 |         ]
 8449 |       },
 8450 |       "RemindersConfigurationDto": {
 8451 |         "type": "object",
 8452 |         "properties": {
 8453 |           "reminderExecutionDetailsList": {
 8454 |             "description": "List of reminders",
 8455 |             "allOf": [
 8456 |               {
 8457 |                 "$ref": "#/components/schemas/ReminderExecutionDetailsList"
 8458 |               }
 8459 |             ]
 8460 |           },
 8461 |           "reminderSettings": {
 8462 |             "description": "Reminder settings",
 8463 |             "allOf": [
 8464 |               {
 8465 |                 "$ref": "#/components/schemas/ReminderSettingsDto"
 8466 |               }
 8467 |             ]
 8468 |           }
 8469 |         },
 8470 |         "required": [
 8471 |           "reminderExecutionDetailsList",
 8472 |           "reminderSettings"
 8473 |         ]
 8474 |       },
 8475 |       "GetInvoiceResponseDto": {
 8476 |         "type": "object",
 8477 |         "properties": {
 8478 |           "_id": {
 8479 |             "type": "string",
 8480 |             "description": "Invoice Id",
 8481 |             "example": "6578278e879ad2646715ba9c"
 8482 |           },
 8483 |           "status": {
 8484 |             "type": "string",
 8485 |             "description": "Invoice Status",
 8486 |             "example": "draft",
 8487 |             "enum": [
 8488 |               "draft",
 8489 |               "sent",
 8490 |               "payment_processing",
 8491 |               "paid",
 8492 |               "void",
 8493 |               "partially_paid"
 8494 |             ]
 8495 |           },
 8496 |           "liveMode": {
 8497 |             "type": "boolean",
 8498 |             "description": "Live Mode",
 8499 |             "example": false
 8500 |           },
 8501 |           "amountPaid": {
 8502 |             "type": "number",
 8503 |             "description": "Amount Paid",
 8504 |             "example": 0
 8505 |           },
 8506 |           "altId": {
 8507 |             "type": "string",
 8508 |             "description": "Location Id or Agency Id",
 8509 |             "example": "6578278e879ad2646715ba9c"
 8510 |           },
 8511 |           "altType": {
 8512 |             "type": "string",
 8513 |             "enum": [
 8514 |               "location"
 8515 |             ]
 8516 |           },
 8517 |           "name": {
 8518 |             "type": "string",
 8519 |             "description": "Name of the invoice",
 8520 |             "example": "New Invoice"
 8521 |           },
 8522 |           "businessDetails": {
 8523 |             "type": "object",
 8524 |             "description": "Business Details",
 8525 |             "example": {
 8526 |               "name": "Alex",
 8527 |               "address": {
 8528 |                 "addressLine1": "9931 Beechwood",
 8529 |                 "city": "St. Houston",
 8530 |                 "state": "TX",
 8531 |                 "countryCode": "USA",
 8532 |                 "postalCode": "559-6993"
 8533 |               },
 8534 |               "phoneNo": "+1-214-559-6993",
 8535 |               "website": "www.example.com"
 8536 |             }
 8537 |           },
 8538 |           "invoiceNumber": {
 8539 |             "type": "number",
 8540 |             "description": "Invoice Number",
 8541 |             "example": "19"
 8542 |           },
 8543 |           "currency": {
 8544 |             "type": "string",
 8545 |             "description": "Currency",
 8546 |             "example": "USD"
 8547 |           },
 8548 |           "contactDetails": {
 8549 |             "type": "object",
 8550 |             "description": "Contact Details",
 8551 |             "example": {
 8552 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 8553 |               "phoneNo": "+1-214-559-6993",
 8554 |               "email": "alex@example.com",
 8555 |               "customFields": [],
 8556 |               "name": "Alex",
 8557 |               "address": {
 8558 |                 "countryCode": "US"
 8559 |               }
 8560 |             }
 8561 |           },
 8562 |           "issueDate": {
 8563 |             "type": "string",
 8564 |             "description": "Issue date in YYYY-MM-DD format",
 8565 |             "example": "2023-01-01"
 8566 |           },
 8567 |           "dueDate": {
 8568 |             "type": "string",
 8569 |             "description": "Due date in YYYY-MM-DD format",
 8570 |             "example": "2023-01-01"
 8571 |           },
 8572 |           "discount": {
 8573 |             "type": "object",
 8574 |             "description": "Discount",
 8575 |             "example": {
 8576 |               "type": "percentage",
 8577 |               "value": 0
 8578 |             }
 8579 |           },
 8580 |           "invoiceItems": {
 8581 |             "description": "Invoice Items",
 8582 |             "example": [
 8583 |               {
 8584 |                 "taxes": [],
 8585 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 8586 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 8587 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 8588 |                 "currency": "USD",
 8589 |                 "name": "Macbook Pro",
 8590 |                 "qty": 1,
 8591 |                 "amount": 999
 8592 |               }
 8593 |             ],
 8594 |             "type": "array",
 8595 |             "items": {
 8596 |               "type": "string"
 8597 |             }
 8598 |           },
 8599 |           "total": {
 8600 |             "type": "number",
 8601 |             "description": "Total Amount",
 8602 |             "example": 999
 8603 |           },
 8604 |           "title": {
 8605 |             "type": "string",
 8606 |             "description": "Title",
 8607 |             "example": "INVOICE"
 8608 |           },
 8609 |           "amountDue": {
 8610 |             "type": "number",
 8611 |             "description": "Total Amount Due",
 8612 |             "example": 999
 8613 |           },
 8614 |           "createdAt": {
 8615 |             "type": "string",
 8616 |             "description": "created at",
 8617 |             "example": "2023-12-12T09:27:42.355Z"
 8618 |           },
 8619 |           "updatedAt": {
 8620 |             "type": "string",
 8621 |             "description": "updated at",
 8622 |             "example": "2023-12-12T09:27:42.355Z"
 8623 |           },
 8624 |           "automaticTaxesEnabled": {
 8625 |             "type": "boolean",
 8626 |             "description": "Automatic taxes enabled for the Invoice",
 8627 |             "example": true
 8628 |           },
 8629 |           "automaticTaxesCalculated": {
 8630 |             "type": "boolean",
 8631 |             "description": "Is Automatic taxes calculated for the Invoice items",
 8632 |             "example": true
 8633 |           },
 8634 |           "paymentSchedule": {
 8635 |             "type": "object",
 8636 |             "description": "split invoice into payment schedule summing up to full invoice amount"
 8637 |           },
 8638 |           "totalSummary": {
 8639 |             "$ref": "#/components/schemas/TotalSummaryDto"
 8640 |           },
 8641 |           "remindersConfiguration": {
 8642 |             "description": "Reminders Configuration",
 8643 |             "allOf": [
 8644 |               {
 8645 |                 "$ref": "#/components/schemas/RemindersConfigurationDto"
 8646 |               }
 8647 |             ]
 8648 |           }
 8649 |         },
 8650 |         "required": [
 8651 |           "_id",
 8652 |           "status",
 8653 |           "liveMode",
 8654 |           "amountPaid",
 8655 |           "altId",
 8656 |           "altType",
 8657 |           "name",
 8658 |           "businessDetails",
 8659 |           "invoiceNumber",
 8660 |           "currency",
 8661 |           "contactDetails",
 8662 |           "issueDate",
 8663 |           "dueDate",
 8664 |           "invoiceItems",
 8665 |           "total",
 8666 |           "title",
 8667 |           "amountDue",
 8668 |           "createdAt",
 8669 |           "updatedAt",
 8670 |           "totalSummary"
 8671 |         ]
 8672 |       },
 8673 |       "ListInvoicesResponseDto": {
 8674 |         "type": "object",
 8675 |         "properties": {
 8676 |           "invoices": {
 8677 |             "type": "array",
 8678 |             "items": {
 8679 |               "$ref": "#/components/schemas/GetInvoiceResponseDto"
 8680 |             }
 8681 |           },
 8682 |           "total": {
 8683 |             "type": "number",
 8684 |             "description": "Total number of invoices",
 8685 |             "example": 100
 8686 |           }
 8687 |         },
 8688 |         "required": [
 8689 |           "invoices",
 8690 |           "total"
 8691 |         ]
 8692 |       },
 8693 |       "UpdateInvoiceDto": {
 8694 |         "type": "object",
 8695 |         "properties": {
 8696 |           "altId": {
 8697 |             "type": "string",
 8698 |             "description": "location Id / company Id based on altType",
 8699 |             "example": "6578278e879ad2646715ba9c"
 8700 |           },
 8701 |           "altType": {
 8702 |             "type": "string",
 8703 |             "description": "Alt Type",
 8704 |             "enum": [
 8705 |               "location"
 8706 |             ],
 8707 |             "example": "location"
 8708 |           },
 8709 |           "name": {
 8710 |             "type": "string",
 8711 |             "description": "Name to be updated",
 8712 |             "example": "New Invoice"
 8713 |           },
 8714 |           "title": {
 8715 |             "type": "string",
 8716 |             "description": "Title for the invoice",
 8717 |             "example": "INVOICE"
 8718 |           },
 8719 |           "currency": {
 8720 |             "type": "string",
 8721 |             "description": "Currency",
 8722 |             "example": "USD"
 8723 |           },
 8724 |           "description": {
 8725 |             "type": "string",
 8726 |             "description": "Description",
 8727 |             "example": "ABC Corp payments"
 8728 |           },
 8729 |           "businessDetails": {
 8730 |             "description": "Business details which need to be updated",
 8731 |             "example": {
 8732 |               "name": "Alex",
 8733 |               "address": {
 8734 |                 "addressLine1": "9931 Beechwood",
 8735 |                 "city": "St. Houston",
 8736 |                 "state": "TX",
 8737 |                 "countryCode": "USA",
 8738 |                 "postalCode": "559-6993"
 8739 |               },
 8740 |               "phoneNo": "+1-214-559-6993",
 8741 |               "website": "www.example.com"
 8742 |             },
 8743 |             "allOf": [
 8744 |               {
 8745 |                 "$ref": "#/components/schemas/BusinessDetailsDto"
 8746 |               }
 8747 |             ]
 8748 |           },
 8749 |           "invoiceNumber": {
 8750 |             "type": "string",
 8751 |             "description": "Invoice Number",
 8752 |             "example": "1001"
 8753 |           },
 8754 |           "contactId": {
 8755 |             "type": "string",
 8756 |             "description": "Id of the contact which you need to send the invoice",
 8757 |             "example": "6578278e879ad2646715ba9c"
 8758 |           },
 8759 |           "contactDetails": {
 8760 |             "$ref": "#/components/schemas/ContactDetailsDto"
 8761 |           },
 8762 |           "termsNotes": {
 8763 |             "type": "string",
 8764 |             "description": "Terms notes, Also supports HTML markups",
 8765 |             "example": "<p>This is a default terms.</p>"
 8766 |           },
 8767 |           "discount": {
 8768 |             "$ref": "#/components/schemas/DiscountDto"
 8769 |           },
 8770 |           "invoiceItems": {
 8771 |             "type": "array",
 8772 |             "items": {
 8773 |               "$ref": "#/components/schemas/InvoiceItemDto"
 8774 |             }
 8775 |           },
 8776 |           "automaticTaxesEnabled": {
 8777 |             "type": "boolean",
 8778 |             "description": "Automatic taxes enabled for the Invoice",
 8779 |             "example": true
 8780 |           },
 8781 |           "liveMode": {
 8782 |             "type": "boolean",
 8783 |             "description": "Payment mode"
 8784 |           },
 8785 |           "issueDate": {
 8786 |             "type": "string",
 8787 |             "description": "Issue date in YYYY-MM-DD format",
 8788 |             "example": "2023-01-01"
 8789 |           },
 8790 |           "dueDate": {
 8791 |             "type": "string",
 8792 |             "description": "Due date in YYYY-MM-DD format",
 8793 |             "example": "2023-01-14"
 8794 |           },
 8795 |           "paymentSchedule": {
 8796 |             "description": "split invoice into payment schedule summing up to full invoice amount",
 8797 |             "allOf": [
 8798 |               {
 8799 |                 "$ref": "#/components/schemas/PaymentScheduleDto"
 8800 |               }
 8801 |             ]
 8802 |           },
 8803 |           "tipsConfiguration": {
 8804 |             "description": "tips configuration for the invoice",
 8805 |             "allOf": [
 8806 |               {
 8807 |                 "$ref": "#/components/schemas/TipsConfigurationDto"
 8808 |               }
 8809 |             ]
 8810 |           },
 8811 |           "xeroDetails": {
 8812 |             "type": "object"
 8813 |           },
 8814 |           "invoiceNumberPrefix": {
 8815 |             "type": "string",
 8816 |             "description": "prefix for invoice number",
 8817 |             "example": "INV-"
 8818 |           },
 8819 |           "paymentMethods": {
 8820 |             "description": "Payment Methods for Invoices",
 8821 |             "allOf": [
 8822 |               {
 8823 |                 "$ref": "#/components/schemas/PaymentMethodDto"
 8824 |               }
 8825 |             ]
 8826 |           },
 8827 |           "attachments": {
 8828 |             "description": "attachments for the invoice",
 8829 |             "type": "array",
 8830 |             "items": {
 8831 |               "$ref": "#/components/schemas/AttachmentsDto"
 8832 |             }
 8833 |           }
 8834 |         },
 8835 |         "required": [
 8836 |           "altId",
 8837 |           "altType",
 8838 |           "name",
 8839 |           "currency",
 8840 |           "invoiceItems",
 8841 |           "issueDate",
 8842 |           "dueDate"
 8843 |         ]
 8844 |       },
 8845 |       "UpdateInvoiceResponseDto": {
 8846 |         "type": "object",
 8847 |         "properties": {
 8848 |           "_id": {
 8849 |             "type": "string",
 8850 |             "description": "Invoice Id",
 8851 |             "example": "6578278e879ad2646715ba9c"
 8852 |           },
 8853 |           "status": {
 8854 |             "type": "string",
 8855 |             "description": "Invoice Status",
 8856 |             "example": "draft",
 8857 |             "enum": [
 8858 |               "draft",
 8859 |               "sent",
 8860 |               "payment_processing",
 8861 |               "paid",
 8862 |               "void",
 8863 |               "partially_paid"
 8864 |             ]
 8865 |           },
 8866 |           "liveMode": {
 8867 |             "type": "boolean",
 8868 |             "description": "Live Mode",
 8869 |             "example": false
 8870 |           },
 8871 |           "amountPaid": {
 8872 |             "type": "number",
 8873 |             "description": "Amount Paid",
 8874 |             "example": 0
 8875 |           },
 8876 |           "altId": {
 8877 |             "type": "string",
 8878 |             "description": "Location Id or Agency Id",
 8879 |             "example": "6578278e879ad2646715ba9c"
 8880 |           },
 8881 |           "altType": {
 8882 |             "type": "string",
 8883 |             "enum": [
 8884 |               "location"
 8885 |             ]
 8886 |           },
 8887 |           "name": {
 8888 |             "type": "string",
 8889 |             "description": "Name of the invoice",
 8890 |             "example": "New Invoice"
 8891 |           },
 8892 |           "businessDetails": {
 8893 |             "type": "object",
 8894 |             "description": "Business Details",
 8895 |             "example": {
 8896 |               "name": "Alex",
 8897 |               "address": {
 8898 |                 "addressLine1": "9931 Beechwood",
 8899 |                 "city": "St. Houston",
 8900 |                 "state": "TX",
 8901 |                 "countryCode": "USA",
 8902 |                 "postalCode": "559-6993"
 8903 |               },
 8904 |               "phoneNo": "+1-214-559-6993",
 8905 |               "website": "www.example.com"
 8906 |             }
 8907 |           },
 8908 |           "invoiceNumber": {
 8909 |             "type": "number",
 8910 |             "description": "Invoice Number",
 8911 |             "example": "19"
 8912 |           },
 8913 |           "currency": {
 8914 |             "type": "string",
 8915 |             "description": "Currency",
 8916 |             "example": "USD"
 8917 |           },
 8918 |           "contactDetails": {
 8919 |             "type": "object",
 8920 |             "description": "Contact Details",
 8921 |             "example": {
 8922 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 8923 |               "phoneNo": "+1-214-559-6993",
 8924 |               "email": "alex@example.com",
 8925 |               "customFields": [],
 8926 |               "name": "Alex",
 8927 |               "address": {
 8928 |                 "countryCode": "US"
 8929 |               }
 8930 |             }
 8931 |           },
 8932 |           "issueDate": {
 8933 |             "type": "string",
 8934 |             "description": "Issue date in YYYY-MM-DD format",
 8935 |             "example": "2023-01-01"
 8936 |           },
 8937 |           "dueDate": {
 8938 |             "type": "string",
 8939 |             "description": "Due date in YYYY-MM-DD format",
 8940 |             "example": "2023-01-01"
 8941 |           },
 8942 |           "discount": {
 8943 |             "type": "object",
 8944 |             "description": "Discount",
 8945 |             "example": {
 8946 |               "type": "percentage",
 8947 |               "value": 0
 8948 |             }
 8949 |           },
 8950 |           "invoiceItems": {
 8951 |             "description": "Invoice Items",
 8952 |             "example": [
 8953 |               {
 8954 |                 "taxes": [],
 8955 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 8956 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 8957 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 8958 |                 "currency": "USD",
 8959 |                 "name": "Macbook Pro",
 8960 |                 "qty": 1,
 8961 |                 "amount": 999
 8962 |               }
 8963 |             ],
 8964 |             "type": "array",
 8965 |             "items": {
 8966 |               "type": "string"
 8967 |             }
 8968 |           },
 8969 |           "total": {
 8970 |             "type": "number",
 8971 |             "description": "Total Amount",
 8972 |             "example": 999
 8973 |           },
 8974 |           "title": {
 8975 |             "type": "string",
 8976 |             "description": "Title",
 8977 |             "example": "INVOICE"
 8978 |           },
 8979 |           "amountDue": {
 8980 |             "type": "number",
 8981 |             "description": "Total Amount Due",
 8982 |             "example": 999
 8983 |           },
 8984 |           "createdAt": {
 8985 |             "type": "string",
 8986 |             "description": "created at",
 8987 |             "example": "2023-12-12T09:27:42.355Z"
 8988 |           },
 8989 |           "updatedAt": {
 8990 |             "type": "string",
 8991 |             "description": "updated at",
 8992 |             "example": "2023-12-12T09:27:42.355Z"
 8993 |           },
 8994 |           "automaticTaxesEnabled": {
 8995 |             "type": "boolean",
 8996 |             "description": "Automatic taxes enabled for the Invoice",
 8997 |             "example": true
 8998 |           },
 8999 |           "automaticTaxesCalculated": {
 9000 |             "type": "boolean",
 9001 |             "description": "Is Automatic taxes calculated for the Invoice items",
 9002 |             "example": true
 9003 |           },
 9004 |           "paymentSchedule": {
 9005 |             "type": "object",
 9006 |             "description": "split invoice into payment schedule summing up to full invoice amount"
 9007 |           }
 9008 |         },
 9009 |         "required": [
 9010 |           "_id",
 9011 |           "status",
 9012 |           "liveMode",
 9013 |           "amountPaid",
 9014 |           "altId",
 9015 |           "altType",
 9016 |           "name",
 9017 |           "businessDetails",
 9018 |           "invoiceNumber",
 9019 |           "currency",
 9020 |           "contactDetails",
 9021 |           "issueDate",
 9022 |           "dueDate",
 9023 |           "invoiceItems",
 9024 |           "total",
 9025 |           "title",
 9026 |           "amountDue",
 9027 |           "createdAt",
 9028 |           "updatedAt"
 9029 |         ]
 9030 |       },
 9031 |       "DeleteInvoiceResponseDto": {
 9032 |         "type": "object",
 9033 |         "properties": {
 9034 |           "_id": {
 9035 |             "type": "string",
 9036 |             "description": "Invoice Id",
 9037 |             "example": "6578278e879ad2646715ba9c"
 9038 |           },
 9039 |           "status": {
 9040 |             "type": "string",
 9041 |             "description": "Invoice Status",
 9042 |             "example": "draft",
 9043 |             "enum": [
 9044 |               "draft",
 9045 |               "sent",
 9046 |               "payment_processing",
 9047 |               "paid",
 9048 |               "void",
 9049 |               "partially_paid"
 9050 |             ]
 9051 |           },
 9052 |           "liveMode": {
 9053 |             "type": "boolean",
 9054 |             "description": "Live Mode",
 9055 |             "example": false
 9056 |           },
 9057 |           "amountPaid": {
 9058 |             "type": "number",
 9059 |             "description": "Amount Paid",
 9060 |             "example": 0
 9061 |           },
 9062 |           "altId": {
 9063 |             "type": "string",
 9064 |             "description": "Location Id or Agency Id",
 9065 |             "example": "6578278e879ad2646715ba9c"
 9066 |           },
 9067 |           "altType": {
 9068 |             "type": "string",
 9069 |             "enum": [
 9070 |               "location"
 9071 |             ]
 9072 |           },
 9073 |           "name": {
 9074 |             "type": "string",
 9075 |             "description": "Name of the invoice",
 9076 |             "example": "New Invoice"
 9077 |           },
 9078 |           "businessDetails": {
 9079 |             "type": "object",
 9080 |             "description": "Business Details",
 9081 |             "example": {
 9082 |               "name": "Alex",
 9083 |               "address": {
 9084 |                 "addressLine1": "9931 Beechwood",
 9085 |                 "city": "St. Houston",
 9086 |                 "state": "TX",
 9087 |                 "countryCode": "USA",
 9088 |                 "postalCode": "559-6993"
 9089 |               },
 9090 |               "phoneNo": "+1-214-559-6993",
 9091 |               "website": "www.example.com"
 9092 |             }
 9093 |           },
 9094 |           "invoiceNumber": {
 9095 |             "type": "number",
 9096 |             "description": "Invoice Number",
 9097 |             "example": "19"
 9098 |           },
 9099 |           "currency": {
 9100 |             "type": "string",
 9101 |             "description": "Currency",
 9102 |             "example": "USD"
 9103 |           },
 9104 |           "contactDetails": {
 9105 |             "type": "object",
 9106 |             "description": "Contact Details",
 9107 |             "example": {
 9108 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 9109 |               "phoneNo": "+1-214-559-6993",
 9110 |               "email": "alex@example.com",
 9111 |               "customFields": [],
 9112 |               "name": "Alex",
 9113 |               "address": {
 9114 |                 "countryCode": "US"
 9115 |               }
 9116 |             }
 9117 |           },
 9118 |           "issueDate": {
 9119 |             "type": "string",
 9120 |             "description": "Issue date in YYYY-MM-DD format",
 9121 |             "example": "2023-01-01"
 9122 |           },
 9123 |           "dueDate": {
 9124 |             "type": "string",
 9125 |             "description": "Due date in YYYY-MM-DD format",
 9126 |             "example": "2023-01-01"
 9127 |           },
 9128 |           "discount": {
 9129 |             "type": "object",
 9130 |             "description": "Discount",
 9131 |             "example": {
 9132 |               "type": "percentage",
 9133 |               "value": 0
 9134 |             }
 9135 |           },
 9136 |           "invoiceItems": {
 9137 |             "description": "Invoice Items",
 9138 |             "example": [
 9139 |               {
 9140 |                 "taxes": [],
 9141 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 9142 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 9143 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 9144 |                 "currency": "USD",
 9145 |                 "name": "Macbook Pro",
 9146 |                 "qty": 1,
 9147 |                 "amount": 999
 9148 |               }
 9149 |             ],
 9150 |             "type": "array",
 9151 |             "items": {
 9152 |               "type": "string"
 9153 |             }
 9154 |           },
 9155 |           "total": {
 9156 |             "type": "number",
 9157 |             "description": "Total Amount",
 9158 |             "example": 999
 9159 |           },
 9160 |           "title": {
 9161 |             "type": "string",
 9162 |             "description": "Title",
 9163 |             "example": "INVOICE"
 9164 |           },
 9165 |           "amountDue": {
 9166 |             "type": "number",
 9167 |             "description": "Total Amount Due",
 9168 |             "example": 999
 9169 |           },
 9170 |           "createdAt": {
 9171 |             "type": "string",
 9172 |             "description": "created at",
 9173 |             "example": "2023-12-12T09:27:42.355Z"
 9174 |           },
 9175 |           "updatedAt": {
 9176 |             "type": "string",
 9177 |             "description": "updated at",
 9178 |             "example": "2023-12-12T09:27:42.355Z"
 9179 |           },
 9180 |           "automaticTaxesEnabled": {
 9181 |             "type": "boolean",
 9182 |             "description": "Automatic taxes enabled for the Invoice",
 9183 |             "example": true
 9184 |           },
 9185 |           "automaticTaxesCalculated": {
 9186 |             "type": "boolean",
 9187 |             "description": "Is Automatic taxes calculated for the Invoice items",
 9188 |             "example": true
 9189 |           },
 9190 |           "paymentSchedule": {
 9191 |             "type": "object",
 9192 |             "description": "split invoice into payment schedule summing up to full invoice amount"
 9193 |           }
 9194 |         },
 9195 |         "required": [
 9196 |           "_id",
 9197 |           "status",
 9198 |           "liveMode",
 9199 |           "amountPaid",
 9200 |           "altId",
 9201 |           "altType",
 9202 |           "name",
 9203 |           "businessDetails",
 9204 |           "invoiceNumber",
 9205 |           "currency",
 9206 |           "contactDetails",
 9207 |           "issueDate",
 9208 |           "dueDate",
 9209 |           "invoiceItems",
 9210 |           "total",
 9211 |           "title",
 9212 |           "amountDue",
 9213 |           "createdAt",
 9214 |           "updatedAt"
 9215 |         ]
 9216 |       },
 9217 |       "VoidInvoiceDto": {
 9218 |         "type": "object",
 9219 |         "properties": {
 9220 |           "altId": {
 9221 |             "type": "string",
 9222 |             "description": "location Id / company Id based on altType",
 9223 |             "example": "6578278e879ad2646715ba9c"
 9224 |           },
 9225 |           "altType": {
 9226 |             "type": "string",
 9227 |             "description": "Alt Type",
 9228 |             "enum": [
 9229 |               "location"
 9230 |             ],
 9231 |             "example": "location"
 9232 |           }
 9233 |         },
 9234 |         "required": [
 9235 |           "altId",
 9236 |           "altType"
 9237 |         ]
 9238 |       },
 9239 |       "VoidInvoiceResponseDto": {
 9240 |         "type": "object",
 9241 |         "properties": {
 9242 |           "_id": {
 9243 |             "type": "string",
 9244 |             "description": "Invoice Id",
 9245 |             "example": "6578278e879ad2646715ba9c"
 9246 |           },
 9247 |           "status": {
 9248 |             "type": "string",
 9249 |             "description": "Invoice Status",
 9250 |             "example": "draft",
 9251 |             "enum": [
 9252 |               "draft",
 9253 |               "sent",
 9254 |               "payment_processing",
 9255 |               "paid",
 9256 |               "void",
 9257 |               "partially_paid"
 9258 |             ]
 9259 |           },
 9260 |           "liveMode": {
 9261 |             "type": "boolean",
 9262 |             "description": "Live Mode",
 9263 |             "example": false
 9264 |           },
 9265 |           "amountPaid": {
 9266 |             "type": "number",
 9267 |             "description": "Amount Paid",
 9268 |             "example": 0
 9269 |           },
 9270 |           "altId": {
 9271 |             "type": "string",
 9272 |             "description": "Location Id or Agency Id",
 9273 |             "example": "6578278e879ad2646715ba9c"
 9274 |           },
 9275 |           "altType": {
 9276 |             "type": "string",
 9277 |             "enum": [
 9278 |               "location"
 9279 |             ]
 9280 |           },
 9281 |           "name": {
 9282 |             "type": "string",
 9283 |             "description": "Name of the invoice",
 9284 |             "example": "New Invoice"
 9285 |           },
 9286 |           "businessDetails": {
 9287 |             "type": "object",
 9288 |             "description": "Business Details",
 9289 |             "example": {
 9290 |               "name": "Alex",
 9291 |               "address": {
 9292 |                 "addressLine1": "9931 Beechwood",
 9293 |                 "city": "St. Houston",
 9294 |                 "state": "TX",
 9295 |                 "countryCode": "USA",
 9296 |                 "postalCode": "559-6993"
 9297 |               },
 9298 |               "phoneNo": "+1-214-559-6993",
 9299 |               "website": "www.example.com"
 9300 |             }
 9301 |           },
 9302 |           "invoiceNumber": {
 9303 |             "type": "number",
 9304 |             "description": "Invoice Number",
 9305 |             "example": "19"
 9306 |           },
 9307 |           "currency": {
 9308 |             "type": "string",
 9309 |             "description": "Currency",
 9310 |             "example": "USD"
 9311 |           },
 9312 |           "contactDetails": {
 9313 |             "type": "object",
 9314 |             "description": "Contact Details",
 9315 |             "example": {
 9316 |               "id": "c6tZZU0rJBf30ZXx9Gli",
 9317 |               "phoneNo": "+1-214-559-6993",
 9318 |               "email": "alex@example.com",
 9319 |               "customFields": [],
 9320 |               "name": "Alex",
 9321 |               "address": {
 9322 |                 "countryCode": "US"
 9323 |               }
 9324 |             }
 9325 |           },
 9326 |           "issueDate": {
 9327 |             "type": "string",
 9328 |             "description": "Issue date in YYYY-MM-DD format",
 9329 |             "example": "2023-01-01"
 9330 |           },
 9331 |           "dueDate": {
 9332 |             "type": "string",
 9333 |             "description": "Due date in YYYY-MM-DD format",
 9334 |             "example": "2023-01-01"
 9335 |           },
 9336 |           "discount": {
 9337 |             "type": "object",
 9338 |             "description": "Discount",
 9339 |             "example": {
 9340 |               "type": "percentage",
 9341 |               "value": 0
 9342 |             }
 9343 |           },
 9344 |           "invoiceItems": {
 9345 |             "description": "Invoice Items",
 9346 |             "example": [
 9347 |               {
 9348 |                 "taxes": [],
 9349 |                 "_id": "c6tZZU0rJBf30ZXx9Gli",
 9350 |                 "productId": "c6tZZU0rJBf30ZXx9Gli",
 9351 |                 "priceId": "c6tZZU0rJBf30ZXx9Gli",
 9352 |                 "currency": "USD",
 9353 |                 "name": "Macbook Pro",
 9354 |                 "qty": 1,
 9355 |                 "amount": 999
 9356 |               }
 9357 |             ],
 9358 |             "type": "array",
 9359 |             "items": {
 9360 |               "type": "string"
 9361 |             }
 9362 |           },
 9363 |           "total": {
 9364 |             "type": "number",
 9365 |             "description": "Total Amount",
 9366 |             "example": 999
 9367 |           },
 9368 |           "title": {
 9369 |             "type": "string",
 9370 |             "description": "Title",
 9371 |             "example": "INVOICE"
 9372 |           },
 9373 |           "amountDue": {
 9374 |             "type": "number",
 9375 |             "description": "Total Amount Due",
 9376 |             "example": 999
 9377 |           },
 9378 |           "createdAt": {
 9379 |             "type": "string",
 9380 |             "description": "created at",
 9381 |             "example": "2023-12-12T09:27:42.355Z"
 9382 |           },
 9383 |           "updatedAt": {
 9384 |             "type": "string",
 9385 |             "description": "updated at",
 9386 |             "example": "2023-12-12T09:27:42.355Z"
 9387 |           },
 9388 |           "automaticTaxesEnabled": {
 9389 |             "type": "boolean",
 9390 |             "description": "Automatic taxes enabled for the Invoice",
 9391 |             "example": true
 9392 |           },
 9393 |           "automaticTaxesCalculated": {
 9394 |             "type": "boolean",
 9395 |             "description": "Is Automatic taxes calculated for the Invoice items",
 9396 |             "example": true
 9397 |           },
 9398 |           "paymentSchedule": {
 9399 |             "type": "object",
 9400 |             "description": "split invoice into payment schedule summing up to full invoice amount"
 9401 |           }
 9402 |         },
 9403 |         "required": [
 9404 |           "_id",
 9405 |           "status",
 9406 |           "liveMode",
 9407 |           "amountPaid",
 9408 |           "altId",
 9409 |           "altType",
 9410 |           "name",
 9411 |           "businessDetails",
 9412 |           "invoiceNumber",
 9413 |           "currency",
 9414 |           "contactDetails",
 9415 |           "issueDate",
 9416 |           "dueDate",
 9417 |           "invoiceItems",
 9418 |           "total",
 9419 |           "title",
 9420 |           "amountDue",
 9421 |           "createdAt",
 9422 |           "updatedAt"
 9423 |         ]
 9424 |       },
 9425 |       "InvoiceSettingsSenderConfigurationDto": {
 9426 |         "type": "object",
 9427 |         "properties": {
 9428 |           "fromName": {
 9429 |             "type": "string",
 9430 |             "description": "Sender name to be used while sending invoice",
 9431 |             "example": "Alex"
 9432 |           },
 9433 |           "fromEmail": {
 9434 |             "type": "string",
 9435 |             "description": "Email id to be used while sending out invoices",
 9436 |             "example": "alex@example.com"
 9437 |           }
 9438 |         }
 9439 |       },
 9440 |       "SendInvoiceDto": {
 9441 |         "type": "object",
 9442 |         "properties": {
 9443 |           "altId": {
 9444 |             "type": "string",
 9445 |             "description": "location Id / company Id based on altType",
 9446 |             "example": "6578278e879ad2646715ba9c"
 9447 |           },
 9448 |           "altType": {
 9449 |             "type": "string",
 9450 |             "description": "Alt Type",
 9451 |             "enum": [
 9452 |               "location"
 9453 |             ],
 9454 |             "example": "location"
 9455 |           },
 9456 |           "userId": {
 9457 |             "type": "string",
 9458 |             "description": "Please ensure that the UserId corresponds to an authorized personnel, either by an employee ID or agency ID, to access this location. This account will serve as the primary channel for all future communications and updates.",
 9459 |             "example": "6578278e879ad2646715ba9c"
 9460 |           },
 9461 |           "action": {
 9462 |             "type": "string",
 9463 |             "enum": [
 9464 |               "sms_and_email",
 9465 |               "send_manually",
 9466 |               "email",
 9467 |               "sms"
 9468 |             ]
 9469 |           },
 9470 |           "liveMode": {
 9471 |             "type": "boolean"
 9472 |           },
 9473 |           "sentFrom": {
 9474 |             "description": "sender details for invoice, valid only if invoice is not sent manually",
 9475 |             "allOf": [
 9476 |               {
 9477 |                 "$ref": "#/components/schemas/InvoiceSettingsSenderConfigurationDto"
 9478 |               }
 9479 |             ]
 9480 |           },
 9481 |           "autoPayment": {
 9482 |             "description": "auto-payment configuration",
 9483 |             "allOf": [
 9484 |               {
 9485 |                 "$ref": "#/components/schemas/AutoPaymentDetailsDto"
 9486 |               }
 9487 |             ]
 9488 |           }
 9489 |         },
 9490 |         "required": [
 9491 |           "altId",
 9492 |           "altType",
 9493 |           "userId",
 9494 |           "action",
 9495 |           "liveMode"
 9496 |         ]
 9497 |       },
 9498 |       "SendInvoicesResponseDto": {
 9499 |         "type": "object",
 9500 |         "properties": {
 9501 |           "invoice": {
 9502 |             "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 9503 |           },
 9504 |           "smsData": {
 9505 |             "type": "object"
 9506 |           },
 9507 |           "emailData": {
 9508 |             "type": "object"
 9509 |           }
 9510 |         },
 9511 |         "required": [
 9512 |           "invoice",
 9513 |           "smsData",
 9514 |           "emailData"
 9515 |         ]
 9516 |       },
 9517 |       "ChequeDto": {
 9518 |         "type": "object",
 9519 |         "properties": {
 9520 |           "number": {
 9521 |             "type": "string",
 9522 |             "description": "check number",
 9523 |             "example": "129-129-129-912"
 9524 |           }
 9525 |         },
 9526 |         "required": [
 9527 |           "number"
 9528 |         ]
 9529 |       },
 9530 |       "RecordPaymentDto": {
 9531 |         "type": "object",
 9532 |         "properties": {
 9533 |           "altId": {
 9534 |             "type": "string",
 9535 |             "description": "location Id / company Id based on altType",
 9536 |             "example": "6578278e879ad2646715ba9c"
 9537 |           },
 9538 |           "altType": {
 9539 |             "type": "string",
 9540 |             "description": "Alt Type",
 9541 |             "enum": [
 9542 |               "location"
 9543 |             ],
 9544 |             "example": "location"
 9545 |           },
 9546 |           "mode": {
 9547 |             "type": "string",
 9548 |             "description": "manual payment method",
 9549 |             "enum": [
 9550 |               "cash",
 9551 |               "card",
 9552 |               "cheque",
 9553 |               "bank_transfer",
 9554 |               "other"
 9555 |             ],
 9556 |             "example": "card"
 9557 |           },
 9558 |           "card": {
 9559 |             "$ref": "#/components/schemas/CardDto"
 9560 |           },
 9561 |           "cheque": {
 9562 |             "$ref": "#/components/schemas/ChequeDto"
 9563 |           },
 9564 |           "notes": {
 9565 |             "type": "string",
 9566 |             "description": "Any note to be recorded with the transaction",
 9567 |             "example": "This was a direct payment"
 9568 |           },
 9569 |           "amount": {
 9570 |             "type": "number",
 9571 |             "description": "Amount to be paid against the invoice.",
 9572 |             "example": 999
 9573 |           },
 9574 |           "meta": {
 9575 |             "type": "object"
 9576 |           },
 9577 |           "paymentScheduleIds": {
 9578 |             "description": "Payment Schedule Ids to be recorded against the invoice.",
 9579 |             "example": [
 9580 |               "6578278e879ad2646715ba9c"
 9581 |             ],
 9582 |             "type": "array",
 9583 |             "items": {
 9584 |               "type": "string"
 9585 |             }
 9586 |           }
 9587 |         },
 9588 |         "required": [
 9589 |           "altId",
 9590 |           "altType",
 9591 |           "mode",
 9592 |           "card",
 9593 |           "cheque",
 9594 |           "notes"
 9595 |         ]
 9596 |       },
 9597 |       "RecordPaymentResponseDto": {
 9598 |         "type": "object",
 9599 |         "properties": {
 9600 |           "success": {
 9601 |             "type": "boolean",
 9602 |             "description": "status",
 9603 |             "example": true
 9604 |           },
 9605 |           "invoice": {
 9606 |             "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
 9607 |           }
 9608 |         },
 9609 |         "required": [
 9610 |           "success",
 9611 |           "invoice"
 9612 |         ]
 9613 |       },
 9614 |       "PatchInvoiceStatsLastViewedDto": {
 9615 |         "type": "object",
 9616 |         "properties": {
 9617 |           "invoiceId": {
 9618 |             "type": "string",
 9619 |             "description": "Invoice Id",
 9620 |             "example": "6578278e879ad2646715ba9c"
 9621 |           }
 9622 |         },
 9623 |         "required": [
 9624 |           "invoiceId"
 9625 |         ]
 9626 |       },
 9627 |       "SendEstimateDto": {
 9628 |         "type": "object",
 9629 |         "properties": {
 9630 |           "altId": {
 9631 |             "type": "string",
 9632 |             "description": "Location Id or Agency Id",
 9633 |             "example": "6578278e879ad2646715ba9c"
 9634 |           },
 9635 |           "altType": {
 9636 |             "type": "string",
 9637 |             "enum": [
 9638 |               "location"
 9639 |             ]
 9640 |           },
 9641 |           "action": {
 9642 |             "type": "string",
 9643 |             "enum": [
 9644 |               "sms_and_email",
 9645 |               "send_manually",
 9646 |               "email",
 9647 |               "sms"
 9648 |             ]
 9649 |           },
 9650 |           "liveMode": {
 9651 |             "type": "boolean",
 9652 |             "description": "livemode for estimate",
 9653 |             "example": true
 9654 |           },
 9655 |           "userId": {
 9656 |             "type": "string",
 9657 |             "description": "Please ensure that the UserId corresponds to an authorized personnel, either by an employee ID or agency ID, to access this location. This account will serve as the primary channel for all future communications and updates.",
 9658 |             "example": "6578278e879ad2646715ba9c"
 9659 |           },
 9660 |           "sentFrom": {
 9661 |             "description": "sender details for invoice, valid only if invoice is not sent manually",
 9662 |             "allOf": [
 9663 |               {
 9664 |                 "$ref": "#/components/schemas/InvoiceSettingsSenderConfigurationDto"
 9665 |               }
 9666 |             ]
 9667 |           },
 9668 |           "estimateName": {
 9669 |             "type": "string",
 9670 |             "description": "estimate name",
 9671 |             "example": "Estimate"
 9672 |           }
 9673 |         },
 9674 |         "required": [
 9675 |           "altId",
 9676 |           "altType",
 9677 |           "action",
 9678 |           "liveMode",
 9679 |           "userId"
 9680 |         ]
 9681 |       },
 9682 |       "FrequencySettingsDto": {
 9683 |         "type": "object",
 9684 |         "properties": {
 9685 |           "enabled": {
 9686 |             "type": "boolean",
 9687 |             "description": "enabled for the frequency settings",
 9688 |             "example": true
 9689 |           },
 9690 |           "schedule": {
 9691 |             "description": "schedule setting for the estimate",
 9692 |             "allOf": [
 9693 |               {
 9694 |                 "$ref": "#/components/schemas/ScheduleOptionsDto"
 9695 |               }
 9696 |             ]
 9697 |           }
 9698 |         },
 9699 |         "required": [
 9700 |           "enabled",
 9701 |           "schedule"
 9702 |         ]
 9703 |       },
 9704 |       "AutoInvoicingDto": {
 9705 |         "type": "object",
 9706 |         "properties": {
 9707 |           "enabled": {
 9708 |             "type": "boolean",
 9709 |             "description": "Enable Auto Invoice",
 9710 |             "example": true
 9711 |           },
 9712 |           "directPayments": {
 9713 |             "type": "boolean",
 9714 |             "description": "Direct Payments",
 9715 |             "example": true
 9716 |           }
 9717 |         },
 9718 |         "required": [
 9719 |           "enabled"
 9720 |         ]
 9721 |       },
 9722 |       "CreateEstimatesDto": {
 9723 |         "type": "object",
 9724 |         "properties": {
 9725 |           "altId": {
 9726 |             "type": "string",
 9727 |             "description": "Location Id or Agency Id",
 9728 |             "example": "6578278e879ad2646715ba9c"
 9729 |           },
 9730 |           "altType": {
 9731 |             "type": "string",
 9732 |             "enum": [
 9733 |               "location"
 9734 |             ]
 9735 |           },
 9736 |           "name": {
 9737 |             "type": "string",
 9738 |             "description": "Estimate Name",
 9739 |             "example": "Home Service Estimate"
 9740 |           },
 9741 |           "businessDetails": {
 9742 |             "$ref": "#/components/schemas/BusinessDetailsDto"
 9743 |           },
 9744 |           "currency": {
 9745 |             "type": "string",
 9746 |             "description": "Currency code",
 9747 |             "example": "USD"
 9748 |           },
 9749 |           "items": {
 9750 |             "description": "An array of items for the estimate.",
 9751 |             "type": "array",
 9752 |             "items": {
 9753 |               "$ref": "#/components/schemas/InvoiceItemDto"
 9754 |             }
 9755 |           },
 9756 |           "liveMode": {
 9757 |             "type": "boolean",
 9758 |             "description": "livemode for estimate",
 9759 |             "example": true,
 9760 |             "default": true
 9761 |           },
 9762 |           "discount": {
 9763 |             "$ref": "#/components/schemas/DiscountDto"
 9764 |           },
 9765 |           "termsNotes": {
 9766 |             "type": "string",
 9767 |             "description": "Terms notes, Also supports HTML markups",
 9768 |             "example": "<p>This is a default terms.</p>"
 9769 |           },
 9770 |           "title": {
 9771 |             "type": "string",
 9772 |             "description": "Title for the estimate",
 9773 |             "example": "ESTIMATE"
 9774 |           },
 9775 |           "contactDetails": {
 9776 |             "description": "Contact information to send the estimate to",
 9777 |             "allOf": [
 9778 |               {
 9779 |                 "$ref": "#/components/schemas/ContactDetailsDto"
 9780 |               }
 9781 |             ]
 9782 |           },
 9783 |           "estimateNumber": {
 9784 |             "type": "number",
 9785 |             "description": "Estimate Number, if not specified will take in the next valid estimate number",
 9786 |             "example": 1001
 9787 |           },
 9788 |           "issueDate": {
 9789 |             "type": "string",
 9790 |             "description": "issue date estimate",
 9791 |             "example": "2024-08-07"
 9792 |           },
 9793 |           "expiryDate": {
 9794 |             "type": "string",
 9795 |             "description": "expiry date estimate",
 9796 |             "example": "2024-08-10"
 9797 |           },
 9798 |           "sentTo": {
 9799 |             "description": "Email and sent to details for the estimate",
 9800 |             "allOf": [
 9801 |               {
 9802 |                 "$ref": "#/components/schemas/SentToDto"
 9803 |               }
 9804 |             ]
 9805 |           },
 9806 |           "automaticTaxesEnabled": {
 9807 |             "type": "boolean",
 9808 |             "description": "Automatic taxes enabled for the Estimate",
 9809 |             "example": true,
 9810 |             "default": false
 9811 |           },
 9812 |           "meta": {
 9813 |             "type": "object",
 9814 |             "description": "Meta data for the estimate",
 9815 |             "example": {
 9816 |               "key": "value"
 9817 |             }
 9818 |           },
 9819 |           "sendEstimateDetails": {
 9820 |             "description": "When sending estimate directly while saving",
 9821 |             "allOf": [
 9822 |               {
 9823 |                 "$ref": "#/components/schemas/SendEstimateDto"
 9824 |               }
 9825 |             ]
 9826 |           },
 9827 |           "frequencySettings": {
 9828 |             "description": "frequency settings for the estimate",
 9829 |             "allOf": [
 9830 |               {
 9831 |                 "$ref": "#/components/schemas/FrequencySettingsDto"
 9832 |               }
 9833 |             ]
 9834 |           },
 9835 |           "estimateNumberPrefix": {
 9836 |             "type": "string",
 9837 |             "description": "Prefix for the estimate number",
 9838 |             "example": "EST-",
 9839 |             "default": "EST-"
 9840 |           },
 9841 |           "userId": {
 9842 |             "type": "string",
 9843 |             "description": "User Id",
 9844 |             "example": "6578278e879ad2646715ba9c"
 9845 |           },
 9846 |           "attachments": {
 9847 |             "description": "attachments for the invoice",
 9848 |             "type": "array",
 9849 |             "items": {
 9850 |               "$ref": "#/components/schemas/AttachmentsDto"
 9851 |             }
 9852 |           },
 9853 |           "autoInvoice": {
 9854 |             "description": "Auto invoice for the estimate",
 9855 |             "example": {
 9856 |               "enabled": true,
 9857 |               "directPayments": true
 9858 |             },
 9859 |             "allOf": [
 9860 |               {
 9861 |                 "$ref": "#/components/schemas/AutoInvoicingDto"
 9862 |               }
 9863 |             ]
 9864 |           }
 9865 |         },
 9866 |         "required": [
 9867 |           "altId",
 9868 |           "altType",
 9869 |           "name",
 9870 |           "businessDetails",
 9871 |           "currency",
 9872 |           "items",
 9873 |           "discount",
 9874 |           "contactDetails",
 9875 |           "frequencySettings"
 9876 |         ]
 9877 |       },
 9878 |       "BusinessDetails": {
 9879 |         "type": "object",
 9880 |         "properties": {}
 9881 |       },
 9882 |       "ContactDetails": {
 9883 |         "type": "object",
 9884 |         "properties": {}
 9885 |       },
 9886 |       "SentTo": {
 9887 |         "type": "object",
 9888 |         "properties": {}
 9889 |       },
 9890 |       "AutoInvoice": {
 9891 |         "type": "object",
 9892 |         "properties": {}
 9893 |       },
 9894 |       "EstimateResponseDto": {
 9895 |         "type": "object",
 9896 |         "properties": {
 9897 |           "altId": {
 9898 |             "type": "string",
 9899 |             "description": "Location Id or Agency Id",
 9900 |             "example": "6578278e879ad2646715ba9c"
 9901 |           },
 9902 |           "altType": {
 9903 |             "type": "string",
 9904 |             "enum": [
 9905 |               "location"
 9906 |             ]
 9907 |           },
 9908 |           "_id": {
 9909 |             "type": "string",
 9910 |             "description": "Unique identifier",
 9911 |             "example": "67ac9a51106ee8311e911XXXX"
 9912 |           },
 9913 |           "liveMode": {
 9914 |             "type": "boolean",
 9915 |             "description": "Indicates if it is in live mode",
 9916 |             "example": true
 9917 |           },
 9918 |           "deleted": {
 9919 |             "type": "boolean",
 9920 |             "description": "Indicates if deleted",
 9921 |             "example": false
 9922 |           },
 9923 |           "name": {
 9924 |             "type": "string",
 9925 |             "description": "Name",
 9926 |             "example": "Estimate Name"
 9927 |           },
 9928 |           "currency": {
 9929 |             "type": "string",
 9930 |             "description": "Currency code",
 9931 |             "example": "USD"
 9932 |           },
 9933 |           "businessDetails": {
 9934 |             "description": "Business details associated with the estimate",
 9935 |             "example": {
 9936 |               "logoUrl": "your_image-url",
 9937 |               "name": "Business name",
 9938 |               "address": {
 9939 |                 "addressLine1": "address line 1",
 9940 |                 "city": "Test City",
 9941 |                 "state": "State Name",
 9942 |                 "countryCode": "US",
 9943 |                 "postalCode": "12345"
 9944 |               },
 9945 |               "phoneNo": "+1 1234567890",
 9946 |               "website": "www.example.com",
 9947 |               "customValues": [
 9948 |                 {
 9949 |                   "name": "Test",
 9950 |                   "fieldKey": "{{custom_values.test}}",
 9951 |                   "id": "5DYTWoiQvWiIJZXX44XXX",
 9952 |                   "value": "Test's Custom Value"
 9953 |                 }
 9954 |               ]
 9955 |             },
 9956 |             "allOf": [
 9957 |               {
 9958 |                 "$ref": "#/components/schemas/BusinessDetails"
 9959 |               }
 9960 |             ]
 9961 |           },
 9962 |           "items": {
 9963 |             "description": "An array of items",
 9964 |             "example": [
 9965 |               {
 9966 |                 "taxes": [],
 9967 |                 "taxInclusive": false,
 9968 |                 "_id": "67ac9a51106ee8311e911XXXX",
 9969 |                 "description": "<p>Futuristic anti-gravity racing</p>",
 9970 |                 "currency": "USD",
 9971 |                 "productId": "67ac9a51106ee8311e911XXXX",
 9972 |                 "priceId": "67ac9a51106ee8311e911XXXX",
 9973 |                 "amount": 9.99,
 9974 |                 "qty": 1,
 9975 |                 "name": "TEST",
 9976 |                 "type": "one_time"
 9977 |               },
 9978 |               {
 9979 |                 "taxes": [
 9980 |                   {
 9981 |                     "_id": "67ac9a51106ee8311e911XXXX",
 9982 |                     "name": "TaxTwo",
 9983 |                     "rate": 8.5,
 9984 |                     "calculation": "exclusive"
 9985 |                   }
 9986 |                 ],
 9987 |                 "taxInclusive": true,
 9988 |                 "_id": "67ac9a51106ee8311e911XXXX",
 9989 |                 "productId": "67ac9a51106ee8311e911XXXX",
 9990 |                 "priceId": "67ac9a51106ee8311e911XXXX",
 9991 |                 "currency": "USD",
 9992 |                 "name": "TEST2",
 9993 |                 "qty": 1,
 9994 |                 "amount": 500,
 9995 |                 "description": "",
 9996 |                 "type": "recurring"
 9997 |               }
 9998 |             ],
 9999 |             "type": "array",
10000 |             "items": {
10001 |               "type": "array"
10002 |             }
10003 |           },
10004 |           "discount": {
10005 |             "description": "Discount details for the estimate template",
10006 |             "example": {
10007 |               "type": "percentage",
10008 |               "value": 0
10009 |             },
10010 |             "allOf": [
10011 |               {
10012 |                 "$ref": "#/components/schemas/DiscountDto"
10013 |               }
10014 |             ]
10015 |           },
10016 |           "title": {
10017 |             "type": "string",
10018 |             "description": "Title",
10019 |             "example": "ESTIMATE"
10020 |           },
10021 |           "estimateNumberPrefix": {
10022 |             "type": "string",
10023 |             "description": "Estimate number prefix",
10024 |             "example": "EST-"
10025 |           },
10026 |           "attachments": {
10027 |             "description": "Attachments",
10028 |             "type": "array",
10029 |             "items": {
10030 |               "$ref": "#/components/schemas/AttachmentsDto"
10031 |             }
10032 |           },
10033 |           "updatedBy": {
10034 |             "type": "string",
10035 |             "description": "User Id of who last updated",
10036 |             "example": "3HIpOF9NIc5ltriQXXXX"
10037 |           },
10038 |           "total": {
10039 |             "type": "number",
10040 |             "description": "Total amount",
10041 |             "example": 1222.03
10042 |           },
10043 |           "createdAt": {
10044 |             "format": "date-time",
10045 |             "type": "string",
10046 |             "description": "Timestamp when created",
10047 |             "example": "2025-02-12T13:17:47.416Z"
10048 |           },
10049 |           "updatedAt": {
10050 |             "format": "date-time",
10051 |             "type": "string",
10052 |             "description": "Timestamp when last updated",
10053 |             "example": "2025-02-12T13:17:47.416Z"
10054 |           },
10055 |           "__v": {
10056 |             "type": "number",
10057 |             "description": "Version number",
10058 |             "example": 0
10059 |           },
10060 |           "automaticTaxesEnabled": {
10061 |             "type": "boolean",
10062 |             "description": "Indicates if automatic taxes are enabled for this estimate",
10063 |             "example": false
10064 |           },
10065 |           "termsNotes": {
10066 |             "type": "string",
10067 |             "description": "Terms and conditions for the estimate, supports HTML markup",
10068 |             "example": "<p>All services are subject to availability.</p>"
10069 |           },
10070 |           "companyId": {
10071 |             "type": "string",
10072 |             "description": "Company identifier associated with the estimate",
10073 |             "example": "COMP12345"
10074 |           },
10075 |           "contactDetails": {
10076 |             "description": "Contact details for the estimate",
10077 |             "example": {
10078 |               "id": "jvzfKTNdE7OYXXXXXX",
10079 |               "name": "Contact Name",
10080 |               "phoneNo": "+911111111114",
10081 |               "email": "email@test.com",
10082 |               "address": {
10083 |                 "countryCode": "US"
10084 |               }
10085 |             },
10086 |             "allOf": [
10087 |               {
10088 |                 "$ref": "#/components/schemas/ContactDetails"
10089 |               }
10090 |             ]
10091 |           },
10092 |           "issueDate": {
10093 |             "format": "date-time",
10094 |             "type": "string",
10095 |             "description": "Date when the estimate was issued",
10096 |             "example": "2023-06-15T00:00:00.000Z"
10097 |           },
10098 |           "expiryDate": {
10099 |             "format": "date-time",
10100 |             "type": "string",
10101 |             "description": "Date when the estimate expires",
10102 |             "example": "2023-07-15T00:00:00.000Z"
10103 |           },
10104 |           "sentBy": {
10105 |             "type": "string",
10106 |             "description": "User who sent the estimate",
10107 |             "example": "user@example.com"
10108 |           },
10109 |           "automaticTaxesCalculated": {
10110 |             "type": "boolean",
10111 |             "description": "Indicates if automatic taxes were calculated",
10112 |             "example": true
10113 |           },
10114 |           "meta": {
10115 |             "type": "object",
10116 |             "description": "Additional metadata associated with the estimate",
10117 |             "example": {
10118 |               "key": "value"
10119 |             }
10120 |           },
10121 |           "estimateActionHistory": {
10122 |             "description": "History of actions taken on the estimate",
10123 |             "example": [
10124 |               {
10125 |                 "action": "Created",
10126 |                 "timestamp": "2023-06-15T10:00:00.000Z"
10127 |               }
10128 |             ],
10129 |             "type": "array",
10130 |             "items": {
10131 |               "type": "string"
10132 |             }
10133 |           },
10134 |           "sentTo": {
10135 |             "description": "Recipient details for the estimate",
10136 |             "example": {
10137 |               "email": [
10138 |                 "test@example.com"
10139 |               ],
10140 |               "phoneNo": [
10141 |                 "+1 99444444444"
10142 |               ]
10143 |             },
10144 |             "allOf": [
10145 |               {
10146 |                 "$ref": "#/components/schemas/SentTo"
10147 |               }
10148 |             ]
10149 |           },
10150 |           "frequencySettings": {
10151 |             "description": "Frequency settings for recurring estimates",
10152 |             "examples": [
10153 |               {
10154 |                 "enabled": false
10155 |               },
10156 |               {
10157 |                 "enabled": true,
10158 |                 "schedule": {
10159 |                   "rrule": {
10160 |                     "intervalType": "monthly",
10161 |                     "numOfWeek": 0,
10162 |                     "dayOfMonth": 1,
10163 |                     "interval": 1,
10164 |                     "startDate": "2025-02-12",
10165 |                     "endType": "after",
10166 |                     "count": "5"
10167 |                   }
10168 |                 }
10169 |               },
10170 |               {
10171 |                 "enabled": true,
10172 |                 "schedule": {
10173 |                   "rrule": {
10174 |                     "intervalType": "monthly",
10175 |                     "numOfWeek": 0,
10176 |                     "dayOfMonth": 1,
10177 |                     "interval": 1,
10178 |                     "startDate": "2025-02-12",
10179 |                     "endType": "by",
10180 |                     "endDate": "2025-02-24"
10181 |                   }
10182 |                 }
10183 |               },
10184 |               {
10185 |                 "enabled": true,
10186 |                 "schedule": {
10187 |                   "rrule": {
10188 |                     "intervalType": "monthly",
10189 |                     "numOfWeek": 0,
10190 |                     "dayOfMonth": 1,
10191 |                     "interval": 1,
10192 |                     "startDate": "2025-02-12",
10193 |                     "endType": "never"
10194 |                   }
10195 |                 }
10196 |               }
10197 |             ],
10198 |             "allOf": [
10199 |               {
10200 |                 "$ref": "#/components/schemas/FrequencySettingsDto"
10201 |               }
10202 |             ]
10203 |           },
10204 |           "lastVisitedAt": {
10205 |             "format": "date-time",
10206 |             "type": "string",
10207 |             "description": "Timestamp when the estimate was last visited",
10208 |             "example": "2023-06-20T08:30:00.000Z"
10209 |           },
10210 |           "totalamountInUSD": {
10211 |             "type": "number",
10212 |             "description": "Total amount in USD",
10213 |             "example": 1500.75
10214 |           },
10215 |           "autoInvoice": {
10216 |             "description": "Auto-invoice settings for the estimate",
10217 |             "example": {
10218 |               "enabled": true,
10219 |               "directPayments": false
10220 |             },
10221 |             "allOf": [
10222 |               {
10223 |                 "$ref": "#/components/schemas/AutoInvoice"
10224 |               }
10225 |             ]
10226 |           },
10227 |           "traceId": {
10228 |             "type": "string",
10229 |             "description": "Trace ID for logging and debugging",
10230 |             "example": "010c7a01-857f-4619-970d-xyxyxyxy"
10231 |           }
10232 |         },
10233 |         "required": [
10234 |           "altId",
10235 |           "altType",
10236 |           "_id",
10237 |           "liveMode",
10238 |           "deleted",
10239 |           "name",
10240 |           "currency",
10241 |           "businessDetails",
10242 |           "items",
10243 |           "discount",
10244 |           "total",
10245 |           "createdAt",
10246 |           "updatedAt",
10247 |           "__v",
10248 |           "automaticTaxesEnabled",
10249 |           "companyId",
10250 |           "contactDetails",
10251 |           "issueDate",
10252 |           "expiryDate",
10253 |           "automaticTaxesCalculated",
10254 |           "meta",
10255 |           "estimateActionHistory",
10256 |           "sentTo",
10257 |           "frequencySettings",
10258 |           "lastVisitedAt",
10259 |           "totalamountInUSD",
10260 |           "traceId"
10261 |         ]
10262 |       },
10263 |       "UpdateEstimateDto": {
10264 |         "type": "object",
10265 |         "properties": {
10266 |           "altId": {
10267 |             "type": "string",
10268 |             "description": "Location Id or Agency Id",
10269 |             "example": "6578278e879ad2646715ba9c"
10270 |           },
10271 |           "altType": {
10272 |             "type": "string",
10273 |             "enum": [
10274 |               "location"
10275 |             ]
10276 |           },
10277 |           "name": {
10278 |             "type": "string",
10279 |             "description": "Estimate Name",
10280 |             "example": "Home Service Estimate"
10281 |           },
10282 |           "businessDetails": {
10283 |             "$ref": "#/components/schemas/BusinessDetailsDto"
10284 |           },
10285 |           "currency": {
10286 |             "type": "string",
10287 |             "description": "Currency code",
10288 |             "example": "USD"
10289 |           },
10290 |           "items": {
10291 |             "description": "An array of items for the estimate.",
10292 |             "type": "array",
10293 |             "items": {
10294 |               "$ref": "#/components/schemas/InvoiceItemDto"
10295 |             }
10296 |           },
10297 |           "liveMode": {
10298 |             "type": "boolean",
10299 |             "description": "livemode for estimate",
10300 |             "example": true,
10301 |             "default": true
10302 |           },
10303 |           "discount": {
10304 |             "$ref": "#/components/schemas/DiscountDto"
10305 |           },
10306 |           "termsNotes": {
10307 |             "type": "string",
10308 |             "description": "Terms notes, Also supports HTML markups",
10309 |             "example": "<p>This is a default terms.</p>"
10310 |           },
10311 |           "title": {
10312 |             "type": "string",
10313 |             "description": "Title for the estimate",
10314 |             "example": "ESTIMATE"
10315 |           },
10316 |           "contactDetails": {
10317 |             "description": "Contact information to send the estimate to",
10318 |             "allOf": [
10319 |               {
10320 |                 "$ref": "#/components/schemas/ContactDetailsDto"
10321 |               }
10322 |             ]
10323 |           },
10324 |           "estimateNumber": {
10325 |             "type": "number",
10326 |             "description": "Estimate Number, if not specified will take in the next valid estimate number",
10327 |             "example": 1001
10328 |           },
10329 |           "issueDate": {
10330 |             "type": "string",
10331 |             "description": "issue date estimate",
10332 |             "example": "2024-08-07"
10333 |           },
10334 |           "expiryDate": {
10335 |             "type": "string",
10336 |             "description": "expiry date estimate",
10337 |             "example": "2024-08-10"
10338 |           },
10339 |           "sentTo": {
10340 |             "description": "Email and sent to details for the estimate",
10341 |             "allOf": [
10342 |               {
10343 |                 "$ref": "#/components/schemas/SentToDto"
10344 |               }
10345 |             ]
10346 |           },
10347 |           "automaticTaxesEnabled": {
10348 |             "type": "boolean",
10349 |             "description": "Automatic taxes enabled for the Estimate",
10350 |             "example": true,
10351 |             "default": false
10352 |           },
10353 |           "meta": {
10354 |             "type": "object",
10355 |             "description": "Meta data for the estimate",
10356 |             "example": {
10357 |               "key": "value"
10358 |             }
10359 |           },
10360 |           "sendEstimateDetails": {
10361 |             "description": "When sending estimate directly while saving",
10362 |             "allOf": [
10363 |               {
10364 |                 "$ref": "#/components/schemas/SendEstimateDto"
10365 |               }
10366 |             ]
10367 |           },
10368 |           "frequencySettings": {
10369 |             "description": "frequency settings for the estimate",
10370 |             "allOf": [
10371 |               {
10372 |                 "$ref": "#/components/schemas/FrequencySettingsDto"
10373 |               }
10374 |             ]
10375 |           },
10376 |           "estimateNumberPrefix": {
10377 |             "type": "string",
10378 |             "description": "Prefix for the estimate number",
10379 |             "example": "EST-",
10380 |             "default": "EST-"
10381 |           },
10382 |           "userId": {
10383 |             "type": "string",
10384 |             "description": "User Id",
10385 |             "example": "6578278e879ad2646715ba9c"
10386 |           },
10387 |           "attachments": {
10388 |             "description": "attachments for the invoice",
10389 |             "type": "array",
10390 |             "items": {
10391 |               "$ref": "#/components/schemas/AttachmentsDto"
10392 |             }
10393 |           },
10394 |           "autoInvoice": {
10395 |             "description": "Auto invoice for the estimate",
10396 |             "example": {
10397 |               "enabled": true,
10398 |               "directPayments": true
10399 |             },
10400 |             "allOf": [
10401 |               {
10402 |                 "$ref": "#/components/schemas/AutoInvoicingDto"
10403 |               }
10404 |             ]
10405 |           },
10406 |           "estimateStatus": {
10407 |             "type": "string",
10408 |             "description": "Estimate Status",
10409 |             "example": "sent",
10410 |             "enum": [
10411 |               "all",
10412 |               "draft",
10413 |               "sent",
10414 |               "accepted",
10415 |               "declined",
10416 |               "invoiced",
10417 |               "viewed"
10418 |             ]
10419 |           }
10420 |         },
10421 |         "required": [
10422 |           "altId",
10423 |           "altType",
10424 |           "name",
10425 |           "businessDetails",
10426 |           "currency",
10427 |           "items",
10428 |           "discount",
10429 |           "contactDetails",
10430 |           "frequencySettings"
10431 |         ]
10432 |       },
10433 |       "GenerateEstimateNumberResponse": {
10434 |         "type": "object",
10435 |         "properties": {
10436 |           "estimateNumber": {
10437 |             "type": "number"
10438 |           },
10439 |           "traceId": {
10440 |             "type": "string"
10441 |           }
10442 |         },
10443 |         "required": [
10444 |           "estimateNumber",
10445 |           "traceId"
10446 |         ]
10447 |       },
10448 |       "AltDto": {
10449 |         "type": "object",
10450 |         "properties": {
10451 |           "altId": {
10452 |             "type": "string",
10453 |             "description": "Location Id or Agency Id",
10454 |             "example": "6578278e879ad2646715ba9c"
10455 |           },
10456 |           "altType": {
10457 |             "type": "string",
10458 |             "enum": [
10459 |               "location"
10460 |             ]
10461 |           }
10462 |         },
10463 |         "required": [
10464 |           "altId",
10465 |           "altType"
10466 |         ]
10467 |       },
10468 |       "CreateInvoiceFromEstimateDto": {
10469 |         "type": "object",
10470 |         "properties": {
10471 |           "altId": {
10472 |             "type": "string",
10473 |             "description": "Location Id or Agency Id",
10474 |             "example": "6578278e879ad2646715ba9c"
10475 |           },
10476 |           "altType": {
10477 |             "type": "string",
10478 |             "enum": [
10479 |               "location"
10480 |             ]
10481 |           },
10482 |           "markAsInvoiced": {
10483 |             "type": "boolean",
10484 |             "description": "Mark Estimate as Invoiced",
10485 |             "example": true
10486 |           },
10487 |           "version": {
10488 |             "type": "string",
10489 |             "description": "Version of the update request",
10490 |             "example": "v2",
10491 |             "enum": [
10492 |               "v1",
10493 |               "v2"
10494 |             ]
10495 |           }
10496 |         },
10497 |         "required": [
10498 |           "altId",
10499 |           "altType",
10500 |           "markAsInvoiced"
10501 |         ]
10502 |       },
10503 |       "CreateInvoiceFromEstimateResponseDTO": {
10504 |         "type": "object",
10505 |         "properties": {
10506 |           "estimate": {
10507 |             "description": "Estimate details",
10508 |             "allOf": [
10509 |               {
10510 |                 "$ref": "#/components/schemas/EstimateResponseDto"
10511 |               }
10512 |             ]
10513 |           },
10514 |           "invoice": {
10515 |             "description": "Invoice details",
10516 |             "allOf": [
10517 |               {
10518 |                 "$ref": "#/components/schemas/DefaultInvoiceResponseDto"
10519 |               }
10520 |             ]
10521 |           }
10522 |         },
10523 |         "required": [
10524 |           "estimate",
10525 |           "invoice"
10526 |         ]
10527 |       },
10528 |       "ListEstimatesResponseDTO": {
10529 |         "type": "object",
10530 |         "properties": {
10531 |           "estimates": {
10532 |             "description": "List of estimates",
10533 |             "type": "array",
10534 |             "items": {
10535 |               "type": "string"
10536 |             }
10537 |           },
10538 |           "total": {
10539 |             "type": "number",
10540 |             "description": "Total number of estimates"
10541 |           },
10542 |           "traceId": {
10543 |             "type": "string",
10544 |             "description": "Unique identifier for tracing the request"
10545 |           }
10546 |         },
10547 |         "required": [
10548 |           "estimates",
10549 |           "total",
10550 |           "traceId"
10551 |         ]
10552 |       },
10553 |       "EstimateIdParam": {
10554 |         "type": "object",
10555 |         "properties": {
10556 |           "estimateId": {
10557 |             "type": "string",
10558 |             "description": "Estimate Id",
10559 |             "example": "5f9d6d8b1b2d2c001f2d9e4b"
10560 |           }
10561 |         },
10562 |         "required": [
10563 |           "estimateId"
10564 |         ]
10565 |       },
10566 |       "ListEstimateTemplateResponseDTO": {
10567 |         "type": "object",
10568 |         "properties": {
10569 |           "data": {
10570 |             "description": "List of estimate templates",
10571 |             "type": "array",
10572 |             "items": {
10573 |               "type": "string"
10574 |             }
10575 |           },
10576 |           "totalCount": {
10577 |             "type": "number",
10578 |             "description": "Total number of estimate templates available"
10579 |           },
10580 |           "traceId": {
10581 |             "type": "string",
10582 |             "description": "Unique identifier for tracing the request"
10583 |           }
10584 |         },
10585 |         "required": [
10586 |           "data",
10587 |           "totalCount",
10588 |           "traceId"
10589 |         ]
10590 |       },
10591 |       "EstimateTemplatesDto": {
10592 |         "type": "object",
10593 |         "properties": {
10594 |           "altId": {
10595 |             "type": "string",
10596 |             "description": "Location Id or Agency Id",
10597 |             "example": "6578278e879ad2646715ba9c"
10598 |           },
10599 |           "altType": {
10600 |             "type": "string",
10601 |             "enum": [
10602 |               "location"
10603 |             ]
10604 |           },
10605 |           "name": {
10606 |             "type": "string",
10607 |             "description": "Estimate Name",
10608 |             "example": "Home Service Estimate Template"
10609 |           },
10610 |           "businessDetails": {
10611 |             "$ref": "#/components/schemas/BusinessDetailsDto"
10612 |           },
10613 |           "currency": {
10614 |             "type": "string",
10615 |             "description": "Currency code",
10616 |             "example": "USD"
10617 |           },
10618 |           "items": {
10619 |             "description": "An array of items for the estimate.",
10620 |             "items": {
10621 |               "type": "array"
10622 |             },
10623 |             "type": "array"
10624 |           },
10625 |           "liveMode": {
10626 |             "type": "boolean",
10627 |             "description": "livemode for estimate",
10628 |             "example": true,
10629 |             "default": true
10630 |           },
10631 |           "discount": {
10632 |             "$ref": "#/components/schemas/DiscountDto"
10633 |           },
10634 |           "termsNotes": {
10635 |             "type": "string",
10636 |             "description": "Terms notes, Also supports HTML markups",
10637 |             "example": "<p>This is a default terms.</p>"
10638 |           },
10639 |           "title": {
10640 |             "type": "string",
10641 |             "description": "Title for the estimate",
10642 |             "example": "ESTIMATE"
10643 |           },
10644 |           "automaticTaxesEnabled": {
10645 |             "type": "boolean",
10646 |             "description": "Automatic taxes enabled for the Estimate",
10647 |             "example": true,
10648 |             "default": false
10649 |           },
10650 |           "meta": {
10651 |             "type": "object",
10652 |             "description": "Meta data for the estimate",
10653 |             "example": {
10654 |               "key": "value"
10655 |             }
10656 |           },
10657 |           "sendEstimateDetails": {
10658 |             "description": "When sending estimate directly while saving",
10659 |             "allOf": [
10660 |               {
10661 |                 "$ref": "#/components/schemas/SendEstimateDto"
10662 |               }
10663 |             ]
10664 |           },
10665 |           "estimateNumberPrefix": {
10666 |             "type": "string",
10667 |             "description": "Prefix for the estimate number",
10668 |             "example": "EST-",
10669 |             "default": "EST-"
10670 |           },
10671 |           "attachments": {
10672 |             "description": "attachments for the invoice",
10673 |             "type": "array",
10674 |             "items": {
10675 |               "$ref": "#/components/schemas/AttachmentsDto"
10676 |             }
10677 |           }
10678 |         },
10679 |         "required": [
10680 |           "altId",
10681 |           "altType",
10682 |           "name",
10683 |           "businessDetails",
10684 |           "currency",
10685 |           "items",
10686 |           "discount"
10687 |         ]
10688 |       },
10689 |       "EstimateTemplateResponseDTO": {
10690 |         "type": "object",
10691 |         "properties": {
10692 |           "altId": {
10693 |             "type": "string",
10694 |             "description": "Location Id or Agency Id",
10695 |             "example": "6578278e879ad2646715ba9c"
10696 |           },
10697 |           "altType": {
10698 |             "type": "string",
10699 |             "enum": [
10700 |               "location"
10701 |             ]
10702 |           },
10703 |           "_id": {
10704 |             "type": "string",
10705 |             "description": "Unique identifier",
10706 |             "example": "67ac9a51106ee8311e911XXXX"
10707 |           },
10708 |           "liveMode": {
10709 |             "type": "boolean",
10710 |             "description": "Indicates if it is in live mode",
10711 |             "example": true
10712 |           },
10713 |           "deleted": {
10714 |             "type": "boolean",
10715 |             "description": "Indicates if deleted",
10716 |             "example": false
10717 |           },
10718 |           "name": {
10719 |             "type": "string",
10720 |             "description": "Name",
10721 |             "example": "Estimate Name"
10722 |           },
10723 |           "currency": {
10724 |             "type": "string",
10725 |             "description": "Currency code",
10726 |             "example": "USD"
10727 |           },
10728 |           "businessDetails": {
10729 |             "description": "Business details associated with the estimate",
10730 |             "example": {
10731 |               "logoUrl": "your_image-url",
10732 |               "name": "Business name",
10733 |               "address": {
10734 |                 "addressLine1": "address line 1",
10735 |                 "city": "Test City",
10736 |                 "state": "State Name",
10737 |                 "countryCode": "US",
10738 |                 "postalCode": "12345"
10739 |               },
10740 |               "phoneNo": "+1 1234567890",
10741 |               "website": "www.example.com",
10742 |               "customValues": [
10743 |                 {
10744 |                   "name": "Test",
10745 |                   "fieldKey": "{{custom_values.test}}",
10746 |                   "id": "5DYTWoiQvWiIJZXX44XXX",
10747 |                   "value": "Test's Custom Value"
10748 |                 }
10749 |               ]
10750 |             },
10751 |             "allOf": [
10752 |               {
10753 |                 "$ref": "#/components/schemas/BusinessDetails"
10754 |               }
10755 |             ]
10756 |           },
10757 |           "items": {
10758 |             "description": "An array of items",
10759 |             "example": [
10760 |               {
10761 |                 "taxes": [],
10762 |                 "taxInclusive": false,
10763 |                 "_id": "67ac9a51106ee8311e911XXXX",
10764 |                 "description": "<p>Futuristic anti-gravity racing</p>",
10765 |                 "currency": "USD",
10766 |                 "productId": "67ac9a51106ee8311e911XXXX",
10767 |                 "priceId": "67ac9a51106ee8311e911XXXX",
10768 |                 "amount": 9.99,
10769 |                 "qty": 1,
10770 |                 "name": "TEST",
10771 |                 "type": "one_time"
10772 |               },
10773 |               {
10774 |                 "taxes": [
10775 |                   {
10776 |                     "_id": "67ac9a51106ee8311e911XXXX",
10777 |                     "name": "TaxTwo",
10778 |                     "rate": 8.5,
10779 |                     "calculation": "exclusive"
10780 |                   }
10781 |                 ],
10782 |                 "taxInclusive": true,
10783 |                 "_id": "67ac9a51106ee8311e911XXXX",
10784 |                 "productId": "67ac9a51106ee8311e911XXXX",
10785 |                 "priceId": "67ac9a51106ee8311e911XXXX",
10786 |                 "currency": "USD",
10787 |                 "name": "TEST2",
10788 |                 "qty": 1,
10789 |                 "amount": 500,
10790 |                 "description": "",
10791 |                 "type": "recurring"
10792 |               }
10793 |             ],
10794 |             "type": "array",
10795 |             "items": {
10796 |               "type": "array"
10797 |             }
10798 |           },
10799 |           "discount": {
10800 |             "description": "Discount details for the estimate template",
10801 |             "example": {
10802 |               "type": "percentage",
10803 |               "value": 0
10804 |             },
10805 |             "allOf": [
10806 |               {
10807 |                 "$ref": "#/components/schemas/DiscountDto"
10808 |               }
10809 |             ]
10810 |           },
10811 |           "title": {
10812 |             "type": "string",
10813 |             "description": "Title",
10814 |             "example": "ESTIMATE"
10815 |           },
10816 |           "estimateNumberPrefix": {
10817 |             "type": "string",
10818 |             "description": "Estimate number prefix",
10819 |             "example": "EST-"
10820 |           },
10821 |           "attachments": {
10822 |             "description": "Attachments",
10823 |             "type": "array",
10824 |             "items": {
10825 |               "$ref": "#/components/schemas/AttachmentsDto"
10826 |             }
10827 |           },
10828 |           "updatedBy": {
10829 |             "type": "string",
10830 |             "description": "User Id of who last updated",
10831 |             "example": "3HIpOF9NIc5ltriQXXXX"
10832 |           },
10833 |           "total": {
10834 |             "type": "number",
10835 |             "description": "Total amount",
10836 |             "example": 1222.03
10837 |           },
10838 |           "createdAt": {
10839 |             "format": "date-time",
10840 |             "type": "string",
10841 |             "description": "Timestamp when created",
10842 |             "example": "2025-02-12T13:17:47.416Z"
10843 |           },
10844 |           "updatedAt": {
10845 |             "format": "date-time",
10846 |             "type": "string",
10847 |             "description": "Timestamp when last updated",
10848 |             "example": "2025-02-12T13:17:47.416Z"
10849 |           },
10850 |           "__v": {
10851 |             "type": "number",
10852 |             "description": "Version number",
10853 |             "example": 0
10854 |           },
10855 |           "automaticTaxesEnabled": {
10856 |             "type": "boolean",
10857 |             "description": "Indicates if automatic taxes are enabled for this estimate",
10858 |             "example": false
10859 |           },
10860 |           "termsNotes": {
10861 |             "type": "string",
10862 |             "description": "Terms and conditions for the estimate, supports HTML markup",
10863 |             "example": "<p>All services are subject to availability.</p>"
10864 |           }
10865 |         },
10866 |         "required": [
10867 |           "altId",
10868 |           "altType",
10869 |           "_id",
10870 |           "liveMode",
10871 |           "deleted",
10872 |           "name",
10873 |           "currency",
10874 |           "businessDetails",
10875 |           "items",
10876 |           "discount",
10877 |           "total",
10878 |           "createdAt",
10879 |           "updatedAt",
10880 |           "__v",
10881 |           "automaticTaxesEnabled"
10882 |         ]
10883 |       }
10884 |     }
10885 |   }
10886 | }


--------------------------------------------------------------------------------
/links/links.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/links/{linkId}": {
  5 |       "put": {
  6 |         "operationId": "update-link",
  7 |         "summary": "Update Link",
  8 |         "description": "Update Link",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "linkId",
 34 |             "required": true,
 35 |             "in": "path",
 36 |             "description": "Link Id",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           }
 41 |         ],
 42 |         "requestBody": {
 43 |           "required": true,
 44 |           "content": {
 45 |             "application/json": {
 46 |               "schema": {
 47 |                 "$ref": "#/components/schemas/LinkUpdateDto"
 48 |               }
 49 |             }
 50 |           }
 51 |         },
 52 |         "responses": {
 53 |           "201": {
 54 |             "description": "Successful response",
 55 |             "content": {
 56 |               "application/json": {
 57 |                 "schema": {
 58 |                   "$ref": "#/components/schemas/GetLinkSuccessfulResponseDto"
 59 |                 }
 60 |               }
 61 |             }
 62 |           },
 63 |           "400": {
 64 |             "description": "Bad Request",
 65 |             "content": {
 66 |               "application/json": {
 67 |                 "schema": {
 68 |                   "$ref": "#/components/schemas/BadRequestDTO"
 69 |                 }
 70 |               }
 71 |             }
 72 |           },
 73 |           "401": {
 74 |             "description": "Unauthorized",
 75 |             "content": {
 76 |               "application/json": {
 77 |                 "schema": {
 78 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 79 |                 }
 80 |               }
 81 |             }
 82 |           },
 83 |           "422": {
 84 |             "description": "Unprocessable Entity",
 85 |             "content": {
 86 |               "application/json": {
 87 |                 "schema": {
 88 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 89 |                 }
 90 |               }
 91 |             }
 92 |           }
 93 |         },
 94 |         "tags": [
 95 |           "Trigger Links"
 96 |         ],
 97 |         "security": [
 98 |           {
 99 |             "bearer": []
100 |           }
101 |         ]
102 |       },
103 |       "delete": {
104 |         "operationId": "delete-link",
105 |         "summary": "Delete Link",
106 |         "description": "Delete Link",
107 |         "parameters": [
108 |           {
109 |             "name": "Authorization",
110 |             "in": "header",
111 |             "description": "Access Token",
112 |             "required": true,
113 |             "schema": {
114 |               "type": "string",
115 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
116 |             }
117 |           },
118 |           {
119 |             "name": "Version",
120 |             "in": "header",
121 |             "description": "API Version",
122 |             "required": true,
123 |             "schema": {
124 |               "type": "string",
125 |               "enum": [
126 |                 "2021-07-28"
127 |               ]
128 |             }
129 |           },
130 |           {
131 |             "name": "linkId",
132 |             "required": true,
133 |             "in": "path",
134 |             "description": "Link Id",
135 |             "schema": {
136 |               "type": "string"
137 |             }
138 |           }
139 |         ],
140 |         "responses": {
141 |           "201": {
142 |             "description": "Successful response",
143 |             "content": {
144 |               "application/json": {
145 |                 "schema": {
146 |                   "$ref": "#/components/schemas/DeleteLinksSuccessfulResponseDto"
147 |                 }
148 |               }
149 |             }
150 |           },
151 |           "400": {
152 |             "description": "Bad Request",
153 |             "content": {
154 |               "application/json": {
155 |                 "schema": {
156 |                   "$ref": "#/components/schemas/BadRequestDTO"
157 |                 }
158 |               }
159 |             }
160 |           },
161 |           "401": {
162 |             "description": "Unauthorized",
163 |             "content": {
164 |               "application/json": {
165 |                 "schema": {
166 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
167 |                 }
168 |               }
169 |             }
170 |           },
171 |           "422": {
172 |             "description": "Unprocessable Entity",
173 |             "content": {
174 |               "application/json": {
175 |                 "schema": {
176 |                   "$ref": "#/components/schemas/UnprocessableDTO"
177 |                 }
178 |               }
179 |             }
180 |           }
181 |         },
182 |         "tags": [
183 |           "Trigger Links"
184 |         ],
185 |         "security": [
186 |           {
187 |             "bearer": []
188 |           }
189 |         ]
190 |       }
191 |     },
192 |     "/links/": {
193 |       "get": {
194 |         "operationId": "get-links",
195 |         "summary": "Get Links",
196 |         "description": "Get Links",
197 |         "parameters": [
198 |           {
199 |             "name": "Authorization",
200 |             "in": "header",
201 |             "description": "Access Token",
202 |             "required": true,
203 |             "schema": {
204 |               "type": "string",
205 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
206 |             }
207 |           },
208 |           {
209 |             "name": "Version",
210 |             "in": "header",
211 |             "description": "API Version",
212 |             "required": true,
213 |             "schema": {
214 |               "type": "string",
215 |               "enum": [
216 |                 "2021-07-28"
217 |               ]
218 |             }
219 |           },
220 |           {
221 |             "name": "locationId",
222 |             "required": true,
223 |             "in": "query",
224 |             "example": "ve9EPM428h8vShlRW1KT",
225 |             "schema": {
226 |               "type": "string"
227 |             }
228 |           }
229 |         ],
230 |         "responses": {
231 |           "200": {
232 |             "description": "Successful response",
233 |             "content": {
234 |               "application/json": {
235 |                 "schema": {
236 |                   "$ref": "#/components/schemas/GetLinksSuccessfulResponseDto"
237 |                 }
238 |               }
239 |             }
240 |           },
241 |           "400": {
242 |             "description": "Bad Request",
243 |             "content": {
244 |               "application/json": {
245 |                 "schema": {
246 |                   "$ref": "#/components/schemas/BadRequestDTO"
247 |                 }
248 |               }
249 |             }
250 |           },
251 |           "401": {
252 |             "description": "Unauthorized",
253 |             "content": {
254 |               "application/json": {
255 |                 "schema": {
256 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
257 |                 }
258 |               }
259 |             }
260 |           }
261 |         },
262 |         "tags": [
263 |           "Trigger Links"
264 |         ],
265 |         "security": [
266 |           {
267 |             "bearer": []
268 |           }
269 |         ]
270 |       },
271 |       "post": {
272 |         "operationId": "create-link",
273 |         "summary": "Create Link",
274 |         "description": "Create Link",
275 |         "parameters": [
276 |           {
277 |             "name": "Authorization",
278 |             "in": "header",
279 |             "description": "Access Token",
280 |             "required": true,
281 |             "schema": {
282 |               "type": "string",
283 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
284 |             }
285 |           },
286 |           {
287 |             "name": "Version",
288 |             "in": "header",
289 |             "description": "API Version",
290 |             "required": true,
291 |             "schema": {
292 |               "type": "string",
293 |               "enum": [
294 |                 "2021-07-28"
295 |               ]
296 |             }
297 |           }
298 |         ],
299 |         "requestBody": {
300 |           "required": true,
301 |           "content": {
302 |             "application/json": {
303 |               "schema": {
304 |                 "$ref": "#/components/schemas/LinksDto"
305 |               }
306 |             }
307 |           }
308 |         },
309 |         "responses": {
310 |           "201": {
311 |             "description": "Successful response",
312 |             "content": {
313 |               "application/json": {
314 |                 "schema": {
315 |                   "$ref": "#/components/schemas/GetLinkSuccessfulResponseDto"
316 |                 }
317 |               }
318 |             }
319 |           },
320 |           "400": {
321 |             "description": "Bad Request",
322 |             "content": {
323 |               "application/json": {
324 |                 "schema": {
325 |                   "$ref": "#/components/schemas/BadRequestDTO"
326 |                 }
327 |               }
328 |             }
329 |           },
330 |           "401": {
331 |             "description": "Unauthorized",
332 |             "content": {
333 |               "application/json": {
334 |                 "schema": {
335 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
336 |                 }
337 |               }
338 |             }
339 |           },
340 |           "422": {
341 |             "description": "Unprocessable Entity",
342 |             "content": {
343 |               "application/json": {
344 |                 "schema": {
345 |                   "$ref": "#/components/schemas/UnprocessableDTO"
346 |                 }
347 |               }
348 |             }
349 |           }
350 |         },
351 |         "tags": [
352 |           "Trigger Links"
353 |         ],
354 |         "security": [
355 |           {
356 |             "bearer": []
357 |           }
358 |         ]
359 |       }
360 |     }
361 |   },
362 |   "info": {
363 |     "title": "Links API",
364 |     "description": "Documentation for links API",
365 |     "version": "1.0",
366 |     "contact": {}
367 |   },
368 |   "tags": [
369 |     {
370 |       "name": "Trigger Links",
371 |       "description": "Documentation for links API"
372 |     }
373 |   ],
374 |   "servers": [
375 |     {
376 |       "url": "https://services.leadconnectorhq.com"
377 |     }
378 |   ],
379 |   "components": {
380 |     "securitySchemes": {
381 |       "bearer": {
382 |         "scheme": "bearer",
383 |         "bearerFormat": "JWT",
384 |         "name": "Authorization",
385 |         "in": "header",
386 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
387 |         "type": "http"
388 |       },
389 |       "Location-Access": {
390 |         "scheme": "bearer",
391 |         "bearerFormat": "JWT",
392 |         "name": "Authorization",
393 |         "in": "header",
394 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
395 |         "type": "http"
396 |       },
397 |       "Agency-Access": {
398 |         "scheme": "bearer",
399 |         "bearerFormat": "JWT",
400 |         "name": "Authorization",
401 |         "in": "header",
402 |         "description": "Use the Access Token generated with user type as Agency.",
403 |         "type": "http"
404 |       }
405 |     },
406 |     "schemas": {
407 |       "BadRequestDTO": {
408 |         "type": "object",
409 |         "properties": {
410 |           "statusCode": {
411 |             "type": "number",
412 |             "example": 400
413 |           },
414 |           "message": {
415 |             "type": "string",
416 |             "example": "Bad Request"
417 |           }
418 |         }
419 |       },
420 |       "UnauthorizedDTO": {
421 |         "type": "object",
422 |         "properties": {
423 |           "statusCode": {
424 |             "type": "number",
425 |             "example": 401
426 |           },
427 |           "message": {
428 |             "type": "string",
429 |             "example": "Invalid token: access token is invalid"
430 |           },
431 |           "error": {
432 |             "type": "string",
433 |             "example": "Unauthorized"
434 |           }
435 |         }
436 |       },
437 |       "LinkSchema": {
438 |         "type": "object",
439 |         "properties": {
440 |           "id": {
441 |             "type": "string",
442 |             "example": "n4AriwEnFrGh3tu08W0U"
443 |           },
444 |           "name": {
445 |             "type": "string",
446 |             "example": "first tag"
447 |           },
448 |           "redirectTo": {
449 |             "type": "string",
450 |             "example": "https://www.google.com/"
451 |           },
452 |           "fieldKey": {
453 |             "type": "string",
454 |             "example": "{{trigger_link.n4AriwEnFrGh3tu08W0U}}"
455 |           },
456 |           "locationId": {
457 |             "type": "string",
458 |             "example": "ve9EPM428h8vShlRW1KT"
459 |           }
460 |         }
461 |       },
462 |       "GetLinksSuccessfulResponseDto": {
463 |         "type": "object",
464 |         "properties": {
465 |           "links": {
466 |             "type": "array",
467 |             "items": {
468 |               "$ref": "#/components/schemas/LinkSchema"
469 |             }
470 |           }
471 |         }
472 |       },
473 |       "LinksDto": {
474 |         "type": "object",
475 |         "properties": {
476 |           "locationId": {
477 |             "type": "string",
478 |             "example": "ve9EPM428h8vShlRW1KT"
479 |           },
480 |           "name": {
481 |             "type": "string",
482 |             "example": "first tag"
483 |           },
484 |           "redirectTo": {
485 |             "type": "string",
486 |             "example": "https://www.google.com/"
487 |           }
488 |         },
489 |         "required": [
490 |           "locationId",
491 |           "name",
492 |           "redirectTo"
493 |         ]
494 |       },
495 |       "GetLinkSuccessfulResponseDto": {
496 |         "type": "object",
497 |         "properties": {
498 |           "link": {
499 |             "$ref": "#/components/schemas/LinkSchema"
500 |           }
501 |         }
502 |       },
503 |       "UnprocessableDTO": {
504 |         "type": "object",
505 |         "properties": {
506 |           "statusCode": {
507 |             "type": "number",
508 |             "example": 422
509 |           },
510 |           "message": {
511 |             "example": [
512 |               "Unprocessable Entity"
513 |             ],
514 |             "type": "array",
515 |             "items": {
516 |               "type": "string"
517 |             }
518 |           },
519 |           "error": {
520 |             "type": "string",
521 |             "example": "Unprocessable Entity"
522 |           }
523 |         }
524 |       },
525 |       "LinkUpdateDto": {
526 |         "type": "object",
527 |         "properties": {
528 |           "name": {
529 |             "type": "string",
530 |             "example": "first tag"
531 |           },
532 |           "redirectTo": {
533 |             "type": "string",
534 |             "example": "https://www.google.com/"
535 |           }
536 |         },
537 |         "required": [
538 |           "name",
539 |           "redirectTo"
540 |         ]
541 |       },
542 |       "DeleteLinksSuccessfulResponseDto": {
543 |         "type": "object",
544 |         "properties": {
545 |           "succeded": {
546 |             "type": "boolean",
547 |             "example": true
548 |           }
549 |         }
550 |       }
551 |     }
552 |   }
553 | }


--------------------------------------------------------------------------------
/locations/locations.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "info": {
   4 |     "title": "Sub-Account (Formerly location) API",
   5 |     "description": "Documentation for Sub-Account (Formerly location) API",
   6 |     "version": "1.0",
   7 |     "contact": {}
   8 |   },
   9 |   "tags": [
  10 |     {
  11 |       "name": "Location",
  12 |       "description": "Documentation for Sub-Account (Formerly location) API"
  13 |     },
  14 |     {
  15 |       "name": "Location Tags",
  16 |       "description": "Documentation for Sub-Account (Formerly location) API"
  17 |     },
  18 |     {
  19 |       "name": "Custom Field",
  20 |       "description": "Documentation for Sub-Account (Formerly location) API"
  21 |     },
  22 |     {
  23 |       "name": "Custom Value",
  24 |       "description": "Documentation for Sub-Account (Formerly location) API"
  25 |     },
  26 |     {
  27 |       "name": "Template",
  28 |       "description": "Documentation for Sub-Account (Formerly location) API"
  29 |     },
  30 |     {
  31 |       "name": "Tags Search",
  32 |       "description": "Documentation for Sub-Account (Formerly location) API"
  33 |     },
  34 |     {
  35 |       "name": "Location Notes",
  36 |       "description": "Documentation for Sub-Account (Formerly location) API"
  37 |     },
  38 |     {
  39 |       "name": "Location Tasks",
  40 |       "description": "Documentation for Sub-Account (Formerly location) API"
  41 |     },
  42 |     {
  43 |       "name": "Location Search",
  44 |       "description": "Documentation for Sub-Account (Formerly location) API"
  45 |     },
  46 |     {
  47 |       "name": "Custom Field Search",
  48 |       "description": "Documentation for Sub-Account (Formerly location) API"
  49 |     },
  50 |     {
  51 |       "name": "Location Keys",
  52 |       "description": "Documentation for Sub-Account (Formerly location) API"
  53 |     },
  54 |     {
  55 |       "name": "Labs",
  56 |       "description": "Documentation for Sub-Account (Formerly location) API"
  57 |     },
  58 |     {
  59 |       "name": "Conversation Channel",
  60 |       "description": "Documentation for Sub-Account (Formerly location) API"
  61 |     }
  62 |   ],
  63 |   "servers": [
  64 |     {
  65 |       "url": "https://services.leadconnectorhq.com"
  66 |     }
  67 |   ],
  68 |   "components": {
  69 |     "securitySchemes": {
  70 |       "bearer": {
  71 |         "scheme": "bearer",
  72 |         "bearerFormat": "JWT",
  73 |         "name": "Authorization",
  74 |         "in": "header",
  75 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
  76 |         "type": "http"
  77 |       },
  78 |       "Location-Access": {
  79 |         "scheme": "bearer",
  80 |         "bearerFormat": "JWT",
  81 |         "name": "Authorization",
  82 |         "in": "header",
  83 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
  84 |         "type": "http"
  85 |       },
  86 |       "Agency-Access": {
  87 |         "scheme": "bearer",
  88 |         "bearerFormat": "JWT",
  89 |         "name": "Authorization",
  90 |         "in": "header",
  91 |         "description": "Use the Access Token generated with user type as Agency.",
  92 |         "type": "http"
  93 |       }
  94 |     },
  95 |     "schemas": {
  96 |       "BadRequestDTO": {
  97 |         "type": "object",
  98 |         "properties": {
  99 |           "statusCode": {
 100 |             "type": "number",
 101 |             "example": 400
 102 |           },
 103 |           "message": {
 104 |             "type": "string",
 105 |             "example": "Bad Request"
 106 |           }
 107 |         }
 108 |       },
 109 |       "UnauthorizedDTO": {
 110 |         "type": "object",
 111 |         "properties": {
 112 |           "statusCode": {
 113 |             "type": "number",
 114 |             "example": 401
 115 |           },
 116 |           "message": {
 117 |             "type": "string",
 118 |             "example": "Invalid token: access token is invalid"
 119 |           },
 120 |           "error": {
 121 |             "type": "string",
 122 |             "example": "Unauthorized"
 123 |           }
 124 |         }
 125 |       },
 126 |       "UnprocessableDTO": {
 127 |         "type": "object",
 128 |         "properties": {
 129 |           "statusCode": {
 130 |             "type": "number",
 131 |             "example": 422
 132 |           },
 133 |           "message": {
 134 |             "example": [
 135 |               "Unprocessable Entity"
 136 |             ],
 137 |             "type": "array",
 138 |             "items": {
 139 |               "type": "string"
 140 |             }
 141 |           },
 142 |           "error": {
 143 |             "type": "string",
 144 |             "example": "Unprocessable Entity"
 145 |           }
 146 |         }
 147 |       },
 148 |       "SettingsSchema": {
 149 |         "type": "object",
 150 |         "properties": {
 151 |           "allowDuplicateContact": {
 152 |             "type": "boolean",
 153 |             "example": false
 154 |           },
 155 |           "allowDuplicateOpportunity": {
 156 |             "type": "boolean",
 157 |             "example": false
 158 |           },
 159 |           "allowFacebookNameMerge": {
 160 |             "type": "boolean",
 161 |             "example": false
 162 |           },
 163 |           "disableContactTimezone": {
 164 |             "type": "boolean",
 165 |             "example": false
 166 |           }
 167 |         }
 168 |       },
 169 |       "SocialSchema": {
 170 |         "type": "object",
 171 |         "properties": {
 172 |           "facebookUrl": {
 173 |             "type": "string",
 174 |             "description": "Facebook URL",
 175 |             "example": "https://www.facebook.com/"
 176 |           },
 177 |           "googlePlus": {
 178 |             "type": "string",
 179 |             "description": "Googleplus URL",
 180 |             "example": "https://www.googleplus.com/"
 181 |           },
 182 |           "linkedIn": {
 183 |             "type": "string",
 184 |             "description": "LinkedIn URL",
 185 |             "example": "https://www.linkedIn.com/"
 186 |           },
 187 |           "foursquare": {
 188 |             "type": "string",
 189 |             "description": "Foursquare URL",
 190 |             "example": "https://www.foursquare.com/"
 191 |           },
 192 |           "twitter": {
 193 |             "type": "string",
 194 |             "description": "Twitter URL",
 195 |             "example": "https://www.foutwitterrsquare.com/"
 196 |           },
 197 |           "yelp": {
 198 |             "type": "string",
 199 |             "description": "Yelp URL",
 200 |             "example": "https://www.yelp.com/"
 201 |           },
 202 |           "instagram": {
 203 |             "type": "string",
 204 |             "description": "Instagram URL",
 205 |             "example": "https://www.instagram.com/"
 206 |           },
 207 |           "youtube": {
 208 |             "type": "string",
 209 |             "description": "Instagram URL",
 210 |             "example": "https://www.youtube.com/"
 211 |           },
 212 |           "pinterest": {
 213 |             "type": "string",
 214 |             "description": "Instagram URL",
 215 |             "example": "https://www.pinterest.com/"
 216 |           },
 217 |           "blogRss": {
 218 |             "type": "string",
 219 |             "description": "Instagram URL",
 220 |             "example": "https://www.blogRss.com/"
 221 |           },
 222 |           "googlePlacesId": {
 223 |             "type": "string",
 224 |             "description": "Google Business Places ID",
 225 |             "example": "ChIJJGPdVbQTrjsRGUkefteUeFk"
 226 |           }
 227 |         }
 228 |       },
 229 |       "GetLocationSchema": {
 230 |         "type": "object",
 231 |         "properties": {
 232 |           "id": {
 233 |             "type": "string",
 234 |             "description": "Location Id",
 235 |             "example": "ve9EPM428h8vShlRW1KT"
 236 |           },
 237 |           "name": {
 238 |             "type": "string",
 239 |             "example": "Mark Shoes",
 240 |             "description": "The name for the sub-account/location"
 241 |           },
 242 |           "phone": {
 243 |             "type": "string",
 244 |             "example": "+1410039940",
 245 |             "description": "The phone number of the business for which sub-account is created"
 246 |           },
 247 |           "email": {
 248 |             "type": "string",
 249 |             "example": "john.doe@mail.com",
 250 |             "description": "The email for the sub-account/location"
 251 |           },
 252 |           "address": {
 253 |             "type": "string",
 254 |             "example": "4th fleet street",
 255 |             "description": "The address of the business for which sub-account is created"
 256 |           },
 257 |           "city": {
 258 |             "type": "string",
 259 |             "example": "New York",
 260 |             "description": "The city where the business is located for which sub-account is created"
 261 |           },
 262 |           "state": {
 263 |             "type": "string",
 264 |             "example": "Illinois",
 265 |             "description": "The state in which the business operates for which sub-account is created"
 266 |           },
 267 |           "country": {
 268 |             "type": "string",
 269 |             "example": "US",
 270 |             "description": "The country in which the business is present for which sub-account is created"
 271 |           },
 272 |           "postalCode": {
 273 |             "type": "string",
 274 |             "example": "567654",
 275 |             "description": "The postal code of the business for which sub-account is created"
 276 |           },
 277 |           "website": {
 278 |             "type": "string",
 279 |             "example": "https://yourwebsite.com",
 280 |             "description": "The website of the business for which sub-account is created"
 281 |           },
 282 |           "timezone": {
 283 |             "type": "string",
 284 |             "example": "US/Central",
 285 |             "description": "The timezone of the business for which sub-account is created"
 286 |           },
 287 |           "settings": {
 288 |             "description": "The default settings for location",
 289 |             "allOf": [
 290 |               {
 291 |                 "$ref": "#/components/schemas/SettingsSchema"
 292 |               }
 293 |             ]
 294 |           },
 295 |           "social": {
 296 |             "description": "The social media links for location",
 297 |             "allOf": [
 298 |               {
 299 |                 "$ref": "#/components/schemas/SocialSchema"
 300 |               }
 301 |             ]
 302 |           }
 303 |         }
 304 |       },
 305 |       "SearchSuccessfulResponseDto": {
 306 |         "type": "object",
 307 |         "properties": {
 308 |           "locations": {
 309 |             "type": "array",
 310 |             "items": {
 311 |               "$ref": "#/components/schemas/GetLocationSchema"
 312 |             }
 313 |           }
 314 |         }
 315 |       },
 316 |       "BusinessSchema": {
 317 |         "type": "object",
 318 |         "properties": {
 319 |           "name": {
 320 |             "type": "string",
 321 |             "example": "dentist"
 322 |           },
 323 |           "address": {
 324 |             "type": "string",
 325 |             "example": "MIG 14, Delhi"
 326 |           },
 327 |           "city": {
 328 |             "type": "string",
 329 |             "example": "delhi"
 330 |           },
 331 |           "state": {
 332 |             "type": "string",
 333 |             "example": "delhi"
 334 |           },
 335 |           "country": {
 336 |             "type": "string",
 337 |             "example": "IN"
 338 |           },
 339 |           "postalCode": {
 340 |             "type": "string",
 341 |             "example": "567654"
 342 |           },
 343 |           "website": {
 344 |             "type": "string",
 345 |             "example": "https://gohighlevel.com/"
 346 |           },
 347 |           "timezone": {
 348 |             "type": "string",
 349 |             "example": "America/Chicago"
 350 |           },
 351 |           "logoUrl": {
 352 |             "type": "string",
 353 |             "example": "https://dummyimage.com/o/locationPhotos%2Fve9EPM428h8vShlRW1KT.jpeg"
 354 |           }
 355 |         }
 356 |       },
 357 |       "GetLocationByIdSchema": {
 358 |         "type": "object",
 359 |         "properties": {
 360 |           "id": {
 361 |             "type": "string",
 362 |             "example": "ve9EPM428h8vShlRW1KT"
 363 |           },
 364 |           "companyId": {
 365 |             "type": "string",
 366 |             "example": "5DP4iH6HLkQsiKESj6rh"
 367 |           },
 368 |           "name": {
 369 |             "type": "string",
 370 |             "example": "dentist"
 371 |           },
 372 |           "domain": {
 373 |             "type": "string",
 374 |             "example": "test.msgsndr.com"
 375 |           },
 376 |           "address": {
 377 |             "type": "string",
 378 |             "example": "ganthi nagar, gyanbabu chauk motihati"
 379 |           },
 380 |           "city": {
 381 |             "type": "string",
 382 |             "example": "motihari"
 383 |           },
 384 |           "state": {
 385 |             "type": "string",
 386 |             "example": "Loca"
 387 |           },
 388 |           "logoUrl": {
 389 |             "type": "string",
 390 |             "example": "https://dummyimage.com/o/locationPhotos%2Fve9EPM428h8vShlRW1KT.jpeg"
 391 |           },
 392 |           "country": {
 393 |             "type": "string",
 394 |             "example": "IN"
 395 |           },
 396 |           "postalCode": {
 397 |             "type": "string",
 398 |             "example": "567654"
 399 |           },
 400 |           "website": {
 401 |             "type": "string",
 402 |             "example": "https://gohighlevel.com/"
 403 |           },
 404 |           "timezone": {
 405 |             "type": "string",
 406 |             "example": "America/Chicago"
 407 |           },
 408 |           "firstName": {
 409 |             "type": "string",
 410 |             "example": "Dr. Rane"
 411 |           },
 412 |           "lastName": {
 413 |             "type": "string",
 414 |             "example": "deo"
 415 |           },
 416 |           "email": {
 417 |             "type": "string",
 418 |             "example": "rane@due.com"
 419 |           },
 420 |           "phone": {
 421 |             "type": "string",
 422 |             "example": "+919039160788"
 423 |           },
 424 |           "business": {
 425 |             "$ref": "#/components/schemas/BusinessSchema"
 426 |           },
 427 |           "social": {
 428 |             "$ref": "#/components/schemas/SocialSchema"
 429 |           },
 430 |           "settings": {
 431 |             "$ref": "#/components/schemas/SettingsSchema"
 432 |           },
 433 |           "reseller": {
 434 |             "type": "object"
 435 |           }
 436 |         }
 437 |       },
 438 |       "GetLocationByIdSuccessfulResponseDto": {
 439 |         "type": "object",
 440 |         "properties": {
 441 |           "location": {
 442 |             "$ref": "#/components/schemas/GetLocationByIdSchema"
 443 |           }
 444 |         }
 445 |       },
 446 |       "ProspectInfoDto": {
 447 |         "type": "object",
 448 |         "properties": {
 449 |           "firstName": {
 450 |             "type": "string",
 451 |             "description": "First name of the prospect",
 452 |             "example": "John"
 453 |           },
 454 |           "lastName": {
 455 |             "type": "string",
 456 |             "description": "Last name of the prospect",
 457 |             "example": "Doe"
 458 |           },
 459 |           "email": {
 460 |             "type": "string",
 461 |             "description": "Email of the prospect",
 462 |             "example": "john.doe@mail.com"
 463 |           }
 464 |         },
 465 |         "required": [
 466 |           "firstName",
 467 |           "lastName",
 468 |           "email"
 469 |         ]
 470 |       },
 471 |       "TwilioSchema": {
 472 |         "type": "object",
 473 |         "properties": {
 474 |           "sid": {
 475 |             "type": "string",
 476 |             "description": "SID provided by Twilio",
 477 |             "example": "AC_XXXXXXXXXXX"
 478 |           },
 479 |           "authToken": {
 480 |             "type": "string",
 481 |             "description": "Auth token provided by Twilio",
 482 |             "example": "77_XXXXXXXXXXX"
 483 |           }
 484 |         },
 485 |         "required": [
 486 |           "sid",
 487 |           "authToken"
 488 |         ]
 489 |       },
 490 |       "MailgunSchema": {
 491 |         "type": "object",
 492 |         "properties": {
 493 |           "apiKey": {
 494 |             "type": "string",
 495 |             "description": "API key provided by Mailgun",
 496 |             "example": "key-XXXXXXXXXXX"
 497 |           },
 498 |           "domain": {
 499 |             "type": "string",
 500 |             "description": "Domain connected with Mailgun",
 501 |             "example": "replies.yourdomain.com"
 502 |           }
 503 |         },
 504 |         "required": [
 505 |           "apiKey",
 506 |           "domain"
 507 |         ]
 508 |       },
 509 |       "CreateLocationDto": {
 510 |         "type": "object",
 511 |         "properties": {
 512 |           "name": {
 513 |             "type": "string",
 514 |             "example": "Mark Shoes",
 515 |             "description": "The name for the sub-account/location"
 516 |           },
 517 |           "phone": {
 518 |             "type": "string",
 519 |             "example": "+1410039940",
 520 |             "description": "The phone number of the business for which sub-account is created with the appropriate country-code"
 521 |           },
 522 |           "companyId": {
 523 |             "type": "string",
 524 |             "description": "Company/Agency Id",
 525 |             "example": "UAXssdawIWAWD"
 526 |           },
 527 |           "address": {
 528 |             "type": "string",
 529 |             "example": "4th fleet street",
 530 |             "description": "The address of the business for which sub-account is created"
 531 |           },
 532 |           "city": {
 533 |             "type": "string",
 534 |             "example": "New York",
 535 |             "description": "The city where the business is located for which sub-account is created"
 536 |           },
 537 |           "state": {
 538 |             "type": "string",
 539 |             "example": "Illinois",
 540 |             "description": "The state in which the business operates for which sub-account is created"
 541 |           },
 542 |           "country": {
 543 |             "type": "string",
 544 |             "example": "US",
 545 |             "description": "The 2 letter country-code in which the business is present for which sub-account is created",
 546 |             "enum": [
 547 |               "AF",
 548 |               "AX",
 549 |               "AL",
 550 |               "DZ",
 551 |               "AS",
 552 |               "AD",
 553 |               "AO",
 554 |               "AI",
 555 |               "AQ",
 556 |               "AG",
 557 |               "AR",
 558 |               "AM",
 559 |               "AW",
 560 |               "AU",
 561 |               "AT",
 562 |               "AZ",
 563 |               "BS",
 564 |               "BH",
 565 |               "BD",
 566 |               "BB",
 567 |               "BY",
 568 |               "BE",
 569 |               "BZ",
 570 |               "BJ",
 571 |               "BM",
 572 |               "BT",
 573 |               "BO",
 574 |               "BA",
 575 |               "BW",
 576 |               "BV",
 577 |               "BR",
 578 |               "IO",
 579 |               "BN",
 580 |               "BG",
 581 |               "BF",
 582 |               "BI",
 583 |               "KH",
 584 |               "CM",
 585 |               "CA",
 586 |               "CV",
 587 |               "KY",
 588 |               "CF",
 589 |               "TD",
 590 |               "CL",
 591 |               "CN",
 592 |               "CX",
 593 |               "CC",
 594 |               "CO",
 595 |               "KM",
 596 |               "CG",
 597 |               "CD",
 598 |               "CK",
 599 |               "CR",
 600 |               "CI",
 601 |               "HR",
 602 |               "CU",
 603 |               "CY",
 604 |               "CZ",
 605 |               "DK",
 606 |               "DJ",
 607 |               "DM",
 608 |               "DO",
 609 |               "EC",
 610 |               "EG",
 611 |               "SV",
 612 |               "GQ",
 613 |               "ER",
 614 |               "EE",
 615 |               "ET",
 616 |               "FK",
 617 |               "FO",
 618 |               "FJ",
 619 |               "FI",
 620 |               "FR",
 621 |               "GF",
 622 |               "PF",
 623 |               "TF",
 624 |               "GA",
 625 |               "GM",
 626 |               "GE",
 627 |               "DE",
 628 |               "GH",
 629 |               "GI",
 630 |               "GR",
 631 |               "GL",
 632 |               "GD",
 633 |               "GP",
 634 |               "GU",
 635 |               "GT",
 636 |               "GG",
 637 |               "GN",
 638 |               "GW",
 639 |               "GY",
 640 |               "HT",
 641 |               "HM",
 642 |               "VA",
 643 |               "HN",
 644 |               "HK",
 645 |               "HU",
 646 |               "IS",
 647 |               "IN",
 648 |               "ID",
 649 |               "IR",
 650 |               "IQ",
 651 |               "IE",
 652 |               "IM",
 653 |               "IL",
 654 |               "IT",
 655 |               "JM",
 656 |               "JP",
 657 |               "JE",
 658 |               "JO",
 659 |               "KZ",
 660 |               "KE",
 661 |               "KI",
 662 |               "KP",
 663 |               "KR",
 664 |               "XK",
 665 |               "KW",
 666 |               "KG",
 667 |               "LA",
 668 |               "LV",
 669 |               "LB",
 670 |               "LS",
 671 |               "LR",
 672 |               "LY",
 673 |               "LI",
 674 |               "LT",
 675 |               "LU",
 676 |               "MO",
 677 |               "MK",
 678 |               "MG",
 679 |               "MW",
 680 |               "MY",
 681 |               "MV",
 682 |               "ML",
 683 |               "MT",
 684 |               "MH",
 685 |               "MQ",
 686 |               "MR",
 687 |               "MU",
 688 |               "YT",
 689 |               "MX",
 690 |               "FM",
 691 |               "MD",
 692 |               "MC",
 693 |               "MN",
 694 |               "ME",
 695 |               "MS",
 696 |               "MA",
 697 |               "MZ",
 698 |               "MM",
 699 |               "NA",
 700 |               "NR",
 701 |               "NP",
 702 |               "NL",
 703 |               "AN",
 704 |               "NC",
 705 |               "NZ",
 706 |               "NI",
 707 |               "NE",
 708 |               "NG",
 709 |               "NU",
 710 |               "NF",
 711 |               "MP",
 712 |               "NO",
 713 |               "OM",
 714 |               "PK",
 715 |               "PW",
 716 |               "PS",
 717 |               "PA",
 718 |               "PG",
 719 |               "PY",
 720 |               "PE",
 721 |               "PH",
 722 |               "PN",
 723 |               "PL",
 724 |               "PT",
 725 |               "PR",
 726 |               "QA",
 727 |               "RE",
 728 |               "RO",
 729 |               "RU",
 730 |               "RW",
 731 |               "SH",
 732 |               "KN",
 733 |               "LC",
 734 |               "MF",
 735 |               "PM",
 736 |               "VC",
 737 |               "WS",
 738 |               "SM",
 739 |               "ST",
 740 |               "SA",
 741 |               "SN",
 742 |               "RS",
 743 |               "SC",
 744 |               "SL",
 745 |               "SG",
 746 |               "SX",
 747 |               "SK",
 748 |               "SI",
 749 |               "SB",
 750 |               "SO",
 751 |               "ZA",
 752 |               "GS",
 753 |               "ES",
 754 |               "LK",
 755 |               "SD",
 756 |               "SR",
 757 |               "SJ",
 758 |               "SZ",
 759 |               "SE",
 760 |               "CH",
 761 |               "SY",
 762 |               "TW",
 763 |               "TJ",
 764 |               "TZ",
 765 |               "TH",
 766 |               "TL",
 767 |               "TG",
 768 |               "TK",
 769 |               "TO",
 770 |               "TT",
 771 |               "TN",
 772 |               "TR",
 773 |               "TM",
 774 |               "TC",
 775 |               "TV",
 776 |               "UG",
 777 |               "GB",
 778 |               "UA",
 779 |               "AE",
 780 |               "US",
 781 |               "UM",
 782 |               "UY",
 783 |               "UZ",
 784 |               "VU",
 785 |               "VE",
 786 |               "VN",
 787 |               "VG",
 788 |               "VI",
 789 |               "WF",
 790 |               "EH",
 791 |               "YE",
 792 |               "ZM",
 793 |               "ZW"
 794 |             ]
 795 |           },
 796 |           "postalCode": {
 797 |             "type": "string",
 798 |             "example": "567654",
 799 |             "description": "The postal code of the business for which sub-account is created"
 800 |           },
 801 |           "website": {
 802 |             "type": "string",
 803 |             "example": "https://yourwebsite.com",
 804 |             "description": "The website of the business for which sub-account is created"
 805 |           },
 806 |           "timezone": {
 807 |             "type": "string",
 808 |             "example": "US/Central",
 809 |             "description": "The timezone of the business for which sub-account is created"
 810 |           },
 811 |           "prospectInfo": {
 812 |             "example": {
 813 |               "firstName": "John",
 814 |               "lastName": "Doe",
 815 |               "email": "john.doe@mail.com"
 816 |             },
 817 |             "allOf": [
 818 |               {
 819 |                 "$ref": "#/components/schemas/ProspectInfoDto"
 820 |               }
 821 |             ]
 822 |           },
 823 |           "settings": {
 824 |             "description": "The default settings for location",
 825 |             "allOf": [
 826 |               {
 827 |                 "$ref": "#/components/schemas/SettingsSchema"
 828 |               }
 829 |             ]
 830 |           },
 831 |           "social": {
 832 |             "description": "The social media links for location",
 833 |             "allOf": [
 834 |               {
 835 |                 "$ref": "#/components/schemas/SocialSchema"
 836 |               }
 837 |             ]
 838 |           },
 839 |           "twilio": {
 840 |             "description": "The twilio credentials for location",
 841 |             "allOf": [
 842 |               {
 843 |                 "$ref": "#/components/schemas/TwilioSchema"
 844 |               }
 845 |             ]
 846 |           },
 847 |           "mailgun": {
 848 |             "description": "The mailgun credentials for location",
 849 |             "allOf": [
 850 |               {
 851 |                 "$ref": "#/components/schemas/MailgunSchema"
 852 |               }
 853 |             ]
 854 |           },
 855 |           "snapshotId": {
 856 |             "type": "string",
 857 |             "description": "The snapshot ID to be loaded into the location.",
 858 |             "example": "XXXXXXXXXXX"
 859 |           }
 860 |         },
 861 |         "required": [
 862 |           "name",
 863 |           "companyId"
 864 |         ]
 865 |       },
 866 |       "CreateLocationSuccessfulResponseDto": {
 867 |         "type": "object",
 868 |         "properties": {
 869 |           "id": {
 870 |             "type": "string",
 871 |             "description": "Location Id",
 872 |             "example": "ve9EPM428h8vShlRW1KT"
 873 |           },
 874 |           "companyId": {
 875 |             "type": "string",
 876 |             "description": "Company/Agency Id",
 877 |             "example": "UAXssdawIWAWD"
 878 |           },
 879 |           "name": {
 880 |             "type": "string",
 881 |             "example": "Mark Shoes",
 882 |             "description": "The name for the sub-account/location"
 883 |           },
 884 |           "phone": {
 885 |             "type": "string",
 886 |             "example": "+1410039940",
 887 |             "description": "The phone number of the business for which sub-account is created"
 888 |           },
 889 |           "email": {
 890 |             "type": "string",
 891 |             "example": "john.doe@mail.com",
 892 |             "description": "The email for the sub-account/location"
 893 |           },
 894 |           "address": {
 895 |             "type": "string",
 896 |             "example": "4th fleet street",
 897 |             "description": "The address of the business for which sub-account is created"
 898 |           },
 899 |           "city": {
 900 |             "type": "string",
 901 |             "example": "New York",
 902 |             "description": "The city where the business is located for which sub-account is created"
 903 |           },
 904 |           "state": {
 905 |             "type": "string",
 906 |             "example": "Illinois",
 907 |             "description": "The state in which the business operates for which sub-account is created"
 908 |           },
 909 |           "domain": {
 910 |             "type": "string",
 911 |             "example": "test.msgsndr.com"
 912 |           },
 913 |           "country": {
 914 |             "type": "string",
 915 |             "example": "US",
 916 |             "description": "The country in which the business is present for which sub-account is created",
 917 |             "enum": [
 918 |               "AF",
 919 |               "AX",
 920 |               "AL",
 921 |               "DZ",
 922 |               "AS",
 923 |               "AD",
 924 |               "AO",
 925 |               "AI",
 926 |               "AQ",
 927 |               "AG",
 928 |               "AR",
 929 |               "AM",
 930 |               "AW",
 931 |               "AU",
 932 |               "AT",
 933 |               "AZ",
 934 |               "BS",
 935 |               "BH",
 936 |               "BD",
 937 |               "BB",
 938 |               "BY",
 939 |               "BE",
 940 |               "BZ",
 941 |               "BJ",
 942 |               "BM",
 943 |               "BT",
 944 |               "BO",
 945 |               "BA",
 946 |               "BW",
 947 |               "BV",
 948 |               "BR",
 949 |               "IO",
 950 |               "BN",
 951 |               "BG",
 952 |               "BF",
 953 |               "BI",
 954 |               "KH",
 955 |               "CM",
 956 |               "CA",
 957 |               "CV",
 958 |               "KY",
 959 |               "CF",
 960 |               "TD",
 961 |               "CL",
 962 |               "CN",
 963 |               "CX",
 964 |               "CC",
 965 |               "CO",
 966 |               "KM",
 967 |               "CG",
 968 |               "CD",
 969 |               "CK",
 970 |               "CR",
 971 |               "CI",
 972 |               "HR",
 973 |               "CU",
 974 |               "CY",
 975 |               "CZ",
 976 |               "DK",
 977 |               "DJ",
 978 |               "DM",
 979 |               "DO",
 980 |               "EC",
 981 |               "EG",
 982 |               "SV",
 983 |               "GQ",
 984 |               "ER",
 985 |               "EE",
 986 |               "ET",
 987 |               "FK",
 988 |               "FO",
 989 |               "FJ",
 990 |               "FI",
 991 |               "FR",
 992 |               "GF",
 993 |               "PF",
 994 |               "TF",
 995 |               "GA",
 996 |               "GM",
 997 |               "GE",
 998 |               "DE",
 999 |               "GH",
1000 |               "GI",
1001 |               "GR",
1002 |               "GL",
1003 |               "GD",
1004 |               "GP",
1005 |               "GU",
1006 |               "GT",
1007 |               "GG",
1008 |               "GN",
1009 |               "GW",
1010 |               "GY",
1011 |               "HT",
1012 |               "HM",
1013 |               "VA",
1014 |               "HN",
1015 |               "HK",
1016 |               "HU",
1017 |               "IS",
1018 |               "IN",
1019 |               "ID",
1020 |               "IR",
1021 |               "IQ",
1022 |               "IE",
1023 |               "IM",
1024 |               "IL",
1025 |               "IT",
1026 |               "JM",
1027 |               "JP",
1028 |               "JE",
1029 |               "JO",
1030 |               "KZ",
1031 |               "KE",
1032 |               "KI",
1033 |               "KP",
1034 |               "KR",
1035 |               "XK",
1036 |               "KW",
1037 |               "KG",
1038 |               "LA",
1039 |               "LV",
1040 |               "LB",
1041 |               "LS",
1042 |               "LR",
1043 |               "LY",
1044 |               "LI",
1045 |               "LT",
1046 |               "LU",
1047 |               "MO",
1048 |               "MK",
1049 |               "MG",
1050 |               "MW",
1051 |               "MY",
1052 |               "MV",
1053 |               "ML",
1054 |               "MT",
1055 |               "MH",
1056 |               "MQ",
1057 |               "MR",
1058 |               "MU",
1059 |               "YT",
1060 |               "MX",
1061 |               "FM",
1062 |               "MD",
1063 |               "MC",
1064 |               "MN",
1065 |               "ME",
1066 |               "MS",
1067 |               "MA",
1068 |               "MZ",
1069 |               "MM",
1070 |               "NA",
1071 |               "NR",
1072 |               "NP",
1073 |               "NL",
1074 |               "AN",
1075 |               "NC",
1076 |               "NZ",
1077 |               "NI",
1078 |               "NE",
1079 |               "NG",
1080 |               "NU",
1081 |               "NF",
1082 |               "MP",
1083 |               "NO",
1084 |               "OM",
1085 |               "PK",
1086 |               "PW",
1087 |               "PS",
1088 |               "PA",
1089 |               "PG",
1090 |               "PY",
1091 |               "PE",
1092 |               "PH",
1093 |               "PN",
1094 |               "PL",
1095 |               "PT",
1096 |               "PR",
1097 |               "QA",
1098 |               "RE",
1099 |               "RO",
1100 |               "RU",
1101 |               "RW",
1102 |               "SH",
1103 |               "KN",
1104 |               "LC",
1105 |               "MF",
1106 |               "PM",
1107 |               "VC",
1108 |               "WS",
1109 |               "SM",
1110 |               "ST",
1111 |               "SA",
1112 |               "SN",
1113 |               "RS",
1114 |               "SC",
1115 |               "SL",
1116 |               "SG",
1117 |               "SX",
1118 |               "SK",
1119 |               "SI",
1120 |               "SB",
1121 |               "SO",
1122 |               "ZA",
1123 |               "GS",
1124 |               "ES",
1125 |               "LK",
1126 |               "SD",
1127 |               "SR",
1128 |               "SJ",
1129 |               "SZ",
1130 |               "SE",
1131 |               "CH",
1132 |               "SY",
1133 |               "TW",
1134 |               "TJ",
1135 |               "TZ",
1136 |               "TH",
1137 |               "TL",
1138 |               "TG",
1139 |               "TK",
1140 |               "TO",
1141 |               "TT",
1142 |               "TN",
1143 |               "TR",
1144 |               "TM",
1145 |               "TC",
1146 |               "TV",
1147 |               "UG",
1148 |               "GB",
1149 |               "UA",
1150 |               "AE",
1151 |               "US",
1152 |               "UM",
1153 |               "UY",
1154 |               "UZ",
1155 |               "VU",
1156 |               "VE",
1157 |               "VN",
1158 |               "VG",
1159 |               "VI",
1160 |               "WF",
1161 |               "EH",
1162 |               "YE",
1163 |               "ZM",
1164 |               "ZW"
1165 |             ]
1166 |           },
1167 |           "postalCode": {
1168 |             "type": "string",
1169 |             "example": "567654",
1170 |             "description": "The postal code of the business for which sub-account is created"
1171 |           },
1172 |           "website": {
1173 |             "type": "string",
1174 |             "example": "https://yourwebsite.com",
1175 |             "description": "The website of the business for which sub-account is created"
1176 |           },
1177 |           "timezone": {
1178 |             "type": "string",
1179 |             "example": "US/Central",
1180 |             "description": "The timezone of the business for which sub-account is created"
1181 |           },
1182 |           "settings": {
1183 |             "description": "The default settings for location",
1184 |             "allOf": [
1185 |               {
1186 |                 "$ref": "#/components/schemas/SettingsSchema"
1187 |               }
1188 |             ]
1189 |           },
1190 |           "social": {
1191 |             "description": "The social media links for location",
1192 |             "allOf": [
1193 |               {
1194 |                 "$ref": "#/components/schemas/SocialSchema"
1195 |               }
1196 |             ]
1197 |           }
1198 |         }
1199 |       },
1200 |       "SnapshotPutSchema": {
1201 |         "type": "object",
1202 |         "properties": {
1203 |           "id": {
1204 |             "type": "string",
1205 |             "description": "Snaptshot ID",
1206 |             "example": "XXXXXXXXXXX"
1207 |           },
1208 |           "override": {
1209 |             "type": "boolean",
1210 |             "description": "If you want override all conflicted assets then pass true. Default value is false.",
1211 |             "example": false,
1212 |             "default": false
1213 |           }
1214 |         },
1215 |         "required": [
1216 |           "id"
1217 |         ]
1218 |       },
1219 |       "UpdateLocationDto": {
1220 |         "type": "object",
1221 |         "properties": {
1222 |           "name": {
1223 |             "type": "string",
1224 |             "example": "Mark Shoes",
1225 |             "description": "The name for the sub-account/location"
1226 |           },
1227 |           "phone": {
1228 |             "type": "string",
1229 |             "example": "+1410039940",
1230 |             "description": "The phone number of the business for which sub-account is created"
1231 |           },
1232 |           "companyId": {
1233 |             "type": "string",
1234 |             "description": "Company/Agency Id",
1235 |             "example": "UAXssdawIWAWD"
1236 |           },
1237 |           "address": {
1238 |             "type": "string",
1239 |             "example": "4th fleet street",
1240 |             "description": "The address of the business for which sub-account is created"
1241 |           },
1242 |           "city": {
1243 |             "type": "string",
1244 |             "example": "New York",
1245 |             "description": "The city where the business is located for which sub-account is created"
1246 |           },
1247 |           "state": {
1248 |             "type": "string",
1249 |             "example": "Illinois",
1250 |             "description": "The state in which the business operates for which sub-account is created"
1251 |           },
1252 |           "country": {
1253 |             "type": "string",
1254 |             "example": "US",
1255 |             "description": "The country in which the business is present for which sub-account is created",
1256 |             "enum": [
1257 |               "AF",
1258 |               "AX",
1259 |               "AL",
1260 |               "DZ",
1261 |               "AS",
1262 |               "AD",
1263 |               "AO",
1264 |               "AI",
1265 |               "AQ",
1266 |               "AG",
1267 |               "AR",
1268 |               "AM",
1269 |               "AW",
1270 |               "AU",
1271 |               "AT",
1272 |               "AZ",
1273 |               "BS",
1274 |               "BH",
1275 |               "BD",
1276 |               "BB",
1277 |               "BY",
1278 |               "BE",
1279 |               "BZ",
1280 |               "BJ",
1281 |               "BM",
1282 |               "BT",
1283 |               "BO",
1284 |               "BA",
1285 |               "BW",
1286 |               "BV",
1287 |               "BR",
1288 |               "IO",
1289 |               "BN",
1290 |               "BG",
1291 |               "BF",
1292 |               "BI",
1293 |               "KH",
1294 |               "CM",
1295 |               "CA",
1296 |               "CV",
1297 |               "KY",
1298 |               "CF",
1299 |               "TD",
1300 |               "CL",
1301 |               "CN",
1302 |               "CX",
1303 |               "CC",
1304 |               "CO",
1305 |               "KM",
1306 |               "CG",
1307 |               "CD",
1308 |               "CK",
1309 |               "CR",
1310 |               "CI",
1311 |               "HR",
1312 |               "CU",
1313 |               "CY",
1314 |               "CZ",
1315 |               "DK",
1316 |               "DJ",
1317 |               "DM",
1318 |               "DO",
1319 |               "EC",
1320 |               "EG",
1321 |               "SV",
1322 |               "GQ",
1323 |               "ER",
1324 |               "EE",
1325 |               "ET",
1326 |               "FK",
1327 |               "FO",
1328 |               "FJ",
1329 |               "FI",
1330 |               "FR",
1331 |               "GF",
1332 |               "PF",
1333 |               "TF",
1334 |               "GA",
1335 |               "GM",
1336 |               "GE",
1337 |               "DE",
1338 |               "GH",
1339 |               "GI",
1340 |               "GR",
1341 |               "GL",
1342 |               "GD",
1343 |               "GP",
1344 |               "GU",
1345 |               "GT",
1346 |               "GG",
1347 |               "GN",
1348 |               "GW",
1349 |               "GY",
1350 |               "HT",
1351 |               "HM",
1352 |               "VA",
1353 |               "HN",
1354 |               "HK",
1355 |               "HU",
1356 |               "IS",
1357 |               "IN",
1358 |               "ID",
1359 |               "IR",
1360 |               "IQ",
1361 |               "IE",
1362 |               "IM",
1363 |               "IL",
1364 |               "IT",
1365 |               "JM",
1366 |               "JP",
1367 |               "JE",
1368 |               "JO",
1369 |               "KZ",
1370 |               "KE",
1371 |               "KI",
1372 |               "KP",
1373 |               "KR",
1374 |               "XK",
1375 |               "KW",
1376 |               "KG",
1377 |               "LA",
1378 |               "LV",
1379 |               "LB",
1380 |               "LS",
1381 |               "LR",
1382 |               "LY",
1383 |               "LI",
1384 |               "LT",
1385 |               "LU",
1386 |               "MO",
1387 |               "MK",
1388 |               "MG",
1389 |               "MW",
1390 |               "MY",
1391 |               "MV",
1392 |               "ML",
1393 |               "MT",
1394 |               "MH",
1395 |               "MQ",
1396 |               "MR",
1397 |               "MU",
1398 |               "YT",
1399 |               "MX",
1400 |               "FM",
1401 |               "MD",
1402 |               "MC",
1403 |               "MN",
1404 |               "ME",
1405 |               "MS",
1406 |               "MA",
1407 |               "MZ",
1408 |               "MM",
1409 |               "NA",
1410 |               "NR",
1411 |               "NP",
1412 |               "NL",
1413 |               "AN",
1414 |               "NC",
1415 |               "NZ",
1416 |               "NI",
1417 |               "NE",
1418 |               "NG",
1419 |               "NU",
1420 |               "NF",
1421 |               "MP",
1422 |               "NO",
1423 |               "OM",
1424 |               "PK",
1425 |               "PW",
1426 |               "PS",
1427 |               "PA",
1428 |               "PG",
1429 |               "PY",
1430 |               "PE",
1431 |               "PH",
1432 |               "PN",
1433 |               "PL",
1434 |               "PT",
1435 |               "PR",
1436 |               "QA",
1437 |               "RE",
1438 |               "RO",
1439 |               "RU",
1440 |               "RW",
1441 |               "SH",
1442 |               "KN",
1443 |               "LC",
1444 |               "MF",
1445 |               "PM",
1446 |               "VC",
1447 |               "WS",
1448 |               "SM",
1449 |               "ST",
1450 |               "SA",
1451 |               "SN",
1452 |               "RS",
1453 |               "SC",
1454 |               "SL",
1455 |               "SG",
1456 |               "SX",
1457 |               "SK",
1458 |               "SI",
1459 |               "SB",
1460 |               "SO",
1461 |               "ZA",
1462 |               "GS",
1463 |               "ES",
1464 |               "LK",
1465 |               "SD",
1466 |               "SR",
1467 |               "SJ",
1468 |               "SZ",
1469 |               "SE",
1470 |               "CH",
1471 |               "SY",
1472 |               "TW",
1473 |               "TJ",
1474 |               "TZ",
1475 |               "TH",
1476 |               "TL",
1477 |               "TG",
1478 |               "TK",
1479 |               "TO",
1480 |               "TT",
1481 |               "TN",
1482 |               "TR",
1483 |               "TM",
1484 |               "TC",
1485 |               "TV",
1486 |               "UG",
1487 |               "GB",
1488 |               "UA",
1489 |               "AE",
1490 |               "US",
1491 |               "UM",
1492 |               "UY",
1493 |               "UZ",
1494 |               "VU",
1495 |               "VE",
1496 |               "VN",
1497 |               "VG",
1498 |               "VI",
1499 |               "WF",
1500 |               "EH",
1501 |               "YE",
1502 |               "ZM",
1503 |               "ZW"
1504 |             ]
1505 |           },
1506 |           "postalCode": {
1507 |             "type": "string",
1508 |             "example": "567654",
1509 |             "description": "The postal code of the business for which sub-account is created"
1510 |           },
1511 |           "website": {
1512 |             "type": "string",
1513 |             "example": "https://yourwebsite.com",
1514 |             "description": "The website of the business for which sub-account is created"
1515 |           },
1516 |           "timezone": {
1517 |             "type": "string",
1518 |             "example": "US/Central",
1519 |             "description": "The timezone of the business for which sub-account is created"
1520 |           },
1521 |           "prospectInfo": {
1522 |             "example": {
1523 |               "firstName": "John",
1524 |               "lastName": "Doe",
1525 |               "email": "john.doe@mail.com"
1526 |             },
1527 |             "allOf": [
1528 |               {
1529 |                 "$ref": "#/components/schemas/ProspectInfoDto"
1530 |               }
1531 |             ]
1532 |           },
1533 |           "settings": {
1534 |             "description": "The default settings for location",
1535 |             "allOf": [
1536 |               {
1537 |                 "$ref": "#/components/schemas/SettingsSchema"
1538 |               }
1539 |             ]
1540 |           },
1541 |           "social": {
1542 |             "description": "The social media links for location",
1543 |             "allOf": [
1544 |               {
1545 |                 "$ref": "#/components/schemas/SocialSchema"
1546 |               }
1547 |             ]
1548 |           },
1549 |           "twilio": {
1550 |             "description": "The twilio credentials for location",
1551 |             "allOf": [
1552 |               {
1553 |                 "$ref": "#/components/schemas/TwilioSchema"
1554 |               }
1555 |             ]
1556 |           },
1557 |           "mailgun": {
1558 |             "description": "The mailgun credentials for location",
1559 |             "allOf": [
1560 |               {
1561 |                 "$ref": "#/components/schemas/MailgunSchema"
1562 |               }
1563 |             ]
1564 |           },
1565 |           "snapshot": {
1566 |             "description": "The snapshot to be updated in the location.",
1567 |             "allOf": [
1568 |               {
1569 |                 "$ref": "#/components/schemas/SnapshotPutSchema"
1570 |               }
1571 |             ]
1572 |           }
1573 |         },
1574 |         "required": [
1575 |           "companyId"
1576 |         ]
1577 |       },
1578 |       "LocationDeletedSuccessfulResponseDto": {
1579 |         "type": "object",
1580 |         "properties": {
1581 |           "success": {
1582 |             "type": "boolean",
1583 |             "description": "Success status of the API",
1584 |             "example": true
1585 |           },
1586 |           "message": {
1587 |             "type": "string",
1588 |             "description": "Success message of the API",
1589 |             "example": "Deleted location with id: ve9EPM428h8vShlRW1KT"
1590 |           }
1591 |         },
1592 |         "required": [
1593 |           "success",
1594 |           "message"
1595 |         ]
1596 |       },
1597 |       "LocationTagsSchema": {
1598 |         "type": "object",
1599 |         "properties": {
1600 |           "name": {
1601 |             "type": "string",
1602 |             "example": "minim aliquip anim"
1603 |           },
1604 |           "locationId": {
1605 |             "type": "string",
1606 |             "example": "ve9EPM428h8vShlRW1KT"
1607 |           },
1608 |           "id": {
1609 |             "type": "string",
1610 |             "example": "flGwEuzsfJOia1i1ikRN"
1611 |           }
1612 |         }
1613 |       },
1614 |       "LocationTagsSuccessfulResponseDto": {
1615 |         "type": "object",
1616 |         "properties": {
1617 |           "tags": {
1618 |             "type": "array",
1619 |             "items": {
1620 |               "$ref": "#/components/schemas/LocationTagsSchema"
1621 |             }
1622 |           }
1623 |         }
1624 |       },
1625 |       "LocationTagSuccessfulResponseDto": {
1626 |         "type": "object",
1627 |         "properties": {
1628 |           "tag": {
1629 |             "$ref": "#/components/schemas/LocationTagsSchema"
1630 |           }
1631 |         }
1632 |       },
1633 |       "tagBody": {
1634 |         "type": "object",
1635 |         "properties": {
1636 |           "name": {
1637 |             "type": "string",
1638 |             "description": "Tag name",
1639 |             "example": "Tag"
1640 |           }
1641 |         },
1642 |         "required": [
1643 |           "name"
1644 |         ]
1645 |       },
1646 |       "LocationTagDeleteSuccessfulResponseDto": {
1647 |         "type": "object",
1648 |         "properties": {
1649 |           "succeded": {
1650 |             "type": "boolean",
1651 |             "example": true
1652 |           }
1653 |         }
1654 |       },
1655 |       "TaskSearchParamsDto": {
1656 |         "type": "object",
1657 |         "properties": {
1658 |           "contactId": {
1659 |             "description": "Contact Ids",
1660 |             "example": [
1661 |               "dSMo5jnqkJyh8YeGXM7k",
1662 |               "j5WESpmRj816VtyUuWwh"
1663 |             ],
1664 |             "type": "array",
1665 |             "items": {
1666 |               "type": "string"
1667 |             }
1668 |           },
1669 |           "completed": {
1670 |             "type": "boolean",
1671 |             "description": "Task Completed Or Pending",
1672 |             "example": true
1673 |           },
1674 |           "assignedTo": {
1675 |             "description": "Assigned User Ids",
1676 |             "example": [
1677 |               "0004Mtfsd11SBU1mBPgd"
1678 |             ],
1679 |             "type": "array",
1680 |             "items": {
1681 |               "type": "string"
1682 |             }
1683 |           },
1684 |           "query": {
1685 |             "type": "string",
1686 |             "description": "Search Value",
1687 |             "example": "Task Name"
1688 |           },
1689 |           "limit": {
1690 |             "type": "number",
1691 |             "description": "Limit To Api",
1692 |             "example": 10,
1693 |             "default": 25
1694 |           },
1695 |           "skip": {
1696 |             "type": "number",
1697 |             "description": "Number Of Tasks To Skip",
1698 |             "default": 0,
1699 |             "example": 10
1700 |           },
1701 |           "businessId": {
1702 |             "type": "string",
1703 |             "description": "Bussiness Id",
1704 |             "example": "6348240b98722079e5417332"
1705 |           }
1706 |         }
1707 |       },
1708 |       "LocationTaskListSuccessfulResponseDto": {
1709 |         "type": "object",
1710 |         "properties": {
1711 |           "tasks": {
1712 |             "type": "array",
1713 |             "items": {
1714 |               "type": "array"
1715 |             }
1716 |           }
1717 |         }
1718 |       },
1719 |       "CustomFieldSchema": {
1720 |         "type": "object",
1721 |         "properties": {
1722 |           "id": {
1723 |             "type": "string",
1724 |             "example": "3sv6UEo51C9Bmpo1cKTq"
1725 |           },
1726 |           "name": {
1727 |             "type": "string",
1728 |             "example": "pincode"
1729 |           },
1730 |           "fieldKey": {
1731 |             "type": "string",
1732 |             "example": "contact.pincode"
1733 |           },
1734 |           "placeholder": {
1735 |             "type": "string",
1736 |             "example": "Pin code"
1737 |           },
1738 |           "dataType": {
1739 |             "type": "string",
1740 |             "example": "TEXT"
1741 |           },
1742 |           "position": {
1743 |             "type": "number",
1744 |             "example": 0
1745 |           },
1746 |           "picklistOptions": {
1747 |             "example": [
1748 |               "first option"
1749 |             ],
1750 |             "type": "array",
1751 |             "items": {
1752 |               "type": "string"
1753 |             }
1754 |           },
1755 |           "picklistImageOptions": {
1756 |             "example": [],
1757 |             "type": "array",
1758 |             "items": {
1759 |               "type": "string"
1760 |             }
1761 |           },
1762 |           "isAllowedCustomOption": {
1763 |             "type": "boolean",
1764 |             "example": false
1765 |           },
1766 |           "isMultiFileAllowed": {
1767 |             "type": "boolean",
1768 |             "example": true
1769 |           },
1770 |           "maxFileLimit": {
1771 |             "type": "number",
1772 |             "example": 4
1773 |           },
1774 |           "locationId": {
1775 |             "type": "string",
1776 |             "example": "3sv6UEo51C9Bmpo1cKTq"
1777 |           },
1778 |           "model": {
1779 |             "type": "string",
1780 |             "description": "Model of the custom field",
1781 |             "example": "opportunity",
1782 |             "enum": [
1783 |               "contact",
1784 |               "opportunity"
1785 |             ]
1786 |           }
1787 |         }
1788 |       },
1789 |       "CustomFieldsListSuccessfulResponseDto": {
1790 |         "type": "object",
1791 |         "properties": {
1792 |           "customFields": {
1793 |             "type": "array",
1794 |             "items": {
1795 |               "$ref": "#/components/schemas/CustomFieldSchema"
1796 |             }
1797 |           }
1798 |         }
1799 |       },
1800 |       "CustomFieldSuccessfulResponseDto": {
1801 |         "type": "object",
1802 |         "properties": {
1803 |           "customField": {
1804 |             "$ref": "#/components/schemas/CustomFieldSchema"
1805 |           }
1806 |         }
1807 |       },
1808 |       "textBoxListOptionsSchema": {
1809 |         "type": "object",
1810 |         "properties": {
1811 |           "label": {
1812 |             "type": "string",
1813 |             "example": "First"
1814 |           },
1815 |           "prefillValue": {
1816 |             "type": "string",
1817 |             "example": ""
1818 |           }
1819 |         }
1820 |       },
1821 |       "CreateCustomFieldsDTO": {
1822 |         "type": "object",
1823 |         "properties": {
1824 |           "name": {
1825 |             "type": "string",
1826 |             "example": "Custom Field"
1827 |           },
1828 |           "dataType": {
1829 |             "type": "string",
1830 |             "example": "TEXT"
1831 |           },
1832 |           "placeholder": {
1833 |             "type": "string",
1834 |             "example": "Placeholder Text"
1835 |           },
1836 |           "acceptedFormat": {
1837 |             "example": [
1838 |               ".pdf",
1839 |               ".docx",
1840 |               ".jpeg"
1841 |             ],
1842 |             "type": "array",
1843 |             "items": {
1844 |               "type": "string"
1845 |             }
1846 |           },
1847 |           "isMultipleFile": {
1848 |             "type": "boolean",
1849 |             "example": false
1850 |           },
1851 |           "maxNumberOfFiles": {
1852 |             "type": "number",
1853 |             "example": 2
1854 |           },
1855 |           "textBoxListOptions": {
1856 |             "type": "array",
1857 |             "items": {
1858 |               "anyOf": [
1859 |                 {
1860 |                   "$ref": "#/components/schemas/textBoxListOptionsSchema"
1861 |                 },
1862 |                 {
1863 |                   "$ref": "#/components/schemas/textBoxListOptionsSchema"
1864 |                 }
1865 |               ]
1866 |             }
1867 |           },
1868 |           "position": {
1869 |             "type": "number",
1870 |             "example": 0,
1871 |             "default": 0
1872 |           },
1873 |           "model": {
1874 |             "type": "string",
1875 |             "description": "Model of the custom field you want to create",
1876 |             "example": "opportunity",
1877 |             "enum": [
1878 |               "contact",
1879 |               "opportunity"
1880 |             ]
1881 |           }
1882 |         },
1883 |         "required": [
1884 |           "name",
1885 |           "dataType"
1886 |         ]
1887 |       },
1888 |       "UpdateCustomFieldsDTO": {
1889 |         "type": "object",
1890 |         "properties": {
1891 |           "name": {
1892 |             "type": "string",
1893 |             "example": "Custom Field"
1894 |           },
1895 |           "placeholder": {
1896 |             "type": "string",
1897 |             "example": "Placeholder Text"
1898 |           },
1899 |           "acceptedFormat": {
1900 |             "example": [
1901 |               ".pdf",
1902 |               ".docx",
1903 |               ".jpeg"
1904 |             ],
1905 |             "type": "array",
1906 |             "items": {
1907 |               "type": "string"
1908 |             }
1909 |           },
1910 |           "isMultipleFile": {
1911 |             "type": "boolean",
1912 |             "example": false
1913 |           },
1914 |           "maxNumberOfFiles": {
1915 |             "type": "number",
1916 |             "example": 2
1917 |           },
1918 |           "textBoxListOptions": {
1919 |             "type": "array",
1920 |             "items": {
1921 |               "anyOf": [
1922 |                 {
1923 |                   "$ref": "#/components/schemas/textBoxListOptionsSchema"
1924 |                 },
1925 |                 {
1926 |                   "$ref": "#/components/schemas/textBoxListOptionsSchema"
1927 |                 }
1928 |               ]
1929 |             }
1930 |           },
1931 |           "position": {
1932 |             "type": "number",
1933 |             "example": 0,
1934 |             "default": 0
1935 |           },
1936 |           "model": {
1937 |             "type": "string",
1938 |             "description": "Model of the custom field you want to update",
1939 |             "example": "opportunity",
1940 |             "enum": [
1941 |               "contact",
1942 |               "opportunity"
1943 |             ]
1944 |           }
1945 |         },
1946 |         "required": [
1947 |           "name"
1948 |         ]
1949 |       },
1950 |       "CustomFieldDeleteSuccessfulResponseDto": {
1951 |         "type": "object",
1952 |         "properties": {
1953 |           "succeded": {
1954 |             "type": "boolean",
1955 |             "example": true
1956 |           }
1957 |         }
1958 |       },
1959 |       "FileUploadBody": {
1960 |         "type": "object",
1961 |         "properties": {
1962 |           "id": {
1963 |             "type": "string",
1964 |             "description": "Id(Contact Id/Opportunity Id/Custom Field Id)",
1965 |             "example": "aWdODOBVOlH1RUFKWQke"
1966 |           },
1967 |           "maxFiles": {
1968 |             "type": "string",
1969 |             "description": "Max number of files",
1970 |             "example": "15"
1971 |           }
1972 |         }
1973 |       },
1974 |       "FileUploadResponseDto": {
1975 |         "type": "object",
1976 |         "properties": {
1977 |           "uploadedFiles": {
1978 |             "type": "object",
1979 |             "description": "Uploaded files",
1980 |             "example": {
1981 |               "FileName.csv": "https://highlevel-private-staging.storage.googleapis.com/location/Ar4JQgIyuzRsVuwD9RSK/custom-Field/UpZLmohmKEQYn0ymqplY/56e0d7fc-085c-4a07-9e1d-6d8fdac7e710.csv"
1982 |             }
1983 |           },
1984 |           "meta": {
1985 |             "description": "Meta data of uploaded files",
1986 |             "example": [
1987 |               {
1988 |                 "fieldname": "FileName.csv",
1989 |                 "originalname": "FileName.csv",
1990 |                 "encoding": "7bit",
1991 |                 "mimetype": "text/csv",
1992 |                 "size": 2061,
1993 |                 "url": "https://highlevel-private-staging.storage.googleapis.com/location/Ar4JQgIyuzRsVuwD9RSK/custom-Field/UpZLmohmKEQYn0ymqplY/56e0d7fc-085c-4a07-9e1d-6d8fdac7e710.csv"
1994 |               }
1995 |             ],
1996 |             "type": "array",
1997 |             "items": {
1998 |               "type": "string"
1999 |             }
2000 |           }
2001 |         }
2002 |       },
2003 |       "CustomValueSchema": {
2004 |         "type": "object",
2005 |         "properties": {
2006 |           "id": {
2007 |             "type": "string",
2008 |             "example": "rWQ709Pb62syqGLceg1x"
2009 |           },
2010 |           "name": {
2011 |             "type": "string",
2012 |             "example": "Custom Field"
2013 |           },
2014 |           "fieldKey": {
2015 |             "type": "string",
2016 |             "example": "{{ custom_values.custom_field }}"
2017 |           },
2018 |           "value": {
2019 |             "type": "string",
2020 |             "example": "Value"
2021 |           },
2022 |           "locationId": {
2023 |             "type": "string",
2024 |             "example": "rWQ709Pb6dasyqGLceg1x"
2025 |           }
2026 |         }
2027 |       },
2028 |       "CustomValuesListSuccessfulResponseDto": {
2029 |         "type": "object",
2030 |         "properties": {
2031 |           "customValues": {
2032 |             "type": "array",
2033 |             "items": {
2034 |               "$ref": "#/components/schemas/CustomValueSchema"
2035 |             }
2036 |           }
2037 |         }
2038 |       },
2039 |       "CustomValueIdSuccessfulResponseDto": {
2040 |         "type": "object",
2041 |         "properties": {
2042 |           "customValue": {
2043 |             "$ref": "#/components/schemas/CustomValueSchema"
2044 |           }
2045 |         }
2046 |       },
2047 |       "customValuesDTO": {
2048 |         "type": "object",
2049 |         "properties": {
2050 |           "name": {
2051 |             "type": "string",
2052 |             "example": "Custom Field Name"
2053 |           },
2054 |           "value": {
2055 |             "type": "string",
2056 |             "example": "Value"
2057 |           }
2058 |         },
2059 |         "required": [
2060 |           "name",
2061 |           "value"
2062 |         ]
2063 |       },
2064 |       "CustomValueDeleteSuccessfulResponseDto": {
2065 |         "type": "object",
2066 |         "properties": {
2067 |           "succeded": {
2068 |             "type": "boolean",
2069 |             "example": true
2070 |           }
2071 |         }
2072 |       },
2073 |       "SmsTemplateSchema": {
2074 |         "type": "object",
2075 |         "properties": {
2076 |           "body": {
2077 |             "type": "string",
2078 |             "example": "sms body"
2079 |           },
2080 |           "attachments": {
2081 |             "example": [],
2082 |             "type": "array",
2083 |             "items": {
2084 |               "type": "array"
2085 |             }
2086 |           }
2087 |         }
2088 |       },
2089 |       "GetSmsTemplateResponseSchema": {
2090 |         "type": "object",
2091 |         "properties": {
2092 |           "id": {
2093 |             "type": "string",
2094 |             "example": "2yMwhgTNO19bpintqrap"
2095 |           },
2096 |           "name": {
2097 |             "type": "string",
2098 |             "example": "sms template"
2099 |           },
2100 |           "type": {
2101 |             "type": "string",
2102 |             "example": "sms"
2103 |           },
2104 |           "template": {
2105 |             "$ref": "#/components/schemas/SmsTemplateSchema"
2106 |           },
2107 |           "dateAdded": {
2108 |             "type": "string",
2109 |             "example": "2022-01-27T12:31:19.679Z"
2110 |           },
2111 |           "locationId": {
2112 |             "type": "string",
2113 |             "example": "ve9EPM428h8vShlRW1KT"
2114 |           },
2115 |           "urlAttachments": {
2116 |             "example": [],
2117 |             "type": "array",
2118 |             "items": {
2119 |               "type": "string"
2120 |             }
2121 |           }
2122 |         }
2123 |       },
2124 |       "EmailTemplateSchema": {
2125 |         "type": "object",
2126 |         "properties": {
2127 |           "subject": {
2128 |             "type": "string",
2129 |             "example": "subject text"
2130 |           },
2131 |           "attachments": {
2132 |             "example": [],
2133 |             "type": "array",
2134 |             "items": {
2135 |               "type": "array"
2136 |             }
2137 |           },
2138 |           "html": {
2139 |             "type": "string",
2140 |             "example": "<html><head><style>body{font-family: sans-serif;}</style></head><body>testing</body></html>"
2141 |           }
2142 |         }
2143 |       },
2144 |       "GetEmailTemplateResponseSchema": {
2145 |         "type": "object",
2146 |         "properties": {
2147 |           "id": {
2148 |             "type": "string",
2149 |             "example": "2yMwhgTNO19bpintqrap"
2150 |           },
2151 |           "name": {
2152 |             "type": "string",
2153 |             "example": "email template"
2154 |           },
2155 |           "type": {
2156 |             "type": "string",
2157 |             "example": "email"
2158 |           },
2159 |           "dateAdded": {
2160 |             "type": "string",
2161 |             "example": "2022-01-27T12:31:19.679Z"
2162 |           },
2163 |           "template": {
2164 |             "$ref": "#/components/schemas/EmailTemplateSchema"
2165 |           },
2166 |           "locationId": {
2167 |             "type": "string",
2168 |             "example": "ve9EPM428h8vShlRW1KT"
2169 |           }
2170 |         }
2171 |       },
2172 |       "GetTemplatesSuccessfulResponseDto": {
2173 |         "type": "object",
2174 |         "properties": {
2175 |           "templates": {
2176 |             "type": "array",
2177 |             "items": {
2178 |               "oneOf": [
2179 |                 {
2180 |                   "$ref": "#/components/schemas/GetSmsTemplateResponseSchema"
2181 |                 },
2182 |                 {
2183 |                   "$ref": "#/components/schemas/GetEmailTemplateResponseSchema"
2184 |                 }
2185 |               ]
2186 |             }
2187 |           },
2188 |           "totalCount": {
2189 |             "type": "number",
2190 |             "example": 100
2191 |           }
2192 |         }
2193 |       }
2194 |     }
2195 |   },
2196 |   "paths": {
2197 |     "/locations/search": {
2198 |       "get": {
2199 |         "operationId": "search-locations",
2200 |         "summary": "Search",
2201 |         "description": "Search Sub-Account (Formerly Location)",
2202 |         "parameters": [
2203 |           {
2204 |             "name": "Authorization",
2205 |             "in": "header",
2206 |             "description": "Access Token",
2207 |             "required": true,
2208 |             "schema": {
2209 |               "type": "string",
2210 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2211 |             }
2212 |           },
2213 |           {
2214 |             "name": "Version",
2215 |             "in": "header",
2216 |             "description": "API Version",
2217 |             "required": true,
2218 |             "schema": {
2219 |               "type": "string",
2220 |               "enum": [
2221 |                 "2021-07-28"
2222 |               ]
2223 |             }
2224 |           },
2225 |           {
2226 |             "name": "companyId",
2227 |             "required": false,
2228 |             "in": "query",
2229 |             "description": "The company/agency id on which you want to perform the search",
2230 |             "example": "5DP4iH6HLkQsiKESj6rh",
2231 |             "schema": {
2232 |               "type": "string"
2233 |             }
2234 |           },
2235 |           {
2236 |             "name": "skip",
2237 |             "required": false,
2238 |             "in": "query",
2239 |             "example": "1",
2240 |             "description": "The value by which the results should be skipped. Default will be 0",
2241 |             "schema": {
2242 |               "default": "0",
2243 |               "type": "string"
2244 |             }
2245 |           },
2246 |           {
2247 |             "name": "limit",
2248 |             "required": false,
2249 |             "in": "query",
2250 |             "example": "10",
2251 |             "description": "The value by which the results should be limited. Default will be 10",
2252 |             "schema": {
2253 |               "default": "10",
2254 |               "type": "string"
2255 |             }
2256 |           },
2257 |           {
2258 |             "name": "order",
2259 |             "required": false,
2260 |             "in": "query",
2261 |             "example": "asc",
2262 |             "description": "The order in which the results should be returned - Allowed values asc, desc. Default will be asc",
2263 |             "schema": {
2264 |               "default": "asc",
2265 |               "type": "string"
2266 |             }
2267 |           },
2268 |           {
2269 |             "name": "email",
2270 |             "required": false,
2271 |             "in": "query",
2272 |             "example": "johndoe@mail.com",
2273 |             "schema": {
2274 |               "type": "string"
2275 |             }
2276 |           }
2277 |         ],
2278 |         "responses": {
2279 |           "200": {
2280 |             "description": "Successful response",
2281 |             "content": {
2282 |               "application/json": {
2283 |                 "schema": {
2284 |                   "$ref": "#/components/schemas/SearchSuccessfulResponseDto"
2285 |                 }
2286 |               }
2287 |             }
2288 |           },
2289 |           "400": {
2290 |             "description": "Bad Request",
2291 |             "content": {
2292 |               "application/json": {
2293 |                 "schema": {
2294 |                   "$ref": "#/components/schemas/BadRequestDTO"
2295 |                 }
2296 |               }
2297 |             }
2298 |           },
2299 |           "401": {
2300 |             "description": "Unauthorized",
2301 |             "content": {
2302 |               "application/json": {
2303 |                 "schema": {
2304 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2305 |                 }
2306 |               }
2307 |             }
2308 |           },
2309 |           "422": {
2310 |             "description": "Unprocessable Entity",
2311 |             "content": {
2312 |               "application/json": {
2313 |                 "schema": {
2314 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2315 |                 }
2316 |               }
2317 |             }
2318 |           }
2319 |         },
2320 |         "tags": [
2321 |           "Search"
2322 |         ],
2323 |         "security": [
2324 |           {
2325 |             "Agency-Access": []
2326 |           },
2327 |           {
2328 |             "Location-Access": []
2329 |           }
2330 |         ]
2331 |       }
2332 |     },
2333 |     "/locations/{locationId}": {
2334 |       "get": {
2335 |         "operationId": "get-location",
2336 |         "summary": "Get Sub-Account (Formerly Location)",
2337 |         "description": "Get details of a Sub-Account (Formerly Location) by passing the sub-account id",
2338 |         "parameters": [
2339 |           {
2340 |             "name": "Authorization",
2341 |             "in": "header",
2342 |             "description": "Access Token",
2343 |             "required": true,
2344 |             "schema": {
2345 |               "type": "string",
2346 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2347 |             }
2348 |           },
2349 |           {
2350 |             "name": "Version",
2351 |             "in": "header",
2352 |             "description": "API Version",
2353 |             "required": true,
2354 |             "schema": {
2355 |               "type": "string",
2356 |               "enum": [
2357 |                 "2021-07-28"
2358 |               ]
2359 |             }
2360 |           },
2361 |           {
2362 |             "name": "locationId",
2363 |             "required": true,
2364 |             "in": "path",
2365 |             "description": "Location Id",
2366 |             "example": "ve9EPM428h8vShlRW1KT",
2367 |             "schema": {
2368 |               "type": "string"
2369 |             }
2370 |           }
2371 |         ],
2372 |         "responses": {
2373 |           "200": {
2374 |             "description": "Successful response",
2375 |             "content": {
2376 |               "application/json": {
2377 |                 "schema": {
2378 |                   "$ref": "#/components/schemas/GetLocationByIdSuccessfulResponseDto"
2379 |                 }
2380 |               }
2381 |             }
2382 |           },
2383 |           "400": {
2384 |             "description": "Bad Request",
2385 |             "content": {
2386 |               "application/json": {
2387 |                 "schema": {
2388 |                   "$ref": "#/components/schemas/BadRequestDTO"
2389 |                 }
2390 |               }
2391 |             }
2392 |           },
2393 |           "401": {
2394 |             "description": "Unauthorized",
2395 |             "content": {
2396 |               "application/json": {
2397 |                 "schema": {
2398 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2399 |                 }
2400 |               }
2401 |             }
2402 |           },
2403 |           "422": {
2404 |             "description": "Unprocessable Entity",
2405 |             "content": {
2406 |               "application/json": {
2407 |                 "schema": {
2408 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2409 |                 }
2410 |               }
2411 |             }
2412 |           }
2413 |         },
2414 |         "tags": [
2415 |           "Sub-Account (Formerly Location)"
2416 |         ],
2417 |         "security": [
2418 |           {
2419 |             "Location-Access": []
2420 |           },
2421 |           {
2422 |             "Agency-Access": []
2423 |           }
2424 |         ]
2425 |       },
2426 |       "put": {
2427 |         "operationId": "put-location",
2428 |         "summary": "Put Sub-Account (Formerly Location)",
2429 |         "description": "Update a Sub-Account (Formerly Location) based on the data provided",
2430 |         "parameters": [
2431 |           {
2432 |             "name": "Authorization",
2433 |             "in": "header",
2434 |             "description": "Access Token",
2435 |             "required": true,
2436 |             "schema": {
2437 |               "type": "string",
2438 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2439 |             }
2440 |           },
2441 |           {
2442 |             "name": "Version",
2443 |             "in": "header",
2444 |             "description": "API Version",
2445 |             "required": true,
2446 |             "schema": {
2447 |               "type": "string",
2448 |               "enum": [
2449 |                 "2021-07-28"
2450 |               ]
2451 |             }
2452 |           },
2453 |           {
2454 |             "name": "locationId",
2455 |             "required": true,
2456 |             "in": "path",
2457 |             "description": "Location Id",
2458 |             "example": "ve9EPM428h8vShlRW1KT",
2459 |             "schema": {
2460 |               "type": "string"
2461 |             }
2462 |           }
2463 |         ],
2464 |         "requestBody": {
2465 |           "required": true,
2466 |           "content": {
2467 |             "application/json": {
2468 |               "schema": {
2469 |                 "$ref": "#/components/schemas/UpdateLocationDto"
2470 |               }
2471 |             }
2472 |           }
2473 |         },
2474 |         "responses": {
2475 |           "200": {
2476 |             "description": "Successful update response",
2477 |             "content": {
2478 |               "application/json": {
2479 |                 "schema": {
2480 |                   "$ref": "#/components/schemas/CreateLocationSuccessfulResponseDto"
2481 |                 }
2482 |               }
2483 |             }
2484 |           },
2485 |           "400": {
2486 |             "description": "Bad Request",
2487 |             "content": {
2488 |               "application/json": {
2489 |                 "schema": {
2490 |                   "$ref": "#/components/schemas/BadRequestDTO"
2491 |                 }
2492 |               }
2493 |             }
2494 |           },
2495 |           "401": {
2496 |             "description": "Unauthorized",
2497 |             "content": {
2498 |               "application/json": {
2499 |                 "schema": {
2500 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2501 |                 }
2502 |               }
2503 |             }
2504 |           }
2505 |         },
2506 |         "tags": [
2507 |           "Sub-Account (Formerly Location)"
2508 |         ],
2509 |         "security": [
2510 |           {
2511 |             "Agency-Access": []
2512 |           }
2513 |         ]
2514 |       },
2515 |       "delete": {
2516 |         "operationId": "delete-location",
2517 |         "summary": "Delete Sub-Account (Formerly Location)",
2518 |         "description": "Delete a Sub-Account (Formerly Location) from the Agency",
2519 |         "parameters": [
2520 |           {
2521 |             "name": "Authorization",
2522 |             "in": "header",
2523 |             "description": "Access Token",
2524 |             "required": true,
2525 |             "schema": {
2526 |               "type": "string",
2527 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2528 |             }
2529 |           },
2530 |           {
2531 |             "name": "Version",
2532 |             "in": "header",
2533 |             "description": "API Version",
2534 |             "required": true,
2535 |             "schema": {
2536 |               "type": "string",
2537 |               "enum": [
2538 |                 "2021-07-28"
2539 |               ]
2540 |             }
2541 |           },
2542 |           {
2543 |             "name": "locationId",
2544 |             "required": true,
2545 |             "in": "path",
2546 |             "description": "Location Id",
2547 |             "example": "ve9EPM428h8vShlRW1KT",
2548 |             "schema": {
2549 |               "type": "string"
2550 |             }
2551 |           },
2552 |           {
2553 |             "name": "deleteTwilioAccount",
2554 |             "required": true,
2555 |             "in": "query",
2556 |             "description": "Boolean value to indicate whether to delete Twilio Account or not",
2557 |             "example": false,
2558 |             "schema": {
2559 |               "type": "boolean"
2560 |             }
2561 |           }
2562 |         ],
2563 |         "responses": {
2564 |           "200": {
2565 |             "description": "Successful response",
2566 |             "content": {
2567 |               "application/json": {
2568 |                 "schema": {
2569 |                   "$ref": "#/components/schemas/LocationDeletedSuccessfulResponseDto"
2570 |                 }
2571 |               }
2572 |             }
2573 |           },
2574 |           "400": {
2575 |             "description": "Bad Request",
2576 |             "content": {
2577 |               "application/json": {
2578 |                 "schema": {
2579 |                   "$ref": "#/components/schemas/BadRequestDTO"
2580 |                 }
2581 |               }
2582 |             }
2583 |           },
2584 |           "401": {
2585 |             "description": "Unauthorized",
2586 |             "content": {
2587 |               "application/json": {
2588 |                 "schema": {
2589 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2590 |                 }
2591 |               }
2592 |             }
2593 |           }
2594 |         },
2595 |         "tags": [
2596 |           "Sub-Account (Formerly Location)"
2597 |         ],
2598 |         "security": [
2599 |           {
2600 |             "Agency-Access": []
2601 |           }
2602 |         ]
2603 |       }
2604 |     },
2605 |     "/locations/{locationId}/tags": {
2606 |       "get": {
2607 |         "operationId": "get-location-tags",
2608 |         "summary": "Get Tags",
2609 |         "description": "Get Sub-Account (Formerly Location) Tags",
2610 |         "parameters": [
2611 |           {
2612 |             "name": "Authorization",
2613 |             "in": "header",
2614 |             "description": "Access Token",
2615 |             "required": true,
2616 |             "schema": {
2617 |               "type": "string",
2618 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2619 |             }
2620 |           },
2621 |           {
2622 |             "name": "Version",
2623 |             "in": "header",
2624 |             "description": "API Version",
2625 |             "required": true,
2626 |             "schema": {
2627 |               "type": "string",
2628 |               "enum": [
2629 |                 "2021-07-28"
2630 |               ]
2631 |             }
2632 |           },
2633 |           {
2634 |             "name": "locationId",
2635 |             "required": true,
2636 |             "in": "path",
2637 |             "description": "Location Id",
2638 |             "example": "ve9EPM428h8vShlRW1KT",
2639 |             "schema": {
2640 |               "type": "string"
2641 |             }
2642 |           }
2643 |         ],
2644 |         "responses": {
2645 |           "200": {
2646 |             "description": "Successful response",
2647 |             "content": {
2648 |               "application/json": {
2649 |                 "schema": {
2650 |                   "$ref": "#/components/schemas/LocationTagsSuccessfulResponseDto"
2651 |                 }
2652 |               }
2653 |             }
2654 |           },
2655 |           "400": {
2656 |             "description": "Bad Request",
2657 |             "content": {
2658 |               "application/json": {
2659 |                 "schema": {
2660 |                   "$ref": "#/components/schemas/BadRequestDTO"
2661 |                 }
2662 |               }
2663 |             }
2664 |           },
2665 |           "401": {
2666 |             "description": "Unauthorized",
2667 |             "content": {
2668 |               "application/json": {
2669 |                 "schema": {
2670 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2671 |                 }
2672 |               }
2673 |             }
2674 |           },
2675 |           "422": {
2676 |             "description": "Unprocessable Entity",
2677 |             "content": {
2678 |               "application/json": {
2679 |                 "schema": {
2680 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2681 |                 }
2682 |               }
2683 |             }
2684 |           }
2685 |         },
2686 |         "tags": [
2687 |           "Tags"
2688 |         ],
2689 |         "security": [
2690 |           {
2691 |             "bearer": []
2692 |           }
2693 |         ]
2694 |       },
2695 |       "post": {
2696 |         "operationId": "create-tag",
2697 |         "summary": "Create Tag",
2698 |         "description": "Create tag",
2699 |         "parameters": [
2700 |           {
2701 |             "name": "Authorization",
2702 |             "in": "header",
2703 |             "description": "Access Token",
2704 |             "required": true,
2705 |             "schema": {
2706 |               "type": "string",
2707 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2708 |             }
2709 |           },
2710 |           {
2711 |             "name": "Version",
2712 |             "in": "header",
2713 |             "description": "API Version",
2714 |             "required": true,
2715 |             "schema": {
2716 |               "type": "string",
2717 |               "enum": [
2718 |                 "2021-07-28"
2719 |               ]
2720 |             }
2721 |           },
2722 |           {
2723 |             "name": "locationId",
2724 |             "required": true,
2725 |             "in": "path",
2726 |             "description": "Location Id",
2727 |             "example": "ve9EPM428h8vShlRW1KT",
2728 |             "schema": {
2729 |               "type": "string"
2730 |             }
2731 |           }
2732 |         ],
2733 |         "requestBody": {
2734 |           "required": true,
2735 |           "content": {
2736 |             "application/json": {
2737 |               "schema": {
2738 |                 "$ref": "#/components/schemas/tagBody"
2739 |               }
2740 |             }
2741 |           }
2742 |         },
2743 |         "responses": {
2744 |           "200": {
2745 |             "description": "Successful response",
2746 |             "content": {
2747 |               "application/json": {
2748 |                 "schema": {
2749 |                   "$ref": "#/components/schemas/LocationTagSuccessfulResponseDto"
2750 |                 }
2751 |               }
2752 |             }
2753 |           },
2754 |           "400": {
2755 |             "description": "Bad Request",
2756 |             "content": {
2757 |               "application/json": {
2758 |                 "schema": {
2759 |                   "$ref": "#/components/schemas/BadRequestDTO"
2760 |                 }
2761 |               }
2762 |             }
2763 |           },
2764 |           "401": {
2765 |             "description": "Unauthorized",
2766 |             "content": {
2767 |               "application/json": {
2768 |                 "schema": {
2769 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2770 |                 }
2771 |               }
2772 |             }
2773 |           },
2774 |           "422": {
2775 |             "description": "Unprocessable Entity",
2776 |             "content": {
2777 |               "application/json": {
2778 |                 "schema": {
2779 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2780 |                 }
2781 |               }
2782 |             }
2783 |           }
2784 |         },
2785 |         "tags": [
2786 |           "Tags"
2787 |         ],
2788 |         "security": [
2789 |           {
2790 |             "bearer": []
2791 |           }
2792 |         ]
2793 |       }
2794 |     },
2795 |     "/locations/{locationId}/tags/{tagId}": {
2796 |       "get": {
2797 |         "operationId": "get-tag-by-id",
2798 |         "summary": "Get tag by id",
2799 |         "description": "Get tag by id",
2800 |         "parameters": [
2801 |           {
2802 |             "name": "Authorization",
2803 |             "in": "header",
2804 |             "description": "Access Token",
2805 |             "required": true,
2806 |             "schema": {
2807 |               "type": "string",
2808 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2809 |             }
2810 |           },
2811 |           {
2812 |             "name": "Version",
2813 |             "in": "header",
2814 |             "description": "API Version",
2815 |             "required": true,
2816 |             "schema": {
2817 |               "type": "string",
2818 |               "enum": [
2819 |                 "2021-07-28"
2820 |               ]
2821 |             }
2822 |           },
2823 |           {
2824 |             "name": "locationId",
2825 |             "required": true,
2826 |             "in": "path",
2827 |             "description": "Location Id",
2828 |             "example": "ve9EPM428h8vShlRW1KT",
2829 |             "schema": {
2830 |               "type": "string"
2831 |             }
2832 |           },
2833 |           {
2834 |             "name": "tagId",
2835 |             "required": true,
2836 |             "in": "path",
2837 |             "description": "Tag Id",
2838 |             "example": "flGwEuzsfJOia1i1ikRN",
2839 |             "schema": {
2840 |               "type": "string"
2841 |             }
2842 |           }
2843 |         ],
2844 |         "responses": {
2845 |           "200": {
2846 |             "description": "Successful response",
2847 |             "content": {
2848 |               "application/json": {
2849 |                 "schema": {
2850 |                   "$ref": "#/components/schemas/LocationTagSuccessfulResponseDto"
2851 |                 }
2852 |               }
2853 |             }
2854 |           },
2855 |           "400": {
2856 |             "description": "Bad Request",
2857 |             "content": {
2858 |               "application/json": {
2859 |                 "schema": {
2860 |                   "$ref": "#/components/schemas/BadRequestDTO"
2861 |                 }
2862 |               }
2863 |             }
2864 |           },
2865 |           "401": {
2866 |             "description": "Unauthorized",
2867 |             "content": {
2868 |               "application/json": {
2869 |                 "schema": {
2870 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2871 |                 }
2872 |               }
2873 |             }
2874 |           },
2875 |           "422": {
2876 |             "description": "Unprocessable Entity",
2877 |             "content": {
2878 |               "application/json": {
2879 |                 "schema": {
2880 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2881 |                 }
2882 |               }
2883 |             }
2884 |           }
2885 |         },
2886 |         "tags": [
2887 |           "Tags"
2888 |         ],
2889 |         "security": [
2890 |           {
2891 |             "bearer": []
2892 |           }
2893 |         ]
2894 |       },
2895 |       "put": {
2896 |         "operationId": "update-tag",
2897 |         "summary": "Update tag",
2898 |         "description": "Update tag",
2899 |         "parameters": [
2900 |           {
2901 |             "name": "Authorization",
2902 |             "in": "header",
2903 |             "description": "Access Token",
2904 |             "required": true,
2905 |             "schema": {
2906 |               "type": "string",
2907 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2908 |             }
2909 |           },
2910 |           {
2911 |             "name": "Version",
2912 |             "in": "header",
2913 |             "description": "API Version",
2914 |             "required": true,
2915 |             "schema": {
2916 |               "type": "string",
2917 |               "enum": [
2918 |                 "2021-07-28"
2919 |               ]
2920 |             }
2921 |           },
2922 |           {
2923 |             "name": "locationId",
2924 |             "required": true,
2925 |             "in": "path",
2926 |             "description": "Location Id",
2927 |             "example": "ve9EPM428h8vShlRW1KT",
2928 |             "schema": {
2929 |               "type": "string"
2930 |             }
2931 |           },
2932 |           {
2933 |             "name": "tagId",
2934 |             "required": true,
2935 |             "in": "path",
2936 |             "description": "Tag Id",
2937 |             "example": "flGwEuzsfJOia1i1ikRN",
2938 |             "schema": {
2939 |               "type": "string"
2940 |             }
2941 |           }
2942 |         ],
2943 |         "requestBody": {
2944 |           "required": true,
2945 |           "content": {
2946 |             "application/json": {
2947 |               "schema": {
2948 |                 "$ref": "#/components/schemas/tagBody"
2949 |               }
2950 |             }
2951 |           }
2952 |         },
2953 |         "responses": {
2954 |           "200": {
2955 |             "description": "Successful response",
2956 |             "content": {
2957 |               "application/json": {
2958 |                 "schema": {
2959 |                   "$ref": "#/components/schemas/LocationTagSuccessfulResponseDto"
2960 |                 }
2961 |               }
2962 |             }
2963 |           },
2964 |           "400": {
2965 |             "description": "Bad Request",
2966 |             "content": {
2967 |               "application/json": {
2968 |                 "schema": {
2969 |                   "$ref": "#/components/schemas/BadRequestDTO"
2970 |                 }
2971 |               }
2972 |             }
2973 |           },
2974 |           "401": {
2975 |             "description": "Unauthorized",
2976 |             "content": {
2977 |               "application/json": {
2978 |                 "schema": {
2979 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2980 |                 }
2981 |               }
2982 |             }
2983 |           },
2984 |           "422": {
2985 |             "description": "Unprocessable Entity",
2986 |             "content": {
2987 |               "application/json": {
2988 |                 "schema": {
2989 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2990 |                 }
2991 |               }
2992 |             }
2993 |           }
2994 |         },
2995 |         "tags": [
2996 |           "Tags"
2997 |         ],
2998 |         "security": [
2999 |           {
3000 |             "bearer": []
3001 |           }
3002 |         ]
3003 |       },
3004 |       "delete": {
3005 |         "operationId": "delete-tag",
3006 |         "summary": "Delete tag",
3007 |         "description": "Delete tag",
3008 |         "parameters": [
3009 |           {
3010 |             "name": "Authorization",
3011 |             "in": "header",
3012 |             "description": "Access Token",
3013 |             "required": true,
3014 |             "schema": {
3015 |               "type": "string",
3016 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3017 |             }
3018 |           },
3019 |           {
3020 |             "name": "Version",
3021 |             "in": "header",
3022 |             "description": "API Version",
3023 |             "required": true,
3024 |             "schema": {
3025 |               "type": "string",
3026 |               "enum": [
3027 |                 "2021-07-28"
3028 |               ]
3029 |             }
3030 |           },
3031 |           {
3032 |             "name": "locationId",
3033 |             "required": true,
3034 |             "in": "path",
3035 |             "description": "Location Id",
3036 |             "example": "ve9EPM428h8vShlRW1KT",
3037 |             "schema": {
3038 |               "type": "string"
3039 |             }
3040 |           },
3041 |           {
3042 |             "name": "tagId",
3043 |             "required": true,
3044 |             "in": "path",
3045 |             "description": "Tag Id",
3046 |             "example": "flGwEuzsfJOia1i1ikRN",
3047 |             "schema": {
3048 |               "type": "string"
3049 |             }
3050 |           }
3051 |         ],
3052 |         "responses": {
3053 |           "200": {
3054 |             "description": "Successful response",
3055 |             "content": {
3056 |               "application/json": {
3057 |                 "schema": {
3058 |                   "$ref": "#/components/schemas/LocationTagDeleteSuccessfulResponseDto"
3059 |                 }
3060 |               }
3061 |             }
3062 |           },
3063 |           "400": {
3064 |             "description": "Bad Request",
3065 |             "content": {
3066 |               "application/json": {
3067 |                 "schema": {
3068 |                   "$ref": "#/components/schemas/BadRequestDTO"
3069 |                 }
3070 |               }
3071 |             }
3072 |           },
3073 |           "401": {
3074 |             "description": "Unauthorized",
3075 |             "content": {
3076 |               "application/json": {
3077 |                 "schema": {
3078 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3079 |                 }
3080 |               }
3081 |             }
3082 |           },
3083 |           "422": {
3084 |             "description": "Unprocessable Entity",
3085 |             "content": {
3086 |               "application/json": {
3087 |                 "schema": {
3088 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3089 |                 }
3090 |               }
3091 |             }
3092 |           }
3093 |         },
3094 |         "tags": [
3095 |           "Tags"
3096 |         ],
3097 |         "security": [
3098 |           {
3099 |             "bearer": []
3100 |           }
3101 |         ]
3102 |       }
3103 |     },
3104 |     "/locations/{locationId}/tasks/search": {
3105 |       "post": {
3106 |         "operationId": "task-search",
3107 |         "summary": "Task Search Filter",
3108 |         "description": "Task Search",
3109 |         "parameters": [
3110 |           {
3111 |             "name": "Authorization",
3112 |             "in": "header",
3113 |             "description": "Access Token",
3114 |             "required": true,
3115 |             "schema": {
3116 |               "type": "string",
3117 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3118 |             }
3119 |           },
3120 |           {
3121 |             "name": "Version",
3122 |             "in": "header",
3123 |             "description": "API Version",
3124 |             "required": true,
3125 |             "schema": {
3126 |               "type": "string",
3127 |               "enum": [
3128 |                 "2021-07-28"
3129 |               ]
3130 |             }
3131 |           },
3132 |           {
3133 |             "name": "locationId",
3134 |             "required": true,
3135 |             "in": "path",
3136 |             "description": "Location Id",
3137 |             "example": "ve9EPM428h8vShlRW1KT",
3138 |             "schema": {
3139 |               "type": "string"
3140 |             }
3141 |           }
3142 |         ],
3143 |         "requestBody": {
3144 |           "required": true,
3145 |           "content": {
3146 |             "application/json": {
3147 |               "schema": {
3148 |                 "$ref": "#/components/schemas/TaskSearchParamsDto"
3149 |               }
3150 |             }
3151 |           }
3152 |         },
3153 |         "responses": {
3154 |           "200": {
3155 |             "description": "Successful response",
3156 |             "content": {
3157 |               "application/json": {
3158 |                 "schema": {
3159 |                   "$ref": "#/components/schemas/LocationTaskListSuccessfulResponseDto"
3160 |                 }
3161 |               }
3162 |             }
3163 |           },
3164 |           "400": {
3165 |             "description": "Bad Request",
3166 |             "content": {
3167 |               "application/json": {
3168 |                 "schema": {
3169 |                   "$ref": "#/components/schemas/BadRequestDTO"
3170 |                 }
3171 |               }
3172 |             }
3173 |           },
3174 |           "401": {
3175 |             "description": "Unauthorized",
3176 |             "content": {
3177 |               "application/json": {
3178 |                 "schema": {
3179 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3180 |                 }
3181 |               }
3182 |             }
3183 |           },
3184 |           "422": {
3185 |             "description": "Unprocessable Entity",
3186 |             "content": {
3187 |               "application/json": {
3188 |                 "schema": {
3189 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3190 |                 }
3191 |               }
3192 |             }
3193 |           }
3194 |         },
3195 |         "tags": [
3196 |           "Tasks Search"
3197 |         ],
3198 |         "security": [
3199 |           {
3200 |             "bearer": []
3201 |           }
3202 |         ]
3203 |       }
3204 |     },
3205 |     "/locations/{locationId}/customFields": {
3206 |       "get": {
3207 |         "operationId": "get-custom-fields",
3208 |         "summary": "Get Custom Fields",
3209 |         "description": "Get Custom Fields",
3210 |         "parameters": [
3211 |           {
3212 |             "name": "Authorization",
3213 |             "in": "header",
3214 |             "description": "Access Token",
3215 |             "required": true,
3216 |             "schema": {
3217 |               "type": "string",
3218 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3219 |             }
3220 |           },
3221 |           {
3222 |             "name": "Version",
3223 |             "in": "header",
3224 |             "description": "API Version",
3225 |             "required": true,
3226 |             "schema": {
3227 |               "type": "string",
3228 |               "enum": [
3229 |                 "2021-07-28"
3230 |               ]
3231 |             }
3232 |           },
3233 |           {
3234 |             "name": "locationId",
3235 |             "required": true,
3236 |             "in": "path",
3237 |             "description": "Location Id",
3238 |             "example": "ve9EPM428h8vShlRW1KT",
3239 |             "schema": {
3240 |               "type": "string"
3241 |             }
3242 |           },
3243 |           {
3244 |             "name": "model",
3245 |             "required": false,
3246 |             "in": "query",
3247 |             "description": "Model of the custom field you want to retrieve",
3248 |             "example": "opportunity",
3249 |             "schema": {
3250 |               "enum": [
3251 |                 "contact",
3252 |                 "opportunity",
3253 |                 "all"
3254 |               ],
3255 |               "type": "string"
3256 |             }
3257 |           }
3258 |         ],
3259 |         "responses": {
3260 |           "200": {
3261 |             "description": "Successful response",
3262 |             "content": {
3263 |               "application/json": {
3264 |                 "schema": {
3265 |                   "$ref": "#/components/schemas/CustomFieldsListSuccessfulResponseDto"
3266 |                 }
3267 |               }
3268 |             }
3269 |           },
3270 |           "400": {
3271 |             "description": "Bad Request",
3272 |             "content": {
3273 |               "application/json": {
3274 |                 "schema": {
3275 |                   "$ref": "#/components/schemas/BadRequestDTO"
3276 |                 }
3277 |               }
3278 |             }
3279 |           },
3280 |           "401": {
3281 |             "description": "Unauthorized",
3282 |             "content": {
3283 |               "application/json": {
3284 |                 "schema": {
3285 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3286 |                 }
3287 |               }
3288 |             }
3289 |           },
3290 |           "422": {
3291 |             "description": "Unprocessable Entity",
3292 |             "content": {
3293 |               "application/json": {
3294 |                 "schema": {
3295 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3296 |                 }
3297 |               }
3298 |             }
3299 |           }
3300 |         },
3301 |         "tags": [
3302 |           "Custom Field"
3303 |         ],
3304 |         "security": [
3305 |           {
3306 |             "bearer": []
3307 |           }
3308 |         ]
3309 |       },
3310 |       "post": {
3311 |         "operationId": "create-custom-field",
3312 |         "summary": "Create Custom Field",
3313 |         "description": "Create Custom Field",
3314 |         "parameters": [
3315 |           {
3316 |             "name": "Authorization",
3317 |             "in": "header",
3318 |             "description": "Access Token",
3319 |             "required": true,
3320 |             "schema": {
3321 |               "type": "string",
3322 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3323 |             }
3324 |           },
3325 |           {
3326 |             "name": "Version",
3327 |             "in": "header",
3328 |             "description": "API Version",
3329 |             "required": true,
3330 |             "schema": {
3331 |               "type": "string",
3332 |               "enum": [
3333 |                 "2021-07-28"
3334 |               ]
3335 |             }
3336 |           },
3337 |           {
3338 |             "name": "locationId",
3339 |             "required": true,
3340 |             "in": "path",
3341 |             "description": "Location Id",
3342 |             "example": "ve9EPM428h8vShlRW1KT",
3343 |             "schema": {
3344 |               "type": "string"
3345 |             }
3346 |           }
3347 |         ],
3348 |         "requestBody": {
3349 |           "required": true,
3350 |           "content": {
3351 |             "application/json": {
3352 |               "schema": {
3353 |                 "$ref": "#/components/schemas/CreateCustomFieldsDTO"
3354 |               }
3355 |             }
3356 |           }
3357 |         },
3358 |         "responses": {
3359 |           "201": {
3360 |             "description": "Successful response",
3361 |             "content": {
3362 |               "application/json": {
3363 |                 "schema": {
3364 |                   "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
3365 |                 }
3366 |               }
3367 |             }
3368 |           },
3369 |           "400": {
3370 |             "description": "Bad Request",
3371 |             "content": {
3372 |               "application/json": {
3373 |                 "schema": {
3374 |                   "$ref": "#/components/schemas/BadRequestDTO"
3375 |                 }
3376 |               }
3377 |             }
3378 |           },
3379 |           "401": {
3380 |             "description": "Unauthorized",
3381 |             "content": {
3382 |               "application/json": {
3383 |                 "schema": {
3384 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3385 |                 }
3386 |               }
3387 |             }
3388 |           },
3389 |           "422": {
3390 |             "description": "Unprocessable Entity",
3391 |             "content": {
3392 |               "application/json": {
3393 |                 "schema": {
3394 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3395 |                 }
3396 |               }
3397 |             }
3398 |           }
3399 |         },
3400 |         "tags": [
3401 |           "Custom Field"
3402 |         ],
3403 |         "security": [
3404 |           {
3405 |             "bearer": []
3406 |           }
3407 |         ]
3408 |       }
3409 |     },
3410 |     "/locations/{locationId}/customFields/{id}": {
3411 |       "get": {
3412 |         "operationId": "get-custom-field",
3413 |         "summary": "Get Custom Field",
3414 |         "description": "Get Custom Field",
3415 |         "parameters": [
3416 |           {
3417 |             "name": "Authorization",
3418 |             "in": "header",
3419 |             "description": "Access Token",
3420 |             "required": true,
3421 |             "schema": {
3422 |               "type": "string",
3423 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3424 |             }
3425 |           },
3426 |           {
3427 |             "name": "Version",
3428 |             "in": "header",
3429 |             "description": "API Version",
3430 |             "required": true,
3431 |             "schema": {
3432 |               "type": "string",
3433 |               "enum": [
3434 |                 "2021-07-28"
3435 |               ]
3436 |             }
3437 |           },
3438 |           {
3439 |             "name": "locationId",
3440 |             "required": true,
3441 |             "in": "path",
3442 |             "description": "Location Id",
3443 |             "example": "ve9EPM428h8vShlRW1KT",
3444 |             "schema": {
3445 |               "type": "string"
3446 |             }
3447 |           },
3448 |           {
3449 |             "name": "id",
3450 |             "required": true,
3451 |             "in": "path",
3452 |             "description": "Custom Field Id",
3453 |             "example": "00NhGCcN1tlO8ZHcu7Wb",
3454 |             "schema": {
3455 |               "type": "string"
3456 |             }
3457 |           }
3458 |         ],
3459 |         "responses": {
3460 |           "200": {
3461 |             "description": "Successful response",
3462 |             "content": {
3463 |               "application/json": {
3464 |                 "schema": {
3465 |                   "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
3466 |                 }
3467 |               }
3468 |             }
3469 |           },
3470 |           "400": {
3471 |             "description": "Bad Request",
3472 |             "content": {
3473 |               "application/json": {
3474 |                 "schema": {
3475 |                   "$ref": "#/components/schemas/BadRequestDTO"
3476 |                 }
3477 |               }
3478 |             }
3479 |           },
3480 |           "401": {
3481 |             "description": "Unauthorized",
3482 |             "content": {
3483 |               "application/json": {
3484 |                 "schema": {
3485 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3486 |                 }
3487 |               }
3488 |             }
3489 |           },
3490 |           "422": {
3491 |             "description": "Unprocessable Entity",
3492 |             "content": {
3493 |               "application/json": {
3494 |                 "schema": {
3495 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3496 |                 }
3497 |               }
3498 |             }
3499 |           }
3500 |         },
3501 |         "tags": [
3502 |           "Custom Field"
3503 |         ],
3504 |         "security": [
3505 |           {
3506 |             "bearer": []
3507 |           }
3508 |         ]
3509 |       },
3510 |       "put": {
3511 |         "operationId": "update-custom-field",
3512 |         "summary": "Update Custom Field",
3513 |         "description": "Update Custom Field",
3514 |         "parameters": [
3515 |           {
3516 |             "name": "Authorization",
3517 |             "in": "header",
3518 |             "description": "Access Token",
3519 |             "required": true,
3520 |             "schema": {
3521 |               "type": "string",
3522 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3523 |             }
3524 |           },
3525 |           {
3526 |             "name": "Version",
3527 |             "in": "header",
3528 |             "description": "API Version",
3529 |             "required": true,
3530 |             "schema": {
3531 |               "type": "string",
3532 |               "enum": [
3533 |                 "2021-07-28"
3534 |               ]
3535 |             }
3536 |           },
3537 |           {
3538 |             "name": "locationId",
3539 |             "required": true,
3540 |             "in": "path",
3541 |             "description": "Location Id",
3542 |             "example": "ve9EPM428h8vShlRW1KT",
3543 |             "schema": {
3544 |               "type": "string"
3545 |             }
3546 |           },
3547 |           {
3548 |             "name": "id",
3549 |             "required": true,
3550 |             "in": "path",
3551 |             "description": "Custom Field Id",
3552 |             "example": "00NhGCcN1tlO8ZHcu7Wb",
3553 |             "schema": {
3554 |               "type": "string"
3555 |             }
3556 |           }
3557 |         ],
3558 |         "requestBody": {
3559 |           "required": true,
3560 |           "content": {
3561 |             "application/json": {
3562 |               "schema": {
3563 |                 "$ref": "#/components/schemas/UpdateCustomFieldsDTO"
3564 |               }
3565 |             }
3566 |           }
3567 |         },
3568 |         "responses": {
3569 |           "200": {
3570 |             "description": "Successful response",
3571 |             "content": {
3572 |               "application/json": {
3573 |                 "schema": {
3574 |                   "$ref": "#/components/schemas/CustomFieldSuccessfulResponseDto"
3575 |                 }
3576 |               }
3577 |             }
3578 |           },
3579 |           "400": {
3580 |             "description": "Bad Request",
3581 |             "content": {
3582 |               "application/json": {
3583 |                 "schema": {
3584 |                   "$ref": "#/components/schemas/BadRequestDTO"
3585 |                 }
3586 |               }
3587 |             }
3588 |           },
3589 |           "401": {
3590 |             "description": "Unauthorized",
3591 |             "content": {
3592 |               "application/json": {
3593 |                 "schema": {
3594 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3595 |                 }
3596 |               }
3597 |             }
3598 |           },
3599 |           "422": {
3600 |             "description": "Unprocessable Entity",
3601 |             "content": {
3602 |               "application/json": {
3603 |                 "schema": {
3604 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3605 |                 }
3606 |               }
3607 |             }
3608 |           }
3609 |         },
3610 |         "tags": [
3611 |           "Custom Field"
3612 |         ],
3613 |         "security": [
3614 |           {
3615 |             "bearer": []
3616 |           }
3617 |         ]
3618 |       },
3619 |       "delete": {
3620 |         "operationId": "delete-custom-field",
3621 |         "summary": "Delete Custom Field",
3622 |         "description": "Delete Custom Field",
3623 |         "parameters": [
3624 |           {
3625 |             "name": "Authorization",
3626 |             "in": "header",
3627 |             "description": "Access Token",
3628 |             "required": true,
3629 |             "schema": {
3630 |               "type": "string",
3631 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3632 |             }
3633 |           },
3634 |           {
3635 |             "name": "Version",
3636 |             "in": "header",
3637 |             "description": "API Version",
3638 |             "required": true,
3639 |             "schema": {
3640 |               "type": "string",
3641 |               "enum": [
3642 |                 "2021-07-28"
3643 |               ]
3644 |             }
3645 |           },
3646 |           {
3647 |             "name": "locationId",
3648 |             "required": true,
3649 |             "in": "path",
3650 |             "description": "Location Id",
3651 |             "example": "ve9EPM428h8vShlRW1KT",
3652 |             "schema": {
3653 |               "type": "string"
3654 |             }
3655 |           },
3656 |           {
3657 |             "name": "id",
3658 |             "required": true,
3659 |             "in": "path",
3660 |             "description": "Custom Field Id",
3661 |             "example": "00NhGCcN1tlO8ZHcu7Wb",
3662 |             "schema": {
3663 |               "type": "string"
3664 |             }
3665 |           }
3666 |         ],
3667 |         "responses": {
3668 |           "200": {
3669 |             "description": "Successful response",
3670 |             "content": {
3671 |               "application/json": {
3672 |                 "schema": {
3673 |                   "$ref": "#/components/schemas/CustomFieldDeleteSuccessfulResponseDto"
3674 |                 }
3675 |               }
3676 |             }
3677 |           },
3678 |           "400": {
3679 |             "description": "Bad Request",
3680 |             "content": {
3681 |               "application/json": {
3682 |                 "schema": {
3683 |                   "$ref": "#/components/schemas/BadRequestDTO"
3684 |                 }
3685 |               }
3686 |             }
3687 |           },
3688 |           "401": {
3689 |             "description": "Unauthorized",
3690 |             "content": {
3691 |               "application/json": {
3692 |                 "schema": {
3693 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3694 |                 }
3695 |               }
3696 |             }
3697 |           },
3698 |           "422": {
3699 |             "description": "Unprocessable Entity",
3700 |             "content": {
3701 |               "application/json": {
3702 |                 "schema": {
3703 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3704 |                 }
3705 |               }
3706 |             }
3707 |           }
3708 |         },
3709 |         "tags": [
3710 |           "Custom Field"
3711 |         ],
3712 |         "security": [
3713 |           {
3714 |             "bearer": []
3715 |           }
3716 |         ]
3717 |       }
3718 |     },
3719 |     "/locations/{locationId}/customFields/upload": {
3720 |       "post": {
3721 |         "operationId": "upload-file-customFields",
3722 |         "summary": "Uploads File to customFields",
3723 |         "description": "Uploads File to customFields",
3724 |         "parameters": [
3725 |           {
3726 |             "name": "Authorization",
3727 |             "in": "header",
3728 |             "description": "Access Token",
3729 |             "required": true,
3730 |             "schema": {
3731 |               "type": "string",
3732 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3733 |             }
3734 |           },
3735 |           {
3736 |             "name": "Version",
3737 |             "in": "header",
3738 |             "description": "API Version",
3739 |             "required": true,
3740 |             "schema": {
3741 |               "type": "string",
3742 |               "enum": [
3743 |                 "2021-07-28"
3744 |               ]
3745 |             }
3746 |           },
3747 |           {
3748 |             "name": "locationId",
3749 |             "required": true,
3750 |             "in": "path",
3751 |             "schema": {
3752 |               "type": "string"
3753 |             }
3754 |           }
3755 |         ],
3756 |         "requestBody": {
3757 |           "required": true,
3758 |           "content": {
3759 |             "multipart/form-data": {
3760 |               "schema": {
3761 |                 "$ref": "#/components/schemas/FileUploadBody"
3762 |               }
3763 |             }
3764 |           }
3765 |         },
3766 |         "responses": {
3767 |           "200": {
3768 |             "description": "Successful response",
3769 |             "content": {
3770 |               "application/json": {
3771 |                 "schema": {
3772 |                   "$ref": "#/components/schemas/FileUploadResponseDto"
3773 |                 }
3774 |               }
3775 |             }
3776 |           },
3777 |           "400": {
3778 |             "description": "Bad Request",
3779 |             "content": {
3780 |               "application/json": {
3781 |                 "schema": {
3782 |                   "$ref": "#/components/schemas/BadRequestDTO"
3783 |                 }
3784 |               }
3785 |             }
3786 |           },
3787 |           "401": {
3788 |             "description": "Unauthorized",
3789 |             "content": {
3790 |               "application/json": {
3791 |                 "schema": {
3792 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3793 |                 }
3794 |               }
3795 |             }
3796 |           },
3797 |           "422": {
3798 |             "description": "Unprocessable Entity",
3799 |             "content": {
3800 |               "application/json": {
3801 |                 "schema": {
3802 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3803 |                 }
3804 |               }
3805 |             }
3806 |           }
3807 |         },
3808 |         "tags": [
3809 |           "Custom Field"
3810 |         ],
3811 |         "security": [
3812 |           {
3813 |             "bearer": []
3814 |           }
3815 |         ]
3816 |       }
3817 |     },
3818 |     "/locations/{locationId}/customValues": {
3819 |       "get": {
3820 |         "operationId": "get-custom-values",
3821 |         "summary": "Get Custom Values",
3822 |         "description": "Get Custom Values",
3823 |         "parameters": [
3824 |           {
3825 |             "name": "Authorization",
3826 |             "in": "header",
3827 |             "description": "Access Token",
3828 |             "required": true,
3829 |             "schema": {
3830 |               "type": "string",
3831 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3832 |             }
3833 |           },
3834 |           {
3835 |             "name": "Version",
3836 |             "in": "header",
3837 |             "description": "API Version",
3838 |             "required": true,
3839 |             "schema": {
3840 |               "type": "string",
3841 |               "enum": [
3842 |                 "2021-07-28"
3843 |               ]
3844 |             }
3845 |           },
3846 |           {
3847 |             "name": "locationId",
3848 |             "required": true,
3849 |             "in": "path",
3850 |             "description": "Location Id",
3851 |             "example": "ve9EPM428h8vShlRW1KT",
3852 |             "schema": {
3853 |               "type": "string"
3854 |             }
3855 |           }
3856 |         ],
3857 |         "responses": {
3858 |           "200": {
3859 |             "description": "Successful response",
3860 |             "content": {
3861 |               "application/json": {
3862 |                 "schema": {
3863 |                   "$ref": "#/components/schemas/CustomValuesListSuccessfulResponseDto"
3864 |                 }
3865 |               }
3866 |             }
3867 |           },
3868 |           "400": {
3869 |             "description": "Bad Request",
3870 |             "content": {
3871 |               "application/json": {
3872 |                 "schema": {
3873 |                   "$ref": "#/components/schemas/BadRequestDTO"
3874 |                 }
3875 |               }
3876 |             }
3877 |           },
3878 |           "401": {
3879 |             "description": "Unauthorized",
3880 |             "content": {
3881 |               "application/json": {
3882 |                 "schema": {
3883 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3884 |                 }
3885 |               }
3886 |             }
3887 |           }
3888 |         },
3889 |         "tags": [
3890 |           "Custom Value"
3891 |         ],
3892 |         "security": [
3893 |           {
3894 |             "bearer": []
3895 |           }
3896 |         ]
3897 |       },
3898 |       "post": {
3899 |         "operationId": "create-custom-value",
3900 |         "summary": "Create Custom Value",
3901 |         "description": "Create Custom Value",
3902 |         "parameters": [
3903 |           {
3904 |             "name": "Authorization",
3905 |             "in": "header",
3906 |             "description": "Access Token",
3907 |             "required": true,
3908 |             "schema": {
3909 |               "type": "string",
3910 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3911 |             }
3912 |           },
3913 |           {
3914 |             "name": "Version",
3915 |             "in": "header",
3916 |             "description": "API Version",
3917 |             "required": true,
3918 |             "schema": {
3919 |               "type": "string",
3920 |               "enum": [
3921 |                 "2021-07-28"
3922 |               ]
3923 |             }
3924 |           },
3925 |           {
3926 |             "name": "locationId",
3927 |             "required": true,
3928 |             "in": "path",
3929 |             "description": "Location Id",
3930 |             "example": "ve9EPM428h8vShlRW1KT",
3931 |             "schema": {
3932 |               "type": "string"
3933 |             }
3934 |           }
3935 |         ],
3936 |         "requestBody": {
3937 |           "required": true,
3938 |           "content": {
3939 |             "application/json": {
3940 |               "schema": {
3941 |                 "$ref": "#/components/schemas/customValuesDTO"
3942 |               }
3943 |             }
3944 |           }
3945 |         },
3946 |         "responses": {
3947 |           "201": {
3948 |             "description": "Successful response",
3949 |             "content": {
3950 |               "application/json": {
3951 |                 "schema": {
3952 |                   "$ref": "#/components/schemas/CustomValueIdSuccessfulResponseDto"
3953 |                 }
3954 |               }
3955 |             }
3956 |           },
3957 |           "400": {
3958 |             "description": "Bad Request",
3959 |             "content": {
3960 |               "application/json": {
3961 |                 "schema": {
3962 |                   "$ref": "#/components/schemas/BadRequestDTO"
3963 |                 }
3964 |               }
3965 |             }
3966 |           },
3967 |           "401": {
3968 |             "description": "Unauthorized",
3969 |             "content": {
3970 |               "application/json": {
3971 |                 "schema": {
3972 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3973 |                 }
3974 |               }
3975 |             }
3976 |           },
3977 |           "422": {
3978 |             "description": "Unprocessable Entity",
3979 |             "content": {
3980 |               "application/json": {
3981 |                 "schema": {
3982 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3983 |                 }
3984 |               }
3985 |             }
3986 |           }
3987 |         },
3988 |         "tags": [
3989 |           "Custom Value"
3990 |         ],
3991 |         "security": [
3992 |           {
3993 |             "bearer": []
3994 |           }
3995 |         ]
3996 |       }
3997 |     },
3998 |     "/locations/{locationId}/customValues/{id}": {
3999 |       "get": {
4000 |         "operationId": "get-custom-value",
4001 |         "summary": "Get Custom Value",
4002 |         "description": "Get Custom Value",
4003 |         "parameters": [
4004 |           {
4005 |             "name": "Authorization",
4006 |             "in": "header",
4007 |             "description": "Access Token",
4008 |             "required": true,
4009 |             "schema": {
4010 |               "type": "string",
4011 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4012 |             }
4013 |           },
4014 |           {
4015 |             "name": "Version",
4016 |             "in": "header",
4017 |             "description": "API Version",
4018 |             "required": true,
4019 |             "schema": {
4020 |               "type": "string",
4021 |               "enum": [
4022 |                 "2021-07-28"
4023 |               ]
4024 |             }
4025 |           },
4026 |           {
4027 |             "name": "locationId",
4028 |             "required": true,
4029 |             "in": "path",
4030 |             "description": "Location Id",
4031 |             "example": "ve9EPM428h8vShlRW1KT",
4032 |             "schema": {
4033 |               "type": "string"
4034 |             }
4035 |           },
4036 |           {
4037 |             "name": "id",
4038 |             "required": true,
4039 |             "in": "path",
4040 |             "description": "Custom Value Id",
4041 |             "example": "kOBjMVAJhFuUeYIojVet",
4042 |             "schema": {
4043 |               "type": "string"
4044 |             }
4045 |           }
4046 |         ],
4047 |         "responses": {
4048 |           "200": {
4049 |             "description": "Successful response",
4050 |             "content": {
4051 |               "application/json": {
4052 |                 "schema": {
4053 |                   "$ref": "#/components/schemas/CustomValueIdSuccessfulResponseDto"
4054 |                 }
4055 |               }
4056 |             }
4057 |           },
4058 |           "400": {
4059 |             "description": "Bad Request",
4060 |             "content": {
4061 |               "application/json": {
4062 |                 "schema": {
4063 |                   "$ref": "#/components/schemas/BadRequestDTO"
4064 |                 }
4065 |               }
4066 |             }
4067 |           },
4068 |           "401": {
4069 |             "description": "Unauthorized",
4070 |             "content": {
4071 |               "application/json": {
4072 |                 "schema": {
4073 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4074 |                 }
4075 |               }
4076 |             }
4077 |           },
4078 |           "422": {
4079 |             "description": "Unprocessable Entity",
4080 |             "content": {
4081 |               "application/json": {
4082 |                 "schema": {
4083 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4084 |                 }
4085 |               }
4086 |             }
4087 |           }
4088 |         },
4089 |         "tags": [
4090 |           "Custom Value"
4091 |         ],
4092 |         "security": [
4093 |           {
4094 |             "bearer": []
4095 |           }
4096 |         ]
4097 |       },
4098 |       "put": {
4099 |         "operationId": "update-custom-value",
4100 |         "summary": "Update Custom Value",
4101 |         "description": "Update Custom Value",
4102 |         "parameters": [
4103 |           {
4104 |             "name": "Authorization",
4105 |             "in": "header",
4106 |             "description": "Access Token",
4107 |             "required": true,
4108 |             "schema": {
4109 |               "type": "string",
4110 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4111 |             }
4112 |           },
4113 |           {
4114 |             "name": "Version",
4115 |             "in": "header",
4116 |             "description": "API Version",
4117 |             "required": true,
4118 |             "schema": {
4119 |               "type": "string",
4120 |               "enum": [
4121 |                 "2021-07-28"
4122 |               ]
4123 |             }
4124 |           },
4125 |           {
4126 |             "name": "locationId",
4127 |             "required": true,
4128 |             "in": "path",
4129 |             "description": "Location Id",
4130 |             "example": "ve9EPM428h8vShlRW1KT",
4131 |             "schema": {
4132 |               "type": "string"
4133 |             }
4134 |           },
4135 |           {
4136 |             "name": "id",
4137 |             "required": true,
4138 |             "in": "path",
4139 |             "description": "Custom Value Id",
4140 |             "example": "kOBjMVAJhFuUeYIojVet",
4141 |             "schema": {
4142 |               "type": "string"
4143 |             }
4144 |           }
4145 |         ],
4146 |         "requestBody": {
4147 |           "required": true,
4148 |           "content": {
4149 |             "application/json": {
4150 |               "schema": {
4151 |                 "$ref": "#/components/schemas/customValuesDTO"
4152 |               }
4153 |             }
4154 |           }
4155 |         },
4156 |         "responses": {
4157 |           "200": {
4158 |             "description": "Successful response",
4159 |             "content": {
4160 |               "application/json": {
4161 |                 "schema": {
4162 |                   "$ref": "#/components/schemas/CustomValueIdSuccessfulResponseDto"
4163 |                 }
4164 |               }
4165 |             }
4166 |           },
4167 |           "400": {
4168 |             "description": "Bad Request",
4169 |             "content": {
4170 |               "application/json": {
4171 |                 "schema": {
4172 |                   "$ref": "#/components/schemas/BadRequestDTO"
4173 |                 }
4174 |               }
4175 |             }
4176 |           },
4177 |           "401": {
4178 |             "description": "Unauthorized",
4179 |             "content": {
4180 |               "application/json": {
4181 |                 "schema": {
4182 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4183 |                 }
4184 |               }
4185 |             }
4186 |           },
4187 |           "422": {
4188 |             "description": "Unprocessable Entity",
4189 |             "content": {
4190 |               "application/json": {
4191 |                 "schema": {
4192 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4193 |                 }
4194 |               }
4195 |             }
4196 |           }
4197 |         },
4198 |         "tags": [
4199 |           "Custom Value"
4200 |         ],
4201 |         "security": [
4202 |           {
4203 |             "bearer": []
4204 |           }
4205 |         ]
4206 |       },
4207 |       "delete": {
4208 |         "operationId": "delete-custom-value",
4209 |         "summary": "Delete Custom Value",
4210 |         "description": "Delete Custom Value",
4211 |         "parameters": [
4212 |           {
4213 |             "name": "Authorization",
4214 |             "in": "header",
4215 |             "description": "Access Token",
4216 |             "required": true,
4217 |             "schema": {
4218 |               "type": "string",
4219 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4220 |             }
4221 |           },
4222 |           {
4223 |             "name": "Version",
4224 |             "in": "header",
4225 |             "description": "API Version",
4226 |             "required": true,
4227 |             "schema": {
4228 |               "type": "string",
4229 |               "enum": [
4230 |                 "2021-07-28"
4231 |               ]
4232 |             }
4233 |           },
4234 |           {
4235 |             "name": "locationId",
4236 |             "required": true,
4237 |             "in": "path",
4238 |             "description": "Location Id",
4239 |             "example": "ve9EPM428h8vShlRW1KT",
4240 |             "schema": {
4241 |               "type": "string"
4242 |             }
4243 |           },
4244 |           {
4245 |             "name": "id",
4246 |             "required": true,
4247 |             "in": "path",
4248 |             "description": "Custom Value Id",
4249 |             "example": "kOBjMVAJhFuUeYIojVet",
4250 |             "schema": {
4251 |               "type": "string"
4252 |             }
4253 |           }
4254 |         ],
4255 |         "responses": {
4256 |           "200": {
4257 |             "description": "Successful response",
4258 |             "content": {
4259 |               "application/json": {
4260 |                 "schema": {
4261 |                   "$ref": "#/components/schemas/CustomValueDeleteSuccessfulResponseDto"
4262 |                 }
4263 |               }
4264 |             }
4265 |           },
4266 |           "400": {
4267 |             "description": "Bad Request",
4268 |             "content": {
4269 |               "application/json": {
4270 |                 "schema": {
4271 |                   "$ref": "#/components/schemas/BadRequestDTO"
4272 |                 }
4273 |               }
4274 |             }
4275 |           },
4276 |           "401": {
4277 |             "description": "Unauthorized",
4278 |             "content": {
4279 |               "application/json": {
4280 |                 "schema": {
4281 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4282 |                 }
4283 |               }
4284 |             }
4285 |           },
4286 |           "422": {
4287 |             "description": "Unprocessable Entity",
4288 |             "content": {
4289 |               "application/json": {
4290 |                 "schema": {
4291 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4292 |                 }
4293 |               }
4294 |             }
4295 |           }
4296 |         },
4297 |         "tags": [
4298 |           "Custom Value"
4299 |         ],
4300 |         "security": [
4301 |           {
4302 |             "bearer": []
4303 |           }
4304 |         ]
4305 |       }
4306 |     },
4307 |     "/locations/{locationId}/timezones": {
4308 |       "get": {
4309 |         "operationId": "get-timezones",
4310 |         "summary": "Fetch Timezones",
4311 |         "description": "Fetch the available timezones",
4312 |         "parameters": [
4313 |           {
4314 |             "name": "Authorization",
4315 |             "in": "header",
4316 |             "description": "Access Token",
4317 |             "required": true,
4318 |             "schema": {
4319 |               "type": "string",
4320 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4321 |             }
4322 |           },
4323 |           {
4324 |             "name": "Version",
4325 |             "in": "header",
4326 |             "description": "API Version",
4327 |             "required": true,
4328 |             "schema": {
4329 |               "type": "string",
4330 |               "enum": [
4331 |                 "2021-07-28"
4332 |               ]
4333 |             }
4334 |           }
4335 |         ],
4336 |         "responses": {
4337 |           "200": {
4338 |             "description": "Successful response"
4339 |           },
4340 |           "400": {
4341 |             "description": "Bad Request",
4342 |             "content": {
4343 |               "application/json": {
4344 |                 "schema": {
4345 |                   "$ref": "#/components/schemas/BadRequestDTO"
4346 |                 }
4347 |               }
4348 |             }
4349 |           },
4350 |           "401": {
4351 |             "description": "Unauthorized",
4352 |             "content": {
4353 |               "application/json": {
4354 |                 "schema": {
4355 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4356 |                 }
4357 |               }
4358 |             }
4359 |           },
4360 |           "422": {
4361 |             "description": "Unprocessable Entity",
4362 |             "content": {
4363 |               "application/json": {
4364 |                 "schema": {
4365 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4366 |                 }
4367 |               }
4368 |             }
4369 |           }
4370 |         },
4371 |         "tags": [
4372 |           "Timezone"
4373 |         ],
4374 |         "security": [
4375 |           {
4376 |             "bearer": []
4377 |           },
4378 |           {
4379 |             "Location-Access": []
4380 |           }
4381 |         ]
4382 |       }
4383 |     },
4384 |     "/locations/{locationId}/templates": {
4385 |       "get": {
4386 |         "operationId": "GET-all-or-email-sms-templates",
4387 |         "summary": "GET all or email/sms templates",
4388 |         "description": "GET all or email/sms templates",
4389 |         "parameters": [
4390 |           {
4391 |             "name": "Authorization",
4392 |             "in": "header",
4393 |             "description": "Access Token",
4394 |             "required": true,
4395 |             "schema": {
4396 |               "type": "string",
4397 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4398 |             }
4399 |           },
4400 |           {
4401 |             "name": "Version",
4402 |             "in": "header",
4403 |             "description": "API Version",
4404 |             "required": true,
4405 |             "schema": {
4406 |               "type": "string",
4407 |               "enum": [
4408 |                 "2021-07-28"
4409 |               ]
4410 |             }
4411 |           },
4412 |           {
4413 |             "name": "deleted",
4414 |             "required": false,
4415 |             "in": "query",
4416 |             "example": false,
4417 |             "schema": {
4418 |               "default": false,
4419 |               "type": "boolean"
4420 |             }
4421 |           },
4422 |           {
4423 |             "name": "skip",
4424 |             "required": false,
4425 |             "in": "query",
4426 |             "example": "1",
4427 |             "schema": {
4428 |               "default": "0",
4429 |               "type": "string"
4430 |             }
4431 |           },
4432 |           {
4433 |             "name": "limit",
4434 |             "required": false,
4435 |             "in": "query",
4436 |             "example": "25",
4437 |             "schema": {
4438 |               "default": "25",
4439 |               "type": "string"
4440 |             }
4441 |           },
4442 |           {
4443 |             "name": "type",
4444 |             "required": false,
4445 |             "in": "query",
4446 |             "schema": {
4447 |               "enum": [
4448 |                 "sms",
4449 |                 "email",
4450 |                 "whatsapp"
4451 |               ],
4452 |               "type": "string"
4453 |             }
4454 |           },
4455 |           {
4456 |             "name": "originId",
4457 |             "required": true,
4458 |             "in": "query",
4459 |             "description": "Origin Id",
4460 |             "example": "ve9EPM428h8vShlRW1KT",
4461 |             "schema": {
4462 |               "type": "string"
4463 |             }
4464 |           },
4465 |           {
4466 |             "name": "locationId",
4467 |             "required": true,
4468 |             "in": "path",
4469 |             "description": "Location Id",
4470 |             "example": "ve9EPM428h8vShlRW1KT",
4471 |             "schema": {
4472 |               "type": "string"
4473 |             }
4474 |           }
4475 |         ],
4476 |         "responses": {
4477 |           "200": {
4478 |             "description": "Successful response",
4479 |             "content": {
4480 |               "application/json": {
4481 |                 "schema": {
4482 |                   "$ref": "#/components/schemas/GetTemplatesSuccessfulResponseDto"
4483 |                 }
4484 |               }
4485 |             }
4486 |           },
4487 |           "400": {
4488 |             "description": "Bad Request",
4489 |             "content": {
4490 |               "application/json": {
4491 |                 "schema": {
4492 |                   "$ref": "#/components/schemas/BadRequestDTO"
4493 |                 }
4494 |               }
4495 |             }
4496 |           },
4497 |           "401": {
4498 |             "description": "Unauthorized",
4499 |             "content": {
4500 |               "application/json": {
4501 |                 "schema": {
4502 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4503 |                 }
4504 |               }
4505 |             }
4506 |           },
4507 |           "422": {
4508 |             "description": "Unprocessable Entity",
4509 |             "content": {
4510 |               "application/json": {
4511 |                 "schema": {
4512 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4513 |                 }
4514 |               }
4515 |             }
4516 |           }
4517 |         },
4518 |         "tags": [
4519 |           "Template"
4520 |         ],
4521 |         "security": [
4522 |           {
4523 |             "bearer": []
4524 |           }
4525 |         ]
4526 |       }
4527 |     },
4528 |     "/locations/{locationId}/templates/{id}": {
4529 |       "delete": {
4530 |         "operationId": "DELETE-an-email-sms-template",
4531 |         "summary": "DELETE an email/sms template",
4532 |         "description": "DELETE an email/sms template",
4533 |         "parameters": [
4534 |           {
4535 |             "name": "Authorization",
4536 |             "in": "header",
4537 |             "description": "Access Token",
4538 |             "required": true,
4539 |             "schema": {
4540 |               "type": "string",
4541 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4542 |             }
4543 |           },
4544 |           {
4545 |             "name": "Version",
4546 |             "in": "header",
4547 |             "description": "API Version",
4548 |             "required": true,
4549 |             "schema": {
4550 |               "type": "string",
4551 |               "enum": [
4552 |                 "2021-07-28"
4553 |               ]
4554 |             }
4555 |           },
4556 |           {
4557 |             "name": "locationId",
4558 |             "required": true,
4559 |             "in": "path",
4560 |             "description": "Location Id",
4561 |             "example": "ve9EPM428h8vShlRW1KT",
4562 |             "schema": {
4563 |               "type": "string"
4564 |             }
4565 |           },
4566 |           {
4567 |             "name": "id",
4568 |             "required": true,
4569 |             "in": "path",
4570 |             "description": "Template Id",
4571 |             "example": "ve9EPM428h8vShlRW1KT",
4572 |             "schema": {
4573 |               "type": "string"
4574 |             }
4575 |           }
4576 |         ],
4577 |         "responses": {
4578 |           "200": {
4579 |             "description": ""
4580 |           },
4581 |           "400": {
4582 |             "description": "Bad Request",
4583 |             "content": {
4584 |               "application/json": {
4585 |                 "schema": {
4586 |                   "$ref": "#/components/schemas/BadRequestDTO"
4587 |                 }
4588 |               }
4589 |             }
4590 |           },
4591 |           "401": {
4592 |             "description": "Unauthorized",
4593 |             "content": {
4594 |               "application/json": {
4595 |                 "schema": {
4596 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4597 |                 }
4598 |               }
4599 |             }
4600 |           },
4601 |           "422": {
4602 |             "description": "Unprocessable Entity",
4603 |             "content": {
4604 |               "application/json": {
4605 |                 "schema": {
4606 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4607 |                 }
4608 |               }
4609 |             }
4610 |           }
4611 |         },
4612 |         "tags": [
4613 |           "Template"
4614 |         ],
4615 |         "security": [
4616 |           {
4617 |             "bearer": []
4618 |           }
4619 |         ]
4620 |       }
4621 |     },
4622 |     "/locations/": {
4623 |       "post": {
4624 |         "operationId": "create-location",
4625 |         "summary": "Create Sub-Account (Formerly Location)",
4626 |         "description": "<div>\n                  <p>Create a new Sub-Account (Formerly Location) based on the data provided</p> \n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                          This feature is only available on Agency Pro ($497) plan.\n                        </strong>\n                      </span>\n                  </div>\n                </div>\n    ",
4627 |         "parameters": [
4628 |           {
4629 |             "name": "Authorization",
4630 |             "in": "header",
4631 |             "description": "Access Token",
4632 |             "required": true,
4633 |             "schema": {
4634 |               "type": "string",
4635 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4636 |             }
4637 |           },
4638 |           {
4639 |             "name": "Version",
4640 |             "in": "header",
4641 |             "description": "API Version",
4642 |             "required": true,
4643 |             "schema": {
4644 |               "type": "string",
4645 |               "enum": [
4646 |                 "2021-07-28"
4647 |               ]
4648 |             }
4649 |           }
4650 |         ],
4651 |         "requestBody": {
4652 |           "required": true,
4653 |           "content": {
4654 |             "application/json": {
4655 |               "schema": {
4656 |                 "$ref": "#/components/schemas/CreateLocationDto"
4657 |               }
4658 |             }
4659 |           }
4660 |         },
4661 |         "responses": {
4662 |           "200": {
4663 |             "description": "Successful response",
4664 |             "content": {
4665 |               "application/json": {
4666 |                 "schema": {
4667 |                   "$ref": "#/components/schemas/CreateLocationSuccessfulResponseDto"
4668 |                 }
4669 |               }
4670 |             }
4671 |           },
4672 |           "400": {
4673 |             "description": "Bad Request",
4674 |             "content": {
4675 |               "application/json": {
4676 |                 "schema": {
4677 |                   "$ref": "#/components/schemas/BadRequestDTO"
4678 |                 }
4679 |               }
4680 |             }
4681 |           },
4682 |           "401": {
4683 |             "description": "Unauthorized",
4684 |             "content": {
4685 |               "application/json": {
4686 |                 "schema": {
4687 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4688 |                 }
4689 |               }
4690 |             }
4691 |           }
4692 |         },
4693 |         "tags": [
4694 |           "Sub-Account (Formerly Location)"
4695 |         ],
4696 |         "security": [
4697 |           {
4698 |             "Agency-Access": []
4699 |           }
4700 |         ]
4701 |       }
4702 |     }
4703 |   }
4704 | }


--------------------------------------------------------------------------------
/marketplace/marketplace.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/marketplace/billing/charges": {
  5 |       "post": {
  6 |         "operationId": "charge",
  7 |         "summary": "Create a new wallet charge",
  8 |         "description": "<div>\n    <p>Create a new wallet charge</p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n            This feature is currently in Private Beta and not available to all developers.\n          </strong>\n        </span>\n    </div>\n  </div>",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           }
 20 |         ],
 21 |         "requestBody": {
 22 |           "required": true,
 23 |           "content": {
 24 |             "application/json": {
 25 |               "schema": {
 26 |                 "$ref": "#/components/schemas/RaiseChargeBodyDTO"
 27 |               }
 28 |             }
 29 |           }
 30 |         },
 31 |         "responses": {
 32 |           "201": {
 33 |             "description": "Charge created successfully",
 34 |             "content": {
 35 |               "application/json": {
 36 |                 "schema": {
 37 |                   "type": "object",
 38 |                   "properties": {
 39 |                     "success": {
 40 |                       "type": "boolean",
 41 |                       "example": true
 42 |                     },
 43 |                     "chargeId": {
 44 |                       "type": "string",
 45 |                       "example": "charge_123"
 46 |                     }
 47 |                   }
 48 |                 }
 49 |               }
 50 |             }
 51 |           },
 52 |           "400": {
 53 |             "description": "Bad request",
 54 |             "content": {
 55 |               "application/json": {
 56 |                 "schema": {
 57 |                   "type": "object",
 58 |                   "properties": {
 59 |                     "message": {
 60 |                       "type": "string"
 61 |                     },
 62 |                     "statusCode": {
 63 |                       "type": "number",
 64 |                       "example": 400
 65 |                     }
 66 |                   }
 67 |                 }
 68 |               }
 69 |             }
 70 |           },
 71 |           "422": {
 72 |             "description": "Unprocessable Entity",
 73 |             "content": {
 74 |               "application/json": {
 75 |                 "schema": {
 76 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 77 |                 }
 78 |               }
 79 |             }
 80 |           }
 81 |         },
 82 |         "tags": [
 83 |           "Wallet Charges"
 84 |         ],
 85 |         "security": [
 86 |           {
 87 |             "Location-Access-Only": []
 88 |           }
 89 |         ]
 90 |       },
 91 |       "get": {
 92 |         "operationId": "getCharges",
 93 |         "summary": "Get all wallet charges",
 94 |         "description": "<div>\n    <p>Get all wallet charges</p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n            This feature is currently in Private Beta and not available to all developers.\n          </strong>\n        </span>\n    </div>\n  </div>",
 95 |         "parameters": [
 96 |           {
 97 |             "name": "Authorization",
 98 |             "in": "header",
 99 |             "description": "Access Token",
100 |             "required": true,
101 |             "schema": {
102 |               "type": "string",
103 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
104 |             }
105 |           },
106 |           {
107 |             "name": "meterId",
108 |             "required": false,
109 |             "in": "query",
110 |             "description": "Billing Meter ID (you can find this on your app's pricing page on the developer portal)",
111 |             "schema": {
112 |               "type": "string"
113 |             }
114 |           },
115 |           {
116 |             "name": "eventId",
117 |             "required": false,
118 |             "in": "query",
119 |             "description": "Event ID / Transaction ID",
120 |             "schema": {
121 |               "type": "string"
122 |             }
123 |           },
124 |           {
125 |             "name": "userId",
126 |             "required": false,
127 |             "in": "query",
128 |             "description": "Filter results by User ID that your server passed via API when the charge was created",
129 |             "schema": {
130 |               "type": "string"
131 |             }
132 |           },
133 |           {
134 |             "name": "startDate",
135 |             "required": false,
136 |             "in": "query",
137 |             "description": "Filter results AFTER a specific date. Use this in combination with endDate to filter results in a specific time window.",
138 |             "schema": {
139 |               "example": "2025-03-26",
140 |               "type": "string"
141 |             }
142 |           },
143 |           {
144 |             "name": "endDate",
145 |             "required": false,
146 |             "in": "query",
147 |             "description": "Filter results BEFORE a specific date. Use this in combination with startDate to filter results in a specific time window.",
148 |             "schema": {
149 |               "example": "2025-03-26",
150 |               "type": "string"
151 |             }
152 |           },
153 |           {
154 |             "name": "skip",
155 |             "required": false,
156 |             "in": "query",
157 |             "description": "Number of records to skip",
158 |             "schema": {
159 |               "type": "number"
160 |             }
161 |           },
162 |           {
163 |             "name": "limit",
164 |             "required": false,
165 |             "in": "query",
166 |             "description": "Maximum number of records to return",
167 |             "schema": {
168 |               "type": "number"
169 |             }
170 |           }
171 |         ],
172 |         "responses": {
173 |           "200": {
174 |             "description": "Returns list of wallet charges",
175 |             "content": {
176 |               "application/json": {
177 |                 "schema": {
178 |                   "type": "object",
179 |                   "properties": {
180 |                     "charges": {
181 |                       "type": "array",
182 |                       "items": {
183 |                         "type": "object",
184 |                         "properties": {
185 |                           "refunded": {
186 |                             "type": "boolean",
187 |                             "description": "Value is 'true' if the charge has subsequently been refunded."
188 |                           },
189 |                           "currency": {
190 |                             "type": "string",
191 |                             "description": "Currency of the transaction. We currently support USD only."
192 |                           },
193 |                           "appId": {
194 |                             "type": "string",
195 |                             "description": "App ID"
196 |                           },
197 |                           "meterId": {
198 |                             "type": "string",
199 |                             "description": "Billing Meter ID (you can find this on your app's pricing page)"
200 |                           },
201 |                           "chargeId": {
202 |                             "type": "string",
203 |                             "description": "Charge ID"
204 |                           },
205 |                           "entityType": {
206 |                             "type": "string",
207 |                             "description": "Indicates who was charged? Currently, we support charges for 'location' only"
208 |                           },
209 |                           "entityId": {
210 |                             "type": "string",
211 |                             "description": "If the entityType is Location, entityld would be locationld."
212 |                           },
213 |                           "amountCharged": {
214 |                             "type": "number",
215 |                             "description": "Total amount charged"
216 |                           },
217 |                           "pricePerUnit": {
218 |                             "type": "number",
219 |                             "description": "Price per unit for the charge"
220 |                           },
221 |                           "transactionType": {
222 |                             "type": "string",
223 |                             "description": "This can be one of two values - 'charge' or 'refund'"
224 |                           },
225 |                           "units": {
226 |                             "type": "number",
227 |                             "description": "Number of units that the sub-account was charged for"
228 |                           },
229 |                           "meta": {
230 |                             "type": "object",
231 |                             "description": "meta object contains details that were sent while creating the charge via the API - eventID, description, eventTime, userld"
232 |                           },
233 |                           "createdAt": {
234 |                             "type": "string",
235 |                             "format": "date-time",
236 |                             "description": "Timestamp when the charge was created in our system"
237 |                           },
238 |                           "updatedAt": {
239 |                             "type": "string",
240 |                             "format": "date-time",
241 |                             "description": "Timestamp when the charge was last updated in our system"
242 |                           }
243 |                         }
244 |                       }
245 |                     },
246 |                     "total": {
247 |                       "type": "number"
248 |                     }
249 |                   }
250 |                 }
251 |               }
252 |             }
253 |           },
254 |           "422": {
255 |             "description": "Unprocessable Entity",
256 |             "content": {
257 |               "application/json": {
258 |                 "schema": {
259 |                   "$ref": "#/components/schemas/UnprocessableDTO"
260 |                 }
261 |               }
262 |             }
263 |           }
264 |         },
265 |         "tags": [
266 |           "Wallet Charges"
267 |         ],
268 |         "security": [
269 |           {
270 |             "Location-Access-Only": []
271 |           }
272 |         ]
273 |       }
274 |     },
275 |     "/marketplace/billing/charges/{chargeId}": {
276 |       "delete": {
277 |         "operationId": "deleteCharge",
278 |         "summary": "Delete a wallet charge",
279 |         "description": "<div>\n    <p>Delete a wallet charge</p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n            This feature is currently in Private Beta and not available to all developers.\n          </strong>\n        </span>\n    </div>\n  </div>",
280 |         "parameters": [
281 |           {
282 |             "name": "Authorization",
283 |             "in": "header",
284 |             "description": "Access Token",
285 |             "required": true,
286 |             "schema": {
287 |               "type": "string",
288 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
289 |             }
290 |           },
291 |           {
292 |             "name": "chargeId",
293 |             "required": true,
294 |             "in": "path",
295 |             "description": "ID of the charge to delete",
296 |             "schema": {
297 |               "type": "string"
298 |             }
299 |           }
300 |         ],
301 |         "responses": {
302 |           "200": {
303 |             "description": "Charge deleted successfully",
304 |             "content": {
305 |               "application/json": {
306 |                 "schema": {
307 |                   "type": "object",
308 |                   "properties": {
309 |                     "success": {
310 |                       "type": "boolean",
311 |                       "example": true
312 |                     }
313 |                   }
314 |                 }
315 |               }
316 |             }
317 |           },
318 |           "404": {
319 |             "description": "Charge not found",
320 |             "content": {
321 |               "application/json": {
322 |                 "schema": {
323 |                   "type": "object",
324 |                   "properties": {
325 |                     "message": {
326 |                       "type": "string",
327 |                       "example": "Charge not found"
328 |                     },
329 |                     "statusCode": {
330 |                       "type": "number",
331 |                       "example": 404
332 |                     }
333 |                   }
334 |                 }
335 |               }
336 |             }
337 |           },
338 |           "422": {
339 |             "description": "Unprocessable Entity",
340 |             "content": {
341 |               "application/json": {
342 |                 "schema": {
343 |                   "$ref": "#/components/schemas/UnprocessableDTO"
344 |                 }
345 |               }
346 |             }
347 |           }
348 |         },
349 |         "tags": [
350 |           "Wallet Charges"
351 |         ],
352 |         "security": [
353 |           {
354 |             "Location-Access-Only": []
355 |           }
356 |         ]
357 |       },
358 |       "get": {
359 |         "operationId": "getSpecificCharge",
360 |         "summary": "Get specific wallet charge details",
361 |         "description": "<div>\n    <p>Get specific wallet charge details</p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n            This feature is currently in Private Beta and not available to all developers.\n          </strong>\n        </span>\n    </div>\n  </div>",
362 |         "parameters": [
363 |           {
364 |             "name": "Authorization",
365 |             "in": "header",
366 |             "description": "Access Token",
367 |             "required": true,
368 |             "schema": {
369 |               "type": "string",
370 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
371 |             }
372 |           },
373 |           {
374 |             "name": "chargeId",
375 |             "required": true,
376 |             "in": "path",
377 |             "description": "ID of the charge to retrieve",
378 |             "schema": {
379 |               "type": "string"
380 |             }
381 |           }
382 |         ],
383 |         "responses": {
384 |           "200": {
385 |             "description": "Returns charge details",
386 |             "content": {
387 |               "application/json": {
388 |                 "schema": {
389 |                   "type": "object",
390 |                   "properties": {
391 |                     "refunded": {
392 |                       "type": "boolean",
393 |                       "description": "Value is 'true' if the charge has subsequently been refunded."
394 |                     },
395 |                     "currency": {
396 |                       "type": "string",
397 |                       "description": "Currency of the transaction. We currently support USD only."
398 |                     },
399 |                     "appId": {
400 |                       "type": "string",
401 |                       "description": "App ID"
402 |                     },
403 |                     "meterId": {
404 |                       "type": "string",
405 |                       "description": "Billing Meter ID (you can find this on your app's pricing page)"
406 |                     },
407 |                     "chargeId": {
408 |                       "type": "string",
409 |                       "description": "Charge ID"
410 |                     },
411 |                     "entityType": {
412 |                       "type": "string",
413 |                       "description": "Indicates who was charged? Currently, we support charges for 'location' only"
414 |                     },
415 |                     "entityId": {
416 |                       "type": "string",
417 |                       "description": "If the entityType is Location, entityld would be locationld."
418 |                     },
419 |                     "amountCharged": {
420 |                       "type": "number",
421 |                       "description": "Total amount charged"
422 |                     },
423 |                     "pricePerUnit": {
424 |                       "type": "number",
425 |                       "description": "Price per unit for the charge"
426 |                     },
427 |                     "transactionType": {
428 |                       "type": "string",
429 |                       "description": "This can be one of two values - 'charge' or 'refund'"
430 |                     },
431 |                     "units": {
432 |                       "type": "number",
433 |                       "description": "Number of units that the sub-account was charged for"
434 |                     },
435 |                     "meta": {
436 |                       "type": "object",
437 |                       "description": "meta object contains details that were sent while creating the charge via the API - eventID, description, eventTime, userld"
438 |                     },
439 |                     "createdAt": {
440 |                       "type": "string",
441 |                       "format": "date-time",
442 |                       "description": "Timestamp when the charge was created in our system"
443 |                     },
444 |                     "updatedAt": {
445 |                       "type": "string",
446 |                       "format": "date-time",
447 |                       "description": "Timestamp when the charge was last updated in our system"
448 |                     }
449 |                   }
450 |                 }
451 |               }
452 |             }
453 |           },
454 |           "404": {
455 |             "description": "Charge not found",
456 |             "content": {
457 |               "application/json": {
458 |                 "schema": {
459 |                   "type": "object",
460 |                   "properties": {
461 |                     "message": {
462 |                       "type": "string",
463 |                       "example": "Charge not found"
464 |                     },
465 |                     "statusCode": {
466 |                       "type": "number",
467 |                       "example": 404
468 |                     }
469 |                   }
470 |                 }
471 |               }
472 |             }
473 |           },
474 |           "422": {
475 |             "description": "Unprocessable Entity",
476 |             "content": {
477 |               "application/json": {
478 |                 "schema": {
479 |                   "$ref": "#/components/schemas/UnprocessableDTO"
480 |                 }
481 |               }
482 |             }
483 |           }
484 |         },
485 |         "tags": [
486 |           "Wallet Charges"
487 |         ],
488 |         "security": [
489 |           {
490 |             "Location-Access-Only": []
491 |           }
492 |         ]
493 |       }
494 |     },
495 |     "/marketplace/billing/charges/has-funds": {
496 |       "get": {
497 |         "operationId": "hasFunds",
498 |         "summary": "Check if account has sufficient funds",
499 |         "description": "<div>\n    <p>Check if account has sufficient funds</p> \n    <div>\n      <span style= \"display: inline-block;\n                  width: 25px; height: 25px;\n                  background-color: yellow;\n                  color: black;\n                  font-weight: bold;\n                  font-size: 24px;\n                  text-align: center;\n                  line-height: 22px;\n                  border: 2px solid black;\n                  border-radius: 10%;\n                  margin-right: 10px;\">\n                  !\n        </span>\n        <span>\n          <strong>\n            This feature is currently in Private Beta and not available to all developers.\n          </strong>\n        </span>\n    </div>\n  </div>",
500 |         "parameters": [
501 |           {
502 |             "name": "Authorization",
503 |             "in": "header",
504 |             "description": "Access Token",
505 |             "required": true,
506 |             "schema": {
507 |               "type": "string",
508 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
509 |             }
510 |           }
511 |         ],
512 |         "responses": {
513 |           "200": {
514 |             "description": "Returns fund availability status",
515 |             "content": {
516 |               "application/json": {
517 |                 "schema": {
518 |                   "type": "object",
519 |                   "properties": {
520 |                     "hasFunds": {
521 |                       "type": "boolean",
522 |                       "example": true
523 |                     }
524 |                   }
525 |                 }
526 |               }
527 |             }
528 |           },
529 |           "422": {
530 |             "description": "Unprocessable Entity",
531 |             "content": {
532 |               "application/json": {
533 |                 "schema": {
534 |                   "$ref": "#/components/schemas/UnprocessableDTO"
535 |                 }
536 |               }
537 |             }
538 |           }
539 |         },
540 |         "tags": [
541 |           "Wallet Charges"
542 |         ],
543 |         "security": [
544 |           {
545 |             "Location-Access-Only": []
546 |           }
547 |         ]
548 |       }
549 |     }
550 |   },
551 |   "info": {
552 |     "title": "Developer marketplace API",
553 |     "description": "Documentation for Marketplace API",
554 |     "version": "1.0",
555 |     "contact": {}
556 |   },
557 |   "tags": [
558 |     {
559 |       "name": "Marketplace",
560 |       "description": "Documentation for Marketplace API"
561 |     }
562 |   ],
563 |   "servers": [
564 |     {
565 |       "url": "https://services.leadconnectorhq.com"
566 |     }
567 |   ],
568 |   "components": {
569 |     "securitySchemes": {
570 |       "bearer": {
571 |         "scheme": "bearer",
572 |         "bearerFormat": "JWT",
573 |         "name": "Authorization",
574 |         "in": "header",
575 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
576 |         "type": "http"
577 |       },
578 |       "Location-Access": {
579 |         "scheme": "bearer",
580 |         "bearerFormat": "JWT",
581 |         "name": "Authorization",
582 |         "in": "header",
583 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
584 |         "type": "http"
585 |       },
586 |       "Location-Access-Only": {
587 |         "scheme": "bearer",
588 |         "bearerFormat": "JWT",
589 |         "name": "Authorization",
590 |         "in": "header",
591 |         "description": "Use the Access Token generated with user type as Sub-Account.",
592 |         "type": "http"
593 |       },
594 |       "Agency-Access": {
595 |         "scheme": "bearer",
596 |         "bearerFormat": "JWT",
597 |         "name": "Authorization",
598 |         "in": "header",
599 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
600 |         "type": "http"
601 |       }
602 |     },
603 |     "schemas": {
604 |       "BadRequestDTO": {
605 |         "type": "object",
606 |         "properties": {
607 |           "statusCode": {
608 |             "type": "number",
609 |             "example": 400
610 |           },
611 |           "message": {
612 |             "type": "string",
613 |             "example": "Bad Request"
614 |           }
615 |         }
616 |       },
617 |       "UnauthorizedDTO": {
618 |         "type": "object",
619 |         "properties": {
620 |           "statusCode": {
621 |             "type": "number",
622 |             "example": 401
623 |           },
624 |           "message": {
625 |             "type": "string",
626 |             "example": "Invalid token: access token is invalid"
627 |           },
628 |           "error": {
629 |             "type": "string",
630 |             "example": "Unauthorized"
631 |           }
632 |         }
633 |       },
634 |       "UnprocessableDTO": {
635 |         "type": "object",
636 |         "properties": {
637 |           "statusCode": {
638 |             "type": "number",
639 |             "example": 422
640 |           },
641 |           "message": {
642 |             "example": [
643 |               "Unprocessable Entity"
644 |             ],
645 |             "type": "array",
646 |             "items": {
647 |               "type": "string"
648 |             }
649 |           },
650 |           "error": {
651 |             "type": "string",
652 |             "example": "Unprocessable Entity"
653 |           }
654 |         }
655 |       },
656 |       "RaiseChargeBodyDTO": {
657 |         "type": "object",
658 |         "properties": {
659 |           "appId": {
660 |             "type": "string",
661 |             "description": "App ID of the App"
662 |           },
663 |           "meterId": {
664 |             "type": "string",
665 |             "description": "Billing Meter ID (you can find this on your app's pricing page)"
666 |           },
667 |           "eventId": {
668 |             "type": "string",
669 |             "description": "Event ID / Transaction ID on your server's side. This will help you maintain the reference of the event/transaction on your end that you charged the customer for."
670 |           },
671 |           "userId": {
672 |             "type": "string",
673 |             "description": "User ID"
674 |           },
675 |           "locationId": {
676 |             "type": "string",
677 |             "description": "ID of the Sub-Account to be charged"
678 |           },
679 |           "companyId": {
680 |             "type": "string",
681 |             "description": "ID of the Agency the Sub-account belongs to"
682 |           },
683 |           "description": {
684 |             "type": "string",
685 |             "description": "Description of the charge"
686 |           },
687 |           "units": {
688 |             "type": "string",
689 |             "description": "Number of units to charge"
690 |           },
691 |           "eventTime": {
692 |             "type": "string",
693 |             "description": "The timestamp when the event/transaction was performed. If blank, the billing timestamp will be set as the event time. ISO8601 Format.",
694 |             "example": "2025-03-26T00:00:000Z"
695 |           }
696 |         },
697 |         "required": [
698 |           "appId",
699 |           "meterId",
700 |           "eventId",
701 |           "locationId",
702 |           "companyId",
703 |           "description",
704 |           "units"
705 |         ]
706 |       }
707 |     }
708 |   }
709 | }


--------------------------------------------------------------------------------
/medias/medias.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/medias/files": {
  5 |       "get": {
  6 |         "operationId": "fetch-media-content",
  7 |         "summary": "Get List of Files",
  8 |         "description": "Fetches list of files and folders from the media library",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "offset",
 34 |             "required": false,
 35 |             "in": "query",
 36 |             "description": "Number of files to skip in listing",
 37 |             "example": "5",
 38 |             "schema": {
 39 |               "type": "string"
 40 |             }
 41 |           },
 42 |           {
 43 |             "name": "limit",
 44 |             "required": false,
 45 |             "in": "query",
 46 |             "description": "Number of files to show in the listing",
 47 |             "example": "10",
 48 |             "schema": {
 49 |               "type": "string"
 50 |             }
 51 |           },
 52 |           {
 53 |             "name": "sortBy",
 54 |             "required": true,
 55 |             "in": "query",
 56 |             "description": "Field to sorting the file listing by",
 57 |             "example": "createdAt",
 58 |             "schema": {
 59 |               "type": "string"
 60 |             }
 61 |           },
 62 |           {
 63 |             "name": "sortOrder",
 64 |             "required": true,
 65 |             "in": "query",
 66 |             "description": "Direction in which file needs to be sorted",
 67 |             "example": "asc",
 68 |             "schema": {
 69 |               "type": "string"
 70 |             }
 71 |           },
 72 |           {
 73 |             "name": "type",
 74 |             "required": false,
 75 |             "in": "query",
 76 |             "description": "Type",
 77 |             "example": "file",
 78 |             "schema": {
 79 |               "type": "string"
 80 |             }
 81 |           },
 82 |           {
 83 |             "name": "query",
 84 |             "required": false,
 85 |             "in": "query",
 86 |             "description": "Query text",
 87 |             "example": "Test file",
 88 |             "schema": {
 89 |               "type": "string"
 90 |             }
 91 |           },
 92 |           {
 93 |             "name": "altType",
 94 |             "required": true,
 95 |             "in": "query",
 96 |             "description": "AltType",
 97 |             "example": "location",
 98 |             "schema": {
 99 |               "type": "string",
100 |               "enum": ["agency","location"]
101 |             }
102 |           },
103 |           {
104 |             "name": "altId",
105 |             "required": true,
106 |             "in": "query",
107 |             "description": "location or agency Id",
108 |             "schema": {
109 |               "type": "string"
110 |             }
111 |           },
112 |           {
113 |             "name": "parentId",
114 |             "in": "query",
115 |             "description": "parent id or folder id",
116 |             "schema": {
117 |               "type": "string"
118 |             }
119 |           }
120 |         ],
121 |         "responses": {
122 |           "200": {
123 |             "description": "Successful response",
124 |             "content": {
125 |               "application/json": {
126 |                 "schema": {
127 |                   "$ref": "#/components/schemas/GetFilesResponseDTO"
128 |                 }
129 |               }
130 |             }
131 |           }
132 |         },
133 |         "security": [
134 |           {
135 |             "Only-Location-Access": []
136 |           }
137 |         ]
138 |       }
139 |     },
140 |     "/medias/upload-file": {
141 |       "post": {
142 |         "operationId": "upload-media-content",
143 |         "summary": "Upload File into Media Library",
144 |         "description": "If hosted is set to true then fileUrl is required. Else file is required. If adding a file, maximum allowed is 25 MB",
145 |         "parameters": [
146 |           {
147 |             "name": "Authorization",
148 |             "in": "header",
149 |             "description": "Access Token",
150 |             "required": true,
151 |             "schema": {
152 |               "type": "string",
153 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
154 |             }
155 |           },
156 |           {
157 |             "name": "Version",
158 |             "in": "header",
159 |             "description": "API Version",
160 |             "required": true,
161 |             "schema": {
162 |               "type": "string",
163 |               "enum": [
164 |                 "2021-07-28"
165 |               ]
166 |             }
167 |           }
168 |         ],
169 |         "requestBody": {
170 |           "required": true,
171 |           "content": {
172 |             "multipart/form-data": {
173 |               "schema": {
174 |                 "type": "object",
175 |                 "properties": {
176 |                   "file": {
177 |                     "type": "string",
178 |                     "format": "binary"
179 |                   },
180 |                   "hosted": {
181 |                     "type": "boolean"
182 |                   },
183 |                   "fileUrl": {
184 |                     "type": "string"
185 |                   },
186 |                   "name": {
187 |                     "type": "string"
188 |                   },
189 |                   "parentId": {
190 |                     "type": "string"
191 |                   }
192 |                 }
193 |               }
194 |             }
195 |           }
196 |         },
197 |         "responses": {
198 |           "200": {
199 |             "description": "Successful response",
200 |             "content": {
201 |               "application/json": {
202 |                 "schema": {
203 |                   "$ref": "#/components/schemas/UploadFileResponseDTO"
204 |                 }
205 |               }
206 |             }
207 |           }
208 |         },
209 |         "security": [
210 |           {
211 |             "Location-Access": []
212 |           }
213 |         ]
214 |       }
215 |     },
216 |     "/medias/{id}": {
217 |       "delete": {
218 |         "operationId": "delete-media-content",
219 |         "summary": "Delete File or Folder",
220 |         "description": "Deletes specific file or folder from the media library",
221 |         "parameters": [
222 |           {
223 |             "name": "Authorization",
224 |             "in": "header",
225 |             "description": "Access Token",
226 |             "required": true,
227 |             "schema": {
228 |               "type": "string",
229 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
230 |             }
231 |           },
232 |           {
233 |             "name": "Version",
234 |             "in": "header",
235 |             "description": "API Version",
236 |             "required": true,
237 |             "schema": {
238 |               "type": "string",
239 |               "enum": [
240 |                 "2021-07-28"
241 |               ]
242 |             }
243 |           },
244 |           {
245 |             "name": "id",
246 |             "required": true,
247 |             "in": "path",
248 |             "schema": {
249 |               "type": "string"
250 |             }
251 |           },
252 |           {
253 |             "name": "altType",
254 |             "required": true,
255 |             "in": "query",
256 |             "description": "AltType",
257 |             "example": "location",
258 |             "schema": {
259 |               "type": "string",
260 |               "enum": ["agency","location"]
261 |             }
262 |           },
263 |           {
264 |             "name": "altId",
265 |             "required": true,
266 |             "description": "location or agency Id",
267 |             "in": "query",
268 |             "schema": {
269 |               "type": "string"
270 |             }
271 |           }
272 |         ],
273 |         "responses": {
274 |           "200": {
275 |             "description": "Successful response"
276 |           }
277 |         },
278 |         "security": [
279 |           {
280 |             "Location-Access": []
281 |           }
282 |         ]
283 |       }
284 |     }
285 |   },
286 |   "info": {
287 |     "title": "Media Library API",
288 |     "description": "Documentation for Files API",
289 |     "version": "1.0",
290 |     "contact": {}
291 |   },
292 |   "tags": [
293 |     {
294 |       "name": "Medias",
295 |       "description": "Documentation for Files API"
296 |     }
297 |   ],
298 |   "servers": [
299 |     {
300 |       "url": "https://services.leadconnectorhq.com"
301 |     }
302 |   ],
303 |   "components": {
304 |     "securitySchemes": {
305 |       "bearer": {
306 |         "scheme": "bearer",
307 |         "bearerFormat": "JWT",
308 |         "name": "Authorization",
309 |         "in": "header",
310 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
311 |         "type": "http"
312 |       },
313 |       "Location-Access": {
314 |         "scheme": "bearer",
315 |         "bearerFormat": "JWT",
316 |         "name": "Authorization",
317 |         "in": "header",
318 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
319 |         "type": "http"
320 |       },
321 |       "Only-Location-Access": {
322 |         "scheme": "bearer",
323 |         "bearerFormat": "JWT",
324 |         "name": "Authorization",
325 |         "in": "header",
326 |         "description": "Use the Access Token generated with user type as Sub-Account.",
327 |         "type": "http"
328 |       },
329 |       "Agency-Access": {
330 |         "scheme": "bearer",
331 |         "bearerFormat": "JWT",
332 |         "name": "Authorization",
333 |         "in": "header",
334 |         "description": "Use the Access Token generated with user type as Agency.",
335 |         "type": "http"
336 |       }
337 |     },
338 |     "schemas": {
339 |       "GetFilesResponseDTO": {
340 |         "type": "object",
341 |         "properties": {
342 |           "files": {
343 |             "description": "Array of File Objects",
344 |             "example": {
345 |               "altId": "locationId",
346 |               "altType": "location",
347 |               "name": "file name",
348 |               "parentId": "parent folder id",
349 |               "url": "file url",
350 |               "path": "file path"
351 |             },
352 |             "type": "array",
353 |             "items": {
354 |               "type": "string"
355 |             }
356 |           }
357 |         },
358 |         "required": [
359 |           "files"
360 |         ]
361 |       },
362 |       "UploadFileResponseDTO": {
363 |         "type": "object",
364 |         "properties": {
365 |           "fileId": {
366 |             "type": "string",
367 |             "description": "ID of the uploaded file",
368 |             "example": "file.pdf"
369 |           }
370 |         },
371 |         "required": [
372 |           "fileId"
373 |         ]
374 |       }
375 |     }
376 |   }
377 | }


--------------------------------------------------------------------------------
/models/Footer.yaml:
--------------------------------------------------------------------------------
 1 | title: Footer
 2 | x-stoplight:
 3 |   id: l8nsxdtelley9
 4 | type: object
 5 | properties:
 6 |   id:
 7 |     type: string
 8 |     x-stoplight:
 9 |       id: 8kddyqi5h4wif
10 | 


--------------------------------------------------------------------------------
/oauth/oauth.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/oauth/token": {
  5 |       "post": {
  6 |         "operationId": "get-access-token",
  7 |         "summary": "Get Access Token",
  8 |         "description": "Use Access Tokens to access GoHighLevel resources on behalf of an authenticated location/company.",
  9 |         "parameters": [],
 10 |         "requestBody": {
 11 |           "required": true,
 12 |           "content": {
 13 |             "application/x-www-form-urlencoded": {
 14 |               "schema": {
 15 |                 "$ref": "#/components/schemas/GetAccessCodebodyDto"
 16 |               }
 17 |             }
 18 |           }
 19 |         },
 20 |         "responses": {
 21 |           "200": {
 22 |             "description": "Successful response",
 23 |             "content": {
 24 |               "application/json": {
 25 |                 "schema": {
 26 |                   "$ref": "#/components/schemas/GetAccessCodeSuccessfulResponseDto"
 27 |                 }
 28 |               }
 29 |             }
 30 |           },
 31 |           "400": {
 32 |             "description": "Bad Request",
 33 |             "content": {
 34 |               "application/json": {
 35 |                 "schema": {
 36 |                   "$ref": "#/components/schemas/BadRequestDTO"
 37 |                 }
 38 |               }
 39 |             }
 40 |           },
 41 |           "401": {
 42 |             "description": "Unauthorized",
 43 |             "content": {
 44 |               "application/json": {
 45 |                 "schema": {
 46 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 47 |                 }
 48 |               }
 49 |             }
 50 |           },
 51 |           "422": {
 52 |             "description": "Unprocessable Entity",
 53 |             "content": {
 54 |               "application/json": {
 55 |                 "schema": {
 56 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 57 |                 }
 58 |               }
 59 |             }
 60 |           }
 61 |         },
 62 |         "tags": [
 63 |           "OAuth 2.0"
 64 |         ]
 65 |       }
 66 |     },
 67 |     "/oauth/locationToken": {
 68 |       "post": {
 69 |         "operationId": "get-location-access-token",
 70 |         "summary": "Get Location Access Token from Agency Token",
 71 |         "description": "This API allows you to generate locationAccessToken from AgencyAccessToken",
 72 |         "parameters": [
 73 |           {
 74 |             "name": "Version",
 75 |             "in": "header",
 76 |             "description": "API Version",
 77 |             "required": true,
 78 |             "schema": {
 79 |               "type": "string",
 80 |               "enum": [
 81 |                 "2021-07-28"
 82 |               ]
 83 |             }
 84 |           }
 85 |         ],
 86 |         "requestBody": {
 87 |           "required": true,
 88 |           "content": {
 89 |             "application/x-www-form-urlencoded": {
 90 |               "schema": {
 91 |                 "$ref": "#/components/schemas/GetLocationAccessCodeBodyDto"
 92 |               }
 93 |             }
 94 |           }
 95 |         },
 96 |         "responses": {
 97 |           "200": {
 98 |             "description": "Successful response",
 99 |             "content": {
100 |               "application/json": {
101 |                 "schema": {
102 |                   "$ref": "#/components/schemas/GetLocationAccessTokenSuccessfulResponseDto"
103 |                 }
104 |               }
105 |             }
106 |           },
107 |           "400": {
108 |             "description": "Bad Request",
109 |             "content": {
110 |               "application/json": {
111 |                 "schema": {
112 |                   "$ref": "#/components/schemas/BadRequestDTO"
113 |                 }
114 |               }
115 |             }
116 |           },
117 |           "401": {
118 |             "description": "Unauthorized",
119 |             "content": {
120 |               "application/json": {
121 |                 "schema": {
122 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
123 |                 }
124 |               }
125 |             }
126 |           },
127 |           "422": {
128 |             "description": "Unprocessable Entity",
129 |             "content": {
130 |               "application/json": {
131 |                 "schema": {
132 |                   "$ref": "#/components/schemas/UnprocessableDTO"
133 |                 }
134 |               }
135 |             }
136 |           }
137 |         },
138 |         "tags": [
139 |           "OAuth 2.0"
140 |         ],
141 |         "security": [
142 |           {
143 |             "Agency-Access": []
144 |           }
145 |         ]
146 |       }
147 |     },
148 |     "/oauth/installedLocations": {
149 |       "get": {
150 |         "operationId": "get-installed-location",
151 |         "summary": "Get Location where app is installed",
152 |         "description": "This API allows you fetch location where app is installed upon",
153 |         "parameters": [
154 |           {
155 |             "name": "skip",
156 |             "required": false,
157 |             "in": "query",
158 |             "example": "1",
159 |             "description": "Parameter to skip the number installed locations",
160 |             "schema": {
161 |               "default": "0",
162 |               "type": "string"
163 |             }
164 |           },
165 |           {
166 |             "name": "limit",
167 |             "required": false,
168 |             "in": "query",
169 |             "example": "10",
170 |             "description": "Parameter to limit the number installed locations",
171 |             "schema": {
172 |               "default": "20",
173 |               "type": "string"
174 |             }
175 |           },
176 |           {
177 |             "name": "query",
178 |             "required": false,
179 |             "in": "query",
180 |             "example": "location name",
181 |             "description": "Parameter to search for the installed location by name",
182 |             "schema": {
183 |               "type": "string"
184 |             }
185 |           },
186 |           {
187 |             "name": "isInstalled",
188 |             "required": false,
189 |             "in": "query",
190 |             "example": true,
191 |             "description": "Filters out location which are installed for specified app under the specified company",
192 |             "schema": {
193 |               "type": "boolean"
194 |             }
195 |           },
196 |           {
197 |             "name": "companyId",
198 |             "required": true,
199 |             "in": "query",
200 |             "example": "tDtDnQdgm2LXpyiqYvZ6",
201 |             "description": "Parameter to search by the companyId",
202 |             "schema": {
203 |               "type": "string"
204 |             }
205 |           },
206 |           {
207 |             "name": "appId",
208 |             "required": true,
209 |             "in": "query",
210 |             "example": "tDtDnQdgm2LXpyiqYvZ6",
211 |             "description": "Parameter to search by the appId",
212 |             "schema": {
213 |               "type": "string"
214 |             }
215 |           },
216 |           {
217 |             "name": "onTrial",
218 |             "required": false,
219 |             "in": "query",
220 |             "example": true,
221 |             "description": "Filters out locations which are installed for specified app in trial mode",
222 |             "schema": {
223 |               "type": "boolean"
224 |             }
225 |           },
226 |           {
227 |             "name": "planId",
228 |             "required": false,
229 |             "in": "query",
230 |             "example": true,
231 |             "description": "Filters out location which are installed for specified app under the specified planId",
232 |             "schema": {
233 |               "type": "string"
234 |             }
235 |           },
236 |           {
237 |             "name": "Version",
238 |             "in": "header",
239 |             "description": "API Version",
240 |             "required": true,
241 |             "schema": {
242 |               "type": "string",
243 |               "enum": [
244 |                 "2021-07-28"
245 |               ]
246 |             }
247 |           }
248 |         ],
249 |         "responses": {
250 |           "200": {
251 |             "description": "Successful response",
252 |             "content": {
253 |               "application/json": {
254 |                 "schema": {
255 |                   "$ref": "#/components/schemas/GetInstalledLocationsSuccessfulResponseDto"
256 |                 }
257 |               }
258 |             }
259 |           },
260 |           "400": {
261 |             "description": "Bad Request",
262 |             "content": {
263 |               "application/json": {
264 |                 "schema": {
265 |                   "$ref": "#/components/schemas/BadRequestDTO"
266 |                 }
267 |               }
268 |             }
269 |           },
270 |           "401": {
271 |             "description": "Unauthorized",
272 |             "content": {
273 |               "application/json": {
274 |                 "schema": {
275 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
276 |                 }
277 |               }
278 |             }
279 |           },
280 |           "422": {
281 |             "description": "Unprocessable Entity",
282 |             "content": {
283 |               "application/json": {
284 |                 "schema": {
285 |                   "$ref": "#/components/schemas/UnprocessableDTO"
286 |                 }
287 |               }
288 |             }
289 |           }
290 |         },
291 |         "tags": [
292 |           "OAuth 2.0"
293 |         ],
294 |         "security": [
295 |           {
296 |             "Agency-Access": []
297 |           }
298 |         ]
299 |       }
300 |     }
301 |   },
302 |   "info": {
303 |     "title": "OAuth 2.0",
304 |     "description": "Documentation for OAuth 2.0 API",
305 |     "version": "1.0",
306 |     "contact": {}
307 |   },
308 |   "tags": [
309 |     {
310 |       "name": "OAuth 2.0",
311 |       "description": "Documentation for OAuth 2.0 API"
312 |     }
313 |   ],
314 |   "servers": [
315 |     {
316 |       "url": "https://services.leadconnectorhq.com"
317 |     }
318 |   ],
319 |   "components": {
320 |     "schemas": {
321 |       "BadRequestDTO": {
322 |         "type": "object",
323 |         "properties": {
324 |           "statusCode": {
325 |             "type": "number",
326 |             "example": 400
327 |           },
328 |           "message": {
329 |             "type": "string",
330 |             "example": "Bad Request"
331 |           }
332 |         }
333 |       },
334 |       "UnauthorizedDTO": {
335 |         "type": "object",
336 |         "properties": {
337 |           "statusCode": {
338 |             "type": "number",
339 |             "example": 401
340 |           },
341 |           "message": {
342 |             "type": "string",
343 |             "example": "Invalid token: access token is invalid"
344 |           },
345 |           "error": {
346 |             "type": "string",
347 |             "example": "Unauthorized"
348 |           }
349 |         }
350 |       },
351 |       "GetAccessCodebodyDto": {
352 |         "type": "object",
353 |         "properties": {
354 |           "client_id": {
355 |             "type": "string",
356 |             "description": "The ID provided by GHL for your integration"
357 |           },
358 |           "client_secret": {
359 |             "type": "string"
360 |           },
361 |           "grant_type": {
362 |             "type": "string",
363 |             "enum": [
364 |               "authorization_code",
365 |               "refresh_token"
366 |             ]
367 |           },
368 |           "code": {
369 |             "type": "string"
370 |           },
371 |           "refresh_token": {
372 |             "type": "string"
373 |           },
374 |           "user_type": {
375 |             "type": "string",
376 |             "description": "The type of token to be requested",
377 |             "example": "Location",
378 |             "enum": [
379 |               "Company",
380 |               "Location"
381 |             ]
382 |           },
383 |           "redirect_uri": {
384 |             "type": "string",
385 |             "description": "The redirect URI for your application",
386 |             "example": "https://myapp.com/oauth/callback/gohighlevel"
387 |           }
388 |         },
389 |         "required": [
390 |           "client_id",
391 |           "client_secret",
392 |           "grant_type"
393 |         ]
394 |       },
395 |       "GetAccessCodeSuccessfulResponseDto": {
396 |         "type": "object",
397 |         "properties": {
398 |           "access_token": {
399 |             "type": "string",
400 |             "example": "ab12dc0ae1234a7898f9ff06d4f69gh"
401 |           },
402 |           "token_type": {
403 |             "type": "string",
404 |             "example": "Bearer"
405 |           },
406 |           "expires_in": {
407 |             "type": "number",
408 |             "example": 86399
409 |           },
410 |           "refresh_token": {
411 |             "type": "string",
412 |             "example": "xy34dc0ae1234a4858f9ff06d4f66ba"
413 |           },
414 |           "scope": {
415 |             "type": "string",
416 |             "example": "conversations/message.readonly conversations/message.write"
417 |           },
418 |           "userType": {
419 |             "type": "string",
420 |             "example": "Location"
421 |           },
422 |           "locationId": {
423 |             "type": "string",
424 |             "description": "Location ID - Present only for Sub-Account Access Token",
425 |             "example": "l1C08ntBrFjLS0elLIYU"
426 |           },
427 |           "companyId": {
428 |             "type": "string",
429 |             "description": "Company ID",
430 |             "example": "l1C08ntBrFjLS0elLIYU"
431 |           },
432 |           "approvedLocations": {
433 |             "description": "Approved locations to generate location access token",
434 |             "example": [
435 |               "l1C08ntBrFjLS0elLIYU"
436 |             ],
437 |             "type": "array",
438 |             "items": {
439 |               "type": "string"
440 |             }
441 |           },
442 |           "userId": {
443 |             "type": "string",
444 |             "description": "USER ID - Represent user id of person who performed installation",
445 |             "example": "l1C08ntBrFjLS0elLIYU"
446 |           },
447 |           "planId": {
448 |             "type": "string",
449 |             "description": "Plan Id of the subscribed plan in paid apps.",
450 |             "example": "l1C08ntBrFjLS0elLIYU"
451 |           }
452 |         },
453 |         "required": [
454 |           "userId"
455 |         ]
456 |       },
457 |       "UnprocessableDTO": {
458 |         "type": "object",
459 |         "properties": {
460 |           "statusCode": {
461 |             "type": "number",
462 |             "example": 422
463 |           },
464 |           "message": {
465 |             "example": [
466 |               "Unprocessable Entity"
467 |             ],
468 |             "type": "array",
469 |             "items": {
470 |               "type": "string"
471 |             }
472 |           },
473 |           "error": {
474 |             "type": "string",
475 |             "example": "Unprocessable Entity"
476 |           }
477 |         }
478 |       },
479 |       "GetLocationAccessCodeBodyDto": {
480 |         "type": "object",
481 |         "properties": {
482 |           "companyId": {
483 |             "type": "string",
484 |             "description": "Company Id of location you want to request token for"
485 |           },
486 |           "locationId": {
487 |             "type": "string",
488 |             "description": "The location ID for which you want to obtain accessToken"
489 |           }
490 |         },
491 |         "required": [
492 |           "companyId",
493 |           "locationId"
494 |         ]
495 |       },
496 |       "GetLocationAccessTokenSuccessfulResponseDto": {
497 |         "type": "object",
498 |         "properties": {
499 |           "access_token": {
500 |             "type": "string",
501 |             "example": "ab12dc0ae1234a7898f9ff06d4f69gh",
502 |             "description": "Location access token which can be used to authenticate & authorize API under following scope"
503 |           },
504 |           "token_type": {
505 |             "type": "string",
506 |             "example": "Bearer"
507 |           },
508 |           "expires_in": {
509 |             "type": "number",
510 |             "example": 86399,
511 |             "description": "Time in seconds remaining for token to expire"
512 |           },
513 |           "scope": {
514 |             "type": "string",
515 |             "example": "conversations/message.readonly conversations/message.write",
516 |             "description": "Scopes the following accessToken have access to"
517 |           },
518 |           "locationId": {
519 |             "type": "string",
520 |             "description": "Location ID - Present only for Sub-Account Access Token",
521 |             "example": "l1C08ntBrFjLS0elLIYU"
522 |           },
523 |           "planId": {
524 |             "type": "string",
525 |             "description": "Plan Id of the subscribed plan in paid apps.",
526 |             "example": "l1C08ntBrFjLS0elLIYU"
527 |           },
528 |           "userId": {
529 |             "type": "string",
530 |             "description": "USER ID - Represent user id of person who performed installation",
531 |             "example": "l1C08ntBrFjLS0elLIYU"
532 |           }
533 |         },
534 |         "required": [
535 |           "userId"
536 |         ]
537 |       },
538 |       "InstalledLocationSchema": {
539 |         "type": "object",
540 |         "properties": {
541 |           "_id": {
542 |             "type": "string",
543 |             "example": "0IHuJvc2ofPAAA8GzTRi",
544 |             "description": "Location ID"
545 |           },
546 |           "name": {
547 |             "type": "string",
548 |             "example": "John Deo",
549 |             "description": "Name of the location"
550 |           },
551 |           "address": {
552 |             "type": "string",
553 |             "example": "47 W 13th St, New York, NY 10011, USA",
554 |             "description": "Address linked to location"
555 |           },
556 |           "isInstalled": {
557 |             "type": "boolean",
558 |             "example": true,
559 |             "description": "Check if the requested app is installed for following location"
560 |           }
561 |         },
562 |         "required": [
563 |           "_id",
564 |           "name",
565 |           "address"
566 |         ]
567 |       },
568 |       "GetInstalledLocationsSuccessfulResponseDto": {
569 |         "type": "object",
570 |         "properties": {
571 |           "locations": {
572 |             "type": "array",
573 |             "items": {
574 |               "$ref": "#/components/schemas/InstalledLocationSchema"
575 |             }
576 |           },
577 |           "count": {
578 |             "type": "number",
579 |             "example": 1231,
580 |             "description": "Total location count under the company"
581 |           },
582 |           "installToFutureLocations": {
583 |             "type": "boolean",
584 |             "description": "Boolean to control if user wants app to be automatically installed to future locations",
585 |             "example": true
586 |           }
587 |         }
588 |       }
589 |     }
590 |   }
591 | }


--------------------------------------------------------------------------------
/objects/objects.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/objects/{key}": {
   5 |       "get": {
   6 |         "operationId": "get-object-schema-by-key",
   7 |         "summary": "Get Object Schema by key / id",
   8 |         "description": "Retrieve Object Schema by key or ID. This will return the schema of the custom object, including all its fields and properties. Supported objects include contact, opportunity, business and custom objects.To understand objects and records, please have a look the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
   9 |         "externalDocs": {
  10 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
  11 |           "description": "To understand objects and records, please have a look the documentation."
  12 |         },
  13 |         "parameters": [
  14 |           {
  15 |             "name": "Authorization",
  16 |             "in": "header",
  17 |             "description": "Access Token",
  18 |             "required": true,
  19 |             "schema": {
  20 |               "type": "string",
  21 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  22 |             }
  23 |           },
  24 |           {
  25 |             "name": "Version",
  26 |             "in": "header",
  27 |             "description": "API Version",
  28 |             "required": true,
  29 |             "schema": {
  30 |               "type": "string",
  31 |               "enum": [
  32 |                 "2021-07-28"
  33 |               ]
  34 |             }
  35 |           },
  36 |           {
  37 |             "name": "key",
  38 |             "required": true,
  39 |             "in": "path",
  40 |             "description": "key of the custom or standard object. For custom objects, the key must include the prefix “custom_objects.”. This key can be found on the Object Details page under Settings in the UI.",
  41 |             "schema": {
  42 |               "example": "custom_objects.pet",
  43 |               "type": "string"
  44 |             }
  45 |           },
  46 |           {
  47 |             "name": "locationId",
  48 |             "required": true,
  49 |             "in": "query",
  50 |             "description": "location id of the sub account",
  51 |             "schema": {
  52 |               "example": "632c34b4c9b7da3358ac9891",
  53 |               "type": "string"
  54 |             }
  55 |           },
  56 |           {
  57 |             "name": "fetchProperties",
  58 |             "required": false,
  59 |             "in": "query",
  60 |             "description": "Fetch Properties , Fetches all the standard / custom fields of the object when set to true",
  61 |             "schema": {
  62 |               "example": true,
  63 |               "type": "string"
  64 |             }
  65 |           }
  66 |         ],
  67 |         "responses": {
  68 |           "200": {
  69 |             "description": "Successful response",
  70 |             "content": {
  71 |               "application/json": {
  72 |                 "schema": {
  73 |                   "$ref": "#/components/schemas/CustomObjectByIdResponseDTO"
  74 |                 }
  75 |               }
  76 |             }
  77 |           },
  78 |           "400": {
  79 |             "description": "Bad Request",
  80 |             "content": {
  81 |               "application/json": {
  82 |                 "schema": {
  83 |                   "$ref": "#/components/schemas/BadRequestDTO"
  84 |                 }
  85 |               }
  86 |             }
  87 |           },
  88 |           "401": {
  89 |             "description": "Unauthorized",
  90 |             "content": {
  91 |               "application/json": {
  92 |                 "schema": {
  93 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  94 |                 }
  95 |               }
  96 |             }
  97 |           },
  98 |           "422": {
  99 |             "description": "Unprocessable Entity",
 100 |             "content": {
 101 |               "application/json": {
 102 |                 "schema": {
 103 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 104 |                 }
 105 |               }
 106 |             }
 107 |           }
 108 |         },
 109 |         "tags": [
 110 |           "Object Schema"
 111 |         ],
 112 |         "security": [
 113 |           {
 114 |             "bearer": []
 115 |           }
 116 |         ]
 117 |       },
 118 |       "put": {
 119 |         "operationId": "update-custom-object",
 120 |         "summary": "Update Object Schema By Key / Id",
 121 |         "description": "Update Custom Object Schema  or standard object's like contact, opportunity, business searchable fields. To understand objects and records, please have a look at the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
 122 |         "externalDocs": {
 123 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
 124 |           "description": "To understand objects and records, please have a look at the documentation here "
 125 |         },
 126 |         "parameters": [
 127 |           {
 128 |             "name": "Authorization",
 129 |             "in": "header",
 130 |             "description": "Access Token",
 131 |             "required": true,
 132 |             "schema": {
 133 |               "type": "string",
 134 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 135 |             }
 136 |           },
 137 |           {
 138 |             "name": "Version",
 139 |             "in": "header",
 140 |             "description": "API Version",
 141 |             "required": true,
 142 |             "schema": {
 143 |               "type": "string",
 144 |               "enum": [
 145 |                 "2021-07-28"
 146 |               ]
 147 |             }
 148 |           },
 149 |           {
 150 |             "name": "key",
 151 |             "required": true,
 152 |             "in": "path",
 153 |             "description": "key of the custom or standard object. For custom objects, the key must include the prefix “custom_objects.”. This key can be found on the Object Details page under Settings in the UI.",
 154 |             "schema": {
 155 |               "example": "custom_objects.pet",
 156 |               "type": "string"
 157 |             }
 158 |           }
 159 |         ],
 160 |         "requestBody": {
 161 |           "required": true,
 162 |           "content": {
 163 |             "application/json": {
 164 |               "schema": {
 165 |                 "$ref": "#/components/schemas/UpdateCustomObjectSchemaDTO"
 166 |               }
 167 |             }
 168 |           }
 169 |         },
 170 |         "responses": {
 171 |           "200": {
 172 |             "description": "Successful response",
 173 |             "content": {
 174 |               "application/json": {
 175 |                 "schema": {
 176 |                   "$ref": "#/components/schemas/CustomObjectResponseDTO"
 177 |                 }
 178 |               }
 179 |             }
 180 |           },
 181 |           "400": {
 182 |             "description": "Bad Request",
 183 |             "content": {
 184 |               "application/json": {
 185 |                 "schema": {
 186 |                   "$ref": "#/components/schemas/BadRequestDTO"
 187 |                 }
 188 |               }
 189 |             }
 190 |           },
 191 |           "401": {
 192 |             "description": "Unauthorized",
 193 |             "content": {
 194 |               "application/json": {
 195 |                 "schema": {
 196 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 197 |                 }
 198 |               }
 199 |             }
 200 |           },
 201 |           "422": {
 202 |             "description": "Unprocessable Entity",
 203 |             "content": {
 204 |               "application/json": {
 205 |                 "schema": {
 206 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 207 |                 }
 208 |               }
 209 |             }
 210 |           }
 211 |         },
 212 |         "tags": [
 213 |           "Object Schema"
 214 |         ],
 215 |         "security": [
 216 |           {
 217 |             "bearer": []
 218 |           }
 219 |         ]
 220 |       }
 221 |     },
 222 |     "/objects/{schemaKey}/records/{id}": {
 223 |       "get": {
 224 |         "operationId": "get-record-by-id",
 225 |         "summary": "Get Record By Id",
 226 |         "description": "Allows you to get a Standard Object like business and custom object record by Id",
 227 |         "parameters": [
 228 |           {
 229 |             "name": "Authorization",
 230 |             "in": "header",
 231 |             "description": "Access Token",
 232 |             "required": true,
 233 |             "schema": {
 234 |               "type": "string",
 235 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 236 |             }
 237 |           },
 238 |           {
 239 |             "name": "Version",
 240 |             "in": "header",
 241 |             "description": "API Version",
 242 |             "required": true,
 243 |             "schema": {
 244 |               "type": "string",
 245 |               "enum": [
 246 |                 "2021-07-28"
 247 |               ]
 248 |             }
 249 |           },
 250 |           {
 251 |             "name": "schemaKey",
 252 |             "required": true,
 253 |             "in": "path",
 254 |             "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
 255 |             "schema": {
 256 |               "example": "custom_objects.pet or business.email (for company's email)",
 257 |               "type": "string"
 258 |             }
 259 |           },
 260 |           {
 261 |             "name": "id",
 262 |             "required": true,
 263 |             "in": "path",
 264 |             "description": "id of the record to be updated. Available on the Record details page under the 3 dots or in the url",
 265 |             "schema": {
 266 |               "example": "632c34b4c9b7da3358ac9891",
 267 |               "type": "string"
 268 |             }
 269 |           }
 270 |         ],
 271 |         "responses": {
 272 |           "200": {
 273 |             "description": "Successful response",
 274 |             "content": {
 275 |               "application/json": {
 276 |                 "schema": {
 277 |                   "$ref": "#/components/schemas/RecordByIdResponseDTO"
 278 |                 }
 279 |               }
 280 |             }
 281 |           },
 282 |           "400": {
 283 |             "description": "Bad Request",
 284 |             "content": {
 285 |               "application/json": {
 286 |                 "schema": {
 287 |                   "$ref": "#/components/schemas/BadRequestDTO"
 288 |                 }
 289 |               }
 290 |             }
 291 |           },
 292 |           "401": {
 293 |             "description": "Unauthorized",
 294 |             "content": {
 295 |               "application/json": {
 296 |                 "schema": {
 297 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 298 |                 }
 299 |               }
 300 |             }
 301 |           }
 302 |         },
 303 |         "tags": [
 304 |           "Records"
 305 |         ],
 306 |         "security": [
 307 |           {
 308 |             "bearer": []
 309 |           }
 310 |         ]
 311 |       },
 312 |       "put": {
 313 |         "operationId": "update-object-record",
 314 |         "summary": "Update Record",
 315 |         "description": "Update a Custom Object Record by Id. Supported Objects are business and custom objects. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0/87cpx-376296",
 316 |         "externalDocs": {
 317 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-175596/e2f3e9f2e111d69/87cpx-275676",
 318 |           "description": "Click here for more information"
 319 |         },
 320 |         "parameters": [
 321 |           {
 322 |             "name": "Authorization",
 323 |             "in": "header",
 324 |             "description": "Access Token",
 325 |             "required": true,
 326 |             "schema": {
 327 |               "type": "string",
 328 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 329 |             }
 330 |           },
 331 |           {
 332 |             "name": "Version",
 333 |             "in": "header",
 334 |             "description": "API Version",
 335 |             "required": true,
 336 |             "schema": {
 337 |               "type": "string",
 338 |               "enum": [
 339 |                 "2021-07-28"
 340 |               ]
 341 |             }
 342 |           },
 343 |           {
 344 |             "name": "schemaKey",
 345 |             "required": true,
 346 |             "in": "path",
 347 |             "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
 348 |             "schema": {
 349 |               "example": "custom_objects.pet or business.email (for company's email)",
 350 |               "type": "string"
 351 |             }
 352 |           },
 353 |           {
 354 |             "name": "id",
 355 |             "required": true,
 356 |             "in": "path",
 357 |             "description": "id of the record to be updated. Available on the Record details page under the 3 dots or in the url",
 358 |             "schema": {
 359 |               "example": "632c34b4c9b7da3358ac9891",
 360 |               "type": "string"
 361 |             }
 362 |           },
 363 |           {
 364 |             "name": "locationId",
 365 |             "required": true,
 366 |             "in": "query",
 367 |             "schema": {
 368 |               "type": "string"
 369 |             }
 370 |           }
 371 |         ],
 372 |         "requestBody": {
 373 |           "required": true,
 374 |           "content": {
 375 |             "application/json": {
 376 |               "schema": {
 377 |                 "$ref": "#/components/schemas/UpdateCustomObjectRecordDto"
 378 |               }
 379 |             }
 380 |           }
 381 |         },
 382 |         "responses": {
 383 |           "200": {
 384 |             "description": "Successful response",
 385 |             "content": {
 386 |               "application/json": {
 387 |                 "schema": {
 388 |                   "$ref": "#/components/schemas/RecordByIdResponseDTO"
 389 |                 }
 390 |               }
 391 |             }
 392 |           },
 393 |           "400": {
 394 |             "description": "Bad Request",
 395 |             "content": {
 396 |               "application/json": {
 397 |                 "schema": {
 398 |                   "$ref": "#/components/schemas/BadRequestDTO"
 399 |                 }
 400 |               }
 401 |             }
 402 |           },
 403 |           "401": {
 404 |             "description": "Unauthorized",
 405 |             "content": {
 406 |               "application/json": {
 407 |                 "schema": {
 408 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 409 |                 }
 410 |               }
 411 |             }
 412 |           }
 413 |         },
 414 |         "tags": [
 415 |           "Records"
 416 |         ],
 417 |         "security": [
 418 |           {
 419 |             "bearer": []
 420 |           }
 421 |         ]
 422 |       },
 423 |       "delete": {
 424 |         "operationId": "delete-object-record",
 425 |         "summary": "Delete Record",
 426 |         "description": "Delete Record By Id . Supported Objects are business and custom objects.",
 427 |         "parameters": [
 428 |           {
 429 |             "name": "Authorization",
 430 |             "in": "header",
 431 |             "description": "Access Token",
 432 |             "required": true,
 433 |             "schema": {
 434 |               "type": "string",
 435 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 436 |             }
 437 |           },
 438 |           {
 439 |             "name": "Version",
 440 |             "in": "header",
 441 |             "description": "API Version",
 442 |             "required": true,
 443 |             "schema": {
 444 |               "type": "string",
 445 |               "enum": [
 446 |                 "2021-07-28"
 447 |               ]
 448 |             }
 449 |           },
 450 |           {
 451 |             "name": "schemaKey",
 452 |             "required": true,
 453 |             "in": "path",
 454 |             "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
 455 |             "schema": {
 456 |               "example": "custom_objects.pet or business.email (for company's email)",
 457 |               "type": "string"
 458 |             }
 459 |           },
 460 |           {
 461 |             "name": "id",
 462 |             "required": true,
 463 |             "in": "path",
 464 |             "description": "id of the record to be updated. Available on the Record details page under the 3 dots or in the url",
 465 |             "schema": {
 466 |               "example": "632c34b4c9b7da3358ac9891",
 467 |               "type": "string"
 468 |             }
 469 |           }
 470 |         ],
 471 |         "responses": {
 472 |           "200": {
 473 |             "description": "Successful response",
 474 |             "content": {
 475 |               "application/json": {
 476 |                 "schema": {
 477 |                   "$ref": "#/components/schemas/ObjectRecordDeleteResponseDTO"
 478 |                 }
 479 |               }
 480 |             }
 481 |           },
 482 |           "400": {
 483 |             "description": "Bad Request",
 484 |             "content": {
 485 |               "application/json": {
 486 |                 "schema": {
 487 |                   "$ref": "#/components/schemas/BadRequestDTO"
 488 |                 }
 489 |               }
 490 |             }
 491 |           },
 492 |           "401": {
 493 |             "description": "Unauthorized",
 494 |             "content": {
 495 |               "application/json": {
 496 |                 "schema": {
 497 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 498 |                 }
 499 |               }
 500 |             }
 501 |           }
 502 |         },
 503 |         "tags": [
 504 |           "Records"
 505 |         ],
 506 |         "security": [
 507 |           {
 508 |             "bearer": []
 509 |           }
 510 |         ]
 511 |       }
 512 |     },
 513 |     "/objects/{schemaKey}/records": {
 514 |       "post": {
 515 |         "operationId": "create-object-record",
 516 |         "summary": "Create Record",
 517 |         "description": "Create a Custom Object Record. Supported Objects business and custom objects. Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0/87cpx-376296",
 518 |         "externalDocs": {
 519 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-175596/e2f3e9f2e111d69/87cpx-275236",
 520 |           "description": "Click here for more information"
 521 |         },
 522 |         "parameters": [
 523 |           {
 524 |             "name": "Authorization",
 525 |             "in": "header",
 526 |             "description": "Access Token",
 527 |             "required": true,
 528 |             "schema": {
 529 |               "type": "string",
 530 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 531 |             }
 532 |           },
 533 |           {
 534 |             "name": "Version",
 535 |             "in": "header",
 536 |             "description": "API Version",
 537 |             "required": true,
 538 |             "schema": {
 539 |               "type": "string",
 540 |               "enum": [
 541 |                 "2021-07-28"
 542 |               ]
 543 |             }
 544 |           },
 545 |           {
 546 |             "name": "schemaKey",
 547 |             "required": true,
 548 |             "in": "path",
 549 |             "description": "The key of the Custom Object / Standard Object Schema. For custom objects, the key must include the “custom_objects.” prefix, while standard objects use their respective object keys. This information is available on the Custom Objects Details page under Settings.",
 550 |             "schema": {
 551 |               "example": "custom_objects.pet or business.email (for company's email)",
 552 |               "type": "string"
 553 |             }
 554 |           }
 555 |         ],
 556 |         "requestBody": {
 557 |           "required": true,
 558 |           "content": {
 559 |             "application/json": {
 560 |               "schema": {
 561 |                 "$ref": "#/components/schemas/CreateCustomObjectRecordDto"
 562 |               }
 563 |             }
 564 |           }
 565 |         },
 566 |         "responses": {
 567 |           "201": {
 568 |             "description": "Successful response",
 569 |             "content": {
 570 |               "application/json": {
 571 |                 "schema": {
 572 |                   "$ref": "#/components/schemas/RecordByIdResponseDTO"
 573 |                 }
 574 |               }
 575 |             }
 576 |           },
 577 |           "400": {
 578 |             "description": "Bad Request",
 579 |             "content": {
 580 |               "application/json": {
 581 |                 "schema": {
 582 |                   "$ref": "#/components/schemas/BadRequestDTO"
 583 |                 }
 584 |               }
 585 |             }
 586 |           },
 587 |           "401": {
 588 |             "description": "Unauthorized",
 589 |             "content": {
 590 |               "application/json": {
 591 |                 "schema": {
 592 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 593 |                 }
 594 |               }
 595 |             }
 596 |           }
 597 |         },
 598 |         "tags": [
 599 |           "Records"
 600 |         ],
 601 |         "security": [
 602 |           {
 603 |             "bearer": []
 604 |           }
 605 |         ]
 606 |       }
 607 |     },
 608 |     "/objects/{schemaKey}/records/search": {
 609 |       "post": {
 610 |         "operationId": "search-object-records",
 611 |         "summary": "Search Object Records",
 612 |         "description": "Supported Objects are custom objects and standard objects like \"business\". Documentation Link - https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0/87cpx-379336",
 613 |         "parameters": [
 614 |           {
 615 |             "name": "Authorization",
 616 |             "in": "header",
 617 |             "description": "Access Token",
 618 |             "required": true,
 619 |             "schema": {
 620 |               "type": "string",
 621 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 622 |             }
 623 |           },
 624 |           {
 625 |             "name": "Version",
 626 |             "in": "header",
 627 |             "description": "API Version",
 628 |             "required": true,
 629 |             "schema": {
 630 |               "type": "string",
 631 |               "enum": [
 632 |                 "2021-07-28"
 633 |               ]
 634 |             }
 635 |           },
 636 |           {
 637 |             "name": "schemaKey",
 638 |             "required": false,
 639 |             "in": "path",
 640 |             "description": "custom object key",
 641 |             "schema": {
 642 |               "example": "632c34b4c9b7da3358ac9891",
 643 |               "type": "string"
 644 |             }
 645 |           }
 646 |         ],
 647 |         "requestBody": {
 648 |           "required": true,
 649 |           "content": {
 650 |             "application/json": {
 651 |               "schema": {
 652 |                 "$ref": "#/components/schemas/SearchRecordsBody"
 653 |               }
 654 |             }
 655 |           }
 656 |         },
 657 |         "responses": {
 658 |           "200": {
 659 |             "description": "Successful response",
 660 |             "content": {
 661 |               "application/json": {
 662 |                 "schema": {
 663 |                   "$ref": "#/components/schemas/SearchRecordResponseDTO"
 664 |                 }
 665 |               }
 666 |             }
 667 |           },
 668 |           "400": {
 669 |             "description": "Bad Request",
 670 |             "content": {
 671 |               "application/json": {
 672 |                 "schema": {
 673 |                   "$ref": "#/components/schemas/BadRequestDTO"
 674 |                 }
 675 |               }
 676 |             }
 677 |           },
 678 |           "401": {
 679 |             "description": "Unauthorized",
 680 |             "content": {
 681 |               "application/json": {
 682 |                 "schema": {
 683 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 684 |                 }
 685 |               }
 686 |             }
 687 |           }
 688 |         },
 689 |         "tags": [
 690 |           "Search Object Records"
 691 |         ],
 692 |         "security": [
 693 |           {
 694 |             "bearer": []
 695 |           }
 696 |         ]
 697 |       }
 698 |     },
 699 |     "/objects/": {
 700 |       "get": {
 701 |         "operationId": "get-object-by-location-id",
 702 |         "summary": "Get all objects for a location",
 703 |         "description": "Get all objects for a location. Supported Objects are contact, opportunity, business and custom objects.To understand objects and records, please have a look at the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
 704 |         "externalDocs": {
 705 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
 706 |           "description": "To understand objects and records, please have a look the documentation."
 707 |         },
 708 |         "parameters": [
 709 |           {
 710 |             "name": "Authorization",
 711 |             "in": "header",
 712 |             "description": "Access Token",
 713 |             "required": true,
 714 |             "schema": {
 715 |               "type": "string",
 716 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 717 |             }
 718 |           },
 719 |           {
 720 |             "name": "Version",
 721 |             "in": "header",
 722 |             "description": "API Version",
 723 |             "required": true,
 724 |             "schema": {
 725 |               "type": "string",
 726 |               "enum": [
 727 |                 "2021-07-28"
 728 |               ]
 729 |             }
 730 |           },
 731 |           {
 732 |             "name": "locationId",
 733 |             "required": true,
 734 |             "in": "query",
 735 |             "description": "location id",
 736 |             "schema": {
 737 |               "example": "632c34b4c9b7da3358ac9891",
 738 |               "type": "string"
 739 |             }
 740 |           }
 741 |         ],
 742 |         "responses": {
 743 |           "200": {
 744 |             "description": "Successful response",
 745 |             "content": {
 746 |               "application/json": {
 747 |                 "schema": {
 748 |                   "$ref": "#/components/schemas/CustomObjectListResponseDTO"
 749 |                 }
 750 |               }
 751 |             }
 752 |           },
 753 |           "400": {
 754 |             "description": "Bad Request",
 755 |             "content": {
 756 |               "application/json": {
 757 |                 "schema": {
 758 |                   "$ref": "#/components/schemas/BadRequestDTO"
 759 |                 }
 760 |               }
 761 |             }
 762 |           },
 763 |           "401": {
 764 |             "description": "Unauthorized",
 765 |             "content": {
 766 |               "application/json": {
 767 |                 "schema": {
 768 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 769 |                 }
 770 |               }
 771 |             }
 772 |           },
 773 |           "422": {
 774 |             "description": "Unprocessable Entity",
 775 |             "content": {
 776 |               "application/json": {
 777 |                 "schema": {
 778 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 779 |                 }
 780 |               }
 781 |             }
 782 |           }
 783 |         },
 784 |         "tags": [
 785 |           "Object Schema"
 786 |         ],
 787 |         "security": [
 788 |           {
 789 |             "bearer": []
 790 |           }
 791 |         ]
 792 |       },
 793 |       "post": {
 794 |         "operationId": "create-custom-object-schema",
 795 |         "summary": "Create Custom Object",
 796 |         "description": "Allows you to create a custom object schema. To understand objects and records, please have a look at the documentation here : https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
 797 |         "externalDocs": {
 798 |           "url": "https://doc.clickup.com/8631005/d/h/87cpx-277156/93bf0c2e23177b0",
 799 |           "description": "To understand objects and records, please have a look at the documentation here "
 800 |         },
 801 |         "parameters": [
 802 |           {
 803 |             "name": "Authorization",
 804 |             "in": "header",
 805 |             "description": "Access Token",
 806 |             "required": true,
 807 |             "schema": {
 808 |               "type": "string",
 809 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 810 |             }
 811 |           },
 812 |           {
 813 |             "name": "Version",
 814 |             "in": "header",
 815 |             "description": "API Version",
 816 |             "required": true,
 817 |             "schema": {
 818 |               "type": "string",
 819 |               "enum": [
 820 |                 "2021-07-28"
 821 |               ]
 822 |             }
 823 |           }
 824 |         ],
 825 |         "requestBody": {
 826 |           "required": true,
 827 |           "content": {
 828 |             "application/json": {
 829 |               "schema": {
 830 |                 "$ref": "#/components/schemas/CreateCustomObjectSchemaDTO"
 831 |               }
 832 |             }
 833 |           }
 834 |         },
 835 |         "responses": {
 836 |           "201": {
 837 |             "description": "Successful response",
 838 |             "content": {
 839 |               "application/json": {
 840 |                 "schema": {
 841 |                   "$ref": "#/components/schemas/CustomObjectResponseDTO"
 842 |                 }
 843 |               }
 844 |             }
 845 |           },
 846 |           "400": {
 847 |             "description": "Bad Request",
 848 |             "content": {
 849 |               "application/json": {
 850 |                 "schema": {
 851 |                   "$ref": "#/components/schemas/BadRequestDTO"
 852 |                 }
 853 |               }
 854 |             }
 855 |           },
 856 |           "401": {
 857 |             "description": "Unauthorized",
 858 |             "content": {
 859 |               "application/json": {
 860 |                 "schema": {
 861 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 862 |                 }
 863 |               }
 864 |             }
 865 |           },
 866 |           "422": {
 867 |             "description": "Unprocessable Entity",
 868 |             "content": {
 869 |               "application/json": {
 870 |                 "schema": {
 871 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 872 |                 }
 873 |               }
 874 |             }
 875 |           }
 876 |         },
 877 |         "tags": [
 878 |           "Object Schema"
 879 |         ],
 880 |         "security": [
 881 |           {
 882 |             "bearer": []
 883 |           }
 884 |         ]
 885 |       }
 886 |     }
 887 |   },
 888 |   "info": {
 889 |     "title": "CUSTOM_OBJECTS API",
 890 |     "description": "Custom objects are completely customizable objects that allow you to store and manage information tailored to your unique business needs. With custom objects, you can create custom fields, establish relationships, and integrate them into workflows, providing flexibility beyond standard objects like Contacts, Opportunities or Companies.",
 891 |     "version": "1.0",
 892 |     "contact": {}
 893 |   },
 894 |   "tags": [
 895 |     {
 896 |       "name": "Custom Objects Schema",
 897 |       "description": "Custom objects are completely customizable objects that allow you to store and manage information tailored to your unique business needs. With custom objects, you can create custom fields, establish relationships, and integrate them into workflows, providing flexibility beyond standard objects like Contacts, Opportunities or Companies."
 898 |     }
 899 |   ],
 900 |   "servers": [
 901 |     {
 902 |       "url": "https://services.leadconnectorhq.com"
 903 |     }
 904 |   ],
 905 |   "components": {
 906 |     "securitySchemes": {
 907 |       "bearer": {
 908 |         "scheme": "bearer",
 909 |         "bearerFormat": "JWT",
 910 |         "name": "Authorization",
 911 |         "in": "header",
 912 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 913 |         "type": "http"
 914 |       },
 915 |       "Location-Access": {
 916 |         "scheme": "bearer",
 917 |         "bearerFormat": "JWT",
 918 |         "name": "Authorization",
 919 |         "in": "header",
 920 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 921 |         "type": "http"
 922 |       },
 923 |       "Agency-Access": {
 924 |         "scheme": "bearer",
 925 |         "bearerFormat": "JWT",
 926 |         "name": "Authorization",
 927 |         "in": "header",
 928 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
 929 |         "type": "http"
 930 |       }
 931 |     },
 932 |     "schemas": {
 933 |       "BadRequestDTO": {
 934 |         "type": "object",
 935 |         "properties": {
 936 |           "statusCode": {
 937 |             "type": "number",
 938 |             "example": 400
 939 |           },
 940 |           "message": {
 941 |             "type": "string",
 942 |             "example": "Bad Request"
 943 |           }
 944 |         }
 945 |       },
 946 |       "UnauthorizedDTO": {
 947 |         "type": "object",
 948 |         "properties": {
 949 |           "statusCode": {
 950 |             "type": "number",
 951 |             "example": 401
 952 |           },
 953 |           "message": {
 954 |             "type": "string",
 955 |             "example": "Invalid token: access token is invalid"
 956 |           },
 957 |           "error": {
 958 |             "type": "string",
 959 |             "example": "Unauthorized"
 960 |           }
 961 |         }
 962 |       },
 963 |       "UnprocessableDTO": {
 964 |         "type": "object",
 965 |         "properties": {
 966 |           "statusCode": {
 967 |             "type": "number",
 968 |             "example": 422
 969 |           },
 970 |           "message": {
 971 |             "example": [
 972 |               "Unprocessable Entity"
 973 |             ],
 974 |             "type": "array",
 975 |             "items": {
 976 |               "type": "string"
 977 |             }
 978 |           },
 979 |           "error": {
 980 |             "type": "string",
 981 |             "example": "Unprocessable Entity"
 982 |           }
 983 |         }
 984 |       },
 985 |       "CustomObjectLabelDto": {
 986 |         "type": "object",
 987 |         "properties": {
 988 |           "singular": {
 989 |             "type": "string",
 990 |             "example": "Pet",
 991 |             "description": "Singular name of the custom object"
 992 |           },
 993 |           "plural": {
 994 |             "type": "string",
 995 |             "example": "Pets",
 996 |             "description": "Plural name of the custom object"
 997 |           }
 998 |         },
 999 |         "required": [
1000 |           "singular",
1001 |           "plural"
1002 |         ]
1003 |       },
1004 |       "ICustomObjectSchema": {
1005 |         "type": "object",
1006 |         "properties": {
1007 |           "id": {
1008 |             "type": "string",
1009 |             "example": "661c06b4ffde146bdb469442",
1010 |             "description": "id of the custom / standard object schema"
1011 |           },
1012 |           "standard": {
1013 |             "type": "boolean",
1014 |             "example": false,
1015 |             "description": "false in case of custom objects and true in case of standard objects like contacts and opportunities "
1016 |           },
1017 |           "key": {
1018 |             "type": "string",
1019 |             "example": "custom_objects.pet",
1020 |             "description": "key that would be used to refer the custom / standard Object internally (lowercase + underscore_separated). For custom objects, 'custom_objects.' would be added as prefix by default"
1021 |           },
1022 |           "labels": {
1023 |             "example": {
1024 |               "singular": "Pet",
1025 |               "plural": "Pets"
1026 |             },
1027 |             "description": "This is what your custom / standard  object will be called. These labels will be used to display your custom object on the UI",
1028 |             "allOf": [
1029 |               {
1030 |                 "$ref": "#/components/schemas/CustomObjectLabelDto"
1031 |               }
1032 |             ]
1033 |           },
1034 |           "description": {
1035 |             "type": "string",
1036 |             "example": "These are non vaccinated pets",
1037 |             "description": "Custom / Standard  Object Descriptions for example , Pet Object`s description"
1038 |           },
1039 |           "locationId": {
1040 |             "type": "string",
1041 |             "description": "location's id",
1042 |             "example": "Q9DT3OAqEXDLYuob1G32"
1043 |           },
1044 |           "primaryDisplayProperty": {
1045 |             "type": "string",
1046 |             "description": "Primary property for the custom / standard  Object. This would be used as primary data when rendering the UI. 'custom_objects.{{object_key}} or business.{{object_key}} (for company)' would be added as prefix by default for all the custom / standard objects",
1047 |             "example": "custom_objects.pet.name"
1048 |           },
1049 |           "dateAdded": {
1050 |             "type": "string",
1051 |             "description": "Date and time when the object was added",
1052 |             "format": "date-time"
1053 |           },
1054 |           "dateUpdated": {
1055 |             "type": "string",
1056 |             "description": "Date and time when the object was last updated",
1057 |             "format": "date-time"
1058 |           },
1059 |           "type": {
1060 |             "type": "object",
1061 |             "example": "The Object type can either USER_DEFINED or SYSTEM_DEFINED",
1062 |             "description": "Object`s Type"
1063 |           }
1064 |         },
1065 |         "required": [
1066 |           "id",
1067 |           "standard",
1068 |           "key",
1069 |           "labels",
1070 |           "locationId",
1071 |           "primaryDisplayProperty",
1072 |           "dateAdded",
1073 |           "dateUpdated"
1074 |         ]
1075 |       },
1076 |       "OptionDTO": {
1077 |         "type": "object",
1078 |         "properties": {
1079 |           "key": {
1080 |             "type": "string",
1081 |             "description": "Key of the option (Included in Create and Response, excluded in Update)"
1082 |           },
1083 |           "label": {
1084 |             "type": "string",
1085 |             "description": "Value of the option"
1086 |           },
1087 |           "url": {
1088 |             "type": "string",
1089 |             "description": "URL associated with the option (Optional, valid only for RADIO type)"
1090 |           }
1091 |         },
1092 |         "required": [
1093 |           "key",
1094 |           "label"
1095 |         ]
1096 |       },
1097 |       "ICustomField": {
1098 |         "type": "object",
1099 |         "properties": {
1100 |           "locationId": {
1101 |             "type": "string",
1102 |             "description": "Location Id",
1103 |             "example": "ve9EPM428h8vShlRW1KT"
1104 |           },
1105 |           "name": {
1106 |             "type": "string",
1107 |             "description": "Field name",
1108 |             "example": "Name"
1109 |           },
1110 |           "description": {
1111 |             "type": "string",
1112 |             "description": "Description of the field"
1113 |           },
1114 |           "placeholder": {
1115 |             "type": "string",
1116 |             "description": "Placeholder text for the field"
1117 |           },
1118 |           "showInForms": {
1119 |             "type": "boolean",
1120 |             "description": "Whether the field should be shown in forms"
1121 |           },
1122 |           "options": {
1123 |             "description": "Options for the field (Optional, valid only for SINGLE_OPTIONS, MULTIPLE_OPTIONS, RADIO, CHECKBOX, TEXTBOX_LIST type)",
1124 |             "type": "array",
1125 |             "items": {
1126 |               "$ref": "#/components/schemas/OptionDTO"
1127 |             }
1128 |           },
1129 |           "acceptedFormats": {
1130 |             "type": "string",
1131 |             "enum": [
1132 |               ".pdf",
1133 |               ".docx",
1134 |               ".doc",
1135 |               ".jpg",
1136 |               ".jpeg",
1137 |               ".png",
1138 |               ".gif",
1139 |               ".csv",
1140 |               ".xlsx",
1141 |               ".xls",
1142 |               "all"
1143 |             ],
1144 |             "description": "Allowed file formats for uploads. Options include: .pdf, .docx, .doc, .jpg, .jpeg, .png, .gif, .csv, .xlsx, .xls, all"
1145 |           },
1146 |           "id": {
1147 |             "type": "string",
1148 |             "description": "Unique identifier of the object"
1149 |           },
1150 |           "objectKey": {
1151 |             "type": "string",
1152 |             "description": "The key for your custom / standard object. This key uniquely identifies the custom object. Example: \"custom_object.pet\" for a custom object related to pets.",
1153 |             "example": "custom_object.pet"
1154 |           },
1155 |           "dataType": {
1156 |             "type": "string",
1157 |             "enum": [
1158 |               "TEXT",
1159 |               "LARGE_TEXT",
1160 |               "NUMERICAL",
1161 |               "PHONE",
1162 |               "MONETORY",
1163 |               "CHECKBOX",
1164 |               "SINGLE_OPTIONS",
1165 |               "MULTIPLE_OPTIONS",
1166 |               "DATE",
1167 |               "TEXTBOX_LIST",
1168 |               "FILE_UPLOAD",
1169 |               "RADIO"
1170 |             ],
1171 |             "description": "Type of field that you are trying to create"
1172 |           },
1173 |           "parentId": {
1174 |             "type": "string",
1175 |             "description": "ID of the parent folder",
1176 |             "example": "3v34PM428h8vShlRW1KT"
1177 |           },
1178 |           "fieldKey": {
1179 |             "type": "string",
1180 |             "description": "Field key. For Custom Object it's formatted as \"custom_object.{objectKey}.{fieldKey}\". \"custom_object\" is a fixed prefix, \"{objectKey}\" is your custom object's identifier, and \"{fieldName}\" is the unique field name within that object. Example: \"custom_object.pet.name\" for a \"name\" field in a \"pet\" custom object.",
1181 |             "example": "custom_object.pet.name"
1182 |           },
1183 |           "allowCustomOption": {
1184 |             "type": "boolean",
1185 |             "description": "Determines if users can add a custom option value different from the predefined options in records for RADIO type fields. A custom value added in one record does not automatically become an option and will not appear as an option for other records.",
1186 |             "example": true
1187 |           },
1188 |           "maxFileLimit": {
1189 |             "type": "number",
1190 |             "description": "Maximum file limit for uploads",
1191 |             "example": 2
1192 |           },
1193 |           "dateAdded": {
1194 |             "type": "string",
1195 |             "description": "Date and time when the object was added",
1196 |             "format": "date-time"
1197 |           },
1198 |           "dateUpdated": {
1199 |             "type": "string",
1200 |             "description": "Date and time when the object was last updated",
1201 |             "format": "date-time"
1202 |           }
1203 |         },
1204 |         "required": [
1205 |           "locationId",
1206 |           "showInForms",
1207 |           "id",
1208 |           "objectKey",
1209 |           "dataType",
1210 |           "parentId",
1211 |           "fieldKey",
1212 |           "dateAdded",
1213 |           "dateUpdated"
1214 |         ]
1215 |       },
1216 |       "CustomObjectByIdResponseDTO": {
1217 |         "type": "object",
1218 |         "properties": {
1219 |           "object": {
1220 |             "$ref": "#/components/schemas/ICustomObjectSchema"
1221 |           },
1222 |           "cache": {
1223 |             "type": "boolean",
1224 |             "description": "Is the response served from cache",
1225 |             "example": true
1226 |           },
1227 |           "fields": {
1228 |             "type": "array",
1229 |             "items": {
1230 |               "$ref": "#/components/schemas/ICustomField"
1231 |             }
1232 |           }
1233 |         },
1234 |         "required": [
1235 |           "cache"
1236 |         ]
1237 |       },
1238 |       "CustomObjectListResponseDTO": {
1239 |         "type": "object",
1240 |         "properties": {
1241 |           "objects": {
1242 |             "type": "array",
1243 |             "items": {
1244 |               "$ref": "#/components/schemas/ICustomObjectSchema"
1245 |             }
1246 |           }
1247 |         }
1248 |       },
1249 |       "CustomObjectDisplayPropertyDetails": {
1250 |         "type": "object",
1251 |         "properties": {
1252 |           "key": {
1253 |             "type": "string",
1254 |             "example": "custom_objects.pet.name",
1255 |             "description": "key that would be used to refer the custom field internally (lowercase + underscore_separated). 'custom_objects.{{objectKey}}' would be added as prefix by default is not passed"
1256 |           },
1257 |           "name": {
1258 |             "type": "string",
1259 |             "example": "Pet name",
1260 |             "description": "Name of the Primary property name which will be displayed on the record page"
1261 |           },
1262 |           "dataType": {
1263 |             "type": "string",
1264 |             "example": "TEXT",
1265 |             "description": "Primary property data Type (it can either be TEXT or NUMERICAL type)"
1266 |           }
1267 |         },
1268 |         "required": [
1269 |           "key",
1270 |           "name",
1271 |           "dataType"
1272 |         ]
1273 |       },
1274 |       "CreateCustomObjectSchemaDTO": {
1275 |         "type": "object",
1276 |         "properties": {
1277 |           "labels": {
1278 |             "example": {
1279 |               "singular": "Pet",
1280 |               "plural": "Pets"
1281 |             },
1282 |             "description": "This is what your custom object will be called. These labels will be used to display your custom object on the UI",
1283 |             "allOf": [
1284 |               {
1285 |                 "$ref": "#/components/schemas/CustomObjectLabelDto"
1286 |               }
1287 |             ]
1288 |           },
1289 |           "key": {
1290 |             "type": "string",
1291 |             "example": "custom_objects.pet",
1292 |             "description": "key that would be used to refer the Custom Object internally (lowercase + underscore_separated). 'custom_objects.' would be added as prefix by default"
1293 |           },
1294 |           "description": {
1295 |             "type": "string",
1296 |             "example": "These are non vaccinated pets",
1297 |             "description": "Pet Object`s description"
1298 |           },
1299 |           "locationId": {
1300 |             "type": "string",
1301 |             "description": "Location Id",
1302 |             "example": "ve9EPM428h8vShlRW1KT"
1303 |           },
1304 |           "primaryDisplayPropertyDetails": {
1305 |             "description": "Primary property which will be displayed on the record page",
1306 |             "allOf": [
1307 |               {
1308 |                 "$ref": "#/components/schemas/CustomObjectDisplayPropertyDetails"
1309 |               }
1310 |             ]
1311 |           }
1312 |         },
1313 |         "required": [
1314 |           "labels",
1315 |           "key",
1316 |           "locationId",
1317 |           "primaryDisplayPropertyDetails"
1318 |         ]
1319 |       },
1320 |       "CustomObjectResponseDTO": {
1321 |         "type": "object",
1322 |         "properties": {
1323 |           "object": {
1324 |             "$ref": "#/components/schemas/ICustomObjectSchema"
1325 |           }
1326 |         }
1327 |       },
1328 |       "CustomObjectLabelUpdateDto": {
1329 |         "type": "object",
1330 |         "properties": {
1331 |           "singular": {
1332 |             "type": "string",
1333 |             "example": "Car",
1334 |             "description": "Singular name of the custom object"
1335 |           },
1336 |           "plural": {
1337 |             "type": "string",
1338 |             "example": "Cars",
1339 |             "description": "Plural name of the custom object"
1340 |           }
1341 |         }
1342 |       },
1343 |       "UpdateCustomObjectSchemaDTO": {
1344 |         "type": "object",
1345 |         "properties": {
1346 |           "labels": {
1347 |             "example": {
1348 |               "singular": "Pet",
1349 |               "plural": "Pets"
1350 |             },
1351 |             "description": "This is how your custom object will  be  displayed",
1352 |             "allOf": [
1353 |               {
1354 |                 "$ref": "#/components/schemas/CustomObjectLabelUpdateDto"
1355 |               }
1356 |             ]
1357 |           },
1358 |           "description": {
1359 |             "type": "string",
1360 |             "example": "These are non vaccinated pets",
1361 |             "description": "Pet Object`s description",
1362 |             "nullable": true
1363 |           },
1364 |           "locationId": {
1365 |             "type": "string",
1366 |             "description": "location id",
1367 |             "example": "632c34b4c9b7da3358ac9891"
1368 |           },
1369 |           "searchableProperties": {
1370 |             "description": "Searchable Fields: Provide the field key of your object that you want to search on, using the format (custom_object.<object_name>.<field_key>).",
1371 |             "example": [
1372 |               "custom_objects.mad.mad",
1373 |               "custom_objects.mad.record_1",
1374 |               "custom_objects.mad.nn"
1375 |             ],
1376 |             "type": "array",
1377 |             "items": {
1378 |               "type": "string"
1379 |             }
1380 |           }
1381 |         },
1382 |         "required": [
1383 |           "locationId",
1384 |           "searchableProperties"
1385 |         ]
1386 |       },
1387 |       "IRecordSchema": {
1388 |         "type": "object",
1389 |         "properties": {
1390 |           "id": {
1391 |             "type": "string",
1392 |             "example": "661c06b4ffde146bdb469442",
1393 |             "description": "id of the record"
1394 |           },
1395 |           "owner": {
1396 |             "description": "Owner (User's id). Limited to 1 for now. Only Supported with custom objects",
1397 |             "example": [
1398 |               "sx6wyHhbFdRXh302Lunr"
1399 |             ],
1400 |             "type": "array",
1401 |             "items": {
1402 |               "type": "string"
1403 |             }
1404 |           },
1405 |           "followers": {
1406 |             "description": "Follower (User's ids). Limited to 10 for now",
1407 |             "example": [
1408 |               "sx6wyHhbFdRXh302Lunr",
1409 |               "v5cEPM428h8vShlRW1KT"
1410 |             ],
1411 |             "type": "array",
1412 |             "items": {
1413 |               "type": "string"
1414 |             }
1415 |           },
1416 |           "properties": {
1417 |             "type": "string",
1418 |             "example": {
1419 |               "customer_number": 1424,
1420 |               "ticket_name": "Customer not able login",
1421 |               "phone_number": "+917000000000",
1422 |               "money": {
1423 |                 "currency": "default",
1424 |                 "value": 100
1425 |               },
1426 |               "type_of_ticket": "doubt",
1427 |               "section_of_app": [
1428 |                 "contacts",
1429 |                 "smartlist"
1430 |               ],
1431 |               "recieved_on": "2024-07-11",
1432 |               "my_files": [
1433 |                 {
1434 |                   "url": "---url_of_file---"
1435 |                 }
1436 |               ],
1437 |               "my_textbox_list.option_a": "Value 1",
1438 |               "my_textbox_list.option_b": "Value 2"
1439 |             },
1440 |             "description": "Properties of the record"
1441 |           },
1442 |           "dateAdded": {
1443 |             "type": "string",
1444 |             "description": "Date and time when the object was added",
1445 |             "format": "date-time"
1446 |           },
1447 |           "dateUpdated": {
1448 |             "type": "string",
1449 |             "description": "Date and time when the object was last updated",
1450 |             "format": "date-time"
1451 |           }
1452 |         },
1453 |         "required": [
1454 |           "id",
1455 |           "owner",
1456 |           "followers",
1457 |           "properties",
1458 |           "dateAdded",
1459 |           "dateUpdated"
1460 |         ]
1461 |       },
1462 |       "RecordByIdResponseDTO": {
1463 |         "type": "object",
1464 |         "properties": {
1465 |           "record": {
1466 |             "$ref": "#/components/schemas/IRecordSchema"
1467 |           }
1468 |         }
1469 |       },
1470 |       "CreateCustomObjectRecordDto": {
1471 |         "type": "object",
1472 |         "properties": {}
1473 |       },
1474 |       "UpdateCustomObjectRecordDto": {
1475 |         "type": "object",
1476 |         "properties": {}
1477 |       },
1478 |       "ObjectRecordDeleteResponseDTO": {
1479 |         "type": "object",
1480 |         "properties": {
1481 |           "id": {
1482 |             "type": "string",
1483 |             "description": "id of the deleted object",
1484 |             "example": "661c06b4ffde146bdb469442"
1485 |           },
1486 |           "success": {
1487 |             "type": "boolean",
1488 |             "description": "boolean that defines if the operation was a success or not",
1489 |             "example": true
1490 |           }
1491 |         }
1492 |       },
1493 |       "SearchRecordsBody": {
1494 |         "type": "object",
1495 |         "properties": {
1496 |           "locationId": {
1497 |             "type": "string",
1498 |             "description": "Location Id",
1499 |             "example": "ve9EPM428h8vShlRW1KT"
1500 |           },
1501 |           "page": {
1502 |             "type": "number",
1503 |             "description": "Page",
1504 |             "example": 1
1505 |           },
1506 |           "pageLimit": {
1507 |             "type": "number",
1508 |             "description": "Page Limit",
1509 |             "example": 10
1510 |           },
1511 |           "query": {
1512 |             "type": "string",
1513 |             "example": "Buddy",
1514 |             "description": "Pass this query parameter to search using your searchable properties. For example, if you have a custom object called “Pets” and have configured “name” as a searchable property, you can pass name:Buddy to search for pets with the name “Buddy.”"
1515 |           },
1516 |           "searchAfter": {
1517 |             "example": [
1518 |               "sx6wyHhbFdRXh302Lunr",
1519 |               "sx6wyHhbFdRXh302Lunr"
1520 |             ],
1521 |             "type": "array",
1522 |             "items": {
1523 |               "type": "string"
1524 |             }
1525 |           }
1526 |         },
1527 |         "required": [
1528 |           "locationId",
1529 |           "page",
1530 |           "pageLimit",
1531 |           "query",
1532 |           "searchAfter"
1533 |         ]
1534 |       },
1535 |       "CreatedByResponseDTO": {
1536 |         "type": "object",
1537 |         "properties": {
1538 |           "channel": {
1539 |             "type": "string",
1540 |             "description": "Creation Channel",
1541 |             "example": "WEB_USER"
1542 |           },
1543 |           "createdAt": {
1544 |             "type": "string",
1545 |             "description": "Created At",
1546 |             "example": "2025-01-02T09:35:39.032Z"
1547 |           },
1548 |           "source": {
1549 |             "type": "string",
1550 |             "description": "From where the record was created",
1551 |             "example": "PUBLIC_API"
1552 |           },
1553 |           "sourceId": {
1554 |             "type": "string",
1555 |             "description": "User/Resource Id",
1556 |             "example": "26653146-ec82-435d-8a99-84ecdb7fde13"
1557 |           }
1558 |         },
1559 |         "required": [
1560 |           "channel",
1561 |           "createdAt",
1562 |           "source",
1563 |           "sourceId"
1564 |         ]
1565 |       },
1566 |       "RecordResponseDTO": {
1567 |         "type": "object",
1568 |         "properties": {
1569 |           "id": {
1570 |             "type": "string",
1571 |             "example": "661c06b4ffde146bdb469442",
1572 |             "description": "id of the record"
1573 |           },
1574 |           "owner": {
1575 |             "description": "Owner (User's id). Limited to 1 for now . Only supported for custom objects for now",
1576 |             "example": [
1577 |               "sx6wyHhbFdRXh302Lunr"
1578 |             ],
1579 |             "type": "array",
1580 |             "items": {
1581 |               "type": "string"
1582 |             }
1583 |           },
1584 |           "followers": {
1585 |             "description": "Follower (User's ids). Limited to 10 and supported for custom objects for now",
1586 |             "example": [
1587 |               "sx6wyHhbFdRXh302Lunr",
1588 |               "v5cEPM428h8vShlRW1KT"
1589 |             ],
1590 |             "type": "array",
1591 |             "items": {
1592 |               "type": "string"
1593 |             }
1594 |           },
1595 |           "properties": {
1596 |             "type": "string",
1597 |             "example": {
1598 |               "customer_number": 1424,
1599 |               "ticket_name": "Customer not able login",
1600 |               "phone_number": "+917000000000",
1601 |               "money": {
1602 |                 "currency": "default",
1603 |                 "value": 100
1604 |               },
1605 |               "type_of_ticket": "doubt",
1606 |               "section_of_app": [
1607 |                 "contacts",
1608 |                 "smartlist"
1609 |               ],
1610 |               "recieved_on": "2024-07-11",
1611 |               "my_files": [
1612 |                 {
1613 |                   "url": "---url_of_file---"
1614 |                 }
1615 |               ],
1616 |               "my_textbox_list.option_a": "Value 1",
1617 |               "my_textbox_list.option_b": "Value 2"
1618 |             },
1619 |             "description": "Properties of the record"
1620 |           },
1621 |           "createdAt": {
1622 |             "type": "string",
1623 |             "description": "Date and time when the object was added",
1624 |             "format": "date-time"
1625 |           },
1626 |           "updatedAt": {
1627 |             "type": "string",
1628 |             "description": "Date and time when the object was last updated",
1629 |             "format": "date-time"
1630 |           },
1631 |           "locationId": {
1632 |             "type": "string",
1633 |             "description": "Location Id",
1634 |             "example": "ve9EPM428h8vShlRW1KT"
1635 |           },
1636 |           "objectId": {
1637 |             "type": "string",
1638 |             "description": "ObjectId Id",
1639 |             "example": "6d6f6e676f5f6576656e7473"
1640 |           },
1641 |           "objectKey": {
1642 |             "type": "string",
1643 |             "description": "ObjectId key",
1644 |             "example": "custom_objects.pet"
1645 |           },
1646 |           "createdBy": {
1647 |             "description": "Created By Meta",
1648 |             "allOf": [
1649 |               {
1650 |                 "$ref": "#/components/schemas/CreatedByResponseDTO"
1651 |               }
1652 |             ]
1653 |           },
1654 |           "lastUpdatedBy": {
1655 |             "description": "Last Updated By Meta",
1656 |             "allOf": [
1657 |               {
1658 |                 "$ref": "#/components/schemas/CreatedByResponseDTO"
1659 |               }
1660 |             ]
1661 |           },
1662 |           "searchAfter": {
1663 |             "example": [
1664 |               1738683828372,
1665 |               "67a235b49b289431bcf657f8"
1666 |             ],
1667 |             "type": "array",
1668 |             "items": {
1669 |               "type": "number"
1670 |             }
1671 |           }
1672 |         },
1673 |         "required": [
1674 |           "id",
1675 |           "owner",
1676 |           "followers",
1677 |           "properties",
1678 |           "createdAt",
1679 |           "updatedAt",
1680 |           "locationId",
1681 |           "objectId",
1682 |           "objectKey",
1683 |           "createdBy",
1684 |           "lastUpdatedBy",
1685 |           "searchAfter"
1686 |         ]
1687 |       },
1688 |       "SearchRecordResponseDTO": {
1689 |         "type": "object",
1690 |         "properties": {
1691 |           "records": {
1692 |             "description": "Records",
1693 |             "type": "array",
1694 |             "items": {
1695 |               "$ref": "#/components/schemas/RecordResponseDTO"
1696 |             }
1697 |           },
1698 |           "total": {
1699 |             "type": "number",
1700 |             "description": "Total Number of records",
1701 |             "example": 20
1702 |           }
1703 |         },
1704 |         "required": [
1705 |           "total"
1706 |         ]
1707 |       }
1708 |     }
1709 |   }
1710 | }


--------------------------------------------------------------------------------
/opportunities/opportunities.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/opportunities/search": {
   5 |       "get": {
   6 |         "operationId": "search-opportunity",
   7 |         "summary": "Search Opportunity",
   8 |         "description": "Search Opportunity",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "q",
  34 |             "required": false,
  35 |             "in": "query",
  36 |             "example": "john@deo.com",
  37 |             "schema": {
  38 |               "type": "string"
  39 |             }
  40 |           },
  41 |           {
  42 |             "name": "location_id",
  43 |             "required": true,
  44 |             "in": "query",
  45 |             "description": "Location Id",
  46 |             "example": "i2SpAtBVHSVea1sL6oah",
  47 |             "schema": {
  48 |               "type": "string"
  49 |             }
  50 |           },
  51 |           {
  52 |             "name": "pipeline_id",
  53 |             "required": false,
  54 |             "in": "query",
  55 |             "example": "bCkKGpDsyPP4peuKowkG",
  56 |             "description": "Pipeline Id",
  57 |             "schema": {
  58 |               "type": "string"
  59 |             }
  60 |           },
  61 |           {
  62 |             "name": "pipeline_stage_id",
  63 |             "required": false,
  64 |             "in": "query",
  65 |             "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10",
  66 |             "description": "stage Id",
  67 |             "schema": {
  68 |               "type": "string"
  69 |             }
  70 |           },
  71 |           {
  72 |             "name": "contact_id",
  73 |             "required": false,
  74 |             "in": "query",
  75 |             "example": "WFwVrSSjZ2CNHbZThQX2",
  76 |             "description": "Contact Id",
  77 |             "schema": {
  78 |               "type": "string"
  79 |             }
  80 |           },
  81 |           {
  82 |             "name": "status",
  83 |             "required": false,
  84 |             "in": "query",
  85 |             "schema": {
  86 |               "enum": [
  87 |                 "open",
  88 |                 "won",
  89 |                 "lost",
  90 |                 "abandoned",
  91 |                 "all"
  92 |               ],
  93 |               "type": "string"
  94 |             }
  95 |           },
  96 |           {
  97 |             "name": "assigned_to",
  98 |             "required": false,
  99 |             "in": "query",
 100 |             "example": "082goXVW3lIExEQPOnd3",
 101 |             "schema": {
 102 |               "type": "string"
 103 |             }
 104 |           },
 105 |           {
 106 |             "name": "campaignId",
 107 |             "required": false,
 108 |             "in": "query",
 109 |             "example": "Y2I9XM7aO1hncuSOlc9L",
 110 |             "description": "Campaign Id",
 111 |             "schema": {
 112 |               "type": "string"
 113 |             }
 114 |           },
 115 |           {
 116 |             "name": "id",
 117 |             "required": false,
 118 |             "in": "query",
 119 |             "description": "Opportunity Id",
 120 |             "example": "123akv4LFn6C9frZoy3e",
 121 |             "schema": {
 122 |               "type": "string"
 123 |             }
 124 |           },
 125 |           {
 126 |             "name": "order",
 127 |             "required": false,
 128 |             "in": "query",
 129 |             "example": "added_asc",
 130 |             "schema": {
 131 |               "type": "string"
 132 |             }
 133 |           },
 134 |           {
 135 |             "name": "endDate",
 136 |             "required": false,
 137 |             "in": "query",
 138 |             "description": "End date",
 139 |             "example": "mm-dd-yyyy",
 140 |             "schema": {
 141 |               "type": "string"
 142 |             }
 143 |           },
 144 |           {
 145 |             "name": "startAfter",
 146 |             "required": false,
 147 |             "in": "query",
 148 |             "description": "Start After",
 149 |             "example": "1628008053263",
 150 |             "schema": {
 151 |               "type": "string"
 152 |             }
 153 |           },
 154 |           {
 155 |             "name": "startAfterId",
 156 |             "required": false,
 157 |             "in": "query",
 158 |             "example": "UIaE1WjAwWKdlyD7osQI",
 159 |             "description": "Start After Id",
 160 |             "schema": {
 161 |               "type": "string"
 162 |             }
 163 |           },
 164 |           {
 165 |             "name": "date",
 166 |             "required": false,
 167 |             "in": "query",
 168 |             "description": "Start date",
 169 |             "example": "mm-dd-yyyy",
 170 |             "schema": {
 171 |               "type": "string"
 172 |             }
 173 |           },
 174 |           {
 175 |             "name": "country",
 176 |             "required": false,
 177 |             "in": "query",
 178 |             "example": "US",
 179 |             "schema": {
 180 |               "type": "string"
 181 |             }
 182 |           },
 183 |           {
 184 |             "name": "page",
 185 |             "required": false,
 186 |             "in": "query",
 187 |             "schema": {
 188 |               "default": 1,
 189 |               "type": "number"
 190 |             }
 191 |           },
 192 |           {
 193 |             "name": "limit",
 194 |             "required": false,
 195 |             "in": "query",
 196 |             "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
 197 |             "schema": {
 198 |               "default": 20,
 199 |               "type": "number"
 200 |             }
 201 |           },
 202 |           {
 203 |             "name": "getTasks",
 204 |             "required": false,
 205 |             "in": "query",
 206 |             "description": "get Tasks in contact",
 207 |             "example": false,
 208 |             "schema": {
 209 |               "type": "boolean"
 210 |             }
 211 |           },
 212 |           {
 213 |             "name": "getNotes",
 214 |             "required": false,
 215 |             "in": "query",
 216 |             "description": "get Notes in contact",
 217 |             "example": false,
 218 |             "schema": {
 219 |               "type": "boolean"
 220 |             }
 221 |           },
 222 |           {
 223 |             "name": "getCalendarEvents",
 224 |             "required": false,
 225 |             "in": "query",
 226 |             "description": "get Calender event in contact",
 227 |             "example": false,
 228 |             "schema": {
 229 |               "type": "boolean"
 230 |             }
 231 |           }
 232 |         ],
 233 |         "responses": {
 234 |           "200": {
 235 |             "description": "Successful response",
 236 |             "content": {
 237 |               "application/json": {
 238 |                 "schema": {
 239 |                   "$ref": "#/components/schemas/SearchSuccessfulResponseDto"
 240 |                 }
 241 |               }
 242 |             }
 243 |           },
 244 |           "400": {
 245 |             "description": "Bad Request",
 246 |             "content": {
 247 |               "application/json": {
 248 |                 "schema": {
 249 |                   "$ref": "#/components/schemas/BadRequestDTO"
 250 |                 }
 251 |               }
 252 |             }
 253 |           },
 254 |           "401": {
 255 |             "description": "Unauthorized",
 256 |             "content": {
 257 |               "application/json": {
 258 |                 "schema": {
 259 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 260 |                 }
 261 |               }
 262 |             }
 263 |           },
 264 |           "422": {
 265 |             "description": "Unprocessable Entity",
 266 |             "content": {
 267 |               "application/json": {
 268 |                 "schema": {
 269 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 270 |                 }
 271 |               }
 272 |             }
 273 |           }
 274 |         },
 275 |         "tags": [
 276 |           "Search"
 277 |         ],
 278 |         "security": [
 279 |           {
 280 |             "bearer": []
 281 |           }
 282 |         ]
 283 |       }
 284 |     },
 285 |     "/opportunities/pipelines": {
 286 |       "get": {
 287 |         "operationId": "get-pipelines",
 288 |         "summary": "Get Pipelines",
 289 |         "description": "Get Pipelines",
 290 |         "parameters": [
 291 |           {
 292 |             "name": "Authorization",
 293 |             "in": "header",
 294 |             "description": "Access Token",
 295 |             "required": true,
 296 |             "schema": {
 297 |               "type": "string",
 298 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 299 |             }
 300 |           },
 301 |           {
 302 |             "name": "Version",
 303 |             "in": "header",
 304 |             "description": "API Version",
 305 |             "required": true,
 306 |             "schema": {
 307 |               "type": "string",
 308 |               "enum": [
 309 |                 "2021-07-28"
 310 |               ]
 311 |             }
 312 |           },
 313 |           {
 314 |             "name": "locationId",
 315 |             "required": true,
 316 |             "in": "query",
 317 |             "example": "ve9EPM428h8vShlRW1KT",
 318 |             "schema": {
 319 |               "type": "string"
 320 |             }
 321 |           }
 322 |         ],
 323 |         "responses": {
 324 |           "200": {
 325 |             "description": "Successful response",
 326 |             "content": {
 327 |               "application/json": {
 328 |                 "schema": {
 329 |                   "$ref": "#/components/schemas/GetPipelinesSuccessfulResponseDto"
 330 |                 }
 331 |               }
 332 |             }
 333 |           },
 334 |           "400": {
 335 |             "description": "Bad Request",
 336 |             "content": {
 337 |               "application/json": {
 338 |                 "schema": {
 339 |                   "$ref": "#/components/schemas/BadRequestDTO"
 340 |                 }
 341 |               }
 342 |             }
 343 |           },
 344 |           "401": {
 345 |             "description": "Unauthorized",
 346 |             "content": {
 347 |               "application/json": {
 348 |                 "schema": {
 349 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 350 |                 }
 351 |               }
 352 |             }
 353 |           }
 354 |         },
 355 |         "tags": [
 356 |           "Pipelines"
 357 |         ],
 358 |         "security": [
 359 |           {
 360 |             "bearer": []
 361 |           }
 362 |         ]
 363 |       }
 364 |     },
 365 |     "/opportunities/{id}": {
 366 |       "get": {
 367 |         "operationId": "get-opportunity",
 368 |         "summary": "Get Opportunity",
 369 |         "description": "Get Opportunity",
 370 |         "parameters": [
 371 |           {
 372 |             "name": "Authorization",
 373 |             "in": "header",
 374 |             "description": "Access Token",
 375 |             "required": true,
 376 |             "schema": {
 377 |               "type": "string",
 378 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 379 |             }
 380 |           },
 381 |           {
 382 |             "name": "Version",
 383 |             "in": "header",
 384 |             "description": "API Version",
 385 |             "required": true,
 386 |             "schema": {
 387 |               "type": "string",
 388 |               "enum": [
 389 |                 "2021-07-28"
 390 |               ]
 391 |             }
 392 |           },
 393 |           {
 394 |             "name": "id",
 395 |             "required": true,
 396 |             "in": "path",
 397 |             "description": "Opportunity Id",
 398 |             "example": "yWQobCRIhRguQtD2llvk",
 399 |             "schema": {
 400 |               "type": "string"
 401 |             }
 402 |           }
 403 |         ],
 404 |         "responses": {
 405 |           "200": {
 406 |             "description": "Successful response",
 407 |             "content": {
 408 |               "application/json": {
 409 |                 "schema": {
 410 |                   "$ref": "#/components/schemas/GetPostOpportunitySuccessfulResponseDto"
 411 |                 }
 412 |               }
 413 |             }
 414 |           },
 415 |           "400": {
 416 |             "description": "Bad Request",
 417 |             "content": {
 418 |               "application/json": {
 419 |                 "schema": {
 420 |                   "$ref": "#/components/schemas/BadRequestDTO"
 421 |                 }
 422 |               }
 423 |             }
 424 |           },
 425 |           "401": {
 426 |             "description": "Unauthorized",
 427 |             "content": {
 428 |               "application/json": {
 429 |                 "schema": {
 430 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 431 |                 }
 432 |               }
 433 |             }
 434 |           },
 435 |           "422": {
 436 |             "description": "Unprocessable Entity",
 437 |             "content": {
 438 |               "application/json": {
 439 |                 "schema": {
 440 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 441 |                 }
 442 |               }
 443 |             }
 444 |           }
 445 |         },
 446 |         "tags": [
 447 |           "Opportunities"
 448 |         ],
 449 |         "security": [
 450 |           {
 451 |             "bearer": []
 452 |           }
 453 |         ]
 454 |       },
 455 |       "delete": {
 456 |         "operationId": "delete-opportunity",
 457 |         "summary": "Delete Opportunity",
 458 |         "description": "Delete Opportunity",
 459 |         "parameters": [
 460 |           {
 461 |             "name": "Authorization",
 462 |             "in": "header",
 463 |             "description": "Access Token",
 464 |             "required": true,
 465 |             "schema": {
 466 |               "type": "string",
 467 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 468 |             }
 469 |           },
 470 |           {
 471 |             "name": "Version",
 472 |             "in": "header",
 473 |             "description": "API Version",
 474 |             "required": true,
 475 |             "schema": {
 476 |               "type": "string",
 477 |               "enum": [
 478 |                 "2021-07-28"
 479 |               ]
 480 |             }
 481 |           },
 482 |           {
 483 |             "name": "id",
 484 |             "required": true,
 485 |             "in": "path",
 486 |             "description": "Opportunity Id",
 487 |             "example": "yWQobCRIhRguQtD2llvk",
 488 |             "schema": {
 489 |               "type": "string"
 490 |             }
 491 |           }
 492 |         ],
 493 |         "responses": {
 494 |           "200": {
 495 |             "description": "Successful response",
 496 |             "content": {
 497 |               "application/json": {
 498 |                 "schema": {
 499 |                   "$ref": "#/components/schemas/DeleteUpdateOpportunitySuccessfulResponseDto"
 500 |                 }
 501 |               }
 502 |             }
 503 |           },
 504 |           "400": {
 505 |             "description": "Bad Request",
 506 |             "content": {
 507 |               "application/json": {
 508 |                 "schema": {
 509 |                   "$ref": "#/components/schemas/BadRequestDTO"
 510 |                 }
 511 |               }
 512 |             }
 513 |           },
 514 |           "401": {
 515 |             "description": "Unauthorized",
 516 |             "content": {
 517 |               "application/json": {
 518 |                 "schema": {
 519 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 520 |                 }
 521 |               }
 522 |             }
 523 |           },
 524 |           "422": {
 525 |             "description": "Unprocessable Entity",
 526 |             "content": {
 527 |               "application/json": {
 528 |                 "schema": {
 529 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 530 |                 }
 531 |               }
 532 |             }
 533 |           }
 534 |         },
 535 |         "tags": [
 536 |           "Opportunities"
 537 |         ],
 538 |         "security": [
 539 |           {
 540 |             "bearer": []
 541 |           }
 542 |         ]
 543 |       },
 544 |       "put": {
 545 |         "operationId": "update-opportunity",
 546 |         "summary": "Update Opportunity",
 547 |         "description": "Update Opportunity",
 548 |         "parameters": [
 549 |           {
 550 |             "name": "Authorization",
 551 |             "in": "header",
 552 |             "description": "Access Token",
 553 |             "required": true,
 554 |             "schema": {
 555 |               "type": "string",
 556 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 557 |             }
 558 |           },
 559 |           {
 560 |             "name": "Version",
 561 |             "in": "header",
 562 |             "description": "API Version",
 563 |             "required": true,
 564 |             "schema": {
 565 |               "type": "string",
 566 |               "enum": [
 567 |                 "2021-07-28"
 568 |               ]
 569 |             }
 570 |           },
 571 |           {
 572 |             "name": "id",
 573 |             "required": true,
 574 |             "in": "path",
 575 |             "description": "Opportunity Id",
 576 |             "example": "yWQobCRIhRguQtD2llvk",
 577 |             "schema": {
 578 |               "type": "string"
 579 |             }
 580 |           }
 581 |         ],
 582 |         "requestBody": {
 583 |           "required": true,
 584 |           "content": {
 585 |             "application/json": {
 586 |               "schema": {
 587 |                 "$ref": "#/components/schemas/UpdateOpportunityDto"
 588 |               }
 589 |             }
 590 |           }
 591 |         },
 592 |         "responses": {
 593 |           "200": {
 594 |             "description": "Successful response",
 595 |             "content": {
 596 |               "application/json": {
 597 |                 "schema": {
 598 |                   "$ref": "#/components/schemas/GetPostOpportunitySuccessfulResponseDto"
 599 |                 }
 600 |               }
 601 |             }
 602 |           },
 603 |           "400": {
 604 |             "description": "Bad Request",
 605 |             "content": {
 606 |               "application/json": {
 607 |                 "schema": {
 608 |                   "$ref": "#/components/schemas/BadRequestDTO"
 609 |                 }
 610 |               }
 611 |             }
 612 |           },
 613 |           "401": {
 614 |             "description": "Unauthorized",
 615 |             "content": {
 616 |               "application/json": {
 617 |                 "schema": {
 618 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 619 |                 }
 620 |               }
 621 |             }
 622 |           },
 623 |           "422": {
 624 |             "description": "Unprocessable Entity",
 625 |             "content": {
 626 |               "application/json": {
 627 |                 "schema": {
 628 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 629 |                 }
 630 |               }
 631 |             }
 632 |           }
 633 |         },
 634 |         "tags": [
 635 |           "Opportunities"
 636 |         ],
 637 |         "security": [
 638 |           {
 639 |             "bearer": []
 640 |           }
 641 |         ]
 642 |       }
 643 |     },
 644 |     "/opportunities/{id}/status": {
 645 |       "put": {
 646 |         "operationId": "update-opportunity-status",
 647 |         "summary": "Update Opportunity Status",
 648 |         "description": "Update Opportunity Status",
 649 |         "parameters": [
 650 |           {
 651 |             "name": "Authorization",
 652 |             "in": "header",
 653 |             "description": "Access Token",
 654 |             "required": true,
 655 |             "schema": {
 656 |               "type": "string",
 657 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 658 |             }
 659 |           },
 660 |           {
 661 |             "name": "Version",
 662 |             "in": "header",
 663 |             "description": "API Version",
 664 |             "required": true,
 665 |             "schema": {
 666 |               "type": "string",
 667 |               "enum": [
 668 |                 "2021-07-28"
 669 |               ]
 670 |             }
 671 |           },
 672 |           {
 673 |             "name": "id",
 674 |             "required": true,
 675 |             "in": "path",
 676 |             "description": "Opportunity Id",
 677 |             "example": "yWQobCRIhRguQtD2llvk",
 678 |             "schema": {
 679 |               "type": "string"
 680 |             }
 681 |           }
 682 |         ],
 683 |         "requestBody": {
 684 |           "required": true,
 685 |           "content": {
 686 |             "application/json": {
 687 |               "schema": {
 688 |                 "$ref": "#/components/schemas/UpdateStatusDto"
 689 |               }
 690 |             }
 691 |           }
 692 |         },
 693 |         "responses": {
 694 |           "200": {
 695 |             "description": "Successful response",
 696 |             "content": {
 697 |               "application/json": {
 698 |                 "schema": {
 699 |                   "$ref": "#/components/schemas/DeleteUpdateOpportunitySuccessfulResponseDto"
 700 |                 }
 701 |               }
 702 |             }
 703 |           },
 704 |           "400": {
 705 |             "description": "Bad Request",
 706 |             "content": {
 707 |               "application/json": {
 708 |                 "schema": {
 709 |                   "$ref": "#/components/schemas/BadRequestDTO"
 710 |                 }
 711 |               }
 712 |             }
 713 |           },
 714 |           "401": {
 715 |             "description": "Unauthorized",
 716 |             "content": {
 717 |               "application/json": {
 718 |                 "schema": {
 719 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 720 |                 }
 721 |               }
 722 |             }
 723 |           },
 724 |           "422": {
 725 |             "description": "Unprocessable Entity",
 726 |             "content": {
 727 |               "application/json": {
 728 |                 "schema": {
 729 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 730 |                 }
 731 |               }
 732 |             }
 733 |           }
 734 |         },
 735 |         "tags": [
 736 |           "Opportunities"
 737 |         ],
 738 |         "security": [
 739 |           {
 740 |             "bearer": []
 741 |           }
 742 |         ]
 743 |       }
 744 |     },
 745 |     "/opportunities/upsert": {
 746 |       "post": {
 747 |         "operationId": "Upsert-opportunity",
 748 |         "summary": "Upsert Opportunity",
 749 |         "description": "Upsert Opportunity",
 750 |         "parameters": [
 751 |           {
 752 |             "name": "Authorization",
 753 |             "in": "header",
 754 |             "description": "Access Token",
 755 |             "required": true,
 756 |             "schema": {
 757 |               "type": "string",
 758 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 759 |             }
 760 |           },
 761 |           {
 762 |             "name": "Version",
 763 |             "in": "header",
 764 |             "description": "API Version",
 765 |             "required": true,
 766 |             "schema": {
 767 |               "type": "string",
 768 |               "enum": [
 769 |                 "2021-07-28"
 770 |               ]
 771 |             }
 772 |           }
 773 |         ],
 774 |         "requestBody": {
 775 |           "required": true,
 776 |           "content": {
 777 |             "application/json": {
 778 |               "schema": {
 779 |                 "$ref": "#/components/schemas/UpsertOpportunityDto"
 780 |               }
 781 |             }
 782 |           }
 783 |         },
 784 |         "responses": {
 785 |           "200": {
 786 |             "description": "Successful response",
 787 |             "content": {
 788 |               "application/json": {
 789 |                 "schema": {
 790 |                   "$ref": "#/components/schemas/UpsertOpportunitySuccessfulResponseDto"
 791 |                 }
 792 |               }
 793 |             }
 794 |           },
 795 |           "400": {
 796 |             "description": "Bad Request",
 797 |             "content": {
 798 |               "application/json": {
 799 |                 "schema": {
 800 |                   "$ref": "#/components/schemas/BadRequestDTO"
 801 |                 }
 802 |               }
 803 |             }
 804 |           },
 805 |           "401": {
 806 |             "description": "Unauthorized",
 807 |             "content": {
 808 |               "application/json": {
 809 |                 "schema": {
 810 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 811 |                 }
 812 |               }
 813 |             }
 814 |           },
 815 |           "422": {
 816 |             "description": "Unprocessable Entity",
 817 |             "content": {
 818 |               "application/json": {
 819 |                 "schema": {
 820 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 821 |                 }
 822 |               }
 823 |             }
 824 |           }
 825 |         },
 826 |         "tags": [
 827 |           "Opportunities"
 828 |         ],
 829 |         "security": [
 830 |           {
 831 |             "bearer": []
 832 |           }
 833 |         ]
 834 |       }
 835 |     },
 836 |     "/opportunities/{id}/followers": {
 837 |       "post": {
 838 |         "operationId": "add-followers-opportunity",
 839 |         "summary": "Add Followers",
 840 |         "description": "Add Followers",
 841 |         "parameters": [
 842 |           {
 843 |             "name": "Authorization",
 844 |             "in": "header",
 845 |             "description": "Access Token",
 846 |             "required": true,
 847 |             "schema": {
 848 |               "type": "string",
 849 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 850 |             }
 851 |           },
 852 |           {
 853 |             "name": "Version",
 854 |             "in": "header",
 855 |             "description": "API Version",
 856 |             "required": true,
 857 |             "schema": {
 858 |               "type": "string",
 859 |               "enum": [
 860 |                 "2021-07-28"
 861 |               ]
 862 |             }
 863 |           },
 864 |           {
 865 |             "name": "id",
 866 |             "required": true,
 867 |             "in": "path",
 868 |             "description": "Opportunity Id",
 869 |             "example": "sx6wyHhbFdRXh302Lunr",
 870 |             "schema": {
 871 |               "type": "string"
 872 |             }
 873 |           }
 874 |         ],
 875 |         "requestBody": {
 876 |           "required": true,
 877 |           "content": {
 878 |             "application/json": {
 879 |               "schema": {
 880 |                 "$ref": "#/components/schemas/FollowersDTO"
 881 |               }
 882 |             }
 883 |           }
 884 |         },
 885 |         "responses": {
 886 |           "201": {
 887 |             "description": "Successful response",
 888 |             "content": {
 889 |               "application/json": {
 890 |                 "schema": {
 891 |                   "$ref": "#/components/schemas/CreateAddFollowersSuccessfulResponseDto"
 892 |                 }
 893 |               }
 894 |             }
 895 |           },
 896 |           "400": {
 897 |             "description": "Bad Request",
 898 |             "content": {
 899 |               "application/json": {
 900 |                 "schema": {
 901 |                   "$ref": "#/components/schemas/BadRequestDTO"
 902 |                 }
 903 |               }
 904 |             }
 905 |           },
 906 |           "401": {
 907 |             "description": "Unauthorized",
 908 |             "content": {
 909 |               "application/json": {
 910 |                 "schema": {
 911 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 912 |                 }
 913 |               }
 914 |             }
 915 |           },
 916 |           "422": {
 917 |             "description": "Unprocessable Entity",
 918 |             "content": {
 919 |               "application/json": {
 920 |                 "schema": {
 921 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 922 |                 }
 923 |               }
 924 |             }
 925 |           }
 926 |         },
 927 |         "tags": [
 928 |           "Followers"
 929 |         ],
 930 |         "security": [
 931 |           {
 932 |             "bearer": []
 933 |           }
 934 |         ]
 935 |       },
 936 |       "delete": {
 937 |         "operationId": "remove-followers-opportunity",
 938 |         "summary": "Remove Followers",
 939 |         "description": "Remove Followers",
 940 |         "parameters": [
 941 |           {
 942 |             "name": "Authorization",
 943 |             "in": "header",
 944 |             "description": "Access Token",
 945 |             "required": true,
 946 |             "schema": {
 947 |               "type": "string",
 948 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 949 |             }
 950 |           },
 951 |           {
 952 |             "name": "Version",
 953 |             "in": "header",
 954 |             "description": "API Version",
 955 |             "required": true,
 956 |             "schema": {
 957 |               "type": "string",
 958 |               "enum": [
 959 |                 "2021-07-28"
 960 |               ]
 961 |             }
 962 |           },
 963 |           {
 964 |             "name": "id",
 965 |             "required": true,
 966 |             "in": "path",
 967 |             "description": "Opportunity Id",
 968 |             "example": "sx6wyHhbFdRXh302Lunr",
 969 |             "schema": {
 970 |               "type": "string"
 971 |             }
 972 |           }
 973 |         ],
 974 |         "requestBody": {
 975 |           "required": true,
 976 |           "content": {
 977 |             "application/json": {
 978 |               "schema": {
 979 |                 "$ref": "#/components/schemas/FollowersDTO"
 980 |               }
 981 |             }
 982 |           }
 983 |         },
 984 |         "responses": {
 985 |           "200": {
 986 |             "description": "Successful response",
 987 |             "content": {
 988 |               "application/json": {
 989 |                 "schema": {
 990 |                   "$ref": "#/components/schemas/DeleteFollowersSuccessfulResponseDto"
 991 |                 }
 992 |               }
 993 |             }
 994 |           },
 995 |           "400": {
 996 |             "description": "Bad Request",
 997 |             "content": {
 998 |               "application/json": {
 999 |                 "schema": {
1000 |                   "$ref": "#/components/schemas/BadRequestDTO"
1001 |                 }
1002 |               }
1003 |             }
1004 |           },
1005 |           "401": {
1006 |             "description": "Unauthorized",
1007 |             "content": {
1008 |               "application/json": {
1009 |                 "schema": {
1010 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1011 |                 }
1012 |               }
1013 |             }
1014 |           },
1015 |           "422": {
1016 |             "description": "Unprocessable Entity",
1017 |             "content": {
1018 |               "application/json": {
1019 |                 "schema": {
1020 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1021 |                 }
1022 |               }
1023 |             }
1024 |           }
1025 |         },
1026 |         "tags": [
1027 |           "Followers"
1028 |         ],
1029 |         "security": [
1030 |           {
1031 |             "bearer": []
1032 |           }
1033 |         ]
1034 |       }
1035 |     },
1036 |     "/opportunities/": {
1037 |       "post": {
1038 |         "operationId": "create-opportunity",
1039 |         "summary": "Create Opportunity",
1040 |         "description": "Create Opportunity",
1041 |         "parameters": [
1042 |           {
1043 |             "name": "Authorization",
1044 |             "in": "header",
1045 |             "description": "Access Token",
1046 |             "required": true,
1047 |             "schema": {
1048 |               "type": "string",
1049 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1050 |             }
1051 |           },
1052 |           {
1053 |             "name": "Version",
1054 |             "in": "header",
1055 |             "description": "API Version",
1056 |             "required": true,
1057 |             "schema": {
1058 |               "type": "string",
1059 |               "enum": [
1060 |                 "2021-07-28"
1061 |               ]
1062 |             }
1063 |           }
1064 |         ],
1065 |         "requestBody": {
1066 |           "required": true,
1067 |           "content": {
1068 |             "application/json": {
1069 |               "schema": {
1070 |                 "$ref": "#/components/schemas/CreateDto"
1071 |               }
1072 |             }
1073 |           }
1074 |         },
1075 |         "responses": {
1076 |           "201": {
1077 |             "description": "Successful response",
1078 |             "content": {
1079 |               "application/json": {
1080 |                 "schema": {
1081 |                   "$ref": "#/components/schemas/GetPostOpportunitySuccessfulResponseDto"
1082 |                 }
1083 |               }
1084 |             }
1085 |           },
1086 |           "400": {
1087 |             "description": "Bad Request",
1088 |             "content": {
1089 |               "application/json": {
1090 |                 "schema": {
1091 |                   "$ref": "#/components/schemas/BadRequestDTO"
1092 |                 }
1093 |               }
1094 |             }
1095 |           },
1096 |           "401": {
1097 |             "description": "Unauthorized",
1098 |             "content": {
1099 |               "application/json": {
1100 |                 "schema": {
1101 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1102 |                 }
1103 |               }
1104 |             }
1105 |           },
1106 |           "422": {
1107 |             "description": "Unprocessable Entity",
1108 |             "content": {
1109 |               "application/json": {
1110 |                 "schema": {
1111 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1112 |                 }
1113 |               }
1114 |             }
1115 |           }
1116 |         },
1117 |         "tags": [
1118 |           "Opportunities"
1119 |         ],
1120 |         "security": [
1121 |           {
1122 |             "bearer": []
1123 |           }
1124 |         ]
1125 |       }
1126 |     }
1127 |   },
1128 |   "info": {
1129 |     "title": "Opportunities API",
1130 |     "description": "Documentation for Opportunities API",
1131 |     "version": "1.0",
1132 |     "contact": {}
1133 |   },
1134 |   "tags": [
1135 |     {
1136 |       "name": "Opportunities",
1137 |       "description": "Documentation for Opportunities API"
1138 |     },
1139 |     {
1140 |       "name": "Search",
1141 |       "description": "Documentation for Opportunities API"
1142 |     },
1143 |     {
1144 |       "name": "Pipelines",
1145 |       "description": "Documentation for Opportunities API"
1146 |     },
1147 |     {
1148 |       "name": "Export",
1149 |       "description": "Documentation for Opportunities API"
1150 |     },
1151 |     {
1152 |       "name": "Pipiline Search",
1153 |       "description": "Documentation for Opportunities API"
1154 |     }
1155 |   ],
1156 |   "servers": [
1157 |     {
1158 |       "url": "https://services.leadconnectorhq.com"
1159 |     }
1160 |   ],
1161 |   "components": {
1162 |     "securitySchemes": {
1163 |       "bearer": {
1164 |         "scheme": "bearer",
1165 |         "bearerFormat": "JWT",
1166 |         "name": "Authorization",
1167 |         "in": "header",
1168 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1169 |         "type": "http"
1170 |       },
1171 |       "Location-Access": {
1172 |         "scheme": "bearer",
1173 |         "bearerFormat": "JWT",
1174 |         "name": "Authorization",
1175 |         "in": "header",
1176 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1177 |         "type": "http"
1178 |       },
1179 |       "Agency-Access": {
1180 |         "scheme": "bearer",
1181 |         "bearerFormat": "JWT",
1182 |         "name": "Authorization",
1183 |         "in": "header",
1184 |         "description": "Use the Access Token generated with user type as Agency.",
1185 |         "type": "http"
1186 |       }
1187 |     },
1188 |     "schemas": {
1189 |       "BadRequestDTO": {
1190 |         "type": "object",
1191 |         "properties": {
1192 |           "statusCode": {
1193 |             "type": "number",
1194 |             "example": 400
1195 |           },
1196 |           "message": {
1197 |             "type": "string",
1198 |             "example": "Bad Request"
1199 |           }
1200 |         }
1201 |       },
1202 |       "UnauthorizedDTO": {
1203 |         "type": "object",
1204 |         "properties": {
1205 |           "statusCode": {
1206 |             "type": "number",
1207 |             "example": 401
1208 |           },
1209 |           "message": {
1210 |             "type": "string",
1211 |             "example": "Invalid token: access token is invalid"
1212 |           },
1213 |           "error": {
1214 |             "type": "string",
1215 |             "example": "Unauthorized"
1216 |           }
1217 |         }
1218 |       },
1219 |       "UnprocessableDTO": {
1220 |         "type": "object",
1221 |         "properties": {
1222 |           "statusCode": {
1223 |             "type": "number",
1224 |             "example": 422
1225 |           },
1226 |           "message": {
1227 |             "example": [
1228 |               "Unprocessable Entity"
1229 |             ],
1230 |             "type": "array",
1231 |             "items": {
1232 |               "type": "string"
1233 |             }
1234 |           },
1235 |           "error": {
1236 |             "type": "string",
1237 |             "example": "Unprocessable Entity"
1238 |           }
1239 |         }
1240 |       },
1241 |       "SearchOpportunitiesContactResponseSchema": {
1242 |         "type": "object",
1243 |         "properties": {
1244 |           "id": {
1245 |             "type": "string",
1246 |             "example": "byMEV0NQinDhq8ZfiOi2"
1247 |           },
1248 |           "name": {
1249 |             "type": "string",
1250 |             "example": "John Deo"
1251 |           },
1252 |           "companyName": {
1253 |             "type": "string",
1254 |             "example": "Tesla Inc"
1255 |           },
1256 |           "email": {
1257 |             "type": "string",
1258 |             "example": "john@deo.com"
1259 |           },
1260 |           "phone": {
1261 |             "type": "string",
1262 |             "example": "+1202-555-0107"
1263 |           },
1264 |           "tags": {
1265 |             "type": "array",
1266 |             "items": {
1267 |               "type": "string"
1268 |             }
1269 |           }
1270 |         }
1271 |       },
1272 |       "CustomFieldResponseSchema": {
1273 |         "type": "object",
1274 |         "properties": {
1275 |           "id": {
1276 |             "type": "string",
1277 |             "example": "MgobCB14YMVKuE4Ka8p1"
1278 |           },
1279 |           "fieldValue": {
1280 |             "description": "The value of the custom field",
1281 |             "oneOf": [
1282 |               {
1283 |                 "type": "string"
1284 |               },
1285 |               {
1286 |                 "type": "object"
1287 |               },
1288 |               {
1289 |                 "type": "array",
1290 |                 "items": {
1291 |                   "type": "string"
1292 |                 }
1293 |               },
1294 |               {
1295 |                 "type": "array",
1296 |                 "items": {
1297 |                   "type": "object"
1298 |                 }
1299 |               }
1300 |             ]
1301 |           }
1302 |         },
1303 |         "required": [
1304 |           "id",
1305 |           "fieldValue"
1306 |         ]
1307 |       },
1308 |       "SearchOpportunitiesResponseSchema": {
1309 |         "type": "object",
1310 |         "properties": {
1311 |           "id": {
1312 |             "type": "string",
1313 |             "example": "yWQobCRIhRguQtD2llvk"
1314 |           },
1315 |           "name": {
1316 |             "type": "string",
1317 |             "example": "testing"
1318 |           },
1319 |           "monetaryValue": {
1320 |             "type": "number",
1321 |             "example": 500
1322 |           },
1323 |           "pipelineId": {
1324 |             "type": "string",
1325 |             "example": "VDm7RPYC2GLUvdpKmBfC"
1326 |           },
1327 |           "pipelineStageId": {
1328 |             "type": "string",
1329 |             "example": "e93ba61a-53b3-45e7-985a-c7732dbcdb69"
1330 |           },
1331 |           "assignedTo": {
1332 |             "type": "string",
1333 |             "example": "zT46WSCPbudrq4zhWMk6"
1334 |           },
1335 |           "status": {
1336 |             "type": "string",
1337 |             "example": "open"
1338 |           },
1339 |           "source": {
1340 |             "type": "string",
1341 |             "example": ""
1342 |           },
1343 |           "lastStatusChangeAt": {
1344 |             "type": "string",
1345 |             "example": "2021-08-03T04:55:17.355Z"
1346 |           },
1347 |           "lastStageChangeAt": {
1348 |             "type": "string",
1349 |             "example": "2021-08-03T04:55:17.355Z"
1350 |           },
1351 |           "lastActionDate": {
1352 |             "type": "string",
1353 |             "example": "2021-08-03T04:55:17.355Z"
1354 |           },
1355 |           "indexVersion": {
1356 |             "type": "string",
1357 |             "example": 1
1358 |           },
1359 |           "createdAt": {
1360 |             "type": "string",
1361 |             "example": "2021-08-03T04:55:17.355Z"
1362 |           },
1363 |           "updatedAt": {
1364 |             "type": "string",
1365 |             "example": "2021-08-03T04:55:17.355Z"
1366 |           },
1367 |           "contactId": {
1368 |             "type": "string",
1369 |             "example": "zT46WSCPbudrq4zhWMk6"
1370 |           },
1371 |           "locationId": {
1372 |             "type": "string",
1373 |             "example": "zT46WSCPbudrq4zhW"
1374 |           },
1375 |           "contact": {
1376 |             "$ref": "#/components/schemas/SearchOpportunitiesContactResponseSchema"
1377 |           },
1378 |           "notes": {
1379 |             "type": "array",
1380 |             "items": {
1381 |               "type": "string"
1382 |             }
1383 |           },
1384 |           "tasks": {
1385 |             "type": "array",
1386 |             "items": {
1387 |               "type": "string"
1388 |             }
1389 |           },
1390 |           "calendarEvents": {
1391 |             "type": "array",
1392 |             "items": {
1393 |               "type": "string"
1394 |             }
1395 |           },
1396 |           "customFields": {
1397 |             "type": "array",
1398 |             "items": {
1399 |               "$ref": "#/components/schemas/CustomFieldResponseSchema"
1400 |             }
1401 |           },
1402 |           "followers": {
1403 |             "type": "array",
1404 |             "items": {
1405 |               "type": "array"
1406 |             }
1407 |           }
1408 |         }
1409 |       },
1410 |       "SearchMetaResponseSchema": {
1411 |         "type": "object",
1412 |         "properties": {
1413 |           "total": {
1414 |             "type": "number",
1415 |             "example": 1
1416 |           },
1417 |           "nextPageUrl": {
1418 |             "type": "string",
1419 |             "example": "http://localhost:5066/opportunities/search?q=&location_id=ve9EPM428h8vShlRW1KT&pipeline_id=&pipeline_stage_id=&status=&assigned_to+=&campaignId=&id=&order=&endDate=&startAfter=1625203104328&startAfterId=yWQobCRIhRguQtD2llvk&date=&limit=1&country=&page=1"
1420 |           },
1421 |           "startAfterId": {
1422 |             "type": "string",
1423 |             "example": "yWQobCRIhRguQtD2llvk"
1424 |           },
1425 |           "startAfter": {
1426 |             "type": "number",
1427 |             "example": 1625203104328
1428 |           },
1429 |           "currentPage": {
1430 |             "type": "number",
1431 |             "example": 2
1432 |           },
1433 |           "nextPage": {
1434 |             "type": "number",
1435 |             "example": 3
1436 |           },
1437 |           "prevPage": {
1438 |             "type": "number",
1439 |             "example": 1
1440 |           }
1441 |         }
1442 |       },
1443 |       "SearchSuccessfulResponseDto": {
1444 |         "type": "object",
1445 |         "properties": {
1446 |           "opportunities": {
1447 |             "type": "array",
1448 |             "items": {
1449 |               "$ref": "#/components/schemas/SearchOpportunitiesResponseSchema"
1450 |             }
1451 |           },
1452 |           "meta": {
1453 |             "$ref": "#/components/schemas/SearchMetaResponseSchema"
1454 |           },
1455 |           "aggregations": {
1456 |             "type": "object"
1457 |           }
1458 |         }
1459 |       },
1460 |       "PipelinesResponseSchema": {
1461 |         "type": "object",
1462 |         "properties": {
1463 |           "id": {
1464 |             "type": "string",
1465 |             "example": "aWdODOBVOlH1RUFKWQke"
1466 |           },
1467 |           "name": {
1468 |             "type": "string",
1469 |             "example": "new pipeline"
1470 |           },
1471 |           "stages": {
1472 |             "type": "array",
1473 |             "items": {
1474 |               "type": "array"
1475 |             }
1476 |           },
1477 |           "showInFunnel": {
1478 |             "type": "boolean",
1479 |             "example": false
1480 |           },
1481 |           "showInPieChart": {
1482 |             "type": "boolean",
1483 |             "example": true
1484 |           },
1485 |           "locationId": {
1486 |             "type": "string",
1487 |             "example": "dsjddjkndadqaja"
1488 |           }
1489 |         }
1490 |       },
1491 |       "GetPipelinesSuccessfulResponseDto": {
1492 |         "type": "object",
1493 |         "properties": {
1494 |           "pipelines": {
1495 |             "type": "array",
1496 |             "items": {
1497 |               "$ref": "#/components/schemas/PipelinesResponseSchema"
1498 |             }
1499 |           }
1500 |         }
1501 |       },
1502 |       "GetPostOpportunitySuccessfulResponseDto": {
1503 |         "type": "object",
1504 |         "properties": {
1505 |           "opportunity": {
1506 |             "$ref": "#/components/schemas/SearchOpportunitiesResponseSchema"
1507 |           }
1508 |         }
1509 |       },
1510 |       "DeleteUpdateOpportunitySuccessfulResponseDto": {
1511 |         "type": "object",
1512 |         "properties": {
1513 |           "succeded": {
1514 |             "type": "boolean",
1515 |             "example": true
1516 |           }
1517 |         }
1518 |       },
1519 |       "UpdateStatusDto": {
1520 |         "type": "object",
1521 |         "properties": {
1522 |           "status": {
1523 |             "type": "string",
1524 |             "enum": [
1525 |               "open",
1526 |               "won",
1527 |               "lost",
1528 |               "abandoned",
1529 |               "all"
1530 |             ]
1531 |           }
1532 |         },
1533 |         "required": [
1534 |           "status"
1535 |         ]
1536 |       },
1537 |       "customFieldsInputArraySchema": {
1538 |         "type": "object",
1539 |         "properties": {
1540 |           "id": {
1541 |             "type": "string",
1542 |             "example": "6dvNaf7VhkQ9snc5vnjJ"
1543 |           },
1544 |           "key": {
1545 |             "type": "string",
1546 |             "example": "my_custom_field"
1547 |           },
1548 |           "field_value": {
1549 |             "example": [
1550 |               "test",
1551 |               "test2"
1552 |             ],
1553 |             "type": "array",
1554 |             "items": {
1555 |               "type": "string"
1556 |             }
1557 |           }
1558 |         },
1559 |         "required": [
1560 |           "id"
1561 |         ]
1562 |       },
1563 |       "customFieldsInputObjectSchema": {
1564 |         "type": "object",
1565 |         "properties": {
1566 |           "id": {
1567 |             "type": "string",
1568 |             "example": "6dvNaf7VhkQ9snc5vnjJ"
1569 |           },
1570 |           "key": {
1571 |             "type": "string",
1572 |             "example": "my_custom_field"
1573 |           },
1574 |           "field_value": {
1575 |             "type": "object",
1576 |             "example": {}
1577 |           }
1578 |         },
1579 |         "required": [
1580 |           "id"
1581 |         ]
1582 |       },
1583 |       "customFieldsInputStringSchema": {
1584 |         "type": "object",
1585 |         "properties": {
1586 |           "id": {
1587 |             "type": "string",
1588 |             "example": "6dvNaf7VhkQ9snc5vnjJ",
1589 |             "description": "Pass either `id` or `key` of custom field"
1590 |           },
1591 |           "key": {
1592 |             "type": "string",
1593 |             "example": "my_custom_field",
1594 |             "description": "Pass either `id` or `key` of custom field"
1595 |           },
1596 |           "field_value": {
1597 |             "type": "string",
1598 |             "example": "9039160788"
1599 |           }
1600 |         }
1601 |       },
1602 |       "CreateDto": {
1603 |         "type": "object",
1604 |         "properties": {
1605 |           "pipelineId": {
1606 |             "type": "string",
1607 |             "description": "pipeline Id",
1608 |             "example": "VDm7RPYC2GLUvdpKmBfC"
1609 |           },
1610 |           "locationId": {
1611 |             "type": "string",
1612 |             "example": "ve9EPM428h8vShlRW1KT"
1613 |           },
1614 |           "name": {
1615 |             "type": "string",
1616 |             "example": "First Opps"
1617 |           },
1618 |           "pipelineStageId": {
1619 |             "type": "string",
1620 |             "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
1621 |           },
1622 |           "status": {
1623 |             "type": "string",
1624 |             "enum": [
1625 |               "open",
1626 |               "won",
1627 |               "lost",
1628 |               "abandoned",
1629 |               "all"
1630 |             ]
1631 |           },
1632 |           "contactId": {
1633 |             "type": "string",
1634 |             "example": "mTkSCb1UBjb5tk4OvB69"
1635 |           },
1636 |           "monetaryValue": {
1637 |             "type": "number",
1638 |             "example": 220
1639 |           },
1640 |           "assignedTo": {
1641 |             "type": "string",
1642 |             "example": "082goXVW3lIExEQPOnd3"
1643 |           },
1644 |           "customFields": {
1645 |             "type": "array",
1646 |             "description": "Add custom fields to opportunities.",
1647 |             "items": {
1648 |               "anyOf": [
1649 |                 {
1650 |                   "$ref": "#/components/schemas/customFieldsInputStringSchema"
1651 |                 },
1652 |                 {
1653 |                   "$ref": "#/components/schemas/customFieldsInputArraySchema"
1654 |                 },
1655 |                 {
1656 |                   "$ref": "#/components/schemas/customFieldsInputObjectSchema"
1657 |                 }
1658 |               ]
1659 |             }
1660 |           }
1661 |         },
1662 |         "required": [
1663 |           "pipelineId",
1664 |           "locationId",
1665 |           "name",
1666 |           "status",
1667 |           "contactId"
1668 |         ]
1669 |       },
1670 |       "UpdateOpportunityDto": {
1671 |         "type": "object",
1672 |         "properties": {
1673 |           "pipelineId": {
1674 |             "type": "string",
1675 |             "description": "pipeline Id",
1676 |             "example": "bCkKGpDsyPP4peuKowkG"
1677 |           },
1678 |           "name": {
1679 |             "type": "string",
1680 |             "example": "First Opps"
1681 |           },
1682 |           "pipelineStageId": {
1683 |             "type": "string",
1684 |             "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
1685 |           },
1686 |           "status": {
1687 |             "type": "string",
1688 |             "enum": [
1689 |               "open",
1690 |               "won",
1691 |               "lost",
1692 |               "abandoned",
1693 |               "all"
1694 |             ]
1695 |           },
1696 |           "monetaryValue": {
1697 |             "type": "number",
1698 |             "example": 220
1699 |           },
1700 |           "assignedTo": {
1701 |             "type": "string",
1702 |             "example": "082goXVW3lIExEQPOnd3"
1703 |           },
1704 |           "customFields": {
1705 |             "type": "array",
1706 |             "description": "Update custom fields to opportunities.",
1707 |             "items": {
1708 |               "anyOf": [
1709 |                 {
1710 |                   "$ref": "#/components/schemas/customFieldsInputStringSchema"
1711 |                 },
1712 |                 {
1713 |                   "$ref": "#/components/schemas/customFieldsInputArraySchema"
1714 |                 },
1715 |                 {
1716 |                   "$ref": "#/components/schemas/customFieldsInputObjectSchema"
1717 |                 }
1718 |               ]
1719 |             }
1720 |           }
1721 |         }
1722 |       },
1723 |       "UpsertOpportunityDto": {
1724 |         "type": "object",
1725 |         "properties": {
1726 |           "pipelineId": {
1727 |             "type": "string",
1728 |             "description": "pipeline Id",
1729 |             "example": "bCkKGpDsyPP4peuKowkG"
1730 |           },
1731 |           "locationId": {
1732 |             "type": "string",
1733 |             "description": "locationId",
1734 |             "example": "CLu7BaljjqrEjBGKTNNe"
1735 |           },
1736 |           "contactId": {
1737 |             "type": "string",
1738 |             "description": "contactId",
1739 |             "example": "LiKJ2vnRg5ETM8Z19K7"
1740 |           },
1741 |           "name": {
1742 |             "type": "string",
1743 |             "description": "name",
1744 |             "example": "opportunity name"
1745 |           },
1746 |           "status": {
1747 |             "type": "string",
1748 |             "enum": [
1749 |               "open",
1750 |               "won",
1751 |               "lost",
1752 |               "abandoned",
1753 |               "all"
1754 |             ]
1755 |           },
1756 |           "pipelineStageId": {
1757 |             "type": "string",
1758 |             "example": "7915dedc-8f18-44d5-8bc3-77c04e994a10"
1759 |           },
1760 |           "monetaryValue": {
1761 |             "type": "number",
1762 |             "example": 220
1763 |           },
1764 |           "assignedTo": {
1765 |             "type": "string",
1766 |             "example": "082goXVW3lIExEQPOnd3"
1767 |           }
1768 |         },
1769 |         "required": [
1770 |           "pipelineId",
1771 |           "locationId",
1772 |           "contactId"
1773 |         ]
1774 |       },
1775 |       "UpsertOpportunitySuccessfulResponseDto": {
1776 |         "type": "object",
1777 |         "properties": {
1778 |           "opportunity": {
1779 |             "type": "object",
1780 |             "description": "Updated / New Opportunity"
1781 |           },
1782 |           "new": {
1783 |             "type": "boolean",
1784 |             "example": true
1785 |           }
1786 |         },
1787 |         "required": [
1788 |           "opportunity",
1789 |           "new"
1790 |         ]
1791 |       },
1792 |       "FollowersDTO": {
1793 |         "type": "object",
1794 |         "properties": {
1795 |           "followers": {
1796 |             "example": [
1797 |               "sx6wyHhbFdRXh302Lunr",
1798 |               "sx6wyHhbFdRXh302Lunr"
1799 |             ],
1800 |             "type": "array",
1801 |             "items": {
1802 |               "type": "string"
1803 |             }
1804 |           }
1805 |         },
1806 |         "required": [
1807 |           "followers"
1808 |         ]
1809 |       },
1810 |       "CreateAddFollowersSuccessfulResponseDto": {
1811 |         "type": "object",
1812 |         "properties": {
1813 |           "followers": {
1814 |             "example": [
1815 |               "sx6wyHhbFdRXh302Lunr",
1816 |               "sx6wyHhbFdRXh302LLss"
1817 |             ],
1818 |             "type": "array",
1819 |             "items": {
1820 |               "type": "string"
1821 |             }
1822 |           },
1823 |           "followersAdded": {
1824 |             "example": [
1825 |               "Mx6wyHhbFdRXh302Luer",
1826 |               "Ka6wyHhbFdRXh302LLsAm"
1827 |             ],
1828 |             "type": "array",
1829 |             "items": {
1830 |               "type": "string"
1831 |             }
1832 |           }
1833 |         }
1834 |       },
1835 |       "DeleteFollowersSuccessfulResponseDto": {
1836 |         "type": "object",
1837 |         "properties": {
1838 |           "followers": {
1839 |             "example": [
1840 |               "sx6wyHhbFdRXh302Lunr",
1841 |               "sx6wyHhbFdRXh302LLss"
1842 |             ],
1843 |             "type": "array",
1844 |             "items": {
1845 |               "type": "string"
1846 |             }
1847 |           },
1848 |           "followersRemoved": {
1849 |             "example": [
1850 |               "Mx6wyHhbFdRXh302Luer",
1851 |               "Ka6wyHhbFdRXh302LLsAm"
1852 |             ],
1853 |             "type": "array",
1854 |             "items": {
1855 |               "type": "string"
1856 |             }
1857 |           }
1858 |         }
1859 |       }
1860 |     }
1861 |   }
1862 | }


--------------------------------------------------------------------------------
/payments/payments.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/payments/integrations/provider/whitelabel": {
   5 |       "post": {
   6 |         "operationId": "create-integration provider",
   7 |         "summary": "Create White-label Integration Provider",
   8 |         "description": "The \"Create White-label Integration Provider\" API allows adding a new payment provider integration to the system which is built on top of Authorize.net or NMI. Use this endpoint to create a integration provider with the specified details. Ensure that the required information is provided in the request payload. This endpoint can be only invoked using marketplace-app token",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           }
  32 |         ],
  33 |         "requestBody": {
  34 |           "required": true,
  35 |           "content": {
  36 |             "application/json": {
  37 |               "schema": {
  38 |                 "$ref": "#/components/schemas/CreateWhiteLabelIntegrationProviderDto"
  39 |               }
  40 |             }
  41 |           }
  42 |         },
  43 |         "responses": {
  44 |           "200": {
  45 |             "description": "Successful response",
  46 |             "content": {
  47 |               "application/json": {
  48 |                 "schema": {
  49 |                   "$ref": "#/components/schemas/CreateWhitelabelIntegrationResponseDto"
  50 |                 }
  51 |               }
  52 |             }
  53 |           },
  54 |           "400": {
  55 |             "description": "Bad Request",
  56 |             "content": {
  57 |               "application/json": {
  58 |                 "schema": {
  59 |                   "$ref": "#/components/schemas/BadRequestDTO"
  60 |                 }
  61 |               }
  62 |             }
  63 |           },
  64 |           "401": {
  65 |             "description": "Unauthorized",
  66 |             "content": {
  67 |               "application/json": {
  68 |                 "schema": {
  69 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  70 |                 }
  71 |               }
  72 |             }
  73 |           },
  74 |           "422": {
  75 |             "description": "Unprocessable Entity",
  76 |             "content": {
  77 |               "application/json": {
  78 |                 "schema": {
  79 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  80 |                 }
  81 |               }
  82 |             }
  83 |           }
  84 |         },
  85 |         "tags": [
  86 |           "Integrations"
  87 |         ],
  88 |         "security": [
  89 |           {
  90 |             "Location-Access": []
  91 |           }
  92 |         ]
  93 |       },
  94 |       "get": {
  95 |         "operationId": "list-integration-providers",
  96 |         "summary": "List White-label Integration Providers",
  97 |         "description": "The \"List White-label Integration Providers\" API allows to retrieve a paginated list of integration providers. Customize your results by filtering whitelabel integration providers(which are built directly on top of Authorize.net or NMI) based on name or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve integration provider information.",
  98 |         "parameters": [
  99 |           {
 100 |             "name": "Authorization",
 101 |             "in": "header",
 102 |             "description": "Access Token",
 103 |             "required": true,
 104 |             "schema": {
 105 |               "type": "string",
 106 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 107 |             }
 108 |           },
 109 |           {
 110 |             "name": "Version",
 111 |             "in": "header",
 112 |             "description": "API Version",
 113 |             "required": true,
 114 |             "schema": {
 115 |               "type": "string",
 116 |               "enum": [
 117 |                 "2021-07-28"
 118 |               ]
 119 |             }
 120 |           },
 121 |           {
 122 |             "name": "altId",
 123 |             "required": true,
 124 |             "in": "query",
 125 |             "description": "location Id / company Id based on altType",
 126 |             "example": "6578278e879ad2646715ba9c",
 127 |             "schema": {
 128 |               "type": "string"
 129 |             }
 130 |           },
 131 |           {
 132 |             "name": "altType",
 133 |             "required": true,
 134 |             "in": "query",
 135 |             "description": "Alt Type",
 136 |             "example": "location",
 137 |             "schema": {
 138 |               "enum": [
 139 |                 "location"
 140 |               ],
 141 |               "type": "string"
 142 |             }
 143 |           },
 144 |           {
 145 |             "name": "limit",
 146 |             "required": false,
 147 |             "in": "query",
 148 |             "example": 20,
 149 |             "description": "The maximum number of items to be included in a single page of results",
 150 |             "schema": {
 151 |               "default": 0,
 152 |               "type": "number"
 153 |             }
 154 |           },
 155 |           {
 156 |             "name": "offset",
 157 |             "required": false,
 158 |             "in": "query",
 159 |             "example": 0,
 160 |             "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
 161 |             "schema": {
 162 |               "default": 0,
 163 |               "type": "number"
 164 |             }
 165 |           }
 166 |         ],
 167 |         "responses": {
 168 |           "200": {
 169 |             "description": "Successful response",
 170 |             "content": {
 171 |               "application/json": {
 172 |                 "schema": {
 173 |                   "$ref": "#/components/schemas/ListWhitelabelIntegrationProviderResponseDto"
 174 |                 }
 175 |               }
 176 |             }
 177 |           },
 178 |           "400": {
 179 |             "description": "Bad Request",
 180 |             "content": {
 181 |               "application/json": {
 182 |                 "schema": {
 183 |                   "$ref": "#/components/schemas/BadRequestDTO"
 184 |                 }
 185 |               }
 186 |             }
 187 |           },
 188 |           "401": {
 189 |             "description": "Unauthorized",
 190 |             "content": {
 191 |               "application/json": {
 192 |                 "schema": {
 193 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 194 |                 }
 195 |               }
 196 |             }
 197 |           },
 198 |           "422": {
 199 |             "description": "Unprocessable Entity",
 200 |             "content": {
 201 |               "application/json": {
 202 |                 "schema": {
 203 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 204 |                 }
 205 |               }
 206 |             }
 207 |           }
 208 |         },
 209 |         "tags": [
 210 |           "Integrations"
 211 |         ],
 212 |         "security": [
 213 |           {
 214 |             "Location-Access": []
 215 |           }
 216 |         ]
 217 |       }
 218 |     },
 219 |     "/payments/orders": {
 220 |       "get": {
 221 |         "operationId": "list-orders",
 222 |         "summary": "List Orders",
 223 |         "description": "The \"List Orders\" API allows to retrieve a paginated list of orders. Customize your results by filtering orders based on name, alt type, order status, payment mode, date range, type of source, contact, funnel products or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve order information.",
 224 |         "parameters": [
 225 |           {
 226 |             "name": "Authorization",
 227 |             "in": "header",
 228 |             "description": "Access Token",
 229 |             "required": true,
 230 |             "schema": {
 231 |               "type": "string",
 232 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 233 |             }
 234 |           },
 235 |           {
 236 |             "name": "Version",
 237 |             "in": "header",
 238 |             "description": "API Version",
 239 |             "required": true,
 240 |             "schema": {
 241 |               "type": "string",
 242 |               "enum": [
 243 |                 "2021-07-28"
 244 |               ]
 245 |             }
 246 |           },
 247 |           {
 248 |             "name": "locationId",
 249 |             "required": false,
 250 |             "in": "query",
 251 |             "example": "3SwdhCu3svxI8AKsPJt6",
 252 |             "description": "LocationId is the id of the sub-account.",
 253 |             "schema": {
 254 |               "type": "string"
 255 |             }
 256 |           },
 257 |           {
 258 |             "name": "altId",
 259 |             "required": true,
 260 |             "in": "query",
 261 |             "example": "3SwdhCu3svxI8AKsPJt6",
 262 |             "description": "AltId is the unique identifier e.g: location id.",
 263 |             "schema": {
 264 |               "type": "string"
 265 |             }
 266 |           },
 267 |           {
 268 |             "name": "altType",
 269 |             "required": true,
 270 |             "in": "query",
 271 |             "example": "location",
 272 |             "description": "AltType is the type of identifier.",
 273 |             "schema": {
 274 |               "type": "string"
 275 |             }
 276 |           },
 277 |           {
 278 |             "name": "status",
 279 |             "required": false,
 280 |             "in": "query",
 281 |             "example": "completed",
 282 |             "description": "Order status.",
 283 |             "schema": {
 284 |               "type": "string"
 285 |             }
 286 |           },
 287 |           {
 288 |             "name": "paymentMode",
 289 |             "required": false,
 290 |             "in": "query",
 291 |             "example": "live",
 292 |             "description": "Mode of payment.",
 293 |             "schema": {
 294 |               "type": "string"
 295 |             }
 296 |           },
 297 |           {
 298 |             "name": "startAt",
 299 |             "required": false,
 300 |             "in": "query",
 301 |             "example": "2024-02-01",
 302 |             "description": "Starting interval of orders.",
 303 |             "schema": {
 304 |               "type": "string"
 305 |             }
 306 |           },
 307 |           {
 308 |             "name": "endAt",
 309 |             "required": false,
 310 |             "in": "query",
 311 |             "example": "2024-02-13",
 312 |             "description": "Closing interval of orders.",
 313 |             "schema": {
 314 |               "type": "string"
 315 |             }
 316 |           },
 317 |           {
 318 |             "name": "search",
 319 |             "required": false,
 320 |             "in": "query",
 321 |             "example": "Awesome order",
 322 |             "description": "The name of the order for searching.",
 323 |             "schema": {
 324 |               "type": "string"
 325 |             }
 326 |           },
 327 |           {
 328 |             "name": "contactId",
 329 |             "required": false,
 330 |             "in": "query",
 331 |             "example": "XPLSw2SVagl12LMDeTmQ",
 332 |             "description": "Contact id for filtering of orders.",
 333 |             "schema": {
 334 |               "type": "string"
 335 |             }
 336 |           },
 337 |           {
 338 |             "name": "funnelProductIds",
 339 |             "required": false,
 340 |             "in": "query",
 341 |             "example": "61dd0c7dc077f712a5f787ff,61d6afc9d39ac5e35965c017",
 342 |             "description": "Funnel product ids separated by comma.",
 343 |             "schema": {
 344 |               "type": "string"
 345 |             }
 346 |           },
 347 |           {
 348 |             "name": "limit",
 349 |             "required": false,
 350 |             "in": "query",
 351 |             "example": 20,
 352 |             "description": "The maximum number of items to be included in a single page of results",
 353 |             "schema": {
 354 |               "default": 10,
 355 |               "type": "number"
 356 |             }
 357 |           },
 358 |           {
 359 |             "name": "offset",
 360 |             "required": false,
 361 |             "in": "query",
 362 |             "example": 0,
 363 |             "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
 364 |             "schema": {
 365 |               "default": 0,
 366 |               "type": "number"
 367 |             }
 368 |           }
 369 |         ],
 370 |         "responses": {
 371 |           "200": {
 372 |             "description": "Successful response",
 373 |             "content": {
 374 |               "application/json": {
 375 |                 "schema": {
 376 |                   "$ref": "#/components/schemas/ListOrdersResponseDto"
 377 |                 }
 378 |               }
 379 |             }
 380 |           },
 381 |           "400": {
 382 |             "description": "Bad Request",
 383 |             "content": {
 384 |               "application/json": {
 385 |                 "schema": {
 386 |                   "$ref": "#/components/schemas/BadRequestDTO"
 387 |                 }
 388 |               }
 389 |             }
 390 |           },
 391 |           "401": {
 392 |             "description": "Unauthorized",
 393 |             "content": {
 394 |               "application/json": {
 395 |                 "schema": {
 396 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 397 |                 }
 398 |               }
 399 |             }
 400 |           },
 401 |           "422": {
 402 |             "description": "Unprocessable Entity",
 403 |             "content": {
 404 |               "application/json": {
 405 |                 "schema": {
 406 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 407 |                 }
 408 |               }
 409 |             }
 410 |           }
 411 |         },
 412 |         "tags": [
 413 |           "Orders"
 414 |         ],
 415 |         "security": [
 416 |           {
 417 |             "Location-Access": []
 418 |           }
 419 |         ]
 420 |       }
 421 |     },
 422 |     "/payments/orders/{orderId}": {
 423 |       "get": {
 424 |         "operationId": "get-order-by-id",
 425 |         "summary": "Get Order by ID",
 426 |         "description": "The \"Get Order by ID\" API allows to retrieve information for a specific order using its unique identifier. Use this endpoint to fetch details for a single order based on the provided order ID.",
 427 |         "parameters": [
 428 |           {
 429 |             "name": "Authorization",
 430 |             "in": "header",
 431 |             "description": "Access Token",
 432 |             "required": true,
 433 |             "schema": {
 434 |               "type": "string",
 435 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 436 |             }
 437 |           },
 438 |           {
 439 |             "name": "Version",
 440 |             "in": "header",
 441 |             "description": "API Version",
 442 |             "required": true,
 443 |             "schema": {
 444 |               "type": "string",
 445 |               "enum": [
 446 |                 "2021-07-28"
 447 |               ]
 448 |             }
 449 |           },
 450 |           {
 451 |             "name": "orderId",
 452 |             "required": true,
 453 |             "in": "path",
 454 |             "description": "ID of the order that needs to be returned",
 455 |             "example": "653f5e0cde5a1314e62a837c",
 456 |             "schema": {
 457 |               "type": "string"
 458 |             }
 459 |           },
 460 |           {
 461 |             "name": "locationId",
 462 |             "required": false,
 463 |             "in": "query",
 464 |             "example": "3SwdhCu3svxI8AKsPJt6",
 465 |             "description": "LocationId is the id of the sub-account.",
 466 |             "schema": {
 467 |               "type": "string"
 468 |             }
 469 |           },
 470 |           {
 471 |             "name": "altId",
 472 |             "required": true,
 473 |             "in": "query",
 474 |             "example": "3SwdhCu3svxI8AKsPJt6",
 475 |             "description": "AltId is the unique identifier e.g: location id.",
 476 |             "schema": {
 477 |               "type": "string"
 478 |             }
 479 |           },
 480 |           {
 481 |             "name": "altType",
 482 |             "required": true,
 483 |             "in": "query",
 484 |             "example": "location",
 485 |             "description": "AltType is the type of identifier.",
 486 |             "schema": {
 487 |               "type": "string"
 488 |             }
 489 |           }
 490 |         ],
 491 |         "responses": {
 492 |           "200": {
 493 |             "description": "Successful response",
 494 |             "content": {
 495 |               "application/json": {
 496 |                 "schema": {
 497 |                   "$ref": "#/components/schemas/GetOrderResponseSchema"
 498 |                 }
 499 |               }
 500 |             }
 501 |           },
 502 |           "400": {
 503 |             "description": "Order not found",
 504 |             "content": {
 505 |               "application/json": {
 506 |                 "schema": {
 507 |                   "$ref": "#/components/schemas/BadRequestDTO"
 508 |                 }
 509 |               }
 510 |             }
 511 |           },
 512 |           "401": {
 513 |             "description": "Unauthorized",
 514 |             "content": {
 515 |               "application/json": {
 516 |                 "schema": {
 517 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 518 |                 }
 519 |               }
 520 |             }
 521 |           },
 522 |           "422": {
 523 |             "description": "Unprocessable Entity",
 524 |             "content": {
 525 |               "application/json": {
 526 |                 "schema": {
 527 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 528 |                 }
 529 |               }
 530 |             }
 531 |           }
 532 |         },
 533 |         "tags": [
 534 |           "Orders"
 535 |         ],
 536 |         "security": [
 537 |           {
 538 |             "Location-Access": []
 539 |           }
 540 |         ]
 541 |       }
 542 |     },
 543 |     "/payments/orders/{orderId}/fulfillments": {
 544 |       "post": {
 545 |         "operationId": "create-order-fulfillment",
 546 |         "summary": "Create order fulfillment",
 547 |         "description": "The \"Order Fulfillment\" API facilitates the process of fulfilling an order.",
 548 |         "parameters": [
 549 |           {
 550 |             "name": "Authorization",
 551 |             "in": "header",
 552 |             "description": "Access Token",
 553 |             "required": true,
 554 |             "schema": {
 555 |               "type": "string",
 556 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 557 |             }
 558 |           },
 559 |           {
 560 |             "name": "Version",
 561 |             "in": "header",
 562 |             "description": "API Version",
 563 |             "required": true,
 564 |             "schema": {
 565 |               "type": "string",
 566 |               "enum": [
 567 |                 "2021-07-28"
 568 |               ]
 569 |             }
 570 |           },
 571 |           {
 572 |             "name": "orderId",
 573 |             "required": true,
 574 |             "in": "path",
 575 |             "description": "ID of the order that needs to be returned",
 576 |             "example": "653f5e0cde5a1314e62a837c",
 577 |             "schema": {
 578 |               "type": "string"
 579 |             }
 580 |           }
 581 |         ],
 582 |         "requestBody": {
 583 |           "required": true,
 584 |           "content": {
 585 |             "application/json": {
 586 |               "schema": {
 587 |                 "$ref": "#/components/schemas/CreateFulfillmentDto"
 588 |               }
 589 |             }
 590 |           }
 591 |         },
 592 |         "responses": {
 593 |           "200": {
 594 |             "description": "Successful response",
 595 |             "content": {
 596 |               "application/json": {
 597 |                 "schema": {
 598 |                   "$ref": "#/components/schemas/CreateFulfillmentResponseDto"
 599 |                 }
 600 |               }
 601 |             }
 602 |           },
 603 |           "400": {
 604 |             "description": "Bad Request",
 605 |             "content": {
 606 |               "application/json": {
 607 |                 "schema": {
 608 |                   "$ref": "#/components/schemas/BadRequestDTO"
 609 |                 }
 610 |               }
 611 |             }
 612 |           },
 613 |           "401": {
 614 |             "description": "Unauthorized",
 615 |             "content": {
 616 |               "application/json": {
 617 |                 "schema": {
 618 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 619 |                 }
 620 |               }
 621 |             }
 622 |           },
 623 |           "422": {
 624 |             "description": "Unprocessable Entity",
 625 |             "content": {
 626 |               "application/json": {
 627 |                 "schema": {
 628 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 629 |                 }
 630 |               }
 631 |             }
 632 |           }
 633 |         },
 634 |         "tags": [
 635 |           "Order fulfillments"
 636 |         ],
 637 |         "security": [
 638 |           {
 639 |             "Location-Access": []
 640 |           }
 641 |         ]
 642 |       },
 643 |       "get": {
 644 |         "operationId": "list-order-fulfillment",
 645 |         "summary": "List fulfillment",
 646 |         "description": "List all fulfillment history of an order",
 647 |         "parameters": [
 648 |           {
 649 |             "name": "Authorization",
 650 |             "in": "header",
 651 |             "description": "Access Token",
 652 |             "required": true,
 653 |             "schema": {
 654 |               "type": "string",
 655 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 656 |             }
 657 |           },
 658 |           {
 659 |             "name": "Version",
 660 |             "in": "header",
 661 |             "description": "API Version",
 662 |             "required": true,
 663 |             "schema": {
 664 |               "type": "string",
 665 |               "enum": [
 666 |                 "2021-07-28"
 667 |               ]
 668 |             }
 669 |           },
 670 |           {
 671 |             "name": "altId",
 672 |             "required": true,
 673 |             "in": "query",
 674 |             "description": "Location Id or Agency Id",
 675 |             "example": "6578278e879ad2646715ba9c",
 676 |             "schema": {
 677 |               "type": "string"
 678 |             }
 679 |           },
 680 |           {
 681 |             "name": "altType",
 682 |             "required": true,
 683 |             "in": "query",
 684 |             "schema": {
 685 |               "enum": [
 686 |                 "location"
 687 |               ],
 688 |               "type": "string"
 689 |             }
 690 |           },
 691 |           {
 692 |             "name": "orderId",
 693 |             "required": true,
 694 |             "in": "path",
 695 |             "description": "ID of the order that needs to be returned",
 696 |             "example": "653f5e0cde5a1314e62a837c",
 697 |             "schema": {
 698 |               "type": "string"
 699 |             }
 700 |           }
 701 |         ],
 702 |         "responses": {
 703 |           "200": {
 704 |             "description": "Successful response",
 705 |             "content": {
 706 |               "application/json": {
 707 |                 "schema": {
 708 |                   "$ref": "#/components/schemas/ListFulfillmentResponseDto"
 709 |                 }
 710 |               }
 711 |             }
 712 |           },
 713 |           "400": {
 714 |             "description": "Bad Request",
 715 |             "content": {
 716 |               "application/json": {
 717 |                 "schema": {
 718 |                   "$ref": "#/components/schemas/BadRequestDTO"
 719 |                 }
 720 |               }
 721 |             }
 722 |           },
 723 |           "401": {
 724 |             "description": "Unauthorized",
 725 |             "content": {
 726 |               "application/json": {
 727 |                 "schema": {
 728 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 729 |                 }
 730 |               }
 731 |             }
 732 |           },
 733 |           "422": {
 734 |             "description": "Unprocessable Entity",
 735 |             "content": {
 736 |               "application/json": {
 737 |                 "schema": {
 738 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 739 |                 }
 740 |               }
 741 |             }
 742 |           }
 743 |         },
 744 |         "tags": [
 745 |           "Order fulfillments"
 746 |         ],
 747 |         "security": [
 748 |           {
 749 |             "Location-Access": []
 750 |           }
 751 |         ]
 752 |       }
 753 |     },
 754 |     "/payments/transactions": {
 755 |       "get": {
 756 |         "operationId": "list-transactions",
 757 |         "summary": "List Transactions",
 758 |         "description": "The \"List Transactions\" API allows to retrieve a paginated list of transactions. Customize your results by filtering transactions based on name, alt type, transaction status, payment mode, date range, type of source, contact, subscription id, entity id or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve transaction information.",
 759 |         "parameters": [
 760 |           {
 761 |             "name": "Authorization",
 762 |             "in": "header",
 763 |             "description": "Access Token",
 764 |             "required": true,
 765 |             "schema": {
 766 |               "type": "string",
 767 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 768 |             }
 769 |           },
 770 |           {
 771 |             "name": "Version",
 772 |             "in": "header",
 773 |             "description": "API Version",
 774 |             "required": true,
 775 |             "schema": {
 776 |               "type": "string",
 777 |               "enum": [
 778 |                 "2021-07-28"
 779 |               ]
 780 |             }
 781 |           },
 782 |           {
 783 |             "name": "locationId",
 784 |             "required": false,
 785 |             "in": "query",
 786 |             "example": "3SwdhCu3svxI8AKsPJt6",
 787 |             "description": "LocationId is the id of the sub-account.",
 788 |             "schema": {
 789 |               "type": "string"
 790 |             }
 791 |           },
 792 |           {
 793 |             "name": "altId",
 794 |             "required": true,
 795 |             "in": "query",
 796 |             "example": "3SwdhCu3svxI8AKsPJt6",
 797 |             "description": "AltId is the unique identifier e.g: location id.",
 798 |             "schema": {
 799 |               "type": "string"
 800 |             }
 801 |           },
 802 |           {
 803 |             "name": "altType",
 804 |             "required": true,
 805 |             "in": "query",
 806 |             "example": "location",
 807 |             "description": "AltType is the type of identifier.",
 808 |             "schema": {
 809 |               "type": "string"
 810 |             }
 811 |           },
 812 |           {
 813 |             "name": "paymentMode",
 814 |             "required": false,
 815 |             "in": "query",
 816 |             "example": "live",
 817 |             "description": "Mode of payment.",
 818 |             "schema": {
 819 |               "type": "string"
 820 |             }
 821 |           },
 822 |           {
 823 |             "name": "startAt",
 824 |             "required": false,
 825 |             "in": "query",
 826 |             "example": "2024-02-01",
 827 |             "description": "Starting interval of transactions.",
 828 |             "schema": {
 829 |               "type": "string"
 830 |             }
 831 |           },
 832 |           {
 833 |             "name": "endAt",
 834 |             "required": false,
 835 |             "in": "query",
 836 |             "example": "2024-02-13",
 837 |             "description": "Closing interval of transactions.",
 838 |             "schema": {
 839 |               "type": "string"
 840 |             }
 841 |           },
 842 |           {
 843 |             "name": "entitySourceType",
 844 |             "required": false,
 845 |             "in": "query",
 846 |             "example": "funnel",
 847 |             "description": "Source of the transactions.",
 848 |             "schema": {
 849 |               "type": "string"
 850 |             }
 851 |           },
 852 |           {
 853 |             "name": "entitySourceSubType",
 854 |             "required": false,
 855 |             "in": "query",
 856 |             "example": "two_step_order_form",
 857 |             "description": "Source sub-type of the transactions.",
 858 |             "schema": {
 859 |               "type": "string"
 860 |             }
 861 |           },
 862 |           {
 863 |             "name": "search",
 864 |             "required": false,
 865 |             "in": "query",
 866 |             "example": "Awesome transaction",
 867 |             "description": "The name of the transaction for searching.",
 868 |             "schema": {
 869 |               "type": "string"
 870 |             }
 871 |           },
 872 |           {
 873 |             "name": "subscriptionId",
 874 |             "required": false,
 875 |             "in": "query",
 876 |             "example": "sub_1KGcXDCScnf89tZoVkoEMCEL",
 877 |             "description": "Subscription id for filtering of transactions.",
 878 |             "schema": {
 879 |               "type": "string"
 880 |             }
 881 |           },
 882 |           {
 883 |             "name": "entityId",
 884 |             "required": false,
 885 |             "in": "query",
 886 |             "example": "61dd0fe9c077f73e67f78803",
 887 |             "description": "Entity id for filtering of transactions.",
 888 |             "schema": {
 889 |               "type": "string"
 890 |             }
 891 |           },
 892 |           {
 893 |             "name": "contactId",
 894 |             "required": false,
 895 |             "in": "query",
 896 |             "example": "XPLSw2SVagl12LMDeTmQ",
 897 |             "description": "Contact id for filtering of transactions.",
 898 |             "schema": {
 899 |               "type": "string"
 900 |             }
 901 |           },
 902 |           {
 903 |             "name": "limit",
 904 |             "required": false,
 905 |             "in": "query",
 906 |             "example": 20,
 907 |             "description": "The maximum number of items to be included in a single page of results",
 908 |             "schema": {
 909 |               "default": 10,
 910 |               "type": "number"
 911 |             }
 912 |           },
 913 |           {
 914 |             "name": "offset",
 915 |             "required": false,
 916 |             "in": "query",
 917 |             "example": 0,
 918 |             "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
 919 |             "schema": {
 920 |               "default": 0,
 921 |               "type": "number"
 922 |             }
 923 |           }
 924 |         ],
 925 |         "responses": {
 926 |           "200": {
 927 |             "description": "Successful response",
 928 |             "content": {
 929 |               "application/json": {
 930 |                 "schema": {
 931 |                   "$ref": "#/components/schemas/ListTxnsResponseDto"
 932 |                 }
 933 |               }
 934 |             }
 935 |           },
 936 |           "400": {
 937 |             "description": "Bad Request",
 938 |             "content": {
 939 |               "application/json": {
 940 |                 "schema": {
 941 |                   "$ref": "#/components/schemas/BadRequestDTO"
 942 |                 }
 943 |               }
 944 |             }
 945 |           },
 946 |           "401": {
 947 |             "description": "Unauthorized",
 948 |             "content": {
 949 |               "application/json": {
 950 |                 "schema": {
 951 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 952 |                 }
 953 |               }
 954 |             }
 955 |           },
 956 |           "422": {
 957 |             "description": "Unprocessable Entity",
 958 |             "content": {
 959 |               "application/json": {
 960 |                 "schema": {
 961 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 962 |                 }
 963 |               }
 964 |             }
 965 |           }
 966 |         },
 967 |         "tags": [
 968 |           "Transactions"
 969 |         ],
 970 |         "security": [
 971 |           {
 972 |             "Location-Access": []
 973 |           }
 974 |         ]
 975 |       }
 976 |     },
 977 |     "/payments/transactions/{transactionId}": {
 978 |       "get": {
 979 |         "operationId": "get-transaction-by-id",
 980 |         "summary": "Get Transaction by ID",
 981 |         "description": "The \"Get Transaction by ID\" API allows to retrieve information for a specific transaction using its unique identifier. Use this endpoint to fetch details for a single transaction based on the provided transaction ID.",
 982 |         "parameters": [
 983 |           {
 984 |             "name": "Authorization",
 985 |             "in": "header",
 986 |             "description": "Access Token",
 987 |             "required": true,
 988 |             "schema": {
 989 |               "type": "string",
 990 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 991 |             }
 992 |           },
 993 |           {
 994 |             "name": "Version",
 995 |             "in": "header",
 996 |             "description": "API Version",
 997 |             "required": true,
 998 |             "schema": {
 999 |               "type": "string",
1000 |               "enum": [
1001 |                 "2021-07-28"
1002 |               ]
1003 |             }
1004 |           },
1005 |           {
1006 |             "name": "transactionId",
1007 |             "required": true,
1008 |             "in": "path",
1009 |             "description": "ID of the transaction that needs to be returned",
1010 |             "example": "61dd0feac077f72010f78804",
1011 |             "schema": {
1012 |               "type": "string"
1013 |             }
1014 |           },
1015 |           {
1016 |             "name": "locationId",
1017 |             "required": false,
1018 |             "in": "query",
1019 |             "example": "3SwdhCu3svxI8AKsPJt6",
1020 |             "description": "LocationId is the id of the sub-account.",
1021 |             "schema": {
1022 |               "type": "string"
1023 |             }
1024 |           },
1025 |           {
1026 |             "name": "altId",
1027 |             "required": true,
1028 |             "in": "query",
1029 |             "example": "3SwdhCu3svxI8AKsPJt6",
1030 |             "description": "AltId is the unique identifier e.g: location id.",
1031 |             "schema": {
1032 |               "type": "string"
1033 |             }
1034 |           },
1035 |           {
1036 |             "name": "altType",
1037 |             "required": true,
1038 |             "in": "query",
1039 |             "example": "location",
1040 |             "description": "AltType is the type of identifier.",
1041 |             "schema": {
1042 |               "type": "string"
1043 |             }
1044 |           }
1045 |         ],
1046 |         "responses": {
1047 |           "200": {
1048 |             "description": "Successful response",
1049 |             "content": {
1050 |               "application/json": {
1051 |                 "schema": {
1052 |                   "$ref": "#/components/schemas/GetTxnResponseSchema"
1053 |                 }
1054 |               }
1055 |             }
1056 |           },
1057 |           "400": {
1058 |             "description": "Transaction not found",
1059 |             "content": {
1060 |               "application/json": {
1061 |                 "schema": {
1062 |                   "$ref": "#/components/schemas/BadRequestDTO"
1063 |                 }
1064 |               }
1065 |             }
1066 |           },
1067 |           "401": {
1068 |             "description": "Unauthorized",
1069 |             "content": {
1070 |               "application/json": {
1071 |                 "schema": {
1072 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1073 |                 }
1074 |               }
1075 |             }
1076 |           },
1077 |           "422": {
1078 |             "description": "Unprocessable Entity",
1079 |             "content": {
1080 |               "application/json": {
1081 |                 "schema": {
1082 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1083 |                 }
1084 |               }
1085 |             }
1086 |           }
1087 |         },
1088 |         "tags": [
1089 |           "Transactions"
1090 |         ],
1091 |         "security": [
1092 |           {
1093 |             "Location-Access": []
1094 |           }
1095 |         ]
1096 |       }
1097 |     },
1098 |     "/payments/subscriptions": {
1099 |       "get": {
1100 |         "operationId": "list-subscriptions",
1101 |         "summary": "List Subscriptions",
1102 |         "description": "The \"List Subscriptions\" API allows to retrieve a paginated list of subscriptions. Customize your results by filtering subscriptions based on name, alt type, subscription status, payment mode, date range, type of source, contact, subscription id, entity id, contact or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve subscription information.",
1103 |         "parameters": [
1104 |           {
1105 |             "name": "Authorization",
1106 |             "in": "header",
1107 |             "description": "Access Token",
1108 |             "required": true,
1109 |             "schema": {
1110 |               "type": "string",
1111 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1112 |             }
1113 |           },
1114 |           {
1115 |             "name": "Version",
1116 |             "in": "header",
1117 |             "description": "API Version",
1118 |             "required": true,
1119 |             "schema": {
1120 |               "type": "string",
1121 |               "enum": [
1122 |                 "2021-07-28"
1123 |               ]
1124 |             }
1125 |           },
1126 |           {
1127 |             "name": "altId",
1128 |             "required": true,
1129 |             "in": "query",
1130 |             "example": "3SwdhCu3svxI8AKsPJt6",
1131 |             "description": "AltId is the unique identifier e.g: location id.",
1132 |             "schema": {
1133 |               "type": "string"
1134 |             }
1135 |           },
1136 |           {
1137 |             "name": "altType",
1138 |             "required": true,
1139 |             "in": "query",
1140 |             "example": "location",
1141 |             "description": "AltType is the type of identifier.",
1142 |             "schema": {
1143 |               "enum": [
1144 |                 "location"
1145 |               ],
1146 |               "type": "string"
1147 |             }
1148 |           },
1149 |           {
1150 |             "name": "entityId",
1151 |             "required": false,
1152 |             "in": "query",
1153 |             "example": "61dd0fe9c077f73e67f78803",
1154 |             "description": "Entity id for filtering of subscriptions.",
1155 |             "schema": {
1156 |               "type": "string"
1157 |             }
1158 |           },
1159 |           {
1160 |             "name": "paymentMode",
1161 |             "required": false,
1162 |             "in": "query",
1163 |             "example": "live",
1164 |             "description": "Mode of payment.",
1165 |             "schema": {
1166 |               "type": "string"
1167 |             }
1168 |           },
1169 |           {
1170 |             "name": "startAt",
1171 |             "required": false,
1172 |             "in": "query",
1173 |             "example": "2024-02-01",
1174 |             "description": "Starting interval of subscriptions.",
1175 |             "schema": {
1176 |               "type": "string"
1177 |             }
1178 |           },
1179 |           {
1180 |             "name": "endAt",
1181 |             "required": false,
1182 |             "in": "query",
1183 |             "example": "2024-02-13",
1184 |             "description": "Closing interval of subscriptions.",
1185 |             "schema": {
1186 |               "type": "string"
1187 |             }
1188 |           },
1189 |           {
1190 |             "name": "entitySourceType",
1191 |             "required": false,
1192 |             "in": "query",
1193 |             "example": "funnel",
1194 |             "description": "Source of the subscriptions.",
1195 |             "schema": {
1196 |               "type": "string"
1197 |             }
1198 |           },
1199 |           {
1200 |             "name": "search",
1201 |             "required": false,
1202 |             "in": "query",
1203 |             "example": "Awesome subscription",
1204 |             "description": "The name of the subscription for searching.",
1205 |             "schema": {
1206 |               "type": "string"
1207 |             }
1208 |           },
1209 |           {
1210 |             "name": "contactId",
1211 |             "required": false,
1212 |             "in": "query",
1213 |             "description": "Contact ID for the subscription",
1214 |             "example": "AmuzcoPBpgKeccNsFlib",
1215 |             "schema": {
1216 |               "type": "string"
1217 |             }
1218 |           },
1219 |           {
1220 |             "name": "id",
1221 |             "required": false,
1222 |             "in": "query",
1223 |             "example": "64bf78af39118e4011926cba",
1224 |             "description": "Subscription id for filtering of subscriptions.",
1225 |             "schema": {
1226 |               "type": "string"
1227 |             }
1228 |           },
1229 |           {
1230 |             "name": "limit",
1231 |             "required": false,
1232 |             "in": "query",
1233 |             "example": 20,
1234 |             "description": "The maximum number of items to be included in a single page of results",
1235 |             "schema": {
1236 |               "default": 10,
1237 |               "type": "number"
1238 |             }
1239 |           },
1240 |           {
1241 |             "name": "offset",
1242 |             "required": false,
1243 |             "in": "query",
1244 |             "example": 0,
1245 |             "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
1246 |             "schema": {
1247 |               "default": 0,
1248 |               "type": "number"
1249 |             }
1250 |           }
1251 |         ],
1252 |         "responses": {
1253 |           "200": {
1254 |             "description": "Successful response",
1255 |             "content": {
1256 |               "application/json": {
1257 |                 "schema": {
1258 |                   "$ref": "#/components/schemas/ListSubscriptionResponseDto"
1259 |                 }
1260 |               }
1261 |             }
1262 |           },
1263 |           "400": {
1264 |             "description": "Bad Request",
1265 |             "content": {
1266 |               "application/json": {
1267 |                 "schema": {
1268 |                   "$ref": "#/components/schemas/BadRequestDTO"
1269 |                 }
1270 |               }
1271 |             }
1272 |           },
1273 |           "401": {
1274 |             "description": "Unauthorized",
1275 |             "content": {
1276 |               "application/json": {
1277 |                 "schema": {
1278 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1279 |                 }
1280 |               }
1281 |             }
1282 |           },
1283 |           "422": {
1284 |             "description": "Unprocessable Entity",
1285 |             "content": {
1286 |               "application/json": {
1287 |                 "schema": {
1288 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1289 |                 }
1290 |               }
1291 |             }
1292 |           }
1293 |         },
1294 |         "tags": [
1295 |           "Subscriptions"
1296 |         ],
1297 |         "security": [
1298 |           {
1299 |             "Location-Access": []
1300 |           }
1301 |         ]
1302 |       }
1303 |     },
1304 |     "/payments/subscriptions/{subscriptionId}": {
1305 |       "get": {
1306 |         "operationId": "get-subscription-by-id",
1307 |         "summary": "Get Subscription by ID",
1308 |         "description": "The \"Get Subscription by ID\" API allows to retrieve information for a specific subscription using its unique identifier. Use this endpoint to fetch details for a single subscription based on the provided subscription ID.",
1309 |         "parameters": [
1310 |           {
1311 |             "name": "Authorization",
1312 |             "in": "header",
1313 |             "description": "Access Token",
1314 |             "required": true,
1315 |             "schema": {
1316 |               "type": "string",
1317 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1318 |             }
1319 |           },
1320 |           {
1321 |             "name": "Version",
1322 |             "in": "header",
1323 |             "description": "API Version",
1324 |             "required": true,
1325 |             "schema": {
1326 |               "type": "string",
1327 |               "enum": [
1328 |                 "2021-07-28"
1329 |               ]
1330 |             }
1331 |           },
1332 |           {
1333 |             "name": "subscriptionId",
1334 |             "required": true,
1335 |             "in": "path",
1336 |             "description": "ID of the subscription that needs to be returned",
1337 |             "example": "6322e9c9e39fc14ab3ed7042",
1338 |             "schema": {
1339 |               "type": "string"
1340 |             }
1341 |           },
1342 |           {
1343 |             "name": "altId",
1344 |             "required": true,
1345 |             "in": "query",
1346 |             "example": "3SwdhCu3svxI8AKsPJt6",
1347 |             "description": "AltId is the unique identifier e.g: location id.",
1348 |             "schema": {
1349 |               "type": "string"
1350 |             }
1351 |           },
1352 |           {
1353 |             "name": "altType",
1354 |             "required": true,
1355 |             "in": "query",
1356 |             "example": "location",
1357 |             "description": "AltType is the type of identifier.",
1358 |             "schema": {
1359 |               "enum": [
1360 |                 "location"
1361 |               ],
1362 |               "type": "string"
1363 |             }
1364 |           }
1365 |         ],
1366 |         "responses": {
1367 |           "200": {
1368 |             "description": "Successful response",
1369 |             "content": {
1370 |               "application/json": {
1371 |                 "schema": {
1372 |                   "$ref": "#/components/schemas/GetSubscriptionResponseSchema"
1373 |                 }
1374 |               }
1375 |             }
1376 |           },
1377 |           "400": {
1378 |             "description": "Subscription not found",
1379 |             "content": {
1380 |               "application/json": {
1381 |                 "schema": {
1382 |                   "$ref": "#/components/schemas/BadRequestDTO"
1383 |                 }
1384 |               }
1385 |             }
1386 |           },
1387 |           "401": {
1388 |             "description": "Unauthorized",
1389 |             "content": {
1390 |               "application/json": {
1391 |                 "schema": {
1392 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1393 |                 }
1394 |               }
1395 |             }
1396 |           },
1397 |           "422": {
1398 |             "description": "Unprocessable Entity",
1399 |             "content": {
1400 |               "application/json": {
1401 |                 "schema": {
1402 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1403 |                 }
1404 |               }
1405 |             }
1406 |           }
1407 |         },
1408 |         "tags": [
1409 |           "Subscriptions"
1410 |         ],
1411 |         "security": [
1412 |           {
1413 |             "Location-Access": []
1414 |           }
1415 |         ]
1416 |       }
1417 |     },
1418 |     "/payments/coupon/list": {
1419 |       "get": {
1420 |         "operationId": "list-coupons",
1421 |         "summary": "List Coupons",
1422 |         "description": "The \"List Coupons\" API allows you to retrieve a list of all coupons available in your location. Use this endpoint to view all promotional offers and special discounts for your customers.",
1423 |         "parameters": [
1424 |           {
1425 |             "name": "Authorization",
1426 |             "in": "header",
1427 |             "description": "Access Token",
1428 |             "required": true,
1429 |             "schema": {
1430 |               "type": "string",
1431 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1432 |             }
1433 |           },
1434 |           {
1435 |             "name": "Version",
1436 |             "in": "header",
1437 |             "description": "API Version",
1438 |             "required": true,
1439 |             "schema": {
1440 |               "type": "string",
1441 |               "enum": [
1442 |                 "2021-07-28"
1443 |               ]
1444 |             }
1445 |           },
1446 |           {
1447 |             "name": "altId",
1448 |             "required": true,
1449 |             "in": "query",
1450 |             "description": "Location Id",
1451 |             "schema": {
1452 |               "example": "BQdAwxa0ky1iK2sstLGJ",
1453 |               "type": "string"
1454 |             }
1455 |           },
1456 |           {
1457 |             "name": "altType",
1458 |             "required": true,
1459 |             "in": "query",
1460 |             "description": "Alt Type",
1461 |             "schema": {
1462 |               "example": "location",
1463 |               "enum": [
1464 |                 "location"
1465 |               ],
1466 |               "type": "string"
1467 |             }
1468 |           },
1469 |           {
1470 |             "name": "limit",
1471 |             "required": false,
1472 |             "in": "query",
1473 |             "description": "Maximum number of coupons to return",
1474 |             "schema": {
1475 |               "default": 100,
1476 |               "example": 10,
1477 |               "type": "number"
1478 |             }
1479 |           },
1480 |           {
1481 |             "name": "offset",
1482 |             "required": false,
1483 |             "in": "query",
1484 |             "description": "Number of coupons to skip for pagination",
1485 |             "schema": {
1486 |               "default": 0,
1487 |               "example": 0,
1488 |               "type": "number"
1489 |             }
1490 |           },
1491 |           {
1492 |             "name": "status",
1493 |             "required": false,
1494 |             "in": "query",
1495 |             "description": "Filter coupons by status",
1496 |             "schema": {
1497 |               "example": "active",
1498 |               "enum": [
1499 |                 "scheduled",
1500 |                 "active",
1501 |                 "expired"
1502 |               ],
1503 |               "type": "string"
1504 |             }
1505 |           },
1506 |           {
1507 |             "name": "search",
1508 |             "required": false,
1509 |             "in": "query",
1510 |             "description": "Search term to filter coupons by name or code",
1511 |             "schema": {
1512 |               "example": "DEAL50",
1513 |               "type": "string"
1514 |             }
1515 |           }
1516 |         ],
1517 |         "responses": {
1518 |           "200": {
1519 |             "description": "Successful response",
1520 |             "content": {
1521 |               "application/json": {
1522 |                 "schema": {
1523 |                   "$ref": "#/components/schemas/ListCouponsResponseDto"
1524 |                 }
1525 |               }
1526 |             }
1527 |           },
1528 |           "422": {
1529 |             "description": "Unprocessable Entity",
1530 |             "content": {
1531 |               "application/json": {
1532 |                 "schema": {
1533 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1534 |                 }
1535 |               }
1536 |             }
1537 |           }
1538 |         },
1539 |         "tags": [
1540 |           "Coupons"
1541 |         ],
1542 |         "security": [
1543 |           {
1544 |             "Location-Access": []
1545 |           }
1546 |         ]
1547 |       }
1548 |     },
1549 |     "/payments/coupon": {
1550 |       "post": {
1551 |         "operationId": "create-coupon",
1552 |         "summary": "Create Coupon",
1553 |         "description": "The \"Create Coupon\" API allows you to create a new promotional coupon with customizable parameters such as discount amount, validity period, usage limits, and applicable products. Use this endpoint to set up promotional offers and special discounts for your customers.",
1554 |         "parameters": [
1555 |           {
1556 |             "name": "Authorization",
1557 |             "in": "header",
1558 |             "description": "Access Token",
1559 |             "required": true,
1560 |             "schema": {
1561 |               "type": "string",
1562 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1563 |             }
1564 |           },
1565 |           {
1566 |             "name": "Version",
1567 |             "in": "header",
1568 |             "description": "API Version",
1569 |             "required": true,
1570 |             "schema": {
1571 |               "type": "string",
1572 |               "enum": [
1573 |                 "2021-07-28"
1574 |               ]
1575 |             }
1576 |           }
1577 |         ],
1578 |         "requestBody": {
1579 |           "required": true,
1580 |           "content": {
1581 |             "application/json": {
1582 |               "schema": {
1583 |                 "$ref": "#/components/schemas/CreateCouponParams"
1584 |               }
1585 |             }
1586 |           }
1587 |         },
1588 |         "responses": {
1589 |           "201": {
1590 |             "description": "Successful response",
1591 |             "content": {
1592 |               "application/json": {
1593 |                 "schema": {
1594 |                   "$ref": "#/components/schemas/CreateCouponResponseDto"
1595 |                 }
1596 |               }
1597 |             }
1598 |           },
1599 |           "422": {
1600 |             "description": "Unprocessable Entity",
1601 |             "content": {
1602 |               "application/json": {
1603 |                 "schema": {
1604 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1605 |                 }
1606 |               }
1607 |             }
1608 |           }
1609 |         },
1610 |         "tags": [
1611 |           "Coupons"
1612 |         ],
1613 |         "security": [
1614 |           {
1615 |             "Location-Access": []
1616 |           }
1617 |         ]
1618 |       },
1619 |       "put": {
1620 |         "operationId": "update-coupon",
1621 |         "summary": "Update Coupon",
1622 |         "description": "The \"Update Coupon\" API enables you to modify existing coupon details such as discount values, validity periods, usage limits, and other promotional parameters. Use this endpoint to adjust or extend promotional offers for your customers.",
1623 |         "parameters": [
1624 |           {
1625 |             "name": "Authorization",
1626 |             "in": "header",
1627 |             "description": "Access Token",
1628 |             "required": true,
1629 |             "schema": {
1630 |               "type": "string",
1631 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1632 |             }
1633 |           },
1634 |           {
1635 |             "name": "Version",
1636 |             "in": "header",
1637 |             "description": "API Version",
1638 |             "required": true,
1639 |             "schema": {
1640 |               "type": "string",
1641 |               "enum": [
1642 |                 "2021-07-28"
1643 |               ]
1644 |             }
1645 |           }
1646 |         ],
1647 |         "requestBody": {
1648 |           "required": true,
1649 |           "content": {
1650 |             "application/json": {
1651 |               "schema": {
1652 |                 "$ref": "#/components/schemas/UpdateCouponParams"
1653 |               }
1654 |             }
1655 |           }
1656 |         },
1657 |         "responses": {
1658 |           "200": {
1659 |             "description": "Successful response",
1660 |             "content": {
1661 |               "application/json": {
1662 |                 "schema": {
1663 |                   "$ref": "#/components/schemas/CreateCouponResponseDto"
1664 |                 }
1665 |               }
1666 |             }
1667 |           },
1668 |           "422": {
1669 |             "description": "Unprocessable Entity",
1670 |             "content": {
1671 |               "application/json": {
1672 |                 "schema": {
1673 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1674 |                 }
1675 |               }
1676 |             }
1677 |           }
1678 |         },
1679 |         "tags": [
1680 |           "Coupons"
1681 |         ],
1682 |         "security": [
1683 |           {
1684 |             "Location-Access": []
1685 |           }
1686 |         ]
1687 |       },
1688 |       "delete": {
1689 |         "operationId": "delete-coupon",
1690 |         "summary": "Delete Coupon",
1691 |         "description": "The \"Delete Coupon\" API allows you to permanently remove a coupon from your system using its unique identifier. Use this endpoint to discontinue promotional offers or clean up unused coupons. Note that this action cannot be undone.",
1692 |         "parameters": [
1693 |           {
1694 |             "name": "Authorization",
1695 |             "in": "header",
1696 |             "description": "Access Token",
1697 |             "required": true,
1698 |             "schema": {
1699 |               "type": "string",
1700 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1701 |             }
1702 |           },
1703 |           {
1704 |             "name": "Version",
1705 |             "in": "header",
1706 |             "description": "API Version",
1707 |             "required": true,
1708 |             "schema": {
1709 |               "type": "string",
1710 |               "enum": [
1711 |                 "2021-07-28"
1712 |               ]
1713 |             }
1714 |           }
1715 |         ],
1716 |         "requestBody": {
1717 |           "required": true,
1718 |           "content": {
1719 |             "application/json": {
1720 |               "schema": {
1721 |                 "$ref": "#/components/schemas/DeleteCouponParams"
1722 |               }
1723 |             }
1724 |           }
1725 |         },
1726 |         "responses": {
1727 |           "200": {
1728 |             "description": "Successful response",
1729 |             "content": {
1730 |               "application/json": {
1731 |                 "schema": {
1732 |                   "$ref": "#/components/schemas/DeleteCouponResponseDto"
1733 |                 }
1734 |               }
1735 |             }
1736 |           },
1737 |           "422": {
1738 |             "description": "Unprocessable Entity",
1739 |             "content": {
1740 |               "application/json": {
1741 |                 "schema": {
1742 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1743 |                 }
1744 |               }
1745 |             }
1746 |           }
1747 |         },
1748 |         "tags": [
1749 |           "Coupons"
1750 |         ],
1751 |         "security": [
1752 |           {
1753 |             "Location-Access": []
1754 |           }
1755 |         ]
1756 |       },
1757 |       "get": {
1758 |         "operationId": "get-coupon",
1759 |         "summary": "Fetch Coupon",
1760 |         "description": "The \"Get Coupon Details\" API enables you to retrieve comprehensive information about a specific coupon using either its unique identifier or promotional code. Use this endpoint to view coupon parameters, usage statistics, validity periods, and other promotional details.",
1761 |         "parameters": [
1762 |           {
1763 |             "name": "Authorization",
1764 |             "in": "header",
1765 |             "description": "Access Token",
1766 |             "required": true,
1767 |             "schema": {
1768 |               "type": "string",
1769 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1770 |             }
1771 |           },
1772 |           {
1773 |             "name": "Version",
1774 |             "in": "header",
1775 |             "description": "API Version",
1776 |             "required": true,
1777 |             "schema": {
1778 |               "type": "string",
1779 |               "enum": [
1780 |                 "2021-07-28"
1781 |               ]
1782 |             }
1783 |           },
1784 |           {
1785 |             "name": "altId",
1786 |             "required": true,
1787 |             "in": "query",
1788 |             "description": "Location Id",
1789 |             "schema": {
1790 |               "example": "BQdAwxa0ky1iK2sstLGJ",
1791 |               "type": "string"
1792 |             }
1793 |           },
1794 |           {
1795 |             "name": "altType",
1796 |             "required": true,
1797 |             "in": "query",
1798 |             "description": "Alt Type",
1799 |             "schema": {
1800 |               "example": "location",
1801 |               "enum": [
1802 |                 "location"
1803 |               ],
1804 |               "type": "string"
1805 |             }
1806 |           },
1807 |           {
1808 |             "name": "id",
1809 |             "required": true,
1810 |             "in": "query",
1811 |             "description": "Coupon id",
1812 |             "schema": {
1813 |               "example": "6241712be68f7a98102ba272",
1814 |               "type": "string"
1815 |             }
1816 |           },
1817 |           {
1818 |             "name": "code",
1819 |             "required": true,
1820 |             "in": "query",
1821 |             "description": "Coupon code",
1822 |             "schema": {
1823 |               "example": "DEAL50",
1824 |               "type": "string"
1825 |             }
1826 |           }
1827 |         ],
1828 |         "responses": {
1829 |           "200": {
1830 |             "description": "Successful response",
1831 |             "content": {
1832 |               "application/json": {
1833 |                 "schema": {
1834 |                   "$ref": "#/components/schemas/CreateCouponResponseDto"
1835 |                 }
1836 |               }
1837 |             }
1838 |           },
1839 |           "422": {
1840 |             "description": "Unprocessable Entity",
1841 |             "content": {
1842 |               "application/json": {
1843 |                 "schema": {
1844 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1845 |                 }
1846 |               }
1847 |             }
1848 |           }
1849 |         },
1850 |         "tags": [
1851 |           "Coupons"
1852 |         ],
1853 |         "security": [
1854 |           {
1855 |             "Location-Access": []
1856 |           }
1857 |         ]
1858 |       }
1859 |     },
1860 |     "/payments/custom-provider/provider": {
1861 |       "post": {
1862 |         "operationId": "create-integration",
1863 |         "summary": "Create new integration",
1864 |         "description": "API to create a new association for an app and location",
1865 |         "parameters": [
1866 |           {
1867 |             "name": "Authorization",
1868 |             "in": "header",
1869 |             "description": "Access Token",
1870 |             "required": true,
1871 |             "schema": {
1872 |               "type": "string",
1873 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1874 |             }
1875 |           },
1876 |           {
1877 |             "name": "Version",
1878 |             "in": "header",
1879 |             "description": "API Version",
1880 |             "required": true,
1881 |             "schema": {
1882 |               "type": "string",
1883 |               "enum": [
1884 |                 "2021-07-28"
1885 |               ]
1886 |             }
1887 |           },
1888 |           {
1889 |             "name": "locationId",
1890 |             "required": true,
1891 |             "in": "query",
1892 |             "description": "Location id",
1893 |             "example": "Lk3nlfk4lxlelVEwcW",
1894 |             "schema": {
1895 |               "type": "string"
1896 |             }
1897 |           }
1898 |         ],
1899 |         "requestBody": {
1900 |           "required": true,
1901 |           "content": {
1902 |             "application/json": {
1903 |               "schema": {
1904 |                 "$ref": "#/components/schemas/CreateCustomProvidersDto"
1905 |               }
1906 |             }
1907 |           }
1908 |         },
1909 |         "responses": {
1910 |           "200": {
1911 |             "description": "Successful response",
1912 |             "content": {
1913 |               "application/json": {
1914 |                 "schema": {
1915 |                   "$ref": "#/components/schemas/CreateCustomProvidersResponseSchema"
1916 |                 }
1917 |               }
1918 |             }
1919 |           },
1920 |           "400": {
1921 |             "description": "Bad Request",
1922 |             "content": {
1923 |               "application/json": {
1924 |                 "schema": {
1925 |                   "$ref": "#/components/schemas/BadRequestDTO"
1926 |                 }
1927 |               }
1928 |             }
1929 |           },
1930 |           "401": {
1931 |             "description": "Unauthorized",
1932 |             "content": {
1933 |               "application/json": {
1934 |                 "schema": {
1935 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1936 |                 }
1937 |               }
1938 |             }
1939 |           },
1940 |           "422": {
1941 |             "description": "Unprocessable Entity",
1942 |             "content": {
1943 |               "application/json": {
1944 |                 "schema": {
1945 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1946 |                 }
1947 |               }
1948 |             }
1949 |           }
1950 |         },
1951 |         "tags": [
1952 |           "Custom Provider"
1953 |         ],
1954 |         "security": [
1955 |           {
1956 |             "Location-Access": []
1957 |           }
1958 |         ]
1959 |       },
1960 |       "delete": {
1961 |         "operationId": "create-integration",
1962 |         "summary": "Deleting an existing integration",
1963 |         "description": "API to delete an association for an app and location",
1964 |         "parameters": [
1965 |           {
1966 |             "name": "Authorization",
1967 |             "in": "header",
1968 |             "description": "Access Token",
1969 |             "required": true,
1970 |             "schema": {
1971 |               "type": "string",
1972 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1973 |             }
1974 |           },
1975 |           {
1976 |             "name": "Version",
1977 |             "in": "header",
1978 |             "description": "API Version",
1979 |             "required": true,
1980 |             "schema": {
1981 |               "type": "string",
1982 |               "enum": [
1983 |                 "2021-07-28"
1984 |               ]
1985 |             }
1986 |           },
1987 |           {
1988 |             "name": "locationId",
1989 |             "required": true,
1990 |             "in": "query",
1991 |             "description": "Location id",
1992 |             "example": "Lk3nlfk4lxlelVEwcW",
1993 |             "schema": {
1994 |               "type": "string"
1995 |             }
1996 |           }
1997 |         ],
1998 |         "responses": {
1999 |           "200": {
2000 |             "description": "Successful response",
2001 |             "content": {
2002 |               "application/json": {
2003 |                 "schema": {
2004 |                   "$ref": "#/components/schemas/DeleteCustomProvidersResponseSchema"
2005 |                 }
2006 |               }
2007 |             }
2008 |           },
2009 |           "400": {
2010 |             "description": "Bad Request",
2011 |             "content": {
2012 |               "application/json": {
2013 |                 "schema": {
2014 |                   "$ref": "#/components/schemas/BadRequestDTO"
2015 |                 }
2016 |               }
2017 |             }
2018 |           },
2019 |           "401": {
2020 |             "description": "Unauthorized",
2021 |             "content": {
2022 |               "application/json": {
2023 |                 "schema": {
2024 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2025 |                 }
2026 |               }
2027 |             }
2028 |           },
2029 |           "422": {
2030 |             "description": "Unprocessable Entity",
2031 |             "content": {
2032 |               "application/json": {
2033 |                 "schema": {
2034 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2035 |                 }
2036 |               }
2037 |             }
2038 |           }
2039 |         },
2040 |         "tags": [
2041 |           "Custom Provider"
2042 |         ],
2043 |         "security": [
2044 |           {
2045 |             "Location-Access": []
2046 |           }
2047 |         ]
2048 |       }
2049 |     },
2050 |     "/payments/custom-provider/connect": {
2051 |       "get": {
2052 |         "operationId": "fetch-config",
2053 |         "summary": "Fetch given provider config",
2054 |         "description": "API for fetching an existing payment config for given location",
2055 |         "parameters": [
2056 |           {
2057 |             "name": "Authorization",
2058 |             "in": "header",
2059 |             "description": "Access Token",
2060 |             "required": true,
2061 |             "schema": {
2062 |               "type": "string",
2063 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2064 |             }
2065 |           },
2066 |           {
2067 |             "name": "Version",
2068 |             "in": "header",
2069 |             "description": "API Version",
2070 |             "required": true,
2071 |             "schema": {
2072 |               "type": "string",
2073 |               "enum": [
2074 |                 "2021-07-28"
2075 |               ]
2076 |             }
2077 |           },
2078 |           {
2079 |             "name": "locationId",
2080 |             "required": true,
2081 |             "in": "query",
2082 |             "description": "Location id",
2083 |             "example": "Lk3nlfk4lxlelVEwcW",
2084 |             "schema": {
2085 |               "type": "string"
2086 |             }
2087 |           }
2088 |         ],
2089 |         "responses": {
2090 |           "200": {
2091 |             "description": "Successful response",
2092 |             "content": {
2093 |               "application/json": {
2094 |                 "schema": {
2095 |                   "$ref": "#/components/schemas/GetCustomProvidersResponseSchema"
2096 |                 }
2097 |               }
2098 |             }
2099 |           },
2100 |           "400": {
2101 |             "description": "No such config exists for given locationId and marketplaceAppId",
2102 |             "content": {
2103 |               "application/json": {
2104 |                 "schema": {
2105 |                   "$ref": "#/components/schemas/BadRequestDTO"
2106 |                 }
2107 |               }
2108 |             }
2109 |           },
2110 |           "401": {
2111 |             "description": "Unauthorized",
2112 |             "content": {
2113 |               "application/json": {
2114 |                 "schema": {
2115 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2116 |                 }
2117 |               }
2118 |             }
2119 |           },
2120 |           "422": {
2121 |             "description": "Unprocessable Entity",
2122 |             "content": {
2123 |               "application/json": {
2124 |                 "schema": {
2125 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2126 |                 }
2127 |               }
2128 |             }
2129 |           }
2130 |         },
2131 |         "tags": [
2132 |           "Custom Provider"
2133 |         ],
2134 |         "security": [
2135 |           {
2136 |             "Location-Access": []
2137 |           }
2138 |         ]
2139 |       },
2140 |       "post": {
2141 |         "operationId": "create-config",
2142 |         "summary": "Create new provider config",
2143 |         "description": "API to create a new payment config for given location",
2144 |         "parameters": [
2145 |           {
2146 |             "name": "Authorization",
2147 |             "in": "header",
2148 |             "description": "Access Token",
2149 |             "required": true,
2150 |             "schema": {
2151 |               "type": "string",
2152 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2153 |             }
2154 |           },
2155 |           {
2156 |             "name": "Version",
2157 |             "in": "header",
2158 |             "description": "API Version",
2159 |             "required": true,
2160 |             "schema": {
2161 |               "type": "string",
2162 |               "enum": [
2163 |                 "2021-07-28"
2164 |               ]
2165 |             }
2166 |           },
2167 |           {
2168 |             "name": "locationId",
2169 |             "required": true,
2170 |             "in": "query",
2171 |             "description": "Location id",
2172 |             "example": "Lk3nlfk4lxlelVEwcW",
2173 |             "schema": {
2174 |               "type": "string"
2175 |             }
2176 |           }
2177 |         ],
2178 |         "requestBody": {
2179 |           "required": true,
2180 |           "content": {
2181 |             "application/json": {
2182 |               "schema": {
2183 |                 "$ref": "#/components/schemas/ConnectCustomProvidersConfigDto"
2184 |               }
2185 |             }
2186 |           }
2187 |         },
2188 |         "responses": {
2189 |           "200": {
2190 |             "description": "Successful response",
2191 |             "content": {
2192 |               "application/json": {
2193 |                 "schema": {
2194 |                   "$ref": "#/components/schemas/ConnectCustomProvidersResponseSchema"
2195 |                 }
2196 |               }
2197 |             }
2198 |           },
2199 |           "400": {
2200 |             "description": "No such config exists for given locationId and marketplaceAppId",
2201 |             "content": {
2202 |               "application/json": {
2203 |                 "schema": {
2204 |                   "$ref": "#/components/schemas/BadRequestDTO"
2205 |                 }
2206 |               }
2207 |             }
2208 |           },
2209 |           "401": {
2210 |             "description": "Unauthorized",
2211 |             "content": {
2212 |               "application/json": {
2213 |                 "schema": {
2214 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2215 |                 }
2216 |               }
2217 |             }
2218 |           },
2219 |           "422": {
2220 |             "description": "Unprocessable Entity",
2221 |             "content": {
2222 |               "application/json": {
2223 |                 "schema": {
2224 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2225 |                 }
2226 |               }
2227 |             }
2228 |           }
2229 |         },
2230 |         "tags": [
2231 |           "Custom Provider"
2232 |         ],
2233 |         "security": [
2234 |           {
2235 |             "Location-Access": []
2236 |           }
2237 |         ]
2238 |       }
2239 |     },
2240 |     "/payments/custom-provider/disconnect": {
2241 |       "post": {
2242 |         "operationId": "disconnect-config",
2243 |         "summary": "Disconnect existing provider config",
2244 |         "description": "API to disconnect an existing payment config for given location",
2245 |         "parameters": [
2246 |           {
2247 |             "name": "Authorization",
2248 |             "in": "header",
2249 |             "description": "Access Token",
2250 |             "required": true,
2251 |             "schema": {
2252 |               "type": "string",
2253 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2254 |             }
2255 |           },
2256 |           {
2257 |             "name": "Version",
2258 |             "in": "header",
2259 |             "description": "API Version",
2260 |             "required": true,
2261 |             "schema": {
2262 |               "type": "string",
2263 |               "enum": [
2264 |                 "2021-07-28"
2265 |               ]
2266 |             }
2267 |           },
2268 |           {
2269 |             "name": "locationId",
2270 |             "required": true,
2271 |             "in": "query",
2272 |             "description": "Location id",
2273 |             "example": "Lk3nlfk4lxlelVEwcW",
2274 |             "schema": {
2275 |               "type": "string"
2276 |             }
2277 |           }
2278 |         ],
2279 |         "requestBody": {
2280 |           "required": true,
2281 |           "content": {
2282 |             "application/json": {
2283 |               "schema": {
2284 |                 "$ref": "#/components/schemas/DeleteCustomProvidersConfigDto"
2285 |               }
2286 |             }
2287 |           }
2288 |         },
2289 |         "responses": {
2290 |           "200": {
2291 |             "description": "Successful response",
2292 |             "content": {
2293 |               "application/json": {
2294 |                 "schema": {
2295 |                   "$ref": "#/components/schemas/DisconnectCustomProvidersResponseSchema"
2296 |                 }
2297 |               }
2298 |             }
2299 |           },
2300 |           "400": {
2301 |             "description": "No such config exists for given locationId and marketplaceAppId",
2302 |             "content": {
2303 |               "application/json": {
2304 |                 "schema": {
2305 |                   "$ref": "#/components/schemas/BadRequestDTO"
2306 |                 }
2307 |               }
2308 |             }
2309 |           },
2310 |           "401": {
2311 |             "description": "Unauthorized",
2312 |             "content": {
2313 |               "application/json": {
2314 |                 "schema": {
2315 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2316 |                 }
2317 |               }
2318 |             }
2319 |           },
2320 |           "422": {
2321 |             "description": "Unprocessable Entity",
2322 |             "content": {
2323 |               "application/json": {
2324 |                 "schema": {
2325 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2326 |                 }
2327 |               }
2328 |             }
2329 |           }
2330 |         },
2331 |         "tags": [
2332 |           "Custom Provider"
2333 |         ],
2334 |         "security": [
2335 |           {
2336 |             "Location-Access": []
2337 |           }
2338 |         ]
2339 |       }
2340 |     }
2341 |   },
2342 |   "info": {
2343 |     "title": "Payments API",
2344 |     "description": "Documentation for payments API",
2345 |     "version": "1.0",
2346 |     "contact": {}
2347 |   },
2348 |   "tags": [
2349 |     {
2350 |       "name": "Payments",
2351 |       "description": "Documentation for payments API"
2352 |     }
2353 |   ],
2354 |   "servers": [
2355 |     {
2356 |       "url": "https://services.leadconnectorhq.com"
2357 |     }
2358 |   ],
2359 |   "components": {
2360 |     "securitySchemes": {
2361 |       "bearer": {
2362 |         "scheme": "bearer",
2363 |         "bearerFormat": "JWT",
2364 |         "name": "Authorization",
2365 |         "in": "header",
2366 |         "description": "Use the Access Token generated with user type as Location",
2367 |         "type": "http"
2368 |       },
2369 |       "Location-Access": {
2370 |         "scheme": "bearer",
2371 |         "bearerFormat": "JWT",
2372 |         "name": "Authorization",
2373 |         "in": "header",
2374 |         "description": "Use the Access Token generated with user type as Location",
2375 |         "type": "http"
2376 |       },
2377 |       "Agency-Access": {
2378 |         "scheme": "bearer",
2379 |         "bearerFormat": "JWT",
2380 |         "name": "Authorization",
2381 |         "in": "header",
2382 |         "description": "Use the Access Token generated with user type as Company",
2383 |         "type": "http"
2384 |       }
2385 |     },
2386 |     "schemas": {
2387 |       "BadRequestDTO": {
2388 |         "type": "object",
2389 |         "properties": {
2390 |           "statusCode": {
2391 |             "type": "number",
2392 |             "example": 400
2393 |           },
2394 |           "message": {
2395 |             "type": "string",
2396 |             "example": "Bad Request"
2397 |           }
2398 |         }
2399 |       },
2400 |       "UnauthorizedDTO": {
2401 |         "type": "object",
2402 |         "properties": {
2403 |           "statusCode": {
2404 |             "type": "number",
2405 |             "example": 401
2406 |           },
2407 |           "message": {
2408 |             "type": "string",
2409 |             "example": "Invalid token: access token is invalid"
2410 |           },
2411 |           "error": {
2412 |             "type": "string",
2413 |             "example": "Unauthorized"
2414 |           }
2415 |         }
2416 |       },
2417 |       "CreateWhiteLabelIntegrationProviderDto": {
2418 |         "type": "object",
2419 |         "properties": {
2420 |           "altId": {
2421 |             "type": "string",
2422 |             "description": "location Id / company Id based on altType",
2423 |             "example": "6578278e879ad2646715ba9c"
2424 |           },
2425 |           "altType": {
2426 |             "type": "string",
2427 |             "description": "Alt Type",
2428 |             "enum": [
2429 |               "location"
2430 |             ],
2431 |             "example": "location"
2432 |           },
2433 |           "uniqueName": {
2434 |             "type": "string",
2435 |             "description": "A unique name given to the integration provider, uniqueName must start and end with a character. Only lowercase characters and hyphens (-) are supported",
2436 |             "example": "easy-direct"
2437 |           },
2438 |           "title": {
2439 |             "type": "string",
2440 |             "description": "The title or name of the integration provider.",
2441 |             "example": "Title"
2442 |           },
2443 |           "provider": {
2444 |             "type": "string",
2445 |             "description": "The type of payment provider associated with the integration provider.",
2446 |             "enum": [
2447 |               "authorize-net",
2448 |               "nmi"
2449 |             ],
2450 |             "example": {
2451 |               "AUTHORIZE_NET": "authorize-net",
2452 |               "NMI": "nmi"
2453 |             }
2454 |           },
2455 |           "description": {
2456 |             "type": "string",
2457 |             "description": "A brief description providing additional information about the integration provider.",
2458 |             "example": "Description"
2459 |           },
2460 |           "imageUrl": {
2461 |             "type": "string",
2462 |             "description": "The URL to an image representing the integration provider. The imageUrl should start with \"https://\" and ensure that this URL is publicly accessible.",
2463 |             "example": "https://example.com/image.jpg"
2464 |           }
2465 |         },
2466 |         "required": [
2467 |           "altId",
2468 |           "altType",
2469 |           "uniqueName",
2470 |           "title",
2471 |           "provider",
2472 |           "description",
2473 |           "imageUrl"
2474 |         ]
2475 |       },
2476 |       "CreateWhitelabelIntegrationResponseDto": {
2477 |         "type": "object",
2478 |         "properties": {
2479 |           "_id": {
2480 |             "type": "string",
2481 |             "description": "The unique identifier of the integration provider.",
2482 |             "example": "65cb47dda50f4f13ced4b870"
2483 |           },
2484 |           "altId": {
2485 |             "type": "string",
2486 |             "description": "The altId / locationId of the integration provider.",
2487 |             "example": "Z4Bxl8J4SaPEPLq9IQ8g"
2488 |           },
2489 |           "altType": {
2490 |             "type": "string",
2491 |             "description": "The altType of the integration provider.",
2492 |             "example": "location"
2493 |           },
2494 |           "title": {
2495 |             "type": "string",
2496 |             "description": "The title or name of the integration provider.",
2497 |             "example": "Example"
2498 |           },
2499 |           "route": {
2500 |             "type": "string",
2501 |             "description": "The route name associated with the integration provider.",
2502 |             "example": "epd"
2503 |           },
2504 |           "provider": {
2505 |             "type": "string",
2506 |             "description": "The payment provider associated with the integration provider.",
2507 |             "example": "nmi"
2508 |           },
2509 |           "description": {
2510 |             "type": "string",
2511 |             "description": "A brief description providing additional information about the integration provider.",
2512 |             "example": "Lorem"
2513 |           },
2514 |           "imageUrl": {
2515 |             "type": "string",
2516 |             "description": "The URL to an image representing the integration provider.",
2517 |             "example": "https://example.com/assets/pmd/img/payments/nmi-logo.webp"
2518 |           },
2519 |           "createdAt": {
2520 |             "format": "date-time",
2521 |             "type": "string",
2522 |             "description": "The timestamp when the integration provider was created.",
2523 |             "example": "2024-02-13T10:43:41.026Z"
2524 |           },
2525 |           "updatedAt": {
2526 |             "format": "date-time",
2527 |             "type": "string",
2528 |             "description": "The timestamp when the integration provider was last updated.",
2529 |             "example": "2024-02-13T10:43:41.026Z"
2530 |           }
2531 |         },
2532 |         "required": [
2533 |           "_id",
2534 |           "altId",
2535 |           "altType",
2536 |           "title",
2537 |           "route",
2538 |           "provider",
2539 |           "description",
2540 |           "imageUrl",
2541 |           "createdAt",
2542 |           "updatedAt"
2543 |         ]
2544 |       },
2545 |       "UnprocessableDTO": {
2546 |         "type": "object",
2547 |         "properties": {
2548 |           "statusCode": {
2549 |             "type": "number",
2550 |             "example": 422
2551 |           },
2552 |           "message": {
2553 |             "example": [
2554 |               "Unprocessable Entity"
2555 |             ],
2556 |             "type": "array",
2557 |             "items": {
2558 |               "type": "string"
2559 |             }
2560 |           },
2561 |           "error": {
2562 |             "type": "string",
2563 |             "example": "Unprocessable Entity"
2564 |           }
2565 |         }
2566 |       },
2567 |       "IntegrationProviderSchema": {
2568 |         "type": "object",
2569 |         "properties": {
2570 |           "_id": {
2571 |             "type": "string",
2572 |             "description": "The unique identifier of the integration provider.",
2573 |             "example": "65cb47dda50f4f13ced4b870"
2574 |           },
2575 |           "altId": {
2576 |             "type": "string",
2577 |             "description": "The altId / locationId of the integration provider.",
2578 |             "example": "Z4Bxl8J4SaPEPLq9IQ8g"
2579 |           },
2580 |           "altType": {
2581 |             "type": "string",
2582 |             "description": "The altType of the integration provider.",
2583 |             "example": "location"
2584 |           },
2585 |           "title": {
2586 |             "type": "string",
2587 |             "description": "The title or name of the integration provider.",
2588 |             "example": "Example"
2589 |           },
2590 |           "route": {
2591 |             "type": "string",
2592 |             "description": "The route name associated with the integration provider.",
2593 |             "example": "epd"
2594 |           },
2595 |           "provider": {
2596 |             "type": "string",
2597 |             "description": "The payment provider associated with the integration provider.",
2598 |             "example": "nmi"
2599 |           },
2600 |           "description": {
2601 |             "type": "string",
2602 |             "description": "A brief description providing additional information about the integration provider.",
2603 |             "example": "Lorem"
2604 |           },
2605 |           "imageUrl": {
2606 |             "type": "string",
2607 |             "description": "The URL to an image representing the integration provider.",
2608 |             "example": "https://example.com/assets/pmd/img/payments/nmi-logo.webp"
2609 |           },
2610 |           "createdAt": {
2611 |             "format": "date-time",
2612 |             "type": "string",
2613 |             "description": "The timestamp when the integration provider was created.",
2614 |             "example": "2024-02-13T10:43:41.026Z"
2615 |           },
2616 |           "updatedAt": {
2617 |             "format": "date-time",
2618 |             "type": "string",
2619 |             "description": "The timestamp when the integration provider was last updated.",
2620 |             "example": "2024-02-13T10:43:41.026Z"
2621 |           }
2622 |         },
2623 |         "required": [
2624 |           "_id",
2625 |           "altId",
2626 |           "altType",
2627 |           "title",
2628 |           "route",
2629 |           "provider",
2630 |           "description",
2631 |           "imageUrl",
2632 |           "createdAt",
2633 |           "updatedAt"
2634 |         ]
2635 |       },
2636 |       "ListWhitelabelIntegrationProviderResponseDto": {
2637 |         "type": "object",
2638 |         "properties": {
2639 |           "providers": {
2640 |             "description": "list of integration provider.",
2641 |             "allOf": [
2642 |               {
2643 |                 "$ref": "#/components/schemas/IntegrationProviderSchema"
2644 |               }
2645 |             ]
2646 |           }
2647 |         },
2648 |         "required": [
2649 |           "providers"
2650 |         ]
2651 |       },
2652 |       "OrderResponseSchema": {
2653 |         "type": "object",
2654 |         "properties": {
2655 |           "_id": {
2656 |             "type": "string",
2657 |             "description": "The unique identifier for the order.",
2658 |             "example": "653f5e0cde5a1314e62a837c"
2659 |           },
2660 |           "altId": {
2661 |             "type": "string",
2662 |             "description": "AltId is the unique identifier eg: location id.",
2663 |             "example": "3SwdhCu3svxI8AKsPJt6"
2664 |           },
2665 |           "altType": {
2666 |             "type": "string",
2667 |             "example": "location",
2668 |             "description": "AltType is the type of identifier."
2669 |           },
2670 |           "contactId": {
2671 |             "type": "string",
2672 |             "example": "XPLSw2SVagl12LMDeTmQ",
2673 |             "description": "Contact id corresponding to the order."
2674 |           },
2675 |           "contactName": {
2676 |             "type": "string",
2677 |             "example": "James Bond",
2678 |             "description": "Contact name corresponding to the order."
2679 |           },
2680 |           "contactEmail": {
2681 |             "type": "string",
2682 |             "example": "james.bond@gohighlevel.com",
2683 |             "description": "Contact email corresponding to the order."
2684 |           },
2685 |           "currency": {
2686 |             "type": "string",
2687 |             "example": "USD",
2688 |             "description": "Currency in which order was created."
2689 |           },
2690 |           "amount": {
2691 |             "type": "number",
2692 |             "example": "100",
2693 |             "description": "Order value."
2694 |           },
2695 |           "subtotal": {
2696 |             "type": "number",
2697 |             "example": "100",
2698 |             "description": "Order sub-total value."
2699 |           },
2700 |           "discount": {
2701 |             "type": "number",
2702 |             "example": "10",
2703 |             "description": "Discount value on order."
2704 |           },
2705 |           "status": {
2706 |             "type": "string",
2707 |             "description": "The status of the order (e.g., completed).",
2708 |             "example": "completed"
2709 |           },
2710 |           "liveMode": {
2711 |             "type": "boolean",
2712 |             "example": "false",
2713 |             "description": "Order is in live / test mode."
2714 |           },
2715 |           "totalProducts": {
2716 |             "type": "number",
2717 |             "example": "5",
2718 |             "description": "Total products in an order."
2719 |           },
2720 |           "sourceType": {
2721 |             "type": "string",
2722 |             "example": "funnel",
2723 |             "description": "Source type of order (eg: funnel)."
2724 |           },
2725 |           "sourceName": {
2726 |             "type": "string",
2727 |             "example": "onestep",
2728 |             "description": "Source name for the order."
2729 |           },
2730 |           "sourceId": {
2731 |             "type": "string",
2732 |             "description": "Source id for the order.",
2733 |             "example": "kDj7BHej9Zyyq3QakJmz"
2734 |           },
2735 |           "sourceMeta": {
2736 |             "type": "object",
2737 |             "description": "Meta content for the source of order.",
2738 |             "example": "{ domain: \"app.gohighlevel.com\", pageId:  \"rBVhyYhMsbxbO8ZqOcei\", pageUrl:  \"/v2/preview/rBVhyYhMsbxbO8ZqOcei\", stepId:   \"5a772f62-3fbc-418b-af1b-be8929dd64c2\"}"
2739 |           },
2740 |           "couponCode": {
2741 |             "type": "string",
2742 |             "description": "Coupon code for the order.",
2743 |             "example": "100PER"
2744 |           },
2745 |           "createdAt": {
2746 |             "format": "date-time",
2747 |             "type": "string",
2748 |             "description": "The creation timestamp of the order.",
2749 |             "example": "2023-11-20T10:23:36.515Z"
2750 |           },
2751 |           "updatedAt": {
2752 |             "format": "date-time",
2753 |             "type": "string",
2754 |             "description": "The last update timestamp of the order.",
2755 |             "example": "2024-01-23T09:57:04.846Z"
2756 |           },
2757 |           "sourceSubType": {
2758 |             "type": "string",
2759 |             "description": "Source sub-type for the order.",
2760 |             "example": "one_step_order_form"
2761 |           },
2762 |           "fulfillmentStatus": {
2763 |             "type": "string",
2764 |             "description": "Fulfillment status of the order.",
2765 |             "example": "unfulfilled"
2766 |           },
2767 |           "onetimeProducts": {
2768 |             "type": "number",
2769 |             "example": "1",
2770 |             "description": "Total one time products in an order."
2771 |           },
2772 |           "recurringProducts": {
2773 |             "type": "number",
2774 |             "example": "1",
2775 |             "description": "Total recurring time products in an order."
2776 |           }
2777 |         },
2778 |         "required": [
2779 |           "_id",
2780 |           "altId",
2781 |           "altType",
2782 |           "status",
2783 |           "sourceType",
2784 |           "createdAt",
2785 |           "updatedAt"
2786 |         ]
2787 |       },
2788 |       "ListOrdersResponseDto": {
2789 |         "type": "object",
2790 |         "properties": {
2791 |           "data": {
2792 |             "description": "An array of orders",
2793 |             "type": "array",
2794 |             "items": {
2795 |               "$ref": "#/components/schemas/OrderResponseSchema"
2796 |             }
2797 |           },
2798 |           "totalCount": {
2799 |             "type": "number",
2800 |             "description": "total orders count"
2801 |           }
2802 |         },
2803 |         "required": [
2804 |           "data",
2805 |           "totalCount"
2806 |         ]
2807 |       },
2808 |       "AmountSummary": {
2809 |         "type": "object",
2810 |         "properties": {
2811 |           "subtotal": {
2812 |             "type": "number",
2813 |             "example": "100",
2814 |             "description": "Order sub-total value."
2815 |           },
2816 |           "discount": {
2817 |             "type": "number",
2818 |             "example": "10",
2819 |             "description": "Discount value on order."
2820 |           }
2821 |         },
2822 |         "required": [
2823 |           "subtotal"
2824 |         ]
2825 |       },
2826 |       "OrderSource": {
2827 |         "type": "object",
2828 |         "properties": {
2829 |           "type": {
2830 |             "type": "string",
2831 |             "enum": [
2832 |               "funnel",
2833 |               "website",
2834 |               "invoice",
2835 |               "calendar",
2836 |               "text2Pay",
2837 |               "document_contracts",
2838 |               "membership",
2839 |               "mobile_app",
2840 |               "communities",
2841 |               "point_of_sale",
2842 |               "manual",
2843 |               "form",
2844 |               "survey",
2845 |               "payment_link",
2846 |               "external"
2847 |             ]
2848 |           },
2849 |           "subType": {
2850 |             "type": "string",
2851 |             "enum": [
2852 |               "one_step_order_form",
2853 |               "two_step_order_form",
2854 |               "upsell",
2855 |               "tap_to_pay",
2856 |               "card_payment",
2857 |               "store",
2858 |               "contact_view",
2859 |               "email_campaign",
2860 |               "payments_dashboard",
2861 |               "shopify"
2862 |             ]
2863 |           },
2864 |           "id": {
2865 |             "type": "string"
2866 |           },
2867 |           "name": {
2868 |             "type": "string"
2869 |           },
2870 |           "meta": {
2871 |             "type": "object"
2872 |           }
2873 |         },
2874 |         "required": [
2875 |           "type",
2876 |           "id"
2877 |         ]
2878 |       },
2879 |       "GetOrderResponseSchema": {
2880 |         "type": "object",
2881 |         "properties": {
2882 |           "_id": {
2883 |             "type": "string",
2884 |             "description": "The unique identifier for the order.",
2885 |             "example": "653f5e0cde5a1314e62a837c"
2886 |           },
2887 |           "altId": {
2888 |             "type": "string",
2889 |             "description": "AltId is the unique identifier eg: location id.",
2890 |             "example": "3SwdhCu3svxI8AKsPJt6"
2891 |           },
2892 |           "altType": {
2893 |             "type": "string",
2894 |             "example": "location",
2895 |             "description": "AltType is the type of identifier."
2896 |           },
2897 |           "contactId": {
2898 |             "type": "string",
2899 |             "example": "XPLSw2SVagl12LMDeTmQ",
2900 |             "description": "Contact id corresponding to the order."
2901 |           },
2902 |           "currency": {
2903 |             "type": "string",
2904 |             "example": "USD",
2905 |             "description": "Currency in which order was created."
2906 |           },
2907 |           "amount": {
2908 |             "type": "number",
2909 |             "example": "100",
2910 |             "description": "Order value."
2911 |           },
2912 |           "status": {
2913 |             "type": "string",
2914 |             "description": "The status of the order (e.g., completed).",
2915 |             "example": "completed"
2916 |           },
2917 |           "liveMode": {
2918 |             "type": "boolean",
2919 |             "example": "false",
2920 |             "description": "Order is in live / test mode."
2921 |           },
2922 |           "createdAt": {
2923 |             "format": "date-time",
2924 |             "type": "string",
2925 |             "description": "The creation timestamp of the order.",
2926 |             "example": "2023-11-20T10:23:36.515Z"
2927 |           },
2928 |           "updatedAt": {
2929 |             "format": "date-time",
2930 |             "type": "string",
2931 |             "description": "The last update timestamp of the order.",
2932 |             "example": "2024-01-23T09:57:04.846Z"
2933 |           },
2934 |           "fulfillmentStatus": {
2935 |             "type": "string",
2936 |             "description": "Fulfillment status of the order.",
2937 |             "example": "unfulfilled"
2938 |           },
2939 |           "contactSnapshot": {
2940 |             "type": "object",
2941 |             "description": "Contact details of the order.",
2942 |             "example": "{ last_name: \"Mcclain\", type: \"lead\", first_name_lower_case: \"rogan\", email: \"anish+11@gohighlevel.com\", last_name_lower_case: \"mcclain\", location_id: \"o6241QsiRwUIJHyjuhos\", company_name: \"Jordan and Cox Trading\"}"
2943 |           },
2944 |           "amountSummary": {
2945 |             "description": "Amount details of the order.",
2946 |             "example": "{ subtotal: 100, discount: 5 }",
2947 |             "allOf": [
2948 |               {
2949 |                 "$ref": "#/components/schemas/AmountSummary"
2950 |               }
2951 |             ]
2952 |           },
2953 |           "source": {
2954 |             "description": "Source details of the order.",
2955 |             "example": "{ type: \"invoice\", id: \"61dd48ff65b013bc39bb09c6\" }",
2956 |             "allOf": [
2957 |               {
2958 |                 "$ref": "#/components/schemas/OrderSource"
2959 |               }
2960 |             ]
2961 |           },
2962 |           "items": {
2963 |             "description": "Item details of the order.",
2964 |             "example": "{ _id: 61dd33e88058b9f967ca79dc, authorizeAmount: 0, locationId: \"SBAWb4yu7A4LSc0skQ6g\", name: \"Sample Product\": price: {}, product: { name: \"Testing product\", productType: \"SERVICE\" }}",
2965 |             "type": "array",
2966 |             "items": {
2967 |               "type": "string"
2968 |             }
2969 |           },
2970 |           "coupon": {
2971 |             "type": "object",
2972 |             "description": "Coupon details of the order.",
2973 |             "example": "{ code: \"FEST10\", _id: \"63455e48901b43d4ef364a20\" }"
2974 |           },
2975 |           "trackingId": {
2976 |             "type": "string",
2977 |             "description": "Tracking id of the order.",
2978 |             "example": "63319ef9-de0a-4c84-aebd-3585fb4a0cdf"
2979 |           },
2980 |           "fingerprint": {
2981 |             "type": "string",
2982 |             "description": "Fingerprint id of the order.",
2983 |             "example": "5d51db5a-42b0-4b04-ba88-2c046c982a3a"
2984 |           },
2985 |           "meta": {
2986 |             "type": "object",
2987 |             "description": "Meta details of the order.",
2988 |             "example": "{ couponSessionExpired: true }"
2989 |           },
2990 |           "markAsTest": {
2991 |             "type": "boolean",
2992 |             "description": "Is test order.",
2993 |             "example": "false"
2994 |           },
2995 |           "traceId": {
2996 |             "type": "string",
2997 |             "description": "Trace id of the order.",
2998 |             "example": "d3b16a92-a8ed-4e6b-8467-844750f78ed5"
2999 |           }
3000 |         },
3001 |         "required": [
3002 |           "_id",
3003 |           "altId",
3004 |           "altType",
3005 |           "status",
3006 |           "createdAt",
3007 |           "updatedAt"
3008 |         ]
3009 |       },
3010 |       "FulfillmentTracking": {
3011 |         "type": "object",
3012 |         "properties": {
3013 |           "trackingNumber": {
3014 |             "type": "string",
3015 |             "description": "Tracking number provided by the shipping carrier",
3016 |             "example": "40012345678"
3017 |           },
3018 |           "shippingCarrier": {
3019 |             "type": "string",
3020 |             "description": "Shipping carrier name",
3021 |             "example": "FedEx"
3022 |           },
3023 |           "trackingUrl": {
3024 |             "type": "string",
3025 |             "description": "Tracking URL",
3026 |             "example": "https://www.fedex.com/wtrk/track/?trknbr=40012345678"
3027 |           }
3028 |         }
3029 |       },
3030 |       "FulfillmentItems": {
3031 |         "type": "object",
3032 |         "properties": {
3033 |           "priceId": {
3034 |             "type": "string",
3035 |             "description": "The id of product price",
3036 |             "example": "6578278e879ad2646715ba9c"
3037 |           },
3038 |           "qty": {
3039 |             "type": "number",
3040 |             "description": "The no of quantity of the item",
3041 |             "example": 1
3042 |           }
3043 |         },
3044 |         "required": [
3045 |           "priceId",
3046 |           "qty"
3047 |         ]
3048 |       },
3049 |       "CreateFulfillmentDto": {
3050 |         "type": "object",
3051 |         "properties": {
3052 |           "altId": {
3053 |             "type": "string",
3054 |             "description": "Location Id or Agency Id",
3055 |             "example": "6578278e879ad2646715ba9c"
3056 |           },
3057 |           "altType": {
3058 |             "type": "string",
3059 |             "enum": [
3060 |               "location"
3061 |             ]
3062 |           },
3063 |           "trackings": {
3064 |             "description": "Fulfillment tracking information",
3065 |             "type": "array",
3066 |             "items": {
3067 |               "$ref": "#/components/schemas/FulfillmentTracking"
3068 |             }
3069 |           },
3070 |           "items": {
3071 |             "description": "Fulfilled items",
3072 |             "type": "array",
3073 |             "items": {
3074 |               "$ref": "#/components/schemas/FulfillmentItems"
3075 |             }
3076 |           },
3077 |           "notifyCustomer": {
3078 |             "type": "boolean",
3079 |             "description": "Need to send a notification to customer",
3080 |             "example": true
3081 |           }
3082 |         },
3083 |         "required": [
3084 |           "altId",
3085 |           "altType",
3086 |           "trackings",
3087 |           "items",
3088 |           "notifyCustomer"
3089 |         ]
3090 |       },
3091 |       "ProductVariantOptionDto": {
3092 |         "type": "object",
3093 |         "properties": {
3094 |           "id": {
3095 |             "type": "string",
3096 |             "description": "The unique identifier for the option.",
3097 |             "example": "h4z7u0im2q8"
3098 |           },
3099 |           "name": {
3100 |             "type": "string",
3101 |             "description": "The name of the option.",
3102 |             "example": "XL"
3103 |           }
3104 |         },
3105 |         "required": [
3106 |           "id",
3107 |           "name"
3108 |         ]
3109 |       },
3110 |       "ProductVariantDto": {
3111 |         "type": "object",
3112 |         "properties": {
3113 |           "id": {
3114 |             "type": "string",
3115 |             "description": "A unique identifier for the variant.",
3116 |             "example": "38s63qmxfr4"
3117 |           },
3118 |           "name": {
3119 |             "type": "string",
3120 |             "description": "The name of the variant.",
3121 |             "example": "Size"
3122 |           },
3123 |           "options": {
3124 |             "description": "An array of options for the variant.",
3125 |             "type": "array",
3126 |             "items": {
3127 |               "$ref": "#/components/schemas/ProductVariantOptionDto"
3128 |             }
3129 |           }
3130 |         },
3131 |         "required": [
3132 |           "id",
3133 |           "name",
3134 |           "options"
3135 |         ]
3136 |       },
3137 |       "ProductMediaDto": {
3138 |         "type": "object",
3139 |         "properties": {
3140 |           "id": {
3141 |             "type": "string",
3142 |             "description": "The unique identifier for the media.",
3143 |             "example": "fzrgusiuu0m"
3144 |           },
3145 |           "title": {
3146 |             "type": "string",
3147 |             "description": "The title of the media file.",
3148 |             "example": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png"
3149 |           },
3150 |           "url": {
3151 |             "type": "string",
3152 |             "description": "The URL where the media file is stored.",
3153 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png"
3154 |           },
3155 |           "type": {
3156 |             "type": "string",
3157 |             "description": "The type of the media file (e.g., image, video will be supporting soon).",
3158 |             "example": "image",
3159 |             "enum": [
3160 |               "image",
3161 |               "video"
3162 |             ]
3163 |           },
3164 |           "isFeatured": {
3165 |             "type": "boolean",
3166 |             "description": "Indicates whether the media is featured.",
3167 |             "example": true
3168 |           },
3169 |           "priceIds": {
3170 |             "description": "Mongo ObjectIds of the prices for which the media is assigned",
3171 |             "example": "6578278e879ad2646715ba9c",
3172 |             "type": "array",
3173 |             "items": {
3174 |               "type": "array"
3175 |             }
3176 |           }
3177 |         },
3178 |         "required": [
3179 |           "id",
3180 |           "url",
3181 |           "type"
3182 |         ]
3183 |       },
3184 |       "ProductLabelDto": {
3185 |         "type": "object",
3186 |         "properties": {
3187 |           "title": {
3188 |             "type": "string",
3189 |             "description": "The content for the product label.",
3190 |             "example": "Featured"
3191 |           },
3192 |           "startDate": {
3193 |             "type": "string",
3194 |             "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
3195 |             "example": "2024-06-26T05:43:35.000Z"
3196 |           },
3197 |           "endDate": {
3198 |             "type": "string",
3199 |             "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
3200 |             "example": "2024-06-30T05:43:39.000Z"
3201 |           }
3202 |         },
3203 |         "required": [
3204 |           "title"
3205 |         ]
3206 |       },
3207 |       "ProductSEODto": {
3208 |         "type": "object",
3209 |         "properties": {
3210 |           "title": {
3211 |             "type": "string",
3212 |             "description": "SEO title of the product which will be displayed in the preview",
3213 |             "example": "Apple iPhone 14"
3214 |           },
3215 |           "description": {
3216 |             "type": "string",
3217 |             "description": "SEO Description for the product which will be displayed in the preview",
3218 |             "example": "New iPhone with all new features"
3219 |           }
3220 |         }
3221 |       },
3222 |       "DefaultProductResponseDto": {
3223 |         "type": "object",
3224 |         "properties": {
3225 |           "_id": {
3226 |             "type": "string",
3227 |             "description": "The unique identifier for the product.",
3228 |             "example": "655b33a82209e60b6adb87a5"
3229 |           },
3230 |           "description": {
3231 |             "type": "string",
3232 |             "description": "product description",
3233 |             "example": "This is a really awesome product"
3234 |           },
3235 |           "variants": {
3236 |             "description": "An array of variants for the product.",
3237 |             "type": "array",
3238 |             "items": {
3239 |               "$ref": "#/components/schemas/ProductVariantDto"
3240 |             }
3241 |           },
3242 |           "medias": {
3243 |             "description": "An array of medias for the product.",
3244 |             "type": "array",
3245 |             "items": {
3246 |               "$ref": "#/components/schemas/ProductMediaDto"
3247 |             }
3248 |           },
3249 |           "locationId": {
3250 |             "type": "string",
3251 |             "description": "The unique identifier for the location.",
3252 |             "example": "3SwdhCsvxI8Au3KsPJt6"
3253 |           },
3254 |           "name": {
3255 |             "type": "string",
3256 |             "description": "The name of the product.",
3257 |             "example": "Awesome Product"
3258 |           },
3259 |           "productType": {
3260 |             "type": "string",
3261 |             "description": "The type of the product (e.g., PHYSICAL).",
3262 |             "example": "PHYSICAL"
3263 |           },
3264 |           "availableInStore": {
3265 |             "type": "boolean",
3266 |             "description": "Indicates whether the product is available in-store.",
3267 |             "example": true
3268 |           },
3269 |           "userId": {
3270 |             "type": "string",
3271 |             "description": "The unique identifier for the user who created the product.",
3272 |             "example": "6YAtzfzpmHAdj0e8GkKp"
3273 |           },
3274 |           "createdAt": {
3275 |             "format": "date-time",
3276 |             "type": "string",
3277 |             "description": "The creation timestamp of the product.",
3278 |             "example": "2023-11-20T10:23:36.515Z"
3279 |           },
3280 |           "updatedAt": {
3281 |             "format": "date-time",
3282 |             "type": "string",
3283 |             "description": "The last update timestamp of the product.",
3284 |             "example": "2024-01-23T09:57:04.846Z"
3285 |           },
3286 |           "statementDescriptor": {
3287 |             "type": "string",
3288 |             "description": "The statement descriptor for the product.",
3289 |             "example": "abcde"
3290 |           },
3291 |           "image": {
3292 |             "type": "string",
3293 |             "description": "The URL for the product image.",
3294 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
3295 |           },
3296 |           "collectionIds": {
3297 |             "description": "An array of category Ids for the product",
3298 |             "example": [
3299 |               "65d71377c326ea78e1c47df5",
3300 |               "65d71377c326ea78e1c47d34"
3301 |             ],
3302 |             "type": "array",
3303 |             "items": {
3304 |               "type": "string"
3305 |             }
3306 |           },
3307 |           "isTaxesEnabled": {
3308 |             "type": "boolean",
3309 |             "description": "Is automatic attachment of taxes enabled for the product",
3310 |             "example": true,
3311 |             "default": false
3312 |           },
3313 |           "taxes": {
3314 |             "description": "An array of ids of Taxes attached to the Product. If the expand query includes tax, the taxes will be of type `ProductTaxDto`. Please refer to the `ProductTaxDto` for additional details.",
3315 |             "example": [
3316 |               "654492a4e6bef380114de15a"
3317 |             ],
3318 |             "type": "array",
3319 |             "items": {
3320 |               "type": "string"
3321 |             }
3322 |           },
3323 |           "isLabelEnabled": {
3324 |             "type": "boolean",
3325 |             "description": "A boolean representing whether a product label is enabled or not",
3326 |             "example": true,
3327 |             "default": false
3328 |           },
3329 |           "label": {
3330 |             "description": "The Product label details",
3331 |             "allOf": [
3332 |               {
3333 |                 "$ref": "#/components/schemas/ProductLabelDto"
3334 |               }
3335 |             ]
3336 |           },
3337 |           "slug": {
3338 |             "type": "string",
3339 |             "description": "The slug of the product by which the product will be navigated",
3340 |             "example": "washing-machine"
3341 |           },
3342 |           "seo": {
3343 |             "description": "The SEO information for the product requested",
3344 |             "allOf": [
3345 |               {
3346 |                 "$ref": "#/components/schemas/ProductSEODto"
3347 |               }
3348 |             ]
3349 |           }
3350 |         },
3351 |         "required": [
3352 |           "_id",
3353 |           "locationId",
3354 |           "name",
3355 |           "productType",
3356 |           "createdAt",
3357 |           "updatedAt"
3358 |         ]
3359 |       },
3360 |       "MembershipOfferDto": {
3361 |         "type": "object",
3362 |         "properties": {
3363 |           "label": {
3364 |             "type": "string",
3365 |             "description": "Membership offer label",
3366 |             "example": "top_50"
3367 |           },
3368 |           "value": {
3369 |             "type": "string",
3370 |             "description": "Membership offer label",
3371 |             "example": "50"
3372 |           },
3373 |           "_id": {
3374 |             "type": "string",
3375 |             "description": "The unique identifier for the membership offer.",
3376 |             "example": "655b33aa2209e60b6adb87a7"
3377 |           }
3378 |         },
3379 |         "required": [
3380 |           "label",
3381 |           "value",
3382 |           "_id"
3383 |         ]
3384 |       },
3385 |       "RecurringDto": {
3386 |         "type": "object",
3387 |         "properties": {
3388 |           "interval": {
3389 |             "type": "string",
3390 |             "description": "The interval at which the recurring event occurs.",
3391 |             "example": "day",
3392 |             "enum": [
3393 |               "day",
3394 |               "month",
3395 |               "week",
3396 |               "year"
3397 |             ]
3398 |           },
3399 |           "intervalCount": {
3400 |             "type": "number",
3401 |             "description": "The number of intervals between each occurrence of the event.",
3402 |             "example": 1
3403 |           }
3404 |         },
3405 |         "required": [
3406 |           "interval",
3407 |           "intervalCount"
3408 |         ]
3409 |       },
3410 |       "DefaultPriceResponseDto": {
3411 |         "type": "object",
3412 |         "properties": {
3413 |           "_id": {
3414 |             "type": "string",
3415 |             "description": "The unique identifier for the price.",
3416 |             "example": "655b33aa2209e60b6adb87a7"
3417 |           },
3418 |           "membershipOffers": {
3419 |             "description": "An array of membership offers associated with the price.",
3420 |             "type": "array",
3421 |             "items": {
3422 |               "$ref": "#/components/schemas/MembershipOfferDto"
3423 |             }
3424 |           },
3425 |           "variantOptionIds": {
3426 |             "description": "An array of variant option IDs associated with the price.",
3427 |             "example": [
3428 |               "h4z7u0im2q8",
3429 |               "h3nst2ltsnn"
3430 |             ],
3431 |             "type": "array",
3432 |             "items": {
3433 |               "type": "string"
3434 |             }
3435 |           },
3436 |           "locationId": {
3437 |             "type": "string",
3438 |             "description": "The unique identifier for the location.",
3439 |             "example": "3SwdhCsvxI8Au3KsPJt6"
3440 |           },
3441 |           "product": {
3442 |             "type": "string",
3443 |             "description": "The unique identifier for the associated product.",
3444 |             "example": "655b33a82209e60b6adb87a5"
3445 |           },
3446 |           "userId": {
3447 |             "type": "string",
3448 |             "description": "The unique identifier for the user.",
3449 |             "example": "6YAtzfzpmHAdj0e8GkKp"
3450 |           },
3451 |           "name": {
3452 |             "type": "string",
3453 |             "description": "The name of the price.",
3454 |             "example": "Red / S"
3455 |           },
3456 |           "type": {
3457 |             "type": "string",
3458 |             "description": "The type of the price (e.g., one_time).",
3459 |             "example": "one_time",
3460 |             "enum": [
3461 |               "one_time",
3462 |               "recurring"
3463 |             ]
3464 |           },
3465 |           "currency": {
3466 |             "type": "string",
3467 |             "description": "The currency code for the price.",
3468 |             "example": "INR"
3469 |           },
3470 |           "amount": {
3471 |             "type": "number",
3472 |             "description": "The amount of the price.",
3473 |             "example": 199999
3474 |           },
3475 |           "recurring": {
3476 |             "description": "The recurring details of the price (if type is recurring).",
3477 |             "allOf": [
3478 |               {
3479 |                 "$ref": "#/components/schemas/RecurringDto"
3480 |               }
3481 |             ]
3482 |           },
3483 |           "createdAt": {
3484 |             "format": "date-time",
3485 |             "type": "string",
3486 |             "description": "The creation timestamp of the price.",
3487 |             "example": "2023-11-20T10:23:38.645Z"
3488 |           },
3489 |           "updatedAt": {
3490 |             "format": "date-time",
3491 |             "type": "string",
3492 |             "description": "The last update timestamp of the price.",
3493 |             "example": "2024-01-23T09:57:04.852Z"
3494 |           },
3495 |           "compareAtPrice": {
3496 |             "type": "number",
3497 |             "description": "The compare-at price for comparison purposes.",
3498 |             "example": 2000000
3499 |           },
3500 |           "trackInventory": {
3501 |             "type": "boolean",
3502 |             "description": "Indicates whether inventory tracking is enabled.",
3503 |             "example": null
3504 |           },
3505 |           "availableQuantity": {
3506 |             "type": "number",
3507 |             "description": "Available inventory stock quantity",
3508 |             "example": 5
3509 |           },
3510 |           "allowOutOfStockPurchases": {
3511 |             "type": "boolean",
3512 |             "description": "Continue selling when out of stock",
3513 |             "example": true
3514 |           }
3515 |         },
3516 |         "required": [
3517 |           "_id",
3518 |           "name",
3519 |           "type",
3520 |           "currency",
3521 |           "amount"
3522 |         ]
3523 |       },
3524 |       "FulfilledItem": {
3525 |         "type": "object",
3526 |         "properties": {
3527 |           "_id": {
3528 |             "type": "string",
3529 |             "description": "The id of product price",
3530 |             "example": "6578278e879ad2646715ba9c"
3531 |           },
3532 |           "name": {
3533 |             "type": "string",
3534 |             "description": "Name",
3535 |             "example": "Iphone 15 pro"
3536 |           },
3537 |           "product": {
3538 |             "description": "Product details",
3539 |             "allOf": [
3540 |               {
3541 |                 "$ref": "#/components/schemas/DefaultProductResponseDto"
3542 |               }
3543 |             ]
3544 |           },
3545 |           "price": {
3546 |             "description": "Price details",
3547 |             "allOf": [
3548 |               {
3549 |                 "$ref": "#/components/schemas/DefaultPriceResponseDto"
3550 |               }
3551 |             ]
3552 |           },
3553 |           "qty": {
3554 |             "type": "number",
3555 |             "description": "The no of quantity of the current fulfilled item",
3556 |             "example": 1
3557 |           }
3558 |         },
3559 |         "required": [
3560 |           "_id",
3561 |           "name",
3562 |           "product",
3563 |           "price",
3564 |           "qty"
3565 |         ]
3566 |       },
3567 |       "FulfillmentSchema": {
3568 |         "type": "object",
3569 |         "properties": {
3570 |           "altId": {
3571 |             "type": "string",
3572 |             "description": "Location Id or Agency Id",
3573 |             "example": "6578278e879ad2646715ba9c"
3574 |           },
3575 |           "altType": {
3576 |             "type": "string",
3577 |             "enum": [
3578 |               "location"
3579 |             ]
3580 |           },
3581 |           "trackings": {
3582 |             "description": "Fulfillment tracking information",
3583 |             "type": "array",
3584 |             "items": {
3585 |               "$ref": "#/components/schemas/FulfillmentTracking"
3586 |             }
3587 |           },
3588 |           "_id": {
3589 |             "type": "string",
3590 |             "description": "The unique identifier for the fulfillment item.",
3591 |             "example": "655b33a82209e60b6adb87a5"
3592 |           },
3593 |           "items": {
3594 |             "description": "Fulfilled items",
3595 |             "type": "array",
3596 |             "items": {
3597 |               "$ref": "#/components/schemas/FulfilledItem"
3598 |             }
3599 |           },
3600 |           "createdAt": {
3601 |             "type": "string",
3602 |             "description": "created at",
3603 |             "example": "2023-12-12T09:27:42.355Z"
3604 |           },
3605 |           "updatedAt": {
3606 |             "type": "string",
3607 |             "description": "updated at",
3608 |             "example": "2023-12-12T09:27:42.355Z"
3609 |           }
3610 |         },
3611 |         "required": [
3612 |           "altId",
3613 |           "altType",
3614 |           "trackings",
3615 |           "_id",
3616 |           "items",
3617 |           "createdAt",
3618 |           "updatedAt"
3619 |         ]
3620 |       },
3621 |       "CreateFulfillmentResponseDto": {
3622 |         "type": "object",
3623 |         "properties": {
3624 |           "status": {
3625 |             "type": "boolean",
3626 |             "description": "Status of api action",
3627 |             "example": true
3628 |           },
3629 |           "data": {
3630 |             "description": "fulfillment data",
3631 |             "allOf": [
3632 |               {
3633 |                 "$ref": "#/components/schemas/FulfillmentSchema"
3634 |               }
3635 |             ]
3636 |           }
3637 |         },
3638 |         "required": [
3639 |           "status",
3640 |           "data"
3641 |         ]
3642 |       },
3643 |       "ListFulfillmentResponseDto": {
3644 |         "type": "object",
3645 |         "properties": {
3646 |           "status": {
3647 |             "type": "boolean",
3648 |             "description": "Status of api action",
3649 |             "example": true
3650 |           },
3651 |           "data": {
3652 |             "description": "An array of fulfilled items",
3653 |             "type": "array",
3654 |             "items": {
3655 |               "$ref": "#/components/schemas/FulfillmentSchema"
3656 |             }
3657 |           }
3658 |         },
3659 |         "required": [
3660 |           "status",
3661 |           "data"
3662 |         ]
3663 |       },
3664 |       "TxnResponseSchema": {
3665 |         "type": "object",
3666 |         "properties": {
3667 |           "_id": {
3668 |             "type": "string",
3669 |             "description": "The unique identifier for the transaction.",
3670 |             "example": "61dd0feac077f72010f78804"
3671 |           },
3672 |           "altId": {
3673 |             "type": "string",
3674 |             "description": "AltId is the unique identifier eg: location id.",
3675 |             "example": "3SwdhCu3svxI8AKsPJt6"
3676 |           },
3677 |           "altType": {
3678 |             "type": "string",
3679 |             "example": "location",
3680 |             "description": "AltType is the type of identifier."
3681 |           },
3682 |           "contactId": {
3683 |             "type": "string",
3684 |             "example": "XPLSw2SVagl12LMDeTmQ",
3685 |             "description": "Contact id corresponding to the transaction."
3686 |           },
3687 |           "contactName": {
3688 |             "type": "string",
3689 |             "example": "James Bond",
3690 |             "description": "Contact name corresponding to the transaction."
3691 |           },
3692 |           "contactEmail": {
3693 |             "type": "string",
3694 |             "example": "james.bond@gohighlevel.com",
3695 |             "description": "Contact email corresponding to the transaction."
3696 |           },
3697 |           "currency": {
3698 |             "type": "string",
3699 |             "example": "USD",
3700 |             "description": "Currency in which transaction occurred."
3701 |           },
3702 |           "amount": {
3703 |             "type": "number",
3704 |             "example": "100",
3705 |             "description": "Transaction value."
3706 |           },
3707 |           "status": {
3708 |             "type": "object",
3709 |             "description": "The status of the transaction (e.g., succeeded).",
3710 |             "example": "succeeded"
3711 |           },
3712 |           "liveMode": {
3713 |             "type": "boolean",
3714 |             "example": "false",
3715 |             "description": "Transaction is in live / test mode."
3716 |           },
3717 |           "entityType": {
3718 |             "type": "string",
3719 |             "example": "order",
3720 |             "description": "Entity type of transaction (eg: order)."
3721 |           },
3722 |           "entityId": {
3723 |             "type": "string",
3724 |             "example": "61dd0fe9c077f73e67f78803",
3725 |             "description": "Entity id for the transaction. e.g: order id"
3726 |           },
3727 |           "entitySourceType": {
3728 |             "type": "string",
3729 |             "example": "funnel",
3730 |             "description": "Entity source type of transaction (eg: funnel)."
3731 |           },
3732 |           "entitySourceSubType": {
3733 |             "type": "string",
3734 |             "example": "two_step_order_form",
3735 |             "description": "Entity source sub-type of the transactions."
3736 |           },
3737 |           "entitySourceName": {
3738 |             "type": "string",
3739 |             "example": "new funnel",
3740 |             "description": "Entity source name for the transaction."
3741 |           },
3742 |           "entitySourceId": {
3743 |             "type": "string",
3744 |             "description": "Entity source id for the transaction.",
3745 |             "example": "BDBMEghdIUaqMPEsK349"
3746 |           },
3747 |           "entitySourceMeta": {
3748 |             "type": "object",
3749 |             "description": "Meta content for the entity source of transaction.",
3750 |             "example": "{ domain: \"app.gohighlevel.com\", pageId:  \"rBVhyYhMsbxbO8ZqOcei\", pageUrl:  \"/v2/preview/rBVhyYhMsbxbO8ZqOcei\", stepId:   \"5a772f62-3fbc-418b-af1b-be8929dd64c2\"}"
3751 |           },
3752 |           "subscriptionId": {
3753 |             "type": "string",
3754 |             "example": "sub_1KGcXDCScnf89tZoVkoEMCEL",
3755 |             "description": "Subscription id for transaction."
3756 |           },
3757 |           "chargeId": {
3758 |             "type": "string",
3759 |             "example": "in_1KGcXDCScnf89tZohCsmImwE",
3760 |             "description": "Charge id for transaction."
3761 |           },
3762 |           "chargeSnapshot": {
3763 |             "type": "object",
3764 |             "description": "Charge snapshot of transaction.",
3765 |             "example": "{ id: \"in_1KGcXDCScnf89tZohCsmImwE\", object: \"invoice\", account_country: \"US\",  account_name:  \"GHL-Testing\" }"
3766 |           },
3767 |           "paymentProviderType": {
3768 |             "type": "string",
3769 |             "example": "stripe",
3770 |             "description": "Payment provider for transaction."
3771 |           },
3772 |           "paymentProviderConnectedAccount": {
3773 |             "type": "string",
3774 |             "example": "612ca676b484b241fef9d962",
3775 |             "description": "Payment provider  account id for transaction."
3776 |           },
3777 |           "ipAddress": {
3778 |             "type": "string",
3779 |             "example": "107.178.194.224",
3780 |             "description": "Ip address from where transaction was initiated."
3781 |           },
3782 |           "createdAt": {
3783 |             "format": "date-time",
3784 |             "type": "string",
3785 |             "description": "The creation timestamp of the transaction.",
3786 |             "example": "2023-11-20T10:23:36.515Z"
3787 |           },
3788 |           "updatedAt": {
3789 |             "format": "date-time",
3790 |             "type": "string",
3791 |             "description": "The update timestamp of the transaction.",
3792 |             "example": "2023-11-20T10:23:36.515Z"
3793 |           },
3794 |           "amountRefunded": {
3795 |             "type": "number",
3796 |             "example": "10",
3797 |             "description": "Transaction amount refunded."
3798 |           },
3799 |           "paymentMethod": {
3800 |             "type": "object",
3801 |             "example": "{ card: { \"brand\": \"discover\", \"last4\": \"0012\" } }",
3802 |             "description": "Transaction payment method details."
3803 |           }
3804 |         },
3805 |         "required": [
3806 |           "_id",
3807 |           "altId",
3808 |           "altType",
3809 |           "status",
3810 |           "entitySourceType",
3811 |           "createdAt",
3812 |           "updatedAt"
3813 |         ]
3814 |       },
3815 |       "ListTxnsResponseDto": {
3816 |         "type": "object",
3817 |         "properties": {
3818 |           "data": {
3819 |             "description": "An array of transactions",
3820 |             "type": "array",
3821 |             "items": {
3822 |               "$ref": "#/components/schemas/TxnResponseSchema"
3823 |             }
3824 |           },
3825 |           "totalCount": {
3826 |             "type": "number",
3827 |             "description": "total transactions count"
3828 |           }
3829 |         },
3830 |         "required": [
3831 |           "data",
3832 |           "totalCount"
3833 |         ]
3834 |       },
3835 |       "GetTxnResponseSchema": {
3836 |         "type": "object",
3837 |         "properties": {
3838 |           "_id": {
3839 |             "type": "string",
3840 |             "description": "The unique identifier for the transaction.",
3841 |             "example": "61dd0feac077f72010f78804"
3842 |           },
3843 |           "altType": {
3844 |             "type": "string",
3845 |             "example": "location",
3846 |             "description": "AltType is the type of identifier."
3847 |           },
3848 |           "altId": {
3849 |             "type": "string",
3850 |             "description": "AltId is the unique identifier eg: location id.",
3851 |             "example": "3SwdhCu3svxI8AKsPJt6"
3852 |           },
3853 |           "contactId": {
3854 |             "type": "string",
3855 |             "example": "XPLSw2SVagl12LMDeTmQ",
3856 |             "description": "Contact id corresponding to the transaction."
3857 |           },
3858 |           "contactSnapshot": {
3859 |             "type": "object",
3860 |             "description": "Contact details of the transaction.",
3861 |             "example": "{ last_name: \"Mcclain\", type: \"lead\", first_name_lower_case: \"rogan\", email: \"anish+11@gohighlevel.com\", last_name_lower_case: \"mcclain\", location_id: \"o6241QsiRwUIJHyjuhos\", company_name: \"Jordan and Cox Trading\"}"
3862 |           },
3863 |           "currency": {
3864 |             "type": "string",
3865 |             "example": "USD",
3866 |             "description": "Currency in which transaction was made."
3867 |           },
3868 |           "amount": {
3869 |             "type": "number",
3870 |             "example": "100",
3871 |             "description": "Transaction value."
3872 |           },
3873 |           "status": {
3874 |             "type": "object",
3875 |             "example": "succeeded",
3876 |             "description": "Transaction status."
3877 |           },
3878 |           "liveMode": {
3879 |             "type": "boolean",
3880 |             "example": "false",
3881 |             "description": "Transaction is in live / test mode."
3882 |           },
3883 |           "createdAt": {
3884 |             "format": "date-time",
3885 |             "type": "string",
3886 |             "description": "The creation timestamp of the transaction.",
3887 |             "example": "2023-11-20T10:23:36.515Z"
3888 |           },
3889 |           "updatedAt": {
3890 |             "format": "date-time",
3891 |             "type": "string",
3892 |             "description": "The last update timestamp of the transaction.",
3893 |             "example": "2024-01-23T09:57:04.846Z"
3894 |           },
3895 |           "entityType": {
3896 |             "type": "string",
3897 |             "example": "order",
3898 |             "description": "Entity type of transaction (eg: order)."
3899 |           },
3900 |           "entityId": {
3901 |             "type": "string",
3902 |             "example": "61dd0fe9c077f73e67f78803",
3903 |             "description": "Entity id for the transaction. e.g: order id"
3904 |           },
3905 |           "entitySource": {
3906 |             "description": "Entity source details for the transaction.",
3907 |             "example": "{ type: \"funnel\", id: \"BDBMEghdIUaqMPEsK349\", subType: \"two_step_order_form\", name: \"new funnel\" }",
3908 |             "allOf": [
3909 |               {
3910 |                 "$ref": "#/components/schemas/OrderSource"
3911 |               }
3912 |             ]
3913 |           },
3914 |           "chargeId": {
3915 |             "type": "string",
3916 |             "example": "in_1KGcXDCScnf89tZohCsmImwE",
3917 |             "description": "Charge id for transaction."
3918 |           },
3919 |           "chargeSnapshot": {
3920 |             "type": "object",
3921 |             "description": "Charge snapshot of transaction.",
3922 |             "example": "{ id: \"in_1KGcXDCScnf89tZohCsmImwE\", object: \"invoice\", account_country: \"US\",  account_name:  \"GHL-Testing\" }"
3923 |           },
3924 |           "invoiceId": {
3925 |             "type": "string",
3926 |             "example": "in_1KGcXDCScnf89tZohCsmImwE",
3927 |             "description": "Invoice id for the transaction."
3928 |           },
3929 |           "subscriptionId": {
3930 |             "type": "string",
3931 |             "example": "sub_1KGcXDCScnf89tZoVkoEMCEL",
3932 |             "description": "Subscription id for transaction."
3933 |           },
3934 |           "paymentProvider": {
3935 |             "type": "object",
3936 |             "description": "Payment provider details of the transaction.",
3937 |             "example": "{ type: \"stripe\", connectedAccount: { _id: \"612ca676b484b241fef9d962\", accountId: \"acct_1Ihw53CScnf89tZo\" } }"
3938 |           },
3939 |           "ipAddress": {
3940 |             "type": "string",
3941 |             "example": "107.178.194.224",
3942 |             "description": "Ip address from where transaction was initiated."
3943 |           },
3944 |           "meta": {
3945 |             "type": "object",
3946 |             "description": "Meta details of the transaction.",
3947 |             "example": "{ stepId: \"af7c731e-e36f-4152-bd1a-3f69a31d6d6d\", pageId: \"A8ltotc2jZxurJba4e3Y\", pageUrl: \"/v2/preview/A8ltotc2jZxurJba4e3Y\" }"
3948 |           },
3949 |           "markAsTest": {
3950 |             "type": "boolean",
3951 |             "description": "Is test transaction.",
3952 |             "example": "false"
3953 |           },
3954 |           "isParent": {
3955 |             "type": "boolean",
3956 |             "description": "Is parent transaction.",
3957 |             "example": "false"
3958 |           },
3959 |           "amountRefunded": {
3960 |             "type": "number",
3961 |             "example": "10",
3962 |             "description": "Transaction amount refunded."
3963 |           },
3964 |           "receiptId": {
3965 |             "type": "string",
3966 |             "example": "6492fbea489bc07892c6defb",
3967 |             "description": "Receipt id for transaction."
3968 |           },
3969 |           "qboSynced": {
3970 |             "type": "boolean",
3971 |             "description": "Is transaction qbo synced.",
3972 |             "example": "false"
3973 |           },
3974 |           "qboResponse": {
3975 |             "type": "object",
3976 |             "description": "Qbo details of the transaction.",
3977 |             "example": "{ domain: \"QBO\", sparse: false, Id: \"180\", SyncToken: \"0\", TotalAmt: 25 }"
3978 |           },
3979 |           "traceId": {
3980 |             "type": "string",
3981 |             "description": "Trace id of the transaction.",
3982 |             "example": "d3b16a92-a8ed-4e6b-8467-844750f78ed5"
3983 |           }
3984 |         },
3985 |         "required": [
3986 |           "_id",
3987 |           "altType",
3988 |           "altId",
3989 |           "createdAt",
3990 |           "updatedAt"
3991 |         ]
3992 |       },
3993 |       "SubscriptionResponseSchema": {
3994 |         "type": "object",
3995 |         "properties": {
3996 |           "_id": {
3997 |             "type": "string",
3998 |             "description": "The unique identifier for the subscription.",
3999 |             "example": "64bf78af39118e4011926cba"
4000 |           },
4001 |           "altId": {
4002 |             "type": "string",
4003 |             "description": "AltId is the unique identifier eg: location id.",
4004 |             "example": "3SwdhCu3svxI8AKsPJt6"
4005 |           },
4006 |           "altType": {
4007 |             "type": "string",
4008 |             "example": "location",
4009 |             "description": "AltType is the type of identifier.",
4010 |             "enum": [
4011 |               "location"
4012 |             ]
4013 |           },
4014 |           "contactId": {
4015 |             "type": "string",
4016 |             "example": "XPLSw2SVagl12LMDeTmQ",
4017 |             "description": "Contact id corresponding to the subscription."
4018 |           },
4019 |           "contactName": {
4020 |             "type": "string",
4021 |             "example": "James Bond",
4022 |             "description": "Contact name corresponding to the subscription."
4023 |           },
4024 |           "contactEmail": {
4025 |             "type": "string",
4026 |             "example": "james.bond@gohighlevel.com",
4027 |             "description": "Contact email corresponding to the subscription."
4028 |           },
4029 |           "currency": {
4030 |             "type": "string",
4031 |             "example": "USD",
4032 |             "description": "Currency in which subscription occurred."
4033 |           },
4034 |           "amount": {
4035 |             "type": "number",
4036 |             "example": "100",
4037 |             "description": "Subscription value."
4038 |           },
4039 |           "status": {
4040 |             "type": "object",
4041 |             "description": "The status of the subscription (e.g., succeeded).",
4042 |             "example": "active"
4043 |           },
4044 |           "liveMode": {
4045 |             "type": "boolean",
4046 |             "example": "false",
4047 |             "description": "Subscription is in live / test mode."
4048 |           },
4049 |           "entityType": {
4050 |             "type": "string",
4051 |             "example": "order",
4052 |             "description": "Entity type of subscription (eg: order)."
4053 |           },
4054 |           "entityId": {
4055 |             "type": "string",
4056 |             "example": "62f4db0f3059ecee61379012",
4057 |             "description": "Entity id for the subscription. e.g: order id"
4058 |           },
4059 |           "entitySourceType": {
4060 |             "type": "string",
4061 |             "example": "funnel",
4062 |             "description": "Entity source type of subscription (eg: funnel)."
4063 |           },
4064 |           "entitySourceName": {
4065 |             "type": "string",
4066 |             "example": "Attribution Funnel",
4067 |             "description": "Entity source name for the subscription."
4068 |           },
4069 |           "entitySourceId": {
4070 |             "type": "string",
4071 |             "description": "Entity source id for the subscription.",
4072 |             "example": "bevrkPbLaDNXFaqfLKMm"
4073 |           },
4074 |           "entitySourceMeta": {
4075 |             "type": "object",
4076 |             "description": "Meta content for the entity source of subscription.",
4077 |             "example": "{ domain: \"app.gohighlevel.com\", pageId:  \"sxC4lNhFIavEnLZh5KhC\", pageUrl:  \"/v2/preview/sxC4lNhFIavEnLZh5KhC\", stepId: \"7d303d1f-cb85-403d-b548-bf01de5c7bb0\" }"
4078 |           },
4079 |           "subscriptionId": {
4080 |             "type": "string",
4081 |             "example": "I-0UE609H8E43P",
4082 |             "description": "Subscription id for subscription."
4083 |           },
4084 |           "subscriptionSnapshot": {
4085 |             "type": "object",
4086 |             "description": "Snapshot of subscription.",
4087 |             "example": "{ status: \"ACTIVE\", status_update_time: \"2022-08-16T11:06:53Z\", id: \"I-0UE609H8E43P\", plan_id: \"P-82K11750F0313430KMLRGE6Y\", start_time: \"2022-08-16T11:05:31Z\", quantity: 1 }"
4088 |           },
4089 |           "paymentProviderType": {
4090 |             "type": "string",
4091 |             "example": "stripe",
4092 |             "description": "Payment provider for subscription."
4093 |           },
4094 |           "paymentProviderConnectedAccount": {
4095 |             "type": "string",
4096 |             "example": "ATn0CqrzrWS5ak185Bsb1xCpyzBDOZ8WdRxyFotppLYePTDhiuQ49H5QXO_L-4HKk1GBn7f9_QhbNK2s",
4097 |             "description": "Payment provider connected account id for subscription."
4098 |           },
4099 |           "ipAddress": {
4100 |             "type": "string",
4101 |             "example": "103.100.16.82",
4102 |             "description": "Ip address from where subscription was initiated."
4103 |           },
4104 |           "createdAt": {
4105 |             "format": "date-time",
4106 |             "type": "string",
4107 |             "description": "The creation timestamp of the subscription.",
4108 |             "example": "2023-11-20T10:23:36.515Z"
4109 |           },
4110 |           "updatedAt": {
4111 |             "format": "date-time",
4112 |             "type": "string",
4113 |             "description": "The update timestamp of the subscription.",
4114 |             "example": "2023-11-20T10:23:36.515Z"
4115 |           }
4116 |         },
4117 |         "required": [
4118 |           "_id",
4119 |           "altId",
4120 |           "altType",
4121 |           "status",
4122 |           "entitySourceType",
4123 |           "createdAt",
4124 |           "updatedAt"
4125 |         ]
4126 |       },
4127 |       "ListSubscriptionResponseDto": {
4128 |         "type": "object",
4129 |         "properties": {
4130 |           "data": {
4131 |             "description": "An array of subscriptions",
4132 |             "type": "array",
4133 |             "items": {
4134 |               "$ref": "#/components/schemas/SubscriptionResponseSchema"
4135 |             }
4136 |           },
4137 |           "totalCount": {
4138 |             "type": "number",
4139 |             "description": "total subscriptions count"
4140 |           }
4141 |         },
4142 |         "required": [
4143 |           "data",
4144 |           "totalCount"
4145 |         ]
4146 |       },
4147 |       "CustomRRuleOptionsDto": {
4148 |         "type": "object",
4149 |         "properties": {
4150 |           "intervalType": {
4151 |             "type": "string",
4152 |             "enum": [
4153 |               "yearly",
4154 |               "monthly",
4155 |               "weekly",
4156 |               "daily",
4157 |               "hourly",
4158 |               "minutely",
4159 |               "secondly"
4160 |             ],
4161 |             "example": "monthly"
4162 |           },
4163 |           "interval": {
4164 |             "type": "number",
4165 |             "example": 2
4166 |           },
4167 |           "startDate": {
4168 |             "type": "string",
4169 |             "description": "Start date in YYYY-MM-DD format",
4170 |             "example": "2023-01-01"
4171 |           },
4172 |           "startTime": {
4173 |             "type": "string",
4174 |             "description": "Start time in HH:mm:ss format",
4175 |             "example": "20:45:00"
4176 |           },
4177 |           "endDate": {
4178 |             "type": "string",
4179 |             "description": "End date in YYYY-MM-DD format",
4180 |             "example": "2029-11-01"
4181 |           },
4182 |           "endTime": {
4183 |             "type": "string",
4184 |             "description": "End time in HH:mm:ss format",
4185 |             "example": "18:45:00"
4186 |           },
4187 |           "dayOfMonth": {
4188 |             "type": "number",
4189 |             "description": "-1, 1, 2, 3, ..., 27, 28",
4190 |             "example": 15
4191 |           },
4192 |           "dayOfWeek": {
4193 |             "type": "string",
4194 |             "enum": [
4195 |               "mo",
4196 |               "tu",
4197 |               "we",
4198 |               "th",
4199 |               "fr",
4200 |               "sa",
4201 |               "su"
4202 |             ],
4203 |             "example": "mo"
4204 |           },
4205 |           "numOfWeek": {
4206 |             "type": "number",
4207 |             "description": "-1, 1, 2, 3, 4",
4208 |             "example": -1
4209 |           },
4210 |           "monthOfYear": {
4211 |             "type": "string",
4212 |             "enum": [
4213 |               "jan",
4214 |               "feb",
4215 |               "mar",
4216 |               "apr",
4217 |               "may",
4218 |               "jun",
4219 |               "jul",
4220 |               "aug",
4221 |               "sep",
4222 |               "oct",
4223 |               "nov",
4224 |               "dec"
4225 |             ],
4226 |             "example": "jan"
4227 |           },
4228 |           "count": {
4229 |             "type": "number",
4230 |             "description": "Max number of task executions",
4231 |             "example": 10
4232 |           },
4233 |           "daysBefore": {
4234 |             "type": "number",
4235 |             "description": "Execute task number of days before",
4236 |             "example": 5
4237 |           }
4238 |         },
4239 |         "required": [
4240 |           "intervalType",
4241 |           "interval",
4242 |           "startDate"
4243 |         ]
4244 |       },
4245 |       "ScheduleOptionsDto": {
4246 |         "type": "object",
4247 |         "properties": {
4248 |           "executeAt": {
4249 |             "type": "string"
4250 |           },
4251 |           "rrule": {
4252 |             "$ref": "#/components/schemas/CustomRRuleOptionsDto"
4253 |           }
4254 |         }
4255 |       },
4256 |       "GetSubscriptionResponseSchema": {
4257 |         "type": "object",
4258 |         "properties": {
4259 |           "_id": {
4260 |             "type": "string",
4261 |             "description": "The unique identifier for the subscription.",
4262 |             "example": "64bf78af39118e4011926cba"
4263 |           },
4264 |           "altType": {
4265 |             "type": "object",
4266 |             "example": "location",
4267 |             "description": "AltType is the type of identifier."
4268 |           },
4269 |           "altId": {
4270 |             "type": "string",
4271 |             "description": "AltId is the unique identifier eg: location id.",
4272 |             "example": "3SwdhCu3svxI8AKsPJt6"
4273 |           },
4274 |           "contactId": {
4275 |             "type": "string",
4276 |             "example": "XPLSw2SVagl12LMDeTmQ",
4277 |             "description": "Contact id corresponding to the subscription."
4278 |           },
4279 |           "contactSnapshot": {
4280 |             "type": "object",
4281 |             "description": "Contact details of the subscriber.",
4282 |             "example": "{ last_name: \"Mcclain\", type: \"lead\", first_name_lower_case: \"rogan\", email: \"anish+11@gohighlevel.com\", last_name_lower_case: \"mcclain\", location_id: \"o6241QsiRwUIJHyjuhos\", company_name: \"Jordan and Cox Trading\"}"
4283 |           },
4284 |           "coupon": {
4285 |             "type": "object",
4286 |             "description": "Coupon details of the subscription.",
4287 |             "example": "{ _id: \"6374c6926d119a393fe1e556\", usageCount: 5260, altId: \"jVFIxsMY19D94nOSIOEO\", altType: \"location\", name: \"FREE-100%\", code: \"FREE100\", discountType: \"percentage\", discountValue: 100 }"
4288 |           },
4289 |           "currency": {
4290 |             "type": "string",
4291 |             "example": "USD",
4292 |             "description": "Currency in which subscription was made."
4293 |           },
4294 |           "amount": {
4295 |             "type": "number",
4296 |             "example": "100",
4297 |             "description": "Subscription value."
4298 |           },
4299 |           "status": {
4300 |             "type": "object",
4301 |             "example": "active",
4302 |             "description": "Subscription status."
4303 |           },
4304 |           "liveMode": {
4305 |             "type": "boolean",
4306 |             "example": "false",
4307 |             "description": "Subscription is in live / test mode."
4308 |           },
4309 |           "entityType": {
4310 |             "type": "string",
4311 |             "example": "order",
4312 |             "description": "Entity type of subscription (eg: order)."
4313 |           },
4314 |           "entityId": {
4315 |             "type": "string",
4316 |             "example": "62f4db0f3059ecee61379012",
4317 |             "description": "Entity id for the subscription. e.g: order id"
4318 |           },
4319 |           "entitySource": {
4320 |             "description": "Entity source details for the subscription.",
4321 |             "example": "{ type: \"funnel\", id: \"lx6ROqruHGVQD2PZwFxK\", subType: \"upsell\", name: \"test funnel\" }",
4322 |             "allOf": [
4323 |               {
4324 |                 "$ref": "#/components/schemas/OrderSource"
4325 |               }
4326 |             ]
4327 |           },
4328 |           "subscriptionId": {
4329 |             "type": "string",
4330 |             "example": "I-0UE609H8E43P",
4331 |             "description": "Subscription id for subscription."
4332 |           },
4333 |           "subscriptionSnapshot": {
4334 |             "type": "object",
4335 |             "description": "Snapshot of subscription.",
4336 |             "example": "{ status: \"ACTIVE\", status_update_time: \"2022-08-16T11:06:53Z\", id: \"I-0UE609H8E43P\", plan_id: \"P-82K11750F0313430KMLRGE6Y\", start_time: \"2022-08-16T11:05:31Z\", quantity: 1 }"
4337 |           },
4338 |           "paymentProvider": {
4339 |             "type": "object",
4340 |             "description": "Payment provider details for the subscription.",
4341 |             "example": "{ type: \"paypal\", connectedAccount: { _id: \"64410debdc8f3b0503523abb\", merchantClientId: \"AeXtjrxdgsJiCPwQt5jML5pH-0mwmLs-tH7ub4Uo3IrDKvRl34FvJy8niI6E1wmS_pryIRdNllyVl58b\" } }"
4342 |           },
4343 |           "ipAddress": {
4344 |             "type": "string",
4345 |             "example": "103.100.16.82",
4346 |             "description": "Ip address from where subscription was initiated."
4347 |           },
4348 |           "createdAt": {
4349 |             "format": "date-time",
4350 |             "type": "string",
4351 |             "description": "The creation timestamp of the subscription.",
4352 |             "example": "2023-11-20T10:23:36.515Z"
4353 |           },
4354 |           "updatedAt": {
4355 |             "format": "date-time",
4356 |             "type": "string",
4357 |             "description": "The last update timestamp of the subscription.",
4358 |             "example": "2024-01-23T09:57:04.846Z"
4359 |           },
4360 |           "meta": {
4361 |             "type": "object",
4362 |             "description": "Meta details of the subscription.",
4363 |             "example": "{ collection: \"transactionsv2\", id: \"6320652f0f664b6632006920\" }"
4364 |           },
4365 |           "markAsTest": {
4366 |             "type": "boolean",
4367 |             "description": "Is test subscription.",
4368 |             "example": "false"
4369 |           },
4370 |           "schedule": {
4371 |             "description": "Scedule details for the subscription.",
4372 |             "example": "{ collection: \"transactionsv2\", id: \"6320652f0f664b6632006920\" }",
4373 |             "allOf": [
4374 |               {
4375 |                 "$ref": "#/components/schemas/ScheduleOptionsDto"
4376 |               }
4377 |             ]
4378 |           },
4379 |           "autoPayment": {
4380 |             "type": "object",
4381 |             "description": "Auto payment details of the subscription.",
4382 |             "example": "{ customerId: \"908879612\", paymentMethodId: \"908646635\" }"
4383 |           },
4384 |           "recurringProduct": {
4385 |             "type": "object",
4386 |             "description": "Recurring product details of the subscription.",
4387 |             "example": "{ locationId: \"Z4Bxl8J4SaPEPLq9IQ8g\", funnel: \"bQHJWKcyjiKjk4BHv91g\", step: \"2281a993-8a75-4b48-9912-571f29c99a74\", name: \"Sofa Set\" }"
4388 |           },
4389 |           "canceledAt": {
4390 |             "format": "date-time",
4391 |             "type": "string",
4392 |             "description": "Cancellation timestamp of the subscription.",
4393 |             "example": "2023-11-20T10:23:36.515Z"
4394 |           },
4395 |           "canceledBy": {
4396 |             "type": "string",
4397 |             "example": "qUuXUiB2AiA2DIthEicP",
4398 |             "description": "User id who cancelled the subscription."
4399 |           },
4400 |           "traceId": {
4401 |             "type": "string",
4402 |             "description": "Trace id of the subscription.",
4403 |             "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
4404 |           }
4405 |         },
4406 |         "required": [
4407 |           "_id",
4408 |           "altType",
4409 |           "altId",
4410 |           "createdAt",
4411 |           "updatedAt"
4412 |         ]
4413 |       },
4414 |       "ApplyToFuturePaymentsConfigDto": {
4415 |         "type": "object",
4416 |         "properties": {
4417 |           "type": {
4418 |             "type": "string",
4419 |             "description": "Type of future payments configuration",
4420 |             "example": "fixed",
4421 |             "enum": [
4422 |               "forever",
4423 |               "fixed"
4424 |             ]
4425 |           },
4426 |           "duration": {
4427 |             "type": "number",
4428 |             "description": "Duration value for fixed type configurations",
4429 |             "example": 3
4430 |           },
4431 |           "durationType": {
4432 |             "type": "string",
4433 |             "description": "Duration type for fixed configurations (e.g. months)",
4434 |             "example": "months"
4435 |           }
4436 |         },
4437 |         "required": [
4438 |           "type"
4439 |         ]
4440 |       },
4441 |       "CouponDto": {
4442 |         "type": "object",
4443 |         "properties": {
4444 |           "_id": {
4445 |             "type": "string",
4446 |             "description": "Unique MongoDB identifier for the coupon",
4447 |             "example": "67f6c132d9485f9dacd5f123"
4448 |           },
4449 |           "usageCount": {
4450 |             "type": "number",
4451 |             "description": "Number of times the coupon has been used",
4452 |             "example": 12
4453 |           },
4454 |           "hasAffiliateCoupon": {
4455 |             "type": "boolean",
4456 |             "description": "Indicates if this is an affiliate coupon",
4457 |             "example": false
4458 |           },
4459 |           "deleted": {
4460 |             "type": "boolean",
4461 |             "description": "Indicates if the coupon has been deleted",
4462 |             "example": false
4463 |           },
4464 |           "limitPerCustomer": {
4465 |             "type": "number",
4466 |             "description": "Maximum number of times a customer can use this coupon (0 for unlimited)",
4467 |             "example": 5
4468 |           },
4469 |           "altId": {
4470 |             "type": "string",
4471 |             "description": "Location or company ID",
4472 |             "example": "79t07PzK8Tvf73d12312"
4473 |           },
4474 |           "altType": {
4475 |             "type": "string",
4476 |             "description": "Type of entity (location or company)",
4477 |             "example": "location"
4478 |           },
4479 |           "name": {
4480 |             "type": "string",
4481 |             "description": "Display name of the coupon",
4482 |             "example": "NEWT6"
4483 |           },
4484 |           "code": {
4485 |             "type": "string",
4486 |             "description": "Redemption code for the coupon",
4487 |             "example": "NEWT6"
4488 |           },
4489 |           "discountType": {
4490 |             "type": "string",
4491 |             "description": "Type of discount (percentage or amount)",
4492 |             "example": "percentage",
4493 |             "enum": [
4494 |               "percentage",
4495 |               "amount"
4496 |             ]
4497 |           },
4498 |           "discountValue": {
4499 |             "type": "number",
4500 |             "description": "Value of the discount (percentage or fixed amount)",
4501 |             "example": 25
4502 |           },
4503 |           "status": {
4504 |             "type": "string",
4505 |             "description": "Current status of the coupon",
4506 |             "example": "scheduled",
4507 |             "enum": [
4508 |               "scheduled",
4509 |               "active",
4510 |               "expired"
4511 |             ]
4512 |           },
4513 |           "startDate": {
4514 |             "type": "string",
4515 |             "description": "Date when the coupon becomes active",
4516 |             "example": "2025-04-30T18:30:00.000Z"
4517 |           },
4518 |           "endDate": {
4519 |             "type": "string",
4520 |             "description": "End date when the coupon expires",
4521 |             "example": "2025-05-30T18:30:00.000Z"
4522 |           },
4523 |           "applyToFuturePayments": {
4524 |             "type": "boolean",
4525 |             "description": "Indicates if the coupon applies to future recurring payments",
4526 |             "example": true
4527 |           },
4528 |           "applyToFuturePaymentsConfig": {
4529 |             "description": "Configuration for how the coupon applies to future payments",
4530 |             "allOf": [
4531 |               {
4532 |                 "$ref": "#/components/schemas/ApplyToFuturePaymentsConfigDto"
4533 |               }
4534 |             ]
4535 |           },
4536 |           "userId": {
4537 |             "type": "string",
4538 |             "description": "User ID associated with the coupon (if applicable)",
4539 |             "example": "q0m15dTLGeiGOXG123123"
4540 |           },
4541 |           "createdAt": {
4542 |             "type": "string",
4543 |             "description": "Creation timestamp",
4544 |             "example": "2025-04-09T18:49:22.026Z"
4545 |           },
4546 |           "updatedAt": {
4547 |             "type": "string",
4548 |             "description": "Last update timestamp",
4549 |             "example": "2025-04-09T18:49:22.026Z"
4550 |           }
4551 |         },
4552 |         "required": [
4553 |           "_id",
4554 |           "usageCount",
4555 |           "hasAffiliateCoupon",
4556 |           "deleted",
4557 |           "limitPerCustomer",
4558 |           "altId",
4559 |           "altType",
4560 |           "name",
4561 |           "code",
4562 |           "discountType",
4563 |           "discountValue",
4564 |           "status",
4565 |           "startDate",
4566 |           "applyToFuturePayments",
4567 |           "applyToFuturePaymentsConfig",
4568 |           "createdAt",
4569 |           "updatedAt"
4570 |         ]
4571 |       },
4572 |       "ListCouponsResponseDto": {
4573 |         "type": "object",
4574 |         "properties": {
4575 |           "data": {
4576 |             "description": "Array of coupon objects",
4577 |             "type": "array",
4578 |             "items": {
4579 |               "$ref": "#/components/schemas/CouponDto"
4580 |             }
4581 |           },
4582 |           "totalCount": {
4583 |             "type": "number",
4584 |             "description": "Total number of coupons matching the query criteria",
4585 |             "example": 20
4586 |           },
4587 |           "traceId": {
4588 |             "type": "string",
4589 |             "description": "Unique identifier for tracing this API request",
4590 |             "example": "c667b18d-8f5e-44cf-a914"
4591 |           }
4592 |         },
4593 |         "required": [
4594 |           "data",
4595 |           "totalCount",
4596 |           "traceId"
4597 |         ]
4598 |       },
4599 |       "ApplyToFuturePaymentsConfig": {
4600 |         "type": "object",
4601 |         "properties": {
4602 |           "type": {
4603 |             "type": "string",
4604 |             "description": "Type of the config",
4605 |             "example": "forever | fixed",
4606 |             "enum": [
4607 |               "forever",
4608 |               "fixed"
4609 |             ]
4610 |           },
4611 |           "duration": {
4612 |             "type": "number",
4613 |             "description": "Duration the coupon to be applied in a subscription",
4614 |             "example": 5
4615 |           },
4616 |           "durationType": {
4617 |             "type": "string",
4618 |             "description": "Type of the duration",
4619 |             "example": "months",
4620 |             "enum": [
4621 |               "months"
4622 |             ]
4623 |           }
4624 |         },
4625 |         "required": [
4626 |           "type",
4627 |           "duration",
4628 |           "durationType"
4629 |         ]
4630 |       },
4631 |       "CreateCouponParams": {
4632 |         "type": "object",
4633 |         "properties": {
4634 |           "altId": {
4635 |             "type": "string",
4636 |             "description": "Location Id",
4637 |             "example": "BQdAwxa0ky1iK2sstLGJ"
4638 |           },
4639 |           "altType": {
4640 |             "type": "string",
4641 |             "description": "Alt Type",
4642 |             "enum": [
4643 |               "location"
4644 |             ],
4645 |             "example": "location"
4646 |           },
4647 |           "name": {
4648 |             "type": "string",
4649 |             "description": "Coupon Name",
4650 |             "example": "New Year Sale"
4651 |           },
4652 |           "code": {
4653 |             "type": "string",
4654 |             "description": "Coupon Code",
4655 |             "example": "LEVELUPDAY2022"
4656 |           },
4657 |           "discountType": {
4658 |             "type": "string",
4659 |             "description": "Discount Type",
4660 |             "enum": [
4661 |               "percentage",
4662 |               "amount"
4663 |             ],
4664 |             "example": "amount"
4665 |           },
4666 |           "discountValue": {
4667 |             "type": "number",
4668 |             "description": "Discount Value",
4669 |             "example": 10
4670 |           },
4671 |           "startDate": {
4672 |             "type": "string",
4673 |             "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
4674 |             "example": "2023-01-01T22:45:00.000Z"
4675 |           },
4676 |           "endDate": {
4677 |             "type": "string",
4678 |             "description": "End date in YYYY-MM-DDTHH:mm:ssZ format",
4679 |             "example": "2023-01-31T22:45:00.000Z"
4680 |           },
4681 |           "usageLimit": {
4682 |             "type": "number",
4683 |             "description": "Max number of times coupon can be used",
4684 |             "example": 10
4685 |           },
4686 |           "productIds": {
4687 |             "description": "Product Ids",
4688 |             "example": [
4689 |               "6241712be68f7a98102ba272"
4690 |             ],
4691 |             "type": "array",
4692 |             "items": {
4693 |               "type": "string"
4694 |             }
4695 |           },
4696 |           "applyToFuturePayments": {
4697 |             "type": "boolean",
4698 |             "example": true,
4699 |             "default": true,
4700 |             "description": "Is Coupon applicable on upcoming subscription transactions"
4701 |           },
4702 |           "applyToFuturePaymentsConfig": {
4703 |             "example": [
4704 |               {
4705 |                 "type": "fixed",
4706 |                 "duration": 5,
4707 |                 "durationType": "months"
4708 |               },
4709 |               {
4710 |                 "type": "forever"
4711 |               }
4712 |             ],
4713 |             "default": {
4714 |               "type": "forever"
4715 |             },
4716 |             "description": "If coupon is applicable on upcoming subscription transactions, how many months should it be applicable for a subscription",
4717 |             "allOf": [
4718 |               {
4719 |                 "$ref": "#/components/schemas/ApplyToFuturePaymentsConfig"
4720 |               }
4721 |             ]
4722 |           },
4723 |           "limitPerCustomer": {
4724 |             "type": "boolean",
4725 |             "example": true,
4726 |             "default": false,
4727 |             "description": "Limits whether a coupon can be redeemed only once per customer."
4728 |           }
4729 |         },
4730 |         "required": [
4731 |           "altId",
4732 |           "altType",
4733 |           "name",
4734 |           "code",
4735 |           "discountType",
4736 |           "discountValue",
4737 |           "startDate"
4738 |         ]
4739 |       },
4740 |       "CreateCouponResponseDto": {
4741 |         "type": "object",
4742 |         "properties": {
4743 |           "_id": {
4744 |             "type": "string",
4745 |             "description": "Unique MongoDB identifier for the coupon",
4746 |             "example": "67f6c132d9485f9dacd5f123"
4747 |           },
4748 |           "usageCount": {
4749 |             "type": "number",
4750 |             "description": "Number of times the coupon has been used",
4751 |             "example": 12
4752 |           },
4753 |           "limitPerCustomer": {
4754 |             "type": "number",
4755 |             "description": "Maximum number of times a customer can use this coupon (0 for unlimited)",
4756 |             "example": 5
4757 |           },
4758 |           "altId": {
4759 |             "type": "string",
4760 |             "description": "Location Id",
4761 |             "example": "79t07PzK8Tvf73d12312"
4762 |           },
4763 |           "altType": {
4764 |             "type": "string",
4765 |             "description": "Type of entity",
4766 |             "example": "location"
4767 |           },
4768 |           "name": {
4769 |             "type": "string",
4770 |             "description": "Display name of the coupon",
4771 |             "example": "NEWT6"
4772 |           },
4773 |           "code": {
4774 |             "type": "string",
4775 |             "description": "Redemption code for the coupon",
4776 |             "example": "NEWT6"
4777 |           },
4778 |           "discountType": {
4779 |             "type": "string",
4780 |             "description": "Type of discount (percentage or amount)",
4781 |             "example": "percentage",
4782 |             "enum": [
4783 |               "percentage",
4784 |               "amount"
4785 |             ]
4786 |           },
4787 |           "discountValue": {
4788 |             "type": "number",
4789 |             "description": "Value of the discount (percentage or fixed amount)",
4790 |             "example": 25
4791 |           },
4792 |           "status": {
4793 |             "type": "string",
4794 |             "description": "Current status of the coupon",
4795 |             "example": "scheduled",
4796 |             "enum": [
4797 |               "scheduled",
4798 |               "active",
4799 |               "expired"
4800 |             ]
4801 |           },
4802 |           "startDate": {
4803 |             "type": "string",
4804 |             "description": "Date when the coupon becomes active",
4805 |             "example": "2025-04-30T18:30:00.000Z"
4806 |           },
4807 |           "endDate": {
4808 |             "type": "string",
4809 |             "description": "End date when the coupon expires",
4810 |             "example": "2025-05-30T18:30:00.000Z"
4811 |           },
4812 |           "applyToFuturePayments": {
4813 |             "type": "boolean",
4814 |             "description": "Indicates if the coupon applies to future recurring payments",
4815 |             "example": true
4816 |           },
4817 |           "applyToFuturePaymentsConfig": {
4818 |             "description": "Configuration for how the coupon applies to future payments",
4819 |             "allOf": [
4820 |               {
4821 |                 "$ref": "#/components/schemas/ApplyToFuturePaymentsConfigDto"
4822 |               }
4823 |             ]
4824 |           },
4825 |           "userId": {
4826 |             "type": "string",
4827 |             "description": "User ID associated with the coupon (if applicable)",
4828 |             "example": "q0m15dTLGeiGOXG123123"
4829 |           },
4830 |           "createdAt": {
4831 |             "type": "string",
4832 |             "description": "Creation timestamp",
4833 |             "example": "2025-04-09T18:49:22.026Z"
4834 |           },
4835 |           "updatedAt": {
4836 |             "type": "string",
4837 |             "description": "Last update timestamp",
4838 |             "example": "2025-04-09T18:49:22.026Z"
4839 |           },
4840 |           "traceId": {
4841 |             "type": "string",
4842 |             "description": "Unique identifier for tracing this API request",
4843 |             "example": "c667b18d-8f5e-44cf-a914"
4844 |           }
4845 |         },
4846 |         "required": [
4847 |           "_id",
4848 |           "usageCount",
4849 |           "limitPerCustomer",
4850 |           "altId",
4851 |           "altType",
4852 |           "name",
4853 |           "code",
4854 |           "discountType",
4855 |           "discountValue",
4856 |           "status",
4857 |           "startDate",
4858 |           "applyToFuturePayments",
4859 |           "applyToFuturePaymentsConfig",
4860 |           "createdAt",
4861 |           "updatedAt",
4862 |           "traceId"
4863 |         ]
4864 |       },
4865 |       "UpdateCouponParams": {
4866 |         "type": "object",
4867 |         "properties": {
4868 |           "altId": {
4869 |             "type": "string",
4870 |             "description": "Location Id",
4871 |             "example": "BQdAwxa0ky1iK2sstLGJ"
4872 |           },
4873 |           "altType": {
4874 |             "type": "string",
4875 |             "description": "Alt Type",
4876 |             "enum": [
4877 |               "location"
4878 |             ],
4879 |             "example": "location"
4880 |           },
4881 |           "name": {
4882 |             "type": "string",
4883 |             "description": "Coupon Name",
4884 |             "example": "New Year Sale"
4885 |           },
4886 |           "code": {
4887 |             "type": "string",
4888 |             "description": "Coupon Code",
4889 |             "example": "LEVELUPDAY2022"
4890 |           },
4891 |           "discountType": {
4892 |             "type": "string",
4893 |             "description": "Discount Type",
4894 |             "enum": [
4895 |               "percentage",
4896 |               "amount"
4897 |             ],
4898 |             "example": "amount"
4899 |           },
4900 |           "discountValue": {
4901 |             "type": "number",
4902 |             "description": "Discount Value",
4903 |             "example": 10
4904 |           },
4905 |           "startDate": {
4906 |             "type": "string",
4907 |             "description": "Start date in YYYY-MM-DDTHH:mm:ssZ format",
4908 |             "example": "2023-01-01T22:45:00.000Z"
4909 |           },
4910 |           "endDate": {
4911 |             "type": "string",
4912 |             "description": "End date in YYYY-MM-DDTHH:mm:ssZ format",
4913 |             "example": "2023-01-31T22:45:00.000Z"
4914 |           },
4915 |           "usageLimit": {
4916 |             "type": "number",
4917 |             "description": "Max number of times coupon can be used",
4918 |             "example": 10
4919 |           },
4920 |           "productIds": {
4921 |             "description": "Product Ids",
4922 |             "example": [
4923 |               "6241712be68f7a98102ba272"
4924 |             ],
4925 |             "type": "array",
4926 |             "items": {
4927 |               "type": "string"
4928 |             }
4929 |           },
4930 |           "applyToFuturePayments": {
4931 |             "type": "boolean",
4932 |             "example": true,
4933 |             "default": true,
4934 |             "description": "Is Coupon applicable on upcoming subscription transactions"
4935 |           },
4936 |           "applyToFuturePaymentsConfig": {
4937 |             "example": [
4938 |               {
4939 |                 "type": "fixed",
4940 |                 "duration": 5,
4941 |                 "durationType": "months"
4942 |               },
4943 |               {
4944 |                 "type": "forever"
4945 |               }
4946 |             ],
4947 |             "default": {
4948 |               "type": "forever"
4949 |             },
4950 |             "description": "If coupon is applicable on upcoming subscription transactions, how many months should it be applicable for a subscription",
4951 |             "allOf": [
4952 |               {
4953 |                 "$ref": "#/components/schemas/ApplyToFuturePaymentsConfig"
4954 |               }
4955 |             ]
4956 |           },
4957 |           "limitPerCustomer": {
4958 |             "type": "boolean",
4959 |             "example": true,
4960 |             "default": false,
4961 |             "description": "Limits whether a coupon can be redeemed only once per customer."
4962 |           },
4963 |           "id": {
4964 |             "type": "string",
4965 |             "description": "Coupon Id",
4966 |             "example": "6241712be68f7a98102ba272"
4967 |           }
4968 |         },
4969 |         "required": [
4970 |           "altId",
4971 |           "altType",
4972 |           "name",
4973 |           "code",
4974 |           "discountType",
4975 |           "discountValue",
4976 |           "startDate",
4977 |           "id"
4978 |         ]
4979 |       },
4980 |       "DeleteCouponParams": {
4981 |         "type": "object",
4982 |         "properties": {
4983 |           "altId": {
4984 |             "type": "string",
4985 |             "description": "Location Id",
4986 |             "example": "BQdAwxa0ky1iK2sstLGJ"
4987 |           },
4988 |           "altType": {
4989 |             "type": "string",
4990 |             "description": "Alt Type",
4991 |             "enum": [
4992 |               "location"
4993 |             ],
4994 |             "example": "location"
4995 |           },
4996 |           "id": {
4997 |             "type": "string",
4998 |             "description": "Coupon Id",
4999 |             "example": "6241712be68f7a98102ba272"
5000 |           }
5001 |         },
5002 |         "required": [
5003 |           "altId",
5004 |           "altType",
5005 |           "id"
5006 |         ]
5007 |       },
5008 |       "DeleteCouponResponseDto": {
5009 |         "type": "object",
5010 |         "properties": {
5011 |           "success": {
5012 |             "type": "boolean",
5013 |             "description": "Indicates whether the delete was successful",
5014 |             "example": true
5015 |           },
5016 |           "traceId": {
5017 |             "type": "string",
5018 |             "description": "Unique identifier for tracing this API request",
5019 |             "example": "c667b18d-8f5e-44cf-a914"
5020 |           }
5021 |         },
5022 |         "required": [
5023 |           "success",
5024 |           "traceId"
5025 |         ]
5026 |       },
5027 |       "CreateCustomProvidersDto": {
5028 |         "type": "object",
5029 |         "properties": {
5030 |           "name": {
5031 |             "type": "string",
5032 |             "description": "The name of the custom provider",
5033 |             "example": "Company Paypal Integration"
5034 |           },
5035 |           "description": {
5036 |             "type": "string",
5037 |             "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
5038 |             "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
5039 |           },
5040 |           "paymentsUrl": {
5041 |             "type": "string",
5042 |             "description": "This url will be loaded in iFrame to start a payment session.",
5043 |             "example": "https://testpayment.paypal.com"
5044 |           },
5045 |           "queryUrl": {
5046 |             "type": "string",
5047 |             "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
5048 |             "example": "https://testsubscription.paypal.com"
5049 |           },
5050 |           "imageUrl": {
5051 |             "type": "string",
5052 |             "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
5053 |             "example": "https://testsubscription.paypal.com"
5054 |           }
5055 |         },
5056 |         "required": [
5057 |           "name",
5058 |           "description",
5059 |           "paymentsUrl",
5060 |           "queryUrl",
5061 |           "imageUrl"
5062 |         ]
5063 |       },
5064 |       "CreateCustomProvidersResponseSchema": {
5065 |         "type": "object",
5066 |         "properties": {
5067 |           "name": {
5068 |             "type": "string",
5069 |             "description": "The name of the custom provider",
5070 |             "example": "Company Paypal Integration"
5071 |           },
5072 |           "description": {
5073 |             "type": "string",
5074 |             "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
5075 |             "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
5076 |           },
5077 |           "paymentsUrl": {
5078 |             "type": "string",
5079 |             "description": "This url will be loaded in iFrame to start a payment session.",
5080 |             "example": "https://testpayment.paypal.com"
5081 |           },
5082 |           "queryUrl": {
5083 |             "type": "string",
5084 |             "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
5085 |             "example": "https://testsubscription.paypal.com"
5086 |           },
5087 |           "imageUrl": {
5088 |             "type": "string",
5089 |             "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
5090 |             "example": "https://testsubscription.paypal.com"
5091 |           },
5092 |           "_id": {
5093 |             "type": "string",
5094 |             "description": "The unique identifier for the custom provider.",
5095 |             "example": "662a44ad19a2a44d3cd9d749"
5096 |           },
5097 |           "locationId": {
5098 |             "type": "string",
5099 |             "description": "Location id",
5100 |             "example": "Lk3nlfk4lxlelVEwcW"
5101 |           },
5102 |           "marketplaceAppId": {
5103 |             "type": "string",
5104 |             "description": "The application id of marketplace",
5105 |             "example": "65f0b217a05c774da7f1efa5"
5106 |           },
5107 |           "paymentProvider": {
5108 |             "type": "object",
5109 |             "description": "Payment provider details.",
5110 |             "example": "{ live: { liveMode: true }, test: { liveMode: false, apiKey: \"y5ZQxryRFXZHvUJZdLXXXXXX\", publishableKey: \"rzp_test_zPRoVMLOa0A9wo\" }}"
5111 |           },
5112 |           "deleted": {
5113 |             "type": "boolean",
5114 |             "description": "Whether the config is deleted or not. true represents config is deleted",
5115 |             "example": true
5116 |           },
5117 |           "createdAt": {
5118 |             "format": "date-time",
5119 |             "type": "string",
5120 |             "description": "The creation timestamp of the custom provider.",
5121 |             "example": "2023-11-20T10:23:36.515Z"
5122 |           },
5123 |           "updatedAt": {
5124 |             "format": "date-time",
5125 |             "type": "string",
5126 |             "description": "The last update timestamp of the custom provider.",
5127 |             "example": "2024-01-23T09:57:04.846Z"
5128 |           },
5129 |           "traceId": {
5130 |             "type": "string",
5131 |             "description": "Trace id of the custom provider.",
5132 |             "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
5133 |           }
5134 |         },
5135 |         "required": [
5136 |           "name",
5137 |           "description",
5138 |           "paymentsUrl",
5139 |           "queryUrl",
5140 |           "imageUrl",
5141 |           "_id",
5142 |           "locationId",
5143 |           "marketplaceAppId",
5144 |           "deleted",
5145 |           "createdAt",
5146 |           "updatedAt"
5147 |         ]
5148 |       },
5149 |       "DeleteCustomProvidersResponseSchema": {
5150 |         "type": "object",
5151 |         "properties": {
5152 |           "success": {
5153 |             "type": "boolean",
5154 |             "description": "Whether the custom provider config is disconnect or not. true represents config is disconnect",
5155 |             "example": "true"
5156 |           }
5157 |         },
5158 |         "required": [
5159 |           "success"
5160 |         ]
5161 |       },
5162 |       "GetCustomProvidersResponseSchema": {
5163 |         "type": "object",
5164 |         "properties": {
5165 |           "name": {
5166 |             "type": "string",
5167 |             "description": "The name of the custom provider",
5168 |             "example": "Company Paypal Integration"
5169 |           },
5170 |           "description": {
5171 |             "type": "string",
5172 |             "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
5173 |             "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
5174 |           },
5175 |           "paymentsUrl": {
5176 |             "type": "string",
5177 |             "description": "This url will be loaded in iFrame to start a payment session.",
5178 |             "example": "https://testpayment.paypal.com"
5179 |           },
5180 |           "queryUrl": {
5181 |             "type": "string",
5182 |             "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
5183 |             "example": "https://testsubscription.paypal.com"
5184 |           },
5185 |           "imageUrl": {
5186 |             "type": "string",
5187 |             "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
5188 |             "example": "https://testsubscription.paypal.com"
5189 |           },
5190 |           "_id": {
5191 |             "type": "string",
5192 |             "description": "The unique identifier for the custom provider.",
5193 |             "example": "662a44ad19a2a44d3cd9d749"
5194 |           },
5195 |           "locationId": {
5196 |             "type": "string",
5197 |             "description": "Location id",
5198 |             "example": "Lk3nlfk4lxlelVEwcW"
5199 |           },
5200 |           "marketplaceAppId": {
5201 |             "type": "string",
5202 |             "description": "The application id of marketplace",
5203 |             "example": "65f0b217a05c774da7f1efa5"
5204 |           },
5205 |           "paymentProvider": {
5206 |             "type": "object",
5207 |             "description": "Payment provider details.",
5208 |             "example": "{ live: { liveMode: true }, test: { liveMode: false, apiKey: \"y5ZQxryRFXZHvUJZdLXXXXXX\", publishableKey: \"rzp_test_zPRoVMLOa0A9wo\" }}"
5209 |           },
5210 |           "deleted": {
5211 |             "type": "boolean",
5212 |             "description": "Whether the config is deleted or not. true represents config is deleted",
5213 |             "example": true
5214 |           },
5215 |           "createdAt": {
5216 |             "format": "date-time",
5217 |             "type": "string",
5218 |             "description": "The creation timestamp of the custom provider.",
5219 |             "example": "2023-11-20T10:23:36.515Z"
5220 |           },
5221 |           "updatedAt": {
5222 |             "format": "date-time",
5223 |             "type": "string",
5224 |             "description": "The last update timestamp of the custom provider.",
5225 |             "example": "2024-01-23T09:57:04.846Z"
5226 |           },
5227 |           "traceId": {
5228 |             "type": "string",
5229 |             "description": "Trace id of the custom provider.",
5230 |             "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
5231 |           }
5232 |         },
5233 |         "required": [
5234 |           "name",
5235 |           "description",
5236 |           "paymentsUrl",
5237 |           "queryUrl",
5238 |           "imageUrl",
5239 |           "_id",
5240 |           "locationId",
5241 |           "marketplaceAppId",
5242 |           "deleted",
5243 |           "createdAt",
5244 |           "updatedAt"
5245 |         ]
5246 |       },
5247 |       "CustomProviderKeys": {
5248 |         "type": "object",
5249 |         "properties": {
5250 |           "apiKey": {
5251 |             "type": "string",
5252 |             "description": "Api-key for custom payment provider config",
5253 |             "example": "y5ZQxryRFXZHvUJZdLeXXXXX"
5254 |           },
5255 |           "publishableKey": {
5256 |             "type": "string",
5257 |             "description": "Publishable-key for custom payment provider config",
5258 |             "example": "rzp_test_zPRoVMLOa0XXXX"
5259 |           }
5260 |         },
5261 |         "required": [
5262 |           "apiKey",
5263 |           "publishableKey"
5264 |         ]
5265 |       },
5266 |       "ConnectCustomProvidersConfigDto": {
5267 |         "type": "object",
5268 |         "properties": {
5269 |           "live": {
5270 |             "description": "Live config containing api-key and publishable key for live payments",
5271 |             "allOf": [
5272 |               {
5273 |                 "$ref": "#/components/schemas/CustomProviderKeys"
5274 |               }
5275 |             ]
5276 |           },
5277 |           "test": {
5278 |             "description": "Test config containing api-key and publishable-key for test payments",
5279 |             "allOf": [
5280 |               {
5281 |                 "$ref": "#/components/schemas/CustomProviderKeys"
5282 |               }
5283 |             ]
5284 |           }
5285 |         },
5286 |         "required": [
5287 |           "live",
5288 |           "test"
5289 |         ]
5290 |       },
5291 |       "ConnectCustomProvidersResponseSchema": {
5292 |         "type": "object",
5293 |         "properties": {
5294 |           "name": {
5295 |             "type": "string",
5296 |             "description": "The name of the custom provider",
5297 |             "example": "Company Paypal Integration"
5298 |           },
5299 |           "description": {
5300 |             "type": "string",
5301 |             "description": "Description of payment gateway. Shown on the payments integrations page as subtext",
5302 |             "example": "This payment gateway supports payments in India via UPI, Net banking, cards and wallets."
5303 |           },
5304 |           "paymentsUrl": {
5305 |             "type": "string",
5306 |             "description": "This url will be loaded in iFrame to start a payment session.",
5307 |             "example": "https://testpayment.paypal.com"
5308 |           },
5309 |           "queryUrl": {
5310 |             "type": "string",
5311 |             "description": "The url used for querying payments related events. Ex. verify, refund, subscription etc.",
5312 |             "example": "https://testsubscription.paypal.com"
5313 |           },
5314 |           "imageUrl": {
5315 |             "type": "string",
5316 |             "description": "Public image url for logo of the payment gateway displayed on the payments integrations page.",
5317 |             "example": "https://testsubscription.paypal.com"
5318 |           },
5319 |           "_id": {
5320 |             "type": "string",
5321 |             "description": "The unique identifier for the custom provider.",
5322 |             "example": "662a44ad19a2a44d3cd9d749"
5323 |           },
5324 |           "locationId": {
5325 |             "type": "string",
5326 |             "description": "Location id",
5327 |             "example": "Lk3nlfk4lxlelVEwcW"
5328 |           },
5329 |           "marketplaceAppId": {
5330 |             "type": "string",
5331 |             "description": "The application id of marketplace",
5332 |             "example": "65f0b217a05c774da7f1efa5"
5333 |           },
5334 |           "paymentProvider": {
5335 |             "type": "object",
5336 |             "description": "Payment provider details.",
5337 |             "example": "{ live: { liveMode: true }, test: { liveMode: false, apiKey: \"y5ZQxryRFXZHvUJZdLXXXXXX\", publishableKey: \"rzp_test_zPRoVMLOa0A9wo\" }}"
5338 |           },
5339 |           "deleted": {
5340 |             "type": "boolean",
5341 |             "description": "Whether the config is deleted or not. true represents config is deleted",
5342 |             "example": true
5343 |           },
5344 |           "createdAt": {
5345 |             "format": "date-time",
5346 |             "type": "string",
5347 |             "description": "The creation timestamp of the custom provider.",
5348 |             "example": "2023-11-20T10:23:36.515Z"
5349 |           },
5350 |           "updatedAt": {
5351 |             "format": "date-time",
5352 |             "type": "string",
5353 |             "description": "The last update timestamp of the custom provider.",
5354 |             "example": "2024-01-23T09:57:04.846Z"
5355 |           },
5356 |           "traceId": {
5357 |             "type": "string",
5358 |             "description": "Trace id of the custom provider.",
5359 |             "example": "302d2cf4-1ba0-4bf5-bc3b-f8fa76fda58a"
5360 |           }
5361 |         },
5362 |         "required": [
5363 |           "name",
5364 |           "description",
5365 |           "paymentsUrl",
5366 |           "queryUrl",
5367 |           "imageUrl",
5368 |           "_id",
5369 |           "locationId",
5370 |           "marketplaceAppId",
5371 |           "deleted",
5372 |           "createdAt",
5373 |           "updatedAt"
5374 |         ]
5375 |       },
5376 |       "DeleteCustomProvidersConfigDto": {
5377 |         "type": "object",
5378 |         "properties": {
5379 |           "liveMode": {
5380 |             "type": "boolean",
5381 |             "description": "Whether the config is for test mode or live mode. true represents config is for live payments",
5382 |             "example": "true"
5383 |           }
5384 |         },
5385 |         "required": [
5386 |           "liveMode"
5387 |         ]
5388 |       },
5389 |       "DisconnectCustomProvidersResponseSchema": {
5390 |         "type": "object",
5391 |         "properties": {
5392 |           "success": {
5393 |             "type": "boolean",
5394 |             "description": "Whether the custom provider config is disconnect or not. true represents config is disconnect",
5395 |             "example": "true"
5396 |           }
5397 |         },
5398 |         "required": [
5399 |           "success"
5400 |         ]
5401 |       }
5402 |     }
5403 |   }
5404 | }


--------------------------------------------------------------------------------
/products/products.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/products/{productId}/price": {
   5 |       "post": {
   6 |         "operationId": "create-price-for-product",
   7 |         "summary": "Create Price for a Product",
   8 |         "description": "The \"Create Price for a Product\" API allows adding a new price associated with a specific product to the system. Use this endpoint to create a price with the specified details for a particular product. Ensure that the required information is provided in the request payload.",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "productId",
  34 |             "required": true,
  35 |             "in": "path",
  36 |             "description": "ID of the product that needs to be used",
  37 |             "example": "6578278e879ad2646715ba9c",
  38 |             "schema": {
  39 |               "type": "string"
  40 |             }
  41 |           }
  42 |         ],
  43 |         "requestBody": {
  44 |           "required": true,
  45 |           "content": {
  46 |             "application/json": {
  47 |               "schema": {
  48 |                 "$ref": "#/components/schemas/CreatePriceDto"
  49 |               }
  50 |             }
  51 |           }
  52 |         },
  53 |         "responses": {
  54 |           "200": {
  55 |             "description": "Successful response",
  56 |             "content": {
  57 |               "application/json": {
  58 |                 "schema": {
  59 |                   "$ref": "#/components/schemas/CreatePriceResponseDto"
  60 |                 }
  61 |               }
  62 |             }
  63 |           },
  64 |           "400": {
  65 |             "description": "Bad Request",
  66 |             "content": {
  67 |               "application/json": {
  68 |                 "schema": {
  69 |                   "$ref": "#/components/schemas/BadRequestDTO"
  70 |                 }
  71 |               }
  72 |             }
  73 |           },
  74 |           "401": {
  75 |             "description": "Unauthorized",
  76 |             "content": {
  77 |               "application/json": {
  78 |                 "schema": {
  79 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  80 |                 }
  81 |               }
  82 |             }
  83 |           },
  84 |           "422": {
  85 |             "description": "Unprocessable Entity",
  86 |             "content": {
  87 |               "application/json": {
  88 |                 "schema": {
  89 |                   "$ref": "#/components/schemas/UnprocessableDTO"
  90 |                 }
  91 |               }
  92 |             }
  93 |           }
  94 |         },
  95 |         "tags": [
  96 |           "Prices"
  97 |         ],
  98 |         "security": [
  99 |           {
 100 |             "Location-Access": []
 101 |           },
 102 |           {
 103 |             "Agency-Access": []
 104 |           }
 105 |         ]
 106 |       },
 107 |       "get": {
 108 |         "operationId": "list-prices-for-product",
 109 |         "summary": "List Prices for a Product",
 110 |         "description": "The \"List Prices for a Product\" API allows retrieving a paginated list of prices associated with a specific product. Customize your results by filtering prices or paginate through the list using the provided query parameters.",
 111 |         "parameters": [
 112 |           {
 113 |             "name": "Authorization",
 114 |             "in": "header",
 115 |             "description": "Access Token",
 116 |             "required": true,
 117 |             "schema": {
 118 |               "type": "string",
 119 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 120 |             }
 121 |           },
 122 |           {
 123 |             "name": "Version",
 124 |             "in": "header",
 125 |             "description": "API Version",
 126 |             "required": true,
 127 |             "schema": {
 128 |               "type": "string",
 129 |               "enum": [
 130 |                 "2021-07-28"
 131 |               ]
 132 |             }
 133 |           },
 134 |           {
 135 |             "name": "productId",
 136 |             "required": true,
 137 |             "in": "path",
 138 |             "description": "ID of the product that needs to be used",
 139 |             "example": "6578278e879ad2646715ba9c",
 140 |             "schema": {
 141 |               "type": "string"
 142 |             }
 143 |           },
 144 |           {
 145 |             "name": "limit",
 146 |             "required": false,
 147 |             "in": "query",
 148 |             "example": 20,
 149 |             "description": "The maximum number of items to be included in a single page of results",
 150 |             "schema": {
 151 |               "default": 0,
 152 |               "type": "number"
 153 |             }
 154 |           },
 155 |           {
 156 |             "name": "offset",
 157 |             "required": false,
 158 |             "in": "query",
 159 |             "example": 0,
 160 |             "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
 161 |             "schema": {
 162 |               "default": 0,
 163 |               "type": "number"
 164 |             }
 165 |           },
 166 |           {
 167 |             "name": "locationId",
 168 |             "required": true,
 169 |             "in": "query",
 170 |             "description": "The unique identifier for the location.",
 171 |             "example": "3SwdhCsvxI8Au3KsPJt6",
 172 |             "schema": {
 173 |               "type": "string"
 174 |             }
 175 |           },
 176 |           {
 177 |             "name": "ids",
 178 |             "required": false,
 179 |             "in": "query",
 180 |             "description": "To filter the response only with the given price ids, Please provide with comma separated",
 181 |             "example": "6241712be68f7a98102ba272,632027d51f7876cd3020213d",
 182 |             "schema": {
 183 |               "type": "string"
 184 |             }
 185 |           }
 186 |         ],
 187 |         "responses": {
 188 |           "200": {
 189 |             "description": "Successful response",
 190 |             "content": {
 191 |               "application/json": {
 192 |                 "schema": {
 193 |                   "$ref": "#/components/schemas/ListPricesResponseDto"
 194 |                 }
 195 |               }
 196 |             }
 197 |           },
 198 |           "400": {
 199 |             "description": "Bad Request",
 200 |             "content": {
 201 |               "application/json": {
 202 |                 "schema": {
 203 |                   "$ref": "#/components/schemas/BadRequestDTO"
 204 |                 }
 205 |               }
 206 |             }
 207 |           },
 208 |           "401": {
 209 |             "description": "Unauthorized",
 210 |             "content": {
 211 |               "application/json": {
 212 |                 "schema": {
 213 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 214 |                 }
 215 |               }
 216 |             }
 217 |           },
 218 |           "422": {
 219 |             "description": "Unprocessable Entity",
 220 |             "content": {
 221 |               "application/json": {
 222 |                 "schema": {
 223 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 224 |                 }
 225 |               }
 226 |             }
 227 |           }
 228 |         },
 229 |         "tags": [
 230 |           "Prices"
 231 |         ],
 232 |         "security": [
 233 |           {
 234 |             "Location-Access": []
 235 |           },
 236 |           {
 237 |             "Agency-Access": []
 238 |           }
 239 |         ]
 240 |       }
 241 |     },
 242 |     "/products/{productId}/price/{priceId}": {
 243 |       "get": {
 244 |         "operationId": "get-price-by-id-for-product",
 245 |         "summary": "Get Price by ID for a Product",
 246 |         "description": "The \"Get Price by ID for a Product\" API allows retrieving information for a specific price associated with a particular product using its unique identifier. Use this endpoint to fetch details for a single price based on the provided price ID and product ID.",
 247 |         "parameters": [
 248 |           {
 249 |             "name": "Authorization",
 250 |             "in": "header",
 251 |             "description": "Access Token",
 252 |             "required": true,
 253 |             "schema": {
 254 |               "type": "string",
 255 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 256 |             }
 257 |           },
 258 |           {
 259 |             "name": "Version",
 260 |             "in": "header",
 261 |             "description": "API Version",
 262 |             "required": true,
 263 |             "schema": {
 264 |               "type": "string",
 265 |               "enum": [
 266 |                 "2021-07-28"
 267 |               ]
 268 |             }
 269 |           },
 270 |           {
 271 |             "name": "productId",
 272 |             "required": true,
 273 |             "in": "path",
 274 |             "description": "ID of the product that needs to be used",
 275 |             "example": "6578278e879ad2646715ba9c",
 276 |             "schema": {
 277 |               "type": "string"
 278 |             }
 279 |           },
 280 |           {
 281 |             "name": "priceId",
 282 |             "required": true,
 283 |             "in": "path",
 284 |             "description": "ID of the price that needs to be returned",
 285 |             "example": "6578278e879ad2646715ba9c",
 286 |             "schema": {
 287 |               "type": "string"
 288 |             }
 289 |           },
 290 |           {
 291 |             "name": "locationId",
 292 |             "required": true,
 293 |             "in": "query",
 294 |             "description": "location Id",
 295 |             "example": "6578278e879ad2646715ba9c",
 296 |             "schema": {
 297 |               "type": "string"
 298 |             }
 299 |           }
 300 |         ],
 301 |         "responses": {
 302 |           "200": {
 303 |             "description": "Successful response",
 304 |             "content": {
 305 |               "application/json": {
 306 |                 "schema": {
 307 |                   "$ref": "#/components/schemas/GetPriceResponseDto"
 308 |                 }
 309 |               }
 310 |             }
 311 |           },
 312 |           "400": {
 313 |             "description": "Bad Request",
 314 |             "content": {
 315 |               "application/json": {
 316 |                 "schema": {
 317 |                   "$ref": "#/components/schemas/BadRequestDTO"
 318 |                 }
 319 |               }
 320 |             }
 321 |           },
 322 |           "401": {
 323 |             "description": "Unauthorized",
 324 |             "content": {
 325 |               "application/json": {
 326 |                 "schema": {
 327 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 328 |                 }
 329 |               }
 330 |             }
 331 |           },
 332 |           "422": {
 333 |             "description": "Unprocessable Entity",
 334 |             "content": {
 335 |               "application/json": {
 336 |                 "schema": {
 337 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 338 |                 }
 339 |               }
 340 |             }
 341 |           }
 342 |         },
 343 |         "tags": [
 344 |           "Prices"
 345 |         ],
 346 |         "security": [
 347 |           {
 348 |             "Location-Access": []
 349 |           },
 350 |           {
 351 |             "Agency-Access": []
 352 |           }
 353 |         ]
 354 |       },
 355 |       "put": {
 356 |         "operationId": "update-price-by-id-for-product",
 357 |         "summary": "Update Price by ID for a Product",
 358 |         "description": "The \"Update Price by ID for a Product\" API allows modifying information for a specific price associated with a particular product using its unique identifier. Use this endpoint to update details for a single price based on the provided price ID and product ID.",
 359 |         "parameters": [
 360 |           {
 361 |             "name": "Authorization",
 362 |             "in": "header",
 363 |             "description": "Access Token",
 364 |             "required": true,
 365 |             "schema": {
 366 |               "type": "string",
 367 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 368 |             }
 369 |           },
 370 |           {
 371 |             "name": "Version",
 372 |             "in": "header",
 373 |             "description": "API Version",
 374 |             "required": true,
 375 |             "schema": {
 376 |               "type": "string",
 377 |               "enum": [
 378 |                 "2021-07-28"
 379 |               ]
 380 |             }
 381 |           },
 382 |           {
 383 |             "name": "productId",
 384 |             "required": true,
 385 |             "in": "path",
 386 |             "description": "ID of the product that needs to be used",
 387 |             "example": "6578278e879ad2646715ba9c",
 388 |             "schema": {
 389 |               "type": "string"
 390 |             }
 391 |           },
 392 |           {
 393 |             "name": "priceId",
 394 |             "required": true,
 395 |             "in": "path",
 396 |             "description": "ID of the price that needs to be returned",
 397 |             "example": "6578278e879ad2646715ba9c",
 398 |             "schema": {
 399 |               "type": "string"
 400 |             }
 401 |           }
 402 |         ],
 403 |         "requestBody": {
 404 |           "required": true,
 405 |           "content": {
 406 |             "application/json": {
 407 |               "schema": {
 408 |                 "$ref": "#/components/schemas/UpdatePriceDto"
 409 |               }
 410 |             }
 411 |           }
 412 |         },
 413 |         "responses": {
 414 |           "200": {
 415 |             "description": "Successful response",
 416 |             "content": {
 417 |               "application/json": {
 418 |                 "schema": {
 419 |                   "$ref": "#/components/schemas/UpdatePriceResponseDto"
 420 |                 }
 421 |               }
 422 |             }
 423 |           },
 424 |           "400": {
 425 |             "description": "Bad Request",
 426 |             "content": {
 427 |               "application/json": {
 428 |                 "schema": {
 429 |                   "$ref": "#/components/schemas/BadRequestDTO"
 430 |                 }
 431 |               }
 432 |             }
 433 |           },
 434 |           "401": {
 435 |             "description": "Unauthorized",
 436 |             "content": {
 437 |               "application/json": {
 438 |                 "schema": {
 439 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 440 |                 }
 441 |               }
 442 |             }
 443 |           },
 444 |           "422": {
 445 |             "description": "Unprocessable Entity",
 446 |             "content": {
 447 |               "application/json": {
 448 |                 "schema": {
 449 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 450 |                 }
 451 |               }
 452 |             }
 453 |           }
 454 |         },
 455 |         "tags": [
 456 |           "Prices"
 457 |         ],
 458 |         "security": [
 459 |           {
 460 |             "Location-Access": []
 461 |           },
 462 |           {
 463 |             "Agency-Access": []
 464 |           }
 465 |         ]
 466 |       },
 467 |       "delete": {
 468 |         "operationId": "delete-price-by-id-for-product",
 469 |         "summary": "Delete Price by ID for a Product",
 470 |         "description": "The \"Delete Price by ID for a Product\" API allows deleting a specific price associated with a particular product using its unique identifier. Use this endpoint to remove a price from the system.",
 471 |         "parameters": [
 472 |           {
 473 |             "name": "Authorization",
 474 |             "in": "header",
 475 |             "description": "Access Token",
 476 |             "required": true,
 477 |             "schema": {
 478 |               "type": "string",
 479 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 480 |             }
 481 |           },
 482 |           {
 483 |             "name": "Version",
 484 |             "in": "header",
 485 |             "description": "API Version",
 486 |             "required": true,
 487 |             "schema": {
 488 |               "type": "string",
 489 |               "enum": [
 490 |                 "2021-07-28"
 491 |               ]
 492 |             }
 493 |           },
 494 |           {
 495 |             "name": "productId",
 496 |             "required": true,
 497 |             "in": "path",
 498 |             "description": "ID of the product that needs to be used",
 499 |             "example": "6578278e879ad2646715ba9c",
 500 |             "schema": {
 501 |               "type": "string"
 502 |             }
 503 |           },
 504 |           {
 505 |             "name": "priceId",
 506 |             "required": true,
 507 |             "in": "path",
 508 |             "description": "ID of the price that needs to be returned",
 509 |             "example": "6578278e879ad2646715ba9c",
 510 |             "schema": {
 511 |               "type": "string"
 512 |             }
 513 |           },
 514 |           {
 515 |             "name": "locationId",
 516 |             "required": true,
 517 |             "in": "query",
 518 |             "description": "location Id",
 519 |             "example": "6578278e879ad2646715ba9c",
 520 |             "schema": {
 521 |               "type": "string"
 522 |             }
 523 |           }
 524 |         ],
 525 |         "responses": {
 526 |           "200": {
 527 |             "description": "Successful response",
 528 |             "content": {
 529 |               "application/json": {
 530 |                 "schema": {
 531 |                   "$ref": "#/components/schemas/DeletePriceResponseDto"
 532 |                 }
 533 |               }
 534 |             }
 535 |           },
 536 |           "400": {
 537 |             "description": "Bad Request",
 538 |             "content": {
 539 |               "application/json": {
 540 |                 "schema": {
 541 |                   "$ref": "#/components/schemas/BadRequestDTO"
 542 |                 }
 543 |               }
 544 |             }
 545 |           },
 546 |           "401": {
 547 |             "description": "Unauthorized",
 548 |             "content": {
 549 |               "application/json": {
 550 |                 "schema": {
 551 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 552 |                 }
 553 |               }
 554 |             }
 555 |           },
 556 |           "422": {
 557 |             "description": "Unprocessable Entity",
 558 |             "content": {
 559 |               "application/json": {
 560 |                 "schema": {
 561 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 562 |                 }
 563 |               }
 564 |             }
 565 |           }
 566 |         },
 567 |         "tags": [
 568 |           "Prices"
 569 |         ],
 570 |         "security": [
 571 |           {
 572 |             "Location-Access": []
 573 |           },
 574 |           {
 575 |             "Agency-Access": []
 576 |           }
 577 |         ]
 578 |       }
 579 |     },
 580 |     "/products/{productId}": {
 581 |       "get": {
 582 |         "operationId": "get-product-by-id",
 583 |         "summary": "Get Product by ID",
 584 |         "description": "The \"Get Product by ID\" API allows to retrieve information for a specific product using its unique identifier. Use this endpoint to fetch details for a single product based on the provided product ID.",
 585 |         "parameters": [
 586 |           {
 587 |             "name": "Authorization",
 588 |             "in": "header",
 589 |             "description": "Access Token",
 590 |             "required": true,
 591 |             "schema": {
 592 |               "type": "string",
 593 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 594 |             }
 595 |           },
 596 |           {
 597 |             "name": "Version",
 598 |             "in": "header",
 599 |             "description": "API Version",
 600 |             "required": true,
 601 |             "schema": {
 602 |               "type": "string",
 603 |               "enum": [
 604 |                 "2021-07-28"
 605 |               ]
 606 |             }
 607 |           },
 608 |           {
 609 |             "name": "productId",
 610 |             "required": true,
 611 |             "in": "path",
 612 |             "description": "ID of the product that needs to be returned",
 613 |             "example": "6578278e879ad2646715ba9c",
 614 |             "schema": {
 615 |               "type": "string"
 616 |             }
 617 |           },
 618 |           {
 619 |             "name": "locationId",
 620 |             "required": true,
 621 |             "in": "query",
 622 |             "description": "location Id",
 623 |             "example": "6578278e879ad2646715ba9c",
 624 |             "schema": {
 625 |               "type": "string"
 626 |             }
 627 |           }
 628 |         ],
 629 |         "responses": {
 630 |           "200": {
 631 |             "description": "Successful response",
 632 |             "content": {
 633 |               "application/json": {
 634 |                 "schema": {
 635 |                   "$ref": "#/components/schemas/GetProductResponseDto"
 636 |                 }
 637 |               }
 638 |             }
 639 |           },
 640 |           "400": {
 641 |             "description": "Product not found",
 642 |             "content": {
 643 |               "application/json": {
 644 |                 "schema": {
 645 |                   "$ref": "#/components/schemas/BadRequestDTO"
 646 |                 }
 647 |               }
 648 |             }
 649 |           },
 650 |           "401": {
 651 |             "description": "Unauthorized",
 652 |             "content": {
 653 |               "application/json": {
 654 |                 "schema": {
 655 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 656 |                 }
 657 |               }
 658 |             }
 659 |           },
 660 |           "422": {
 661 |             "description": "Unprocessable Entity",
 662 |             "content": {
 663 |               "application/json": {
 664 |                 "schema": {
 665 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 666 |                 }
 667 |               }
 668 |             }
 669 |           }
 670 |         },
 671 |         "tags": [
 672 |           "Products"
 673 |         ],
 674 |         "security": [
 675 |           {
 676 |             "Location-Access": []
 677 |           },
 678 |           {
 679 |             "Agency-Access": []
 680 |           }
 681 |         ]
 682 |       },
 683 |       "delete": {
 684 |         "operationId": "delete-product-by-id",
 685 |         "summary": "Delete Product by ID",
 686 |         "description": "The \"Delete Product by ID\" API allows deleting a specific product using its unique identifier. Use this endpoint to remove a product from the system.",
 687 |         "parameters": [
 688 |           {
 689 |             "name": "Authorization",
 690 |             "in": "header",
 691 |             "description": "Access Token",
 692 |             "required": true,
 693 |             "schema": {
 694 |               "type": "string",
 695 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 696 |             }
 697 |           },
 698 |           {
 699 |             "name": "Version",
 700 |             "in": "header",
 701 |             "description": "API Version",
 702 |             "required": true,
 703 |             "schema": {
 704 |               "type": "string",
 705 |               "enum": [
 706 |                 "2021-07-28"
 707 |               ]
 708 |             }
 709 |           },
 710 |           {
 711 |             "name": "productId",
 712 |             "required": true,
 713 |             "in": "path",
 714 |             "description": "ID of the product that needs to be returned",
 715 |             "example": "6578278e879ad2646715ba9c",
 716 |             "schema": {
 717 |               "type": "string"
 718 |             }
 719 |           },
 720 |           {
 721 |             "name": "locationId",
 722 |             "required": true,
 723 |             "in": "query",
 724 |             "description": "location Id",
 725 |             "example": "6578278e879ad2646715ba9c",
 726 |             "schema": {
 727 |               "type": "string"
 728 |             }
 729 |           }
 730 |         ],
 731 |         "responses": {
 732 |           "200": {
 733 |             "description": "Successful response",
 734 |             "content": {
 735 |               "application/json": {
 736 |                 "schema": {
 737 |                   "$ref": "#/components/schemas/DeleteProductResponseDto"
 738 |                 }
 739 |               }
 740 |             }
 741 |           },
 742 |           "400": {
 743 |             "description": "Bad Request",
 744 |             "content": {
 745 |               "application/json": {
 746 |                 "schema": {
 747 |                   "$ref": "#/components/schemas/BadRequestDTO"
 748 |                 }
 749 |               }
 750 |             }
 751 |           },
 752 |           "401": {
 753 |             "description": "Unauthorized",
 754 |             "content": {
 755 |               "application/json": {
 756 |                 "schema": {
 757 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 758 |                 }
 759 |               }
 760 |             }
 761 |           },
 762 |           "422": {
 763 |             "description": "Unprocessable Entity",
 764 |             "content": {
 765 |               "application/json": {
 766 |                 "schema": {
 767 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 768 |                 }
 769 |               }
 770 |             }
 771 |           }
 772 |         },
 773 |         "tags": [
 774 |           "Products"
 775 |         ],
 776 |         "security": [
 777 |           {
 778 |             "Location-Access": []
 779 |           },
 780 |           {
 781 |             "Agency-Access": []
 782 |           }
 783 |         ]
 784 |       },
 785 |       "put": {
 786 |         "operationId": "update-product-by-id",
 787 |         "summary": "Update Product by ID",
 788 |         "description": "The \"Update Product by ID\" API allows modifying information for a specific product using its unique identifier. Use this endpoint to update details for a single product based on the provided product ID.",
 789 |         "parameters": [
 790 |           {
 791 |             "name": "Authorization",
 792 |             "in": "header",
 793 |             "description": "Access Token",
 794 |             "required": true,
 795 |             "schema": {
 796 |               "type": "string",
 797 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 798 |             }
 799 |           },
 800 |           {
 801 |             "name": "Version",
 802 |             "in": "header",
 803 |             "description": "API Version",
 804 |             "required": true,
 805 |             "schema": {
 806 |               "type": "string",
 807 |               "enum": [
 808 |                 "2021-07-28"
 809 |               ]
 810 |             }
 811 |           },
 812 |           {
 813 |             "name": "productId",
 814 |             "required": true,
 815 |             "in": "path",
 816 |             "description": "ID of the product that needs to be returned",
 817 |             "example": "6578278e879ad2646715ba9c",
 818 |             "schema": {
 819 |               "type": "string"
 820 |             }
 821 |           }
 822 |         ],
 823 |         "requestBody": {
 824 |           "required": true,
 825 |           "content": {
 826 |             "application/json": {
 827 |               "schema": {
 828 |                 "$ref": "#/components/schemas/UpdateProductDto"
 829 |               }
 830 |             }
 831 |           }
 832 |         },
 833 |         "responses": {
 834 |           "200": {
 835 |             "description": "Successful response",
 836 |             "content": {
 837 |               "application/json": {
 838 |                 "schema": {
 839 |                   "$ref": "#/components/schemas/UpdateProductResponseDto"
 840 |                 }
 841 |               }
 842 |             }
 843 |           },
 844 |           "400": {
 845 |             "description": "Bad Request",
 846 |             "content": {
 847 |               "application/json": {
 848 |                 "schema": {
 849 |                   "$ref": "#/components/schemas/BadRequestDTO"
 850 |                 }
 851 |               }
 852 |             }
 853 |           },
 854 |           "401": {
 855 |             "description": "Unauthorized",
 856 |             "content": {
 857 |               "application/json": {
 858 |                 "schema": {
 859 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 860 |                 }
 861 |               }
 862 |             }
 863 |           },
 864 |           "422": {
 865 |             "description": "Unprocessable Entity",
 866 |             "content": {
 867 |               "application/json": {
 868 |                 "schema": {
 869 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 870 |                 }
 871 |               }
 872 |             }
 873 |           }
 874 |         },
 875 |         "tags": [
 876 |           "Products"
 877 |         ],
 878 |         "security": [
 879 |           {
 880 |             "Location-Access": []
 881 |           },
 882 |           {
 883 |             "Agency-Access": []
 884 |           }
 885 |         ]
 886 |       }
 887 |     },
 888 |     "/products/": {
 889 |       "post": {
 890 |         "operationId": "create-product",
 891 |         "summary": "Create Product",
 892 |         "description": "The \"Create Product\" API allows adding a new product to the system. Use this endpoint to create a product with the specified details. Ensure that the required information is provided in the request payload.",
 893 |         "parameters": [
 894 |           {
 895 |             "name": "Authorization",
 896 |             "in": "header",
 897 |             "description": "Access Token",
 898 |             "required": true,
 899 |             "schema": {
 900 |               "type": "string",
 901 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 902 |             }
 903 |           },
 904 |           {
 905 |             "name": "Version",
 906 |             "in": "header",
 907 |             "description": "API Version",
 908 |             "required": true,
 909 |             "schema": {
 910 |               "type": "string",
 911 |               "enum": [
 912 |                 "2021-07-28"
 913 |               ]
 914 |             }
 915 |           }
 916 |         ],
 917 |         "requestBody": {
 918 |           "required": true,
 919 |           "content": {
 920 |             "application/json": {
 921 |               "schema": {
 922 |                 "$ref": "#/components/schemas/CreateProductDto"
 923 |               }
 924 |             }
 925 |           }
 926 |         },
 927 |         "responses": {
 928 |           "200": {
 929 |             "description": "Successful response",
 930 |             "content": {
 931 |               "application/json": {
 932 |                 "schema": {
 933 |                   "$ref": "#/components/schemas/CreateProductResponseDto"
 934 |                 }
 935 |               }
 936 |             }
 937 |           },
 938 |           "400": {
 939 |             "description": "Bad Request",
 940 |             "content": {
 941 |               "application/json": {
 942 |                 "schema": {
 943 |                   "$ref": "#/components/schemas/BadRequestDTO"
 944 |                 }
 945 |               }
 946 |             }
 947 |           },
 948 |           "401": {
 949 |             "description": "Unauthorized",
 950 |             "content": {
 951 |               "application/json": {
 952 |                 "schema": {
 953 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 954 |                 }
 955 |               }
 956 |             }
 957 |           },
 958 |           "422": {
 959 |             "description": "Unprocessable Entity",
 960 |             "content": {
 961 |               "application/json": {
 962 |                 "schema": {
 963 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 964 |                 }
 965 |               }
 966 |             }
 967 |           }
 968 |         },
 969 |         "tags": [
 970 |           "Products"
 971 |         ],
 972 |         "security": [
 973 |           {
 974 |             "Location-Access": []
 975 |           },
 976 |           {
 977 |             "Agency-Access": []
 978 |           }
 979 |         ]
 980 |       },
 981 |       "get": {
 982 |         "operationId": "list-invoices",
 983 |         "summary": "List Products",
 984 |         "description": "The \"List Products\" API allows to retrieve a paginated list of products. Customize your results by filtering products based on name or paginate through the list using the provided query parameters. This endpoint provides a straightforward way to explore and retrieve product information.",
 985 |         "parameters": [
 986 |           {
 987 |             "name": "Authorization",
 988 |             "in": "header",
 989 |             "description": "Access Token",
 990 |             "required": true,
 991 |             "schema": {
 992 |               "type": "string",
 993 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 994 |             }
 995 |           },
 996 |           {
 997 |             "name": "Version",
 998 |             "in": "header",
 999 |             "description": "API Version",
1000 |             "required": true,
1001 |             "schema": {
1002 |               "type": "string",
1003 |               "enum": [
1004 |                 "2021-07-28"
1005 |               ]
1006 |             }
1007 |           },
1008 |           {
1009 |             "name": "limit",
1010 |             "required": false,
1011 |             "in": "query",
1012 |             "example": 20,
1013 |             "description": "The maximum number of items to be included in a single page of results",
1014 |             "schema": {
1015 |               "default": 0,
1016 |               "type": "number"
1017 |             }
1018 |           },
1019 |           {
1020 |             "name": "offset",
1021 |             "required": false,
1022 |             "in": "query",
1023 |             "example": 0,
1024 |             "description": "The starting index of the page, indicating the position from which the results should be retrieved.",
1025 |             "schema": {
1026 |               "default": 0,
1027 |               "type": "number"
1028 |             }
1029 |           },
1030 |           {
1031 |             "name": "locationId",
1032 |             "required": true,
1033 |             "in": "query",
1034 |             "example": "3SwdhCu3svxI8AKsPJt6",
1035 |             "description": "LocationId is the id of the sub-account",
1036 |             "schema": {
1037 |               "type": "string"
1038 |             }
1039 |           },
1040 |           {
1041 |             "name": "search",
1042 |             "required": false,
1043 |             "in": "query",
1044 |             "example": "Awesome product",
1045 |             "description": "The name of the product for searching.",
1046 |             "schema": {
1047 |               "type": "string"
1048 |             }
1049 |           }
1050 |         ],
1051 |         "responses": {
1052 |           "200": {
1053 |             "description": "Successful response",
1054 |             "content": {
1055 |               "application/json": {
1056 |                 "schema": {
1057 |                   "$ref": "#/components/schemas/ListProductsResponseDto"
1058 |                 }
1059 |               }
1060 |             }
1061 |           },
1062 |           "400": {
1063 |             "description": "Bad Request",
1064 |             "content": {
1065 |               "application/json": {
1066 |                 "schema": {
1067 |                   "$ref": "#/components/schemas/BadRequestDTO"
1068 |                 }
1069 |               }
1070 |             }
1071 |           },
1072 |           "401": {
1073 |             "description": "Unauthorized",
1074 |             "content": {
1075 |               "application/json": {
1076 |                 "schema": {
1077 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1078 |                 }
1079 |               }
1080 |             }
1081 |           },
1082 |           "422": {
1083 |             "description": "Unprocessable Entity",
1084 |             "content": {
1085 |               "application/json": {
1086 |                 "schema": {
1087 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1088 |                 }
1089 |               }
1090 |             }
1091 |           }
1092 |         },
1093 |         "tags": [
1094 |           "Products"
1095 |         ],
1096 |         "security": [
1097 |           {
1098 |             "Location-Access": []
1099 |           },
1100 |           {
1101 |             "Agency-Access": []
1102 |           }
1103 |         ]
1104 |       }
1105 |     }
1106 |   },
1107 |   "info": {
1108 |     "title": "Products API",
1109 |     "description": "Documentation for products API",
1110 |     "version": "1.0",
1111 |     "contact": {}
1112 |   },
1113 |   "tags": [
1114 |     {
1115 |       "name": "Products",
1116 |       "description": "Documentation for products API"
1117 |     }
1118 |   ],
1119 |   "servers": [
1120 |     {
1121 |       "url": "https://services.leadconnectorhq.com"
1122 |     }
1123 |   ],
1124 |   "components": {
1125 |     "securitySchemes": {
1126 |       "bearer": {
1127 |         "scheme": "bearer",
1128 |         "bearerFormat": "JWT",
1129 |         "name": "Authorization",
1130 |         "in": "header",
1131 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1132 |         "type": "http"
1133 |       },
1134 |       "Location-Access": {
1135 |         "scheme": "bearer",
1136 |         "bearerFormat": "JWT",
1137 |         "name": "Authorization",
1138 |         "in": "header",
1139 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
1140 |         "type": "http"
1141 |       },
1142 |       "Agency-Access": {
1143 |         "scheme": "bearer",
1144 |         "bearerFormat": "JWT",
1145 |         "name": "Authorization",
1146 |         "in": "header",
1147 |         "description": "Use the Access Token generated with user type as Agency.",
1148 |         "type": "http"
1149 |       }
1150 |     },
1151 |     "schemas": {
1152 |       "BadRequestDTO": {
1153 |         "type": "object",
1154 |         "properties": {
1155 |           "statusCode": {
1156 |             "type": "number",
1157 |             "example": 400
1158 |           },
1159 |           "message": {
1160 |             "type": "string",
1161 |             "example": "Bad Request"
1162 |           }
1163 |         }
1164 |       },
1165 |       "UnauthorizedDTO": {
1166 |         "type": "object",
1167 |         "properties": {
1168 |           "statusCode": {
1169 |             "type": "number",
1170 |             "example": 401
1171 |           },
1172 |           "message": {
1173 |             "type": "string",
1174 |             "example": "Invalid token: access token is invalid"
1175 |           },
1176 |           "error": {
1177 |             "type": "string",
1178 |             "example": "Unauthorized"
1179 |           }
1180 |         }
1181 |       },
1182 |       "RecurringDto": {
1183 |         "type": "object",
1184 |         "properties": {
1185 |           "interval": {
1186 |             "type": "string",
1187 |             "description": "The interval at which the recurring event occurs.",
1188 |             "example": "day",
1189 |             "enum": [
1190 |               "day",
1191 |               "month",
1192 |               "week",
1193 |               "year"
1194 |             ]
1195 |           },
1196 |           "intervalCount": {
1197 |             "type": "number",
1198 |             "description": "The number of intervals between each occurrence of the event.",
1199 |             "example": 1
1200 |           }
1201 |         },
1202 |         "required": [
1203 |           "interval",
1204 |           "intervalCount"
1205 |         ]
1206 |       },
1207 |       "MembershipOfferDto": {
1208 |         "type": "object",
1209 |         "properties": {
1210 |           "label": {
1211 |             "type": "string",
1212 |             "description": "Membership offer label",
1213 |             "example": "top_50"
1214 |           },
1215 |           "value": {
1216 |             "type": "string",
1217 |             "description": "Membership offer label",
1218 |             "example": "50"
1219 |           },
1220 |           "_id": {
1221 |             "type": "string",
1222 |             "description": "The unique identifier for the membership offer.",
1223 |             "example": "655b33aa2209e60b6adb87a7"
1224 |           }
1225 |         },
1226 |         "required": [
1227 |           "label",
1228 |           "value",
1229 |           "_id"
1230 |         ]
1231 |       },
1232 |       "PriceMetaDto": {
1233 |         "type": "object",
1234 |         "properties": {
1235 |           "source": {
1236 |             "type": "string",
1237 |             "description": "The source of the price.",
1238 |             "enum": [
1239 |               "stripe"
1240 |             ],
1241 |             "example": "stripe"
1242 |           },
1243 |           "stripePriceId": {
1244 |             "type": "string",
1245 |             "description": "The Stripe price ID associated with the price.",
1246 |             "example": "price_123"
1247 |           },
1248 |           "internalSource": {
1249 |             "type": "string",
1250 |             "description": "The internal source of the price.",
1251 |             "enum": [
1252 |               "agency_plan",
1253 |               "funnel",
1254 |               "membership"
1255 |             ],
1256 |             "example": "agency_plan"
1257 |           }
1258 |         },
1259 |         "required": [
1260 |           "source",
1261 |           "stripePriceId",
1262 |           "internalSource"
1263 |         ]
1264 |       },
1265 |       "CreatePriceDto": {
1266 |         "type": "object",
1267 |         "properties": {
1268 |           "name": {
1269 |             "type": "string",
1270 |             "description": "The name of the price.",
1271 |             "example": "Price Name"
1272 |           },
1273 |           "type": {
1274 |             "type": "string",
1275 |             "description": "The type of the price.",
1276 |             "example": "one_time",
1277 |             "enum": [
1278 |               "one_time",
1279 |               "recurring"
1280 |             ]
1281 |           },
1282 |           "currency": {
1283 |             "type": "string",
1284 |             "description": "The currency of the price.",
1285 |             "example": "USD"
1286 |           },
1287 |           "amount": {
1288 |             "type": "number",
1289 |             "description": "The amount of the price. ( min: 0.01 )",
1290 |             "example": 99.99
1291 |           },
1292 |           "recurring": {
1293 |             "description": "The recurring details of the price (if type is recurring).",
1294 |             "allOf": [
1295 |               {
1296 |                 "$ref": "#/components/schemas/RecurringDto"
1297 |               }
1298 |             ]
1299 |           },
1300 |           "description": {
1301 |             "type": "string",
1302 |             "description": "A brief description of the price."
1303 |           },
1304 |           "membershipOffers": {
1305 |             "description": "An array of membership offers associated with the price.",
1306 |             "type": "array",
1307 |             "items": {
1308 |               "$ref": "#/components/schemas/MembershipOfferDto"
1309 |             }
1310 |           },
1311 |           "trialPeriod": {
1312 |             "type": "number",
1313 |             "description": "The trial period duration in days (if applicable).",
1314 |             "example": 7
1315 |           },
1316 |           "totalCycles": {
1317 |             "type": "number",
1318 |             "description": "The total number of billing cycles for the price. ( min: 1 )",
1319 |             "example": 12
1320 |           },
1321 |           "setupFee": {
1322 |             "type": "number",
1323 |             "description": "The setup fee for the price.",
1324 |             "example": 10.99
1325 |           },
1326 |           "variantOptionIds": {
1327 |             "description": "An array of variant option IDs associated with the price.",
1328 |             "example": [
1329 |               "option_id_1",
1330 |               "option_id_2"
1331 |             ],
1332 |             "type": "array",
1333 |             "items": {
1334 |               "type": "string"
1335 |             }
1336 |           },
1337 |           "compareAtPrice": {
1338 |             "type": "number",
1339 |             "description": "The compare at price for the price.",
1340 |             "example": 19.99
1341 |           },
1342 |           "locationId": {
1343 |             "type": "string",
1344 |             "description": "The unique identifier of the location associated with the price.",
1345 |             "example": "6578278e879ad2646715ba9c"
1346 |           },
1347 |           "userId": {
1348 |             "type": "string",
1349 |             "description": "The unique identifier of the user who created the price.",
1350 |             "example": "6578278e879ad2646715ba9c"
1351 |           },
1352 |           "meta": {
1353 |             "description": "Additional metadata associated with the price.",
1354 |             "allOf": [
1355 |               {
1356 |                 "$ref": "#/components/schemas/PriceMetaDto"
1357 |               }
1358 |             ]
1359 |           },
1360 |           "trackInventory": {
1361 |             "type": "boolean",
1362 |             "description": "Need to track inventory stock quantity",
1363 |             "example": true
1364 |           },
1365 |           "availableQuantity": {
1366 |             "type": "number",
1367 |             "description": "Available inventory stock quantity",
1368 |             "example": 5
1369 |           },
1370 |           "allowOutOfStockPurchases": {
1371 |             "type": "boolean",
1372 |             "description": "Continue selling when out of stock",
1373 |             "example": true
1374 |           }
1375 |         },
1376 |         "required": [
1377 |           "name",
1378 |           "type",
1379 |           "currency",
1380 |           "amount",
1381 |           "locationId"
1382 |         ]
1383 |       },
1384 |       "CreatePriceResponseDto": {
1385 |         "type": "object",
1386 |         "properties": {
1387 |           "_id": {
1388 |             "type": "string",
1389 |             "description": "The unique identifier for the price.",
1390 |             "example": "655b33aa2209e60b6adb87a7"
1391 |           },
1392 |           "membershipOffers": {
1393 |             "description": "An array of membership offers associated with the price.",
1394 |             "type": "array",
1395 |             "items": {
1396 |               "$ref": "#/components/schemas/MembershipOfferDto"
1397 |             }
1398 |           },
1399 |           "variantOptionIds": {
1400 |             "description": "An array of variant option IDs associated with the price.",
1401 |             "example": [
1402 |               "h4z7u0im2q8",
1403 |               "h3nst2ltsnn"
1404 |             ],
1405 |             "type": "array",
1406 |             "items": {
1407 |               "type": "string"
1408 |             }
1409 |           },
1410 |           "locationId": {
1411 |             "type": "string",
1412 |             "description": "The unique identifier for the location.",
1413 |             "example": "3SwdhCsvxI8Au3KsPJt6"
1414 |           },
1415 |           "product": {
1416 |             "type": "string",
1417 |             "description": "The unique identifier for the associated product.",
1418 |             "example": "655b33a82209e60b6adb87a5"
1419 |           },
1420 |           "userId": {
1421 |             "type": "string",
1422 |             "description": "The unique identifier for the user.",
1423 |             "example": "6YAtzfzpmHAdj0e8GkKp"
1424 |           },
1425 |           "name": {
1426 |             "type": "string",
1427 |             "description": "The name of the price.",
1428 |             "example": "Red / S"
1429 |           },
1430 |           "type": {
1431 |             "type": "string",
1432 |             "description": "The type of the price (e.g., one_time).",
1433 |             "example": "one_time",
1434 |             "enum": [
1435 |               "one_time",
1436 |               "recurring"
1437 |             ]
1438 |           },
1439 |           "currency": {
1440 |             "type": "string",
1441 |             "description": "The currency code for the price.",
1442 |             "example": "INR"
1443 |           },
1444 |           "amount": {
1445 |             "type": "number",
1446 |             "description": "The amount of the price.",
1447 |             "example": 199999
1448 |           },
1449 |           "recurring": {
1450 |             "description": "The recurring details of the price (if type is recurring).",
1451 |             "allOf": [
1452 |               {
1453 |                 "$ref": "#/components/schemas/RecurringDto"
1454 |               }
1455 |             ]
1456 |           },
1457 |           "createdAt": {
1458 |             "format": "date-time",
1459 |             "type": "string",
1460 |             "description": "The creation timestamp of the price.",
1461 |             "example": "2023-11-20T10:23:38.645Z"
1462 |           },
1463 |           "updatedAt": {
1464 |             "format": "date-time",
1465 |             "type": "string",
1466 |             "description": "The last update timestamp of the price.",
1467 |             "example": "2024-01-23T09:57:04.852Z"
1468 |           },
1469 |           "compareAtPrice": {
1470 |             "type": "number",
1471 |             "description": "The compare-at price for comparison purposes.",
1472 |             "example": 2000000
1473 |           },
1474 |           "trackInventory": {
1475 |             "type": "boolean",
1476 |             "description": "Indicates whether inventory tracking is enabled.",
1477 |             "example": null
1478 |           },
1479 |           "availableQuantity": {
1480 |             "type": "number",
1481 |             "description": "Available inventory stock quantity",
1482 |             "example": 5
1483 |           },
1484 |           "allowOutOfStockPurchases": {
1485 |             "type": "boolean",
1486 |             "description": "Continue selling when out of stock",
1487 |             "example": true
1488 |           }
1489 |         },
1490 |         "required": [
1491 |           "_id",
1492 |           "name",
1493 |           "type",
1494 |           "currency",
1495 |           "amount"
1496 |         ]
1497 |       },
1498 |       "UnprocessableDTO": {
1499 |         "type": "object",
1500 |         "properties": {
1501 |           "statusCode": {
1502 |             "type": "number",
1503 |             "example": 422
1504 |           },
1505 |           "message": {
1506 |             "example": [
1507 |               "Unprocessable Entity"
1508 |             ],
1509 |             "type": "array",
1510 |             "items": {
1511 |               "type": "string"
1512 |             }
1513 |           },
1514 |           "error": {
1515 |             "type": "string",
1516 |             "example": "Unprocessable Entity"
1517 |           }
1518 |         }
1519 |       },
1520 |       "DefaultPriceResponseDto": {
1521 |         "type": "object",
1522 |         "properties": {
1523 |           "_id": {
1524 |             "type": "string",
1525 |             "description": "The unique identifier for the price.",
1526 |             "example": "655b33aa2209e60b6adb87a7"
1527 |           },
1528 |           "membershipOffers": {
1529 |             "description": "An array of membership offers associated with the price.",
1530 |             "type": "array",
1531 |             "items": {
1532 |               "$ref": "#/components/schemas/MembershipOfferDto"
1533 |             }
1534 |           },
1535 |           "variantOptionIds": {
1536 |             "description": "An array of variant option IDs associated with the price.",
1537 |             "example": [
1538 |               "h4z7u0im2q8",
1539 |               "h3nst2ltsnn"
1540 |             ],
1541 |             "type": "array",
1542 |             "items": {
1543 |               "type": "string"
1544 |             }
1545 |           },
1546 |           "locationId": {
1547 |             "type": "string",
1548 |             "description": "The unique identifier for the location.",
1549 |             "example": "3SwdhCsvxI8Au3KsPJt6"
1550 |           },
1551 |           "product": {
1552 |             "type": "string",
1553 |             "description": "The unique identifier for the associated product.",
1554 |             "example": "655b33a82209e60b6adb87a5"
1555 |           },
1556 |           "userId": {
1557 |             "type": "string",
1558 |             "description": "The unique identifier for the user.",
1559 |             "example": "6YAtzfzpmHAdj0e8GkKp"
1560 |           },
1561 |           "name": {
1562 |             "type": "string",
1563 |             "description": "The name of the price.",
1564 |             "example": "Red / S"
1565 |           },
1566 |           "type": {
1567 |             "type": "string",
1568 |             "description": "The type of the price (e.g., one_time).",
1569 |             "example": "one_time",
1570 |             "enum": [
1571 |               "one_time",
1572 |               "recurring"
1573 |             ]
1574 |           },
1575 |           "currency": {
1576 |             "type": "string",
1577 |             "description": "The currency code for the price.",
1578 |             "example": "INR"
1579 |           },
1580 |           "amount": {
1581 |             "type": "number",
1582 |             "description": "The amount of the price.",
1583 |             "example": 199999
1584 |           },
1585 |           "recurring": {
1586 |             "description": "The recurring details of the price (if type is recurring).",
1587 |             "allOf": [
1588 |               {
1589 |                 "$ref": "#/components/schemas/RecurringDto"
1590 |               }
1591 |             ]
1592 |           },
1593 |           "createdAt": {
1594 |             "format": "date-time",
1595 |             "type": "string",
1596 |             "description": "The creation timestamp of the price.",
1597 |             "example": "2023-11-20T10:23:38.645Z"
1598 |           },
1599 |           "updatedAt": {
1600 |             "format": "date-time",
1601 |             "type": "string",
1602 |             "description": "The last update timestamp of the price.",
1603 |             "example": "2024-01-23T09:57:04.852Z"
1604 |           },
1605 |           "compareAtPrice": {
1606 |             "type": "number",
1607 |             "description": "The compare-at price for comparison purposes.",
1608 |             "example": 2000000
1609 |           },
1610 |           "trackInventory": {
1611 |             "type": "boolean",
1612 |             "description": "Indicates whether inventory tracking is enabled.",
1613 |             "example": null
1614 |           },
1615 |           "availableQuantity": {
1616 |             "type": "number",
1617 |             "description": "Available inventory stock quantity",
1618 |             "example": 5
1619 |           },
1620 |           "allowOutOfStockPurchases": {
1621 |             "type": "boolean",
1622 |             "description": "Continue selling when out of stock",
1623 |             "example": true
1624 |           }
1625 |         },
1626 |         "required": [
1627 |           "_id",
1628 |           "name",
1629 |           "type",
1630 |           "currency",
1631 |           "amount"
1632 |         ]
1633 |       },
1634 |       "ListPricesResponseDto": {
1635 |         "type": "object",
1636 |         "properties": {
1637 |           "prices": {
1638 |             "description": "An array of prices",
1639 |             "type": "array",
1640 |             "items": {
1641 |               "$ref": "#/components/schemas/DefaultPriceResponseDto"
1642 |             }
1643 |           },
1644 |           "total": {
1645 |             "type": "number",
1646 |             "default": "Total number of prices available",
1647 |             "example": 10
1648 |           }
1649 |         },
1650 |         "required": [
1651 |           "prices",
1652 |           "total"
1653 |         ]
1654 |       },
1655 |       "GetPriceResponseDto": {
1656 |         "type": "object",
1657 |         "properties": {
1658 |           "_id": {
1659 |             "type": "string",
1660 |             "description": "The unique identifier for the price.",
1661 |             "example": "655b33aa2209e60b6adb87a7"
1662 |           },
1663 |           "membershipOffers": {
1664 |             "description": "An array of membership offers associated with the price.",
1665 |             "type": "array",
1666 |             "items": {
1667 |               "$ref": "#/components/schemas/MembershipOfferDto"
1668 |             }
1669 |           },
1670 |           "variantOptionIds": {
1671 |             "description": "An array of variant option IDs associated with the price.",
1672 |             "example": [
1673 |               "h4z7u0im2q8",
1674 |               "h3nst2ltsnn"
1675 |             ],
1676 |             "type": "array",
1677 |             "items": {
1678 |               "type": "string"
1679 |             }
1680 |           },
1681 |           "locationId": {
1682 |             "type": "string",
1683 |             "description": "The unique identifier for the location.",
1684 |             "example": "3SwdhCsvxI8Au3KsPJt6"
1685 |           },
1686 |           "product": {
1687 |             "type": "string",
1688 |             "description": "The unique identifier for the associated product.",
1689 |             "example": "655b33a82209e60b6adb87a5"
1690 |           },
1691 |           "userId": {
1692 |             "type": "string",
1693 |             "description": "The unique identifier for the user.",
1694 |             "example": "6YAtzfzpmHAdj0e8GkKp"
1695 |           },
1696 |           "name": {
1697 |             "type": "string",
1698 |             "description": "The name of the price.",
1699 |             "example": "Red / S"
1700 |           },
1701 |           "type": {
1702 |             "type": "string",
1703 |             "description": "The type of the price (e.g., one_time).",
1704 |             "example": "one_time",
1705 |             "enum": [
1706 |               "one_time",
1707 |               "recurring"
1708 |             ]
1709 |           },
1710 |           "currency": {
1711 |             "type": "string",
1712 |             "description": "The currency code for the price.",
1713 |             "example": "INR"
1714 |           },
1715 |           "amount": {
1716 |             "type": "number",
1717 |             "description": "The amount of the price.",
1718 |             "example": 199999
1719 |           },
1720 |           "recurring": {
1721 |             "description": "The recurring details of the price (if type is recurring).",
1722 |             "allOf": [
1723 |               {
1724 |                 "$ref": "#/components/schemas/RecurringDto"
1725 |               }
1726 |             ]
1727 |           },
1728 |           "createdAt": {
1729 |             "format": "date-time",
1730 |             "type": "string",
1731 |             "description": "The creation timestamp of the price.",
1732 |             "example": "2023-11-20T10:23:38.645Z"
1733 |           },
1734 |           "updatedAt": {
1735 |             "format": "date-time",
1736 |             "type": "string",
1737 |             "description": "The last update timestamp of the price.",
1738 |             "example": "2024-01-23T09:57:04.852Z"
1739 |           },
1740 |           "compareAtPrice": {
1741 |             "type": "number",
1742 |             "description": "The compare-at price for comparison purposes.",
1743 |             "example": 2000000
1744 |           },
1745 |           "trackInventory": {
1746 |             "type": "boolean",
1747 |             "description": "Indicates whether inventory tracking is enabled.",
1748 |             "example": null
1749 |           },
1750 |           "availableQuantity": {
1751 |             "type": "number",
1752 |             "description": "Available inventory stock quantity",
1753 |             "example": 5
1754 |           },
1755 |           "allowOutOfStockPurchases": {
1756 |             "type": "boolean",
1757 |             "description": "Continue selling when out of stock",
1758 |             "example": true
1759 |           }
1760 |         },
1761 |         "required": [
1762 |           "_id",
1763 |           "name",
1764 |           "type",
1765 |           "currency",
1766 |           "amount"
1767 |         ]
1768 |       },
1769 |       "UpdatePriceDto": {
1770 |         "type": "object",
1771 |         "properties": {
1772 |           "name": {
1773 |             "type": "string",
1774 |             "description": "The name of the price.",
1775 |             "example": "Price Name"
1776 |           },
1777 |           "type": {
1778 |             "type": "string",
1779 |             "description": "The type of the price.",
1780 |             "example": "one_time",
1781 |             "enum": [
1782 |               "one_time",
1783 |               "recurring"
1784 |             ]
1785 |           },
1786 |           "currency": {
1787 |             "type": "string",
1788 |             "description": "The currency of the price.",
1789 |             "example": "USD"
1790 |           },
1791 |           "amount": {
1792 |             "type": "number",
1793 |             "description": "The amount of the price. ( min: 0.01 )",
1794 |             "example": 99.99
1795 |           },
1796 |           "recurring": {
1797 |             "description": "The recurring details of the price (if type is recurring).",
1798 |             "allOf": [
1799 |               {
1800 |                 "$ref": "#/components/schemas/RecurringDto"
1801 |               }
1802 |             ]
1803 |           },
1804 |           "description": {
1805 |             "type": "string",
1806 |             "description": "A brief description of the price."
1807 |           },
1808 |           "membershipOffers": {
1809 |             "description": "An array of membership offers associated with the price.",
1810 |             "type": "array",
1811 |             "items": {
1812 |               "$ref": "#/components/schemas/MembershipOfferDto"
1813 |             }
1814 |           },
1815 |           "trialPeriod": {
1816 |             "type": "number",
1817 |             "description": "The trial period duration in days (if applicable).",
1818 |             "example": 7
1819 |           },
1820 |           "totalCycles": {
1821 |             "type": "number",
1822 |             "description": "The total number of billing cycles for the price. ( min: 1 )",
1823 |             "example": 12
1824 |           },
1825 |           "setupFee": {
1826 |             "type": "number",
1827 |             "description": "The setup fee for the price.",
1828 |             "example": 10.99
1829 |           },
1830 |           "variantOptionIds": {
1831 |             "description": "An array of variant option IDs associated with the price.",
1832 |             "example": [
1833 |               "option_id_1",
1834 |               "option_id_2"
1835 |             ],
1836 |             "type": "array",
1837 |             "items": {
1838 |               "type": "string"
1839 |             }
1840 |           },
1841 |           "compareAtPrice": {
1842 |             "type": "number",
1843 |             "description": "The compare at price for the price.",
1844 |             "example": 19.99
1845 |           },
1846 |           "locationId": {
1847 |             "type": "string",
1848 |             "description": "The unique identifier of the location associated with the price.",
1849 |             "example": "6578278e879ad2646715ba9c"
1850 |           },
1851 |           "userId": {
1852 |             "type": "string",
1853 |             "description": "The unique identifier of the user who created the price.",
1854 |             "example": "6578278e879ad2646715ba9c"
1855 |           },
1856 |           "meta": {
1857 |             "description": "Additional metadata associated with the price.",
1858 |             "allOf": [
1859 |               {
1860 |                 "$ref": "#/components/schemas/PriceMetaDto"
1861 |               }
1862 |             ]
1863 |           },
1864 |           "trackInventory": {
1865 |             "type": "boolean",
1866 |             "description": "Need to track inventory stock quantity",
1867 |             "example": true
1868 |           },
1869 |           "availableQuantity": {
1870 |             "type": "number",
1871 |             "description": "Available inventory stock quantity",
1872 |             "example": 5
1873 |           },
1874 |           "allowOutOfStockPurchases": {
1875 |             "type": "boolean",
1876 |             "description": "Continue selling when out of stock",
1877 |             "example": true
1878 |           }
1879 |         },
1880 |         "required": [
1881 |           "name",
1882 |           "type",
1883 |           "currency",
1884 |           "amount",
1885 |           "locationId"
1886 |         ]
1887 |       },
1888 |       "UpdatePriceResponseDto": {
1889 |         "type": "object",
1890 |         "properties": {
1891 |           "_id": {
1892 |             "type": "string",
1893 |             "description": "The unique identifier for the price.",
1894 |             "example": "655b33aa2209e60b6adb87a7"
1895 |           },
1896 |           "membershipOffers": {
1897 |             "description": "An array of membership offers associated with the price.",
1898 |             "type": "array",
1899 |             "items": {
1900 |               "$ref": "#/components/schemas/MembershipOfferDto"
1901 |             }
1902 |           },
1903 |           "variantOptionIds": {
1904 |             "description": "An array of variant option IDs associated with the price.",
1905 |             "example": [
1906 |               "h4z7u0im2q8",
1907 |               "h3nst2ltsnn"
1908 |             ],
1909 |             "type": "array",
1910 |             "items": {
1911 |               "type": "string"
1912 |             }
1913 |           },
1914 |           "locationId": {
1915 |             "type": "string",
1916 |             "description": "The unique identifier for the location.",
1917 |             "example": "3SwdhCsvxI8Au3KsPJt6"
1918 |           },
1919 |           "product": {
1920 |             "type": "string",
1921 |             "description": "The unique identifier for the associated product.",
1922 |             "example": "655b33a82209e60b6adb87a5"
1923 |           },
1924 |           "userId": {
1925 |             "type": "string",
1926 |             "description": "The unique identifier for the user.",
1927 |             "example": "6YAtzfzpmHAdj0e8GkKp"
1928 |           },
1929 |           "name": {
1930 |             "type": "string",
1931 |             "description": "The name of the price.",
1932 |             "example": "Red / S"
1933 |           },
1934 |           "type": {
1935 |             "type": "string",
1936 |             "description": "The type of the price (e.g., one_time).",
1937 |             "example": "one_time",
1938 |             "enum": [
1939 |               "one_time",
1940 |               "recurring"
1941 |             ]
1942 |           },
1943 |           "currency": {
1944 |             "type": "string",
1945 |             "description": "The currency code for the price.",
1946 |             "example": "INR"
1947 |           },
1948 |           "amount": {
1949 |             "type": "number",
1950 |             "description": "The amount of the price.",
1951 |             "example": 199999
1952 |           },
1953 |           "recurring": {
1954 |             "description": "The recurring details of the price (if type is recurring).",
1955 |             "allOf": [
1956 |               {
1957 |                 "$ref": "#/components/schemas/RecurringDto"
1958 |               }
1959 |             ]
1960 |           },
1961 |           "createdAt": {
1962 |             "format": "date-time",
1963 |             "type": "string",
1964 |             "description": "The creation timestamp of the price.",
1965 |             "example": "2023-11-20T10:23:38.645Z"
1966 |           },
1967 |           "updatedAt": {
1968 |             "format": "date-time",
1969 |             "type": "string",
1970 |             "description": "The last update timestamp of the price.",
1971 |             "example": "2024-01-23T09:57:04.852Z"
1972 |           },
1973 |           "compareAtPrice": {
1974 |             "type": "number",
1975 |             "description": "The compare-at price for comparison purposes.",
1976 |             "example": 2000000
1977 |           },
1978 |           "trackInventory": {
1979 |             "type": "boolean",
1980 |             "description": "Indicates whether inventory tracking is enabled.",
1981 |             "example": null
1982 |           },
1983 |           "availableQuantity": {
1984 |             "type": "number",
1985 |             "description": "Available inventory stock quantity",
1986 |             "example": 5
1987 |           },
1988 |           "allowOutOfStockPurchases": {
1989 |             "type": "boolean",
1990 |             "description": "Continue selling when out of stock",
1991 |             "example": true
1992 |           }
1993 |         },
1994 |         "required": [
1995 |           "_id",
1996 |           "name",
1997 |           "type",
1998 |           "currency",
1999 |           "amount"
2000 |         ]
2001 |       },
2002 |       "DeletePriceResponseDto": {
2003 |         "type": "object",
2004 |         "properties": {
2005 |           "status": {
2006 |             "type": "boolean",
2007 |             "description": "returns true if the price is successfully deleted",
2008 |             "example": true
2009 |           }
2010 |         },
2011 |         "required": [
2012 |           "status"
2013 |         ]
2014 |       },
2015 |       "ProductVariantOptionDto": {
2016 |         "type": "object",
2017 |         "properties": {
2018 |           "id": {
2019 |             "type": "string",
2020 |             "description": "The unique identifier for the option.",
2021 |             "example": "h4z7u0im2q8"
2022 |           },
2023 |           "name": {
2024 |             "type": "string",
2025 |             "description": "The name of the option.",
2026 |             "example": "XL"
2027 |           }
2028 |         },
2029 |         "required": [
2030 |           "id",
2031 |           "name"
2032 |         ]
2033 |       },
2034 |       "ProductVariantDto": {
2035 |         "type": "object",
2036 |         "properties": {
2037 |           "id": {
2038 |             "type": "string",
2039 |             "description": "A unique identifier for the variant.",
2040 |             "example": "38s63qmxfr4"
2041 |           },
2042 |           "name": {
2043 |             "type": "string",
2044 |             "description": "The name of the variant.",
2045 |             "example": "Size"
2046 |           },
2047 |           "options": {
2048 |             "description": "An array of options for the variant.",
2049 |             "type": "array",
2050 |             "items": {
2051 |               "$ref": "#/components/schemas/ProductVariantOptionDto"
2052 |             }
2053 |           }
2054 |         },
2055 |         "required": [
2056 |           "id",
2057 |           "name",
2058 |           "options"
2059 |         ]
2060 |       },
2061 |       "ProductMediaDto": {
2062 |         "type": "object",
2063 |         "properties": {
2064 |           "id": {
2065 |             "type": "string",
2066 |             "description": "The unique identifier for the media.",
2067 |             "example": "fzrgusiuu0m"
2068 |           },
2069 |           "title": {
2070 |             "type": "string",
2071 |             "description": "The title of the media file.",
2072 |             "example": "1dd7dcd0-e71d-4cf7-a06b-6d47723d6a29.png"
2073 |           },
2074 |           "url": {
2075 |             "type": "string",
2076 |             "description": "The URL where the media file is stored.",
2077 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/sample.png"
2078 |           },
2079 |           "type": {
2080 |             "type": "string",
2081 |             "description": "The type of the media file (e.g., image, video will be supporting soon).",
2082 |             "example": "image",
2083 |             "enum": [
2084 |               "image",
2085 |               "video"
2086 |             ]
2087 |           },
2088 |           "isFeatured": {
2089 |             "type": "boolean",
2090 |             "description": "Indicates whether the media is featured.",
2091 |             "example": true
2092 |           }
2093 |         },
2094 |         "required": [
2095 |           "id",
2096 |           "url",
2097 |           "type"
2098 |         ]
2099 |       },
2100 |       "GetProductResponseDto": {
2101 |         "type": "object",
2102 |         "properties": {
2103 |           "_id": {
2104 |             "type": "string",
2105 |             "description": "The unique identifier for the product.",
2106 |             "example": "655b33a82209e60b6adb87a5"
2107 |           },
2108 |           "description": {
2109 |             "type": "string",
2110 |             "description": "product description",
2111 |             "example": "This is a really awesome product"
2112 |           },
2113 |           "variants": {
2114 |             "description": "An array of variants for the product.",
2115 |             "type": "array",
2116 |             "items": {
2117 |               "$ref": "#/components/schemas/ProductVariantDto"
2118 |             }
2119 |           },
2120 |           "medias": {
2121 |             "description": "An array of medias for the product.",
2122 |             "type": "array",
2123 |             "items": {
2124 |               "$ref": "#/components/schemas/ProductMediaDto"
2125 |             }
2126 |           },
2127 |           "locationId": {
2128 |             "type": "string",
2129 |             "description": "The unique identifier for the location.",
2130 |             "example": "3SwdhCsvxI8Au3KsPJt6"
2131 |           },
2132 |           "name": {
2133 |             "type": "string",
2134 |             "description": "The name of the product.",
2135 |             "example": "Awesome Product"
2136 |           },
2137 |           "productType": {
2138 |             "type": "string",
2139 |             "description": "The type of the product (e.g., PHYSICAL).",
2140 |             "example": "PHYSICAL"
2141 |           },
2142 |           "availableInStore": {
2143 |             "type": "boolean",
2144 |             "description": "Indicates whether the product is available in-store.",
2145 |             "example": true
2146 |           },
2147 |           "userId": {
2148 |             "type": "string",
2149 |             "description": "The unique identifier for the user who created the product.",
2150 |             "example": "6YAtzfzpmHAdj0e8GkKp"
2151 |           },
2152 |           "createdAt": {
2153 |             "format": "date-time",
2154 |             "type": "string",
2155 |             "description": "The creation timestamp of the product.",
2156 |             "example": "2023-11-20T10:23:36.515Z"
2157 |           },
2158 |           "updatedAt": {
2159 |             "format": "date-time",
2160 |             "type": "string",
2161 |             "description": "The last update timestamp of the product.",
2162 |             "example": "2024-01-23T09:57:04.846Z"
2163 |           },
2164 |           "statementDescriptor": {
2165 |             "type": "string",
2166 |             "description": "The statement descriptor for the product.",
2167 |             "example": "abcde"
2168 |           },
2169 |           "image": {
2170 |             "type": "string",
2171 |             "description": "The URL for the product image.",
2172 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
2173 |           }
2174 |         },
2175 |         "required": [
2176 |           "_id",
2177 |           "locationId",
2178 |           "name",
2179 |           "productType",
2180 |           "createdAt",
2181 |           "updatedAt"
2182 |         ]
2183 |       },
2184 |       "DeleteProductResponseDto": {
2185 |         "type": "object",
2186 |         "properties": {
2187 |           "status": {
2188 |             "type": "boolean",
2189 |             "description": "returns true if the product is successfully deleted",
2190 |             "example": true
2191 |           }
2192 |         },
2193 |         "required": [
2194 |           "status"
2195 |         ]
2196 |       },
2197 |       "CreateProductDto": {
2198 |         "type": "object",
2199 |         "properties": {
2200 |           "name": {
2201 |             "type": "string",
2202 |             "description": "The name of the product.",
2203 |             "example": "Awesome Product"
2204 |           },
2205 |           "locationId": {
2206 |             "type": "string",
2207 |             "description": "The unique identifier for the location.",
2208 |             "example": "3SwdhCsvxI8Au3KsPJt6"
2209 |           },
2210 |           "description": {
2211 |             "type": "string",
2212 |             "description": "A brief description of the product.",
2213 |             "example": "Product description goes here."
2214 |           },
2215 |           "productType": {
2216 |             "type": "string",
2217 |             "enum": [
2218 |               "DIGITAL",
2219 |               "PHYSICAL",
2220 |               "SERVICE"
2221 |             ]
2222 |           },
2223 |           "image": {
2224 |             "type": "string",
2225 |             "description": "The URL for the product image.",
2226 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
2227 |           },
2228 |           "statementDescriptor": {
2229 |             "type": "string",
2230 |             "description": "The statement descriptor for the product.",
2231 |             "example": "abcde"
2232 |           },
2233 |           "availableInStore": {
2234 |             "type": "boolean",
2235 |             "description": "Indicates whether the product is available in-store.",
2236 |             "example": true
2237 |           },
2238 |           "medias": {
2239 |             "description": "An array of medias for the product.",
2240 |             "type": "array",
2241 |             "items": {
2242 |               "$ref": "#/components/schemas/ProductMediaDto"
2243 |             }
2244 |           },
2245 |           "variants": {
2246 |             "description": "An array of variants for the product.",
2247 |             "type": "array",
2248 |             "items": {
2249 |               "$ref": "#/components/schemas/ProductVariantDto"
2250 |             }
2251 |           }
2252 |         },
2253 |         "required": [
2254 |           "name",
2255 |           "locationId",
2256 |           "productType"
2257 |         ]
2258 |       },
2259 |       "CreateProductResponseDto": {
2260 |         "type": "object",
2261 |         "properties": {
2262 |           "_id": {
2263 |             "type": "string",
2264 |             "description": "The unique identifier for the product.",
2265 |             "example": "655b33a82209e60b6adb87a5"
2266 |           },
2267 |           "description": {
2268 |             "type": "string",
2269 |             "description": "product description",
2270 |             "example": "This is a really awesome product"
2271 |           },
2272 |           "variants": {
2273 |             "description": "An array of variants for the product.",
2274 |             "type": "array",
2275 |             "items": {
2276 |               "$ref": "#/components/schemas/ProductVariantDto"
2277 |             }
2278 |           },
2279 |           "medias": {
2280 |             "description": "An array of medias for the product.",
2281 |             "type": "array",
2282 |             "items": {
2283 |               "$ref": "#/components/schemas/ProductMediaDto"
2284 |             }
2285 |           },
2286 |           "locationId": {
2287 |             "type": "string",
2288 |             "description": "The unique identifier for the location.",
2289 |             "example": "3SwdhCsvxI8Au3KsPJt6"
2290 |           },
2291 |           "name": {
2292 |             "type": "string",
2293 |             "description": "The name of the product.",
2294 |             "example": "Awesome Product"
2295 |           },
2296 |           "productType": {
2297 |             "type": "string",
2298 |             "description": "The type of the product (e.g., PHYSICAL).",
2299 |             "example": "PHYSICAL"
2300 |           },
2301 |           "availableInStore": {
2302 |             "type": "boolean",
2303 |             "description": "Indicates whether the product is available in-store.",
2304 |             "example": true
2305 |           },
2306 |           "userId": {
2307 |             "type": "string",
2308 |             "description": "The unique identifier for the user who created the product.",
2309 |             "example": "6YAtzfzpmHAdj0e8GkKp"
2310 |           },
2311 |           "createdAt": {
2312 |             "format": "date-time",
2313 |             "type": "string",
2314 |             "description": "The creation timestamp of the product.",
2315 |             "example": "2023-11-20T10:23:36.515Z"
2316 |           },
2317 |           "updatedAt": {
2318 |             "format": "date-time",
2319 |             "type": "string",
2320 |             "description": "The last update timestamp of the product.",
2321 |             "example": "2024-01-23T09:57:04.846Z"
2322 |           },
2323 |           "statementDescriptor": {
2324 |             "type": "string",
2325 |             "description": "The statement descriptor for the product.",
2326 |             "example": "abcde"
2327 |           },
2328 |           "image": {
2329 |             "type": "string",
2330 |             "description": "The URL for the product image.",
2331 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
2332 |           }
2333 |         },
2334 |         "required": [
2335 |           "_id",
2336 |           "locationId",
2337 |           "name",
2338 |           "productType",
2339 |           "createdAt",
2340 |           "updatedAt"
2341 |         ]
2342 |       },
2343 |       "UpdateProductDto": {
2344 |         "type": "object",
2345 |         "properties": {
2346 |           "name": {
2347 |             "type": "string",
2348 |             "description": "The name of the product.",
2349 |             "example": "Awesome Product"
2350 |           },
2351 |           "locationId": {
2352 |             "type": "string",
2353 |             "description": "The unique identifier for the location.",
2354 |             "example": "3SwdhCsvxI8Au3KsPJt6"
2355 |           },
2356 |           "description": {
2357 |             "type": "string",
2358 |             "description": "A brief description of the product.",
2359 |             "example": "Product description goes here."
2360 |           },
2361 |           "productType": {
2362 |             "type": "string",
2363 |             "enum": [
2364 |               "DIGITAL",
2365 |               "PHYSICAL",
2366 |               "SERVICE"
2367 |             ]
2368 |           },
2369 |           "image": {
2370 |             "type": "string",
2371 |             "description": "The URL for the product image.",
2372 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
2373 |           },
2374 |           "statementDescriptor": {
2375 |             "type": "string",
2376 |             "description": "The statement descriptor for the product.",
2377 |             "example": "abcde"
2378 |           },
2379 |           "availableInStore": {
2380 |             "type": "boolean",
2381 |             "description": "Indicates whether the product is available in-store.",
2382 |             "example": true
2383 |           },
2384 |           "medias": {
2385 |             "description": "An array of medias for the product.",
2386 |             "type": "array",
2387 |             "items": {
2388 |               "$ref": "#/components/schemas/ProductMediaDto"
2389 |             }
2390 |           },
2391 |           "variants": {
2392 |             "description": "An array of variants for the product.",
2393 |             "type": "array",
2394 |             "items": {
2395 |               "$ref": "#/components/schemas/ProductVariantDto"
2396 |             }
2397 |           }
2398 |         },
2399 |         "required": [
2400 |           "name",
2401 |           "locationId",
2402 |           "productType"
2403 |         ]
2404 |       },
2405 |       "UpdateProductResponseDto": {
2406 |         "type": "object",
2407 |         "properties": {
2408 |           "_id": {
2409 |             "type": "string",
2410 |             "description": "The unique identifier for the product.",
2411 |             "example": "655b33a82209e60b6adb87a5"
2412 |           },
2413 |           "description": {
2414 |             "type": "string",
2415 |             "description": "product description",
2416 |             "example": "This is a really awesome product"
2417 |           },
2418 |           "variants": {
2419 |             "description": "An array of variants for the product.",
2420 |             "type": "array",
2421 |             "items": {
2422 |               "$ref": "#/components/schemas/ProductVariantDto"
2423 |             }
2424 |           },
2425 |           "medias": {
2426 |             "description": "An array of medias for the product.",
2427 |             "type": "array",
2428 |             "items": {
2429 |               "$ref": "#/components/schemas/ProductMediaDto"
2430 |             }
2431 |           },
2432 |           "locationId": {
2433 |             "type": "string",
2434 |             "description": "The unique identifier for the location.",
2435 |             "example": "3SwdhCsvxI8Au3KsPJt6"
2436 |           },
2437 |           "name": {
2438 |             "type": "string",
2439 |             "description": "The name of the product.",
2440 |             "example": "Awesome Product"
2441 |           },
2442 |           "productType": {
2443 |             "type": "string",
2444 |             "description": "The type of the product (e.g., PHYSICAL).",
2445 |             "example": "PHYSICAL"
2446 |           },
2447 |           "availableInStore": {
2448 |             "type": "boolean",
2449 |             "description": "Indicates whether the product is available in-store.",
2450 |             "example": true
2451 |           },
2452 |           "userId": {
2453 |             "type": "string",
2454 |             "description": "The unique identifier for the user who created the product.",
2455 |             "example": "6YAtzfzpmHAdj0e8GkKp"
2456 |           },
2457 |           "createdAt": {
2458 |             "format": "date-time",
2459 |             "type": "string",
2460 |             "description": "The creation timestamp of the product.",
2461 |             "example": "2023-11-20T10:23:36.515Z"
2462 |           },
2463 |           "updatedAt": {
2464 |             "format": "date-time",
2465 |             "type": "string",
2466 |             "description": "The last update timestamp of the product.",
2467 |             "example": "2024-01-23T09:57:04.846Z"
2468 |           },
2469 |           "statementDescriptor": {
2470 |             "type": "string",
2471 |             "description": "The statement descriptor for the product.",
2472 |             "example": "abcde"
2473 |           },
2474 |           "image": {
2475 |             "type": "string",
2476 |             "description": "The URL for the product image.",
2477 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
2478 |           }
2479 |         },
2480 |         "required": [
2481 |           "_id",
2482 |           "locationId",
2483 |           "name",
2484 |           "productType",
2485 |           "createdAt",
2486 |           "updatedAt"
2487 |         ]
2488 |       },
2489 |       "DefaultProductResponseDto": {
2490 |         "type": "object",
2491 |         "properties": {
2492 |           "_id": {
2493 |             "type": "string",
2494 |             "description": "The unique identifier for the product.",
2495 |             "example": "655b33a82209e60b6adb87a5"
2496 |           },
2497 |           "description": {
2498 |             "type": "string",
2499 |             "description": "product description",
2500 |             "example": "This is a really awesome product"
2501 |           },
2502 |           "variants": {
2503 |             "description": "An array of variants for the product.",
2504 |             "type": "array",
2505 |             "items": {
2506 |               "$ref": "#/components/schemas/ProductVariantDto"
2507 |             }
2508 |           },
2509 |           "medias": {
2510 |             "description": "An array of medias for the product.",
2511 |             "type": "array",
2512 |             "items": {
2513 |               "$ref": "#/components/schemas/ProductMediaDto"
2514 |             }
2515 |           },
2516 |           "locationId": {
2517 |             "type": "string",
2518 |             "description": "The unique identifier for the location.",
2519 |             "example": "3SwdhCsvxI8Au3KsPJt6"
2520 |           },
2521 |           "name": {
2522 |             "type": "string",
2523 |             "description": "The name of the product.",
2524 |             "example": "Awesome Product"
2525 |           },
2526 |           "productType": {
2527 |             "type": "string",
2528 |             "description": "The type of the product (e.g., PHYSICAL).",
2529 |             "example": "PHYSICAL"
2530 |           },
2531 |           "availableInStore": {
2532 |             "type": "boolean",
2533 |             "description": "Indicates whether the product is available in-store.",
2534 |             "example": true
2535 |           },
2536 |           "userId": {
2537 |             "type": "string",
2538 |             "description": "The unique identifier for the user who created the product.",
2539 |             "example": "6YAtzfzpmHAdj0e8GkKp"
2540 |           },
2541 |           "createdAt": {
2542 |             "format": "date-time",
2543 |             "type": "string",
2544 |             "description": "The creation timestamp of the product.",
2545 |             "example": "2023-11-20T10:23:36.515Z"
2546 |           },
2547 |           "updatedAt": {
2548 |             "format": "date-time",
2549 |             "type": "string",
2550 |             "description": "The last update timestamp of the product.",
2551 |             "example": "2024-01-23T09:57:04.846Z"
2552 |           },
2553 |           "statementDescriptor": {
2554 |             "type": "string",
2555 |             "description": "The statement descriptor for the product.",
2556 |             "example": "abcde"
2557 |           },
2558 |           "image": {
2559 |             "type": "string",
2560 |             "description": "The URL for the product image.",
2561 |             "example": "https://storage.googleapis.com/ghl-test/3SwdhCsvxI8Au3KsPJt6/media/65af8d5df88bdb4b1022ee90.png"
2562 |           }
2563 |         },
2564 |         "required": [
2565 |           "_id",
2566 |           "locationId",
2567 |           "name",
2568 |           "productType",
2569 |           "createdAt",
2570 |           "updatedAt"
2571 |         ]
2572 |       },
2573 |       "ListProductsStats": {
2574 |         "type": "object",
2575 |         "properties": {
2576 |           "total": {
2577 |             "type": "number",
2578 |             "description": "Total number of products",
2579 |             "example": 20
2580 |           }
2581 |         },
2582 |         "required": [
2583 |           "total"
2584 |         ]
2585 |       },
2586 |       "ListProductsResponseDto": {
2587 |         "type": "object",
2588 |         "properties": {
2589 |           "products": {
2590 |             "description": "An array of products",
2591 |             "type": "array",
2592 |             "items": {
2593 |               "$ref": "#/components/schemas/DefaultProductResponseDto"
2594 |             }
2595 |           },
2596 |           "total": {
2597 |             "description": "list products status",
2598 |             "type": "array",
2599 |             "items": {
2600 |               "$ref": "#/components/schemas/ListProductsStats"
2601 |             }
2602 |           }
2603 |         },
2604 |         "required": [
2605 |           "products",
2606 |           "total"
2607 |         ]
2608 |       }
2609 |     }
2610 |   }
2611 | }


--------------------------------------------------------------------------------
/saas-api/saas-api.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/saas-api/public-api/locations": {
  5 |       "get": {
  6 |         "operationId": "locations",
  7 |         "summary": "Get locations by stripeId with companyId",
  8 |         "description": "Get locations by stripeCustomerId or stripeSubscriptionId with companyId",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-04-15"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "channel",
 34 |             "in": "header",
 35 |             "description": "Api channel",
 36 |             "required": true,
 37 |             "schema": {
 38 |               "type": "string",
 39 |               "enum": [
 40 |                 "OAUTH"
 41 |               ]
 42 |             }
 43 |           },
 44 |           {
 45 |             "name": "source",
 46 |             "in": "header",
 47 |             "description": "Api source",
 48 |             "required": true,
 49 |             "schema": {
 50 |               "type": "string",
 51 |               "enum": [
 52 |                 "INTEGRATION"
 53 |               ]
 54 |             }
 55 |           },
 56 |           {
 57 |             "name": "customerId",
 58 |             "required": true,
 59 |             "in": "query",
 60 |             "schema": {
 61 |               "type": "string"
 62 |             }
 63 |           },
 64 |           {
 65 |             "name": "subscriptionId",
 66 |             "required": true,
 67 |             "in": "query",
 68 |             "schema": {
 69 |               "type": "string"
 70 |             }
 71 |           },
 72 |           {
 73 |             "name": "companyId",
 74 |             "required": true,
 75 |             "in": "query",
 76 |             "schema": {
 77 |               "type": "string"
 78 |             }
 79 |           }
 80 |         ],
 81 |         "responses": {
 82 |           "200": {
 83 |             "description": ""
 84 |           }
 85 |         },
 86 |         "tags": [
 87 |           "SaaS"
 88 |         ],
 89 |         "security": [
 90 |           {
 91 |             "Agency-Access": []
 92 |           }
 93 |         ]
 94 |       }
 95 |     },
 96 |     "/saas-api/public-api/update-saas-subscription/{locationId}": {
 97 |       "put": {
 98 |         "operationId": "generate-payment-link",
 99 |         "summary": "Update SaaS subscription",
100 |         "description": "Update SaaS subscription for given locationId and customerId",
101 |         "parameters": [
102 |           {
103 |             "name": "Authorization",
104 |             "in": "header",
105 |             "description": "Access Token",
106 |             "required": true,
107 |             "schema": {
108 |               "type": "string",
109 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
110 |             }
111 |           },
112 |           {
113 |             "name": "Version",
114 |             "in": "header",
115 |             "description": "API Version",
116 |             "required": true,
117 |             "schema": {
118 |               "type": "string",
119 |               "enum": [
120 |                 "2021-04-15"
121 |               ]
122 |             }
123 |           },
124 |           {
125 |             "name": "channel",
126 |             "in": "header",
127 |             "description": "Api channel",
128 |             "required": true,
129 |             "schema": {
130 |               "type": "string",
131 |               "enum": [
132 |                 "OAUTH"
133 |               ]
134 |             }
135 |           },
136 |           {
137 |             "name": "source",
138 |             "in": "header",
139 |             "description": "Api source",
140 |             "required": true,
141 |             "schema": {
142 |               "type": "string",
143 |               "enum": [
144 |                 "INTEGRATION"
145 |               ]
146 |             }
147 |           },
148 |           {
149 |             "name": "locationId",
150 |             "required": true,
151 |             "in": "path",
152 |             "schema": {
153 |               "type": "string"
154 |             }
155 |           }
156 |         ],
157 |         "requestBody": {
158 |           "required": true,
159 |           "content": {
160 |             "application/json": {
161 |               "schema": {
162 |                 "$ref": "#/components/schemas/UpdateSubscriptionDto"
163 |               }
164 |             }
165 |           }
166 |         },
167 |         "responses": {
168 |           "200": {
169 |             "description": ""
170 |           }
171 |         },
172 |         "tags": [
173 |           "SaaS"
174 |         ],
175 |         "security": [
176 |           {
177 |             "Agency-Access": []
178 |           }
179 |         ]
180 |       }
181 |     },
182 |     "/saas-api/public-api/bulk-disable-saas/{companyId}": {
183 |       "post": {
184 |         "operationId": "bulk-disable-saas",
185 |         "summary": "Disable SaaS for locations",
186 |         "description": "Disable SaaS for locations for given locationIds",
187 |         "parameters": [
188 |           {
189 |             "name": "Authorization",
190 |             "in": "header",
191 |             "description": "Access Token",
192 |             "required": true,
193 |             "schema": {
194 |               "type": "string",
195 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
196 |             }
197 |           },
198 |           {
199 |             "name": "Version",
200 |             "in": "header",
201 |             "description": "API Version",
202 |             "required": true,
203 |             "schema": {
204 |               "type": "string",
205 |               "enum": [
206 |                 "2021-04-15"
207 |               ]
208 |             }
209 |           },
210 |           {
211 |             "name": "channel",
212 |             "in": "header",
213 |             "description": "Api channel",
214 |             "required": true,
215 |             "schema": {
216 |               "type": "string",
217 |               "enum": [
218 |                 "OAUTH"
219 |               ]
220 |             }
221 |           },
222 |           {
223 |             "name": "source",
224 |             "in": "header",
225 |             "description": "Api source",
226 |             "required": true,
227 |             "schema": {
228 |               "type": "string",
229 |               "enum": [
230 |                 "INTEGRATION"
231 |               ]
232 |             }
233 |           },
234 |           {
235 |             "name": "companyId",
236 |             "required": true,
237 |             "in": "path",
238 |             "schema": {
239 |               "type": "string"
240 |             }
241 |           }
242 |         ],
243 |         "requestBody": {
244 |           "required": true,
245 |           "content": {
246 |             "application/json": {
247 |               "schema": {
248 |                 "$ref": "#/components/schemas/BulkDisableSaasDto"
249 |               }
250 |             }
251 |           }
252 |         },
253 |         "responses": {
254 |           "201": {
255 |             "description": ""
256 |           }
257 |         },
258 |         "tags": [
259 |           "SaaS"
260 |         ],
261 |         "security": [
262 |           {
263 |             "Agency-Access": []
264 |           }
265 |         ]
266 |       }
267 |     },
268 |     "/saas-api/public-api/enable-saas/{locationId}": {
269 |       "post": {
270 |         "operationId": "enable-saas-location",
271 |         "summary": "Enable SaaS for Sub-Account (Formerly Location)",
272 |         "description": "<div>\n                  <p>Enable SaaS for Sub-Account (Formerly Location) based on the data provided</p>\n                  <div>\n                    <span style= \"display: inline-block;\n                                width: 25px; height: 25px;\n                                background-color: yellow;\n                                color: black;\n                                font-weight: bold;\n                                font-size: 24px;\n                                text-align: center;\n                                line-height: 22px;\n                                border: 2px solid black;\n                                border-radius: 10%;\n                                margin-right: 10px;\">\n                                !\n                      </span>\n                      <span>\n                        <strong>\n                          This feature is only available on Agency Pro ($497) plan.\n                        </strong>\n                      </span>\n                  </div>\n                </div>\n    ",
273 |         "parameters": [
274 |           {
275 |             "name": "Authorization",
276 |             "in": "header",
277 |             "description": "Access Token",
278 |             "required": true,
279 |             "schema": {
280 |               "type": "string",
281 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
282 |             }
283 |           },
284 |           {
285 |             "name": "Version",
286 |             "in": "header",
287 |             "description": "API Version",
288 |             "required": true,
289 |             "schema": {
290 |               "type": "string",
291 |               "enum": [
292 |                 "2021-04-15"
293 |               ]
294 |             }
295 |           },
296 |           {
297 |             "name": "channel",
298 |             "in": "header",
299 |             "description": "Api channel",
300 |             "required": true,
301 |             "schema": {
302 |               "type": "string",
303 |               "enum": [
304 |                 "OAUTH"
305 |               ]
306 |             }
307 |           },
308 |           {
309 |             "name": "source",
310 |             "in": "header",
311 |             "description": "Api source",
312 |             "required": true,
313 |             "schema": {
314 |               "type": "string",
315 |               "enum": [
316 |                 "INTEGRATION"
317 |               ]
318 |             }
319 |           },
320 |           {
321 |             "name": "locationId",
322 |             "required": true,
323 |             "in": "path",
324 |             "schema": {
325 |               "type": "string"
326 |             }
327 |           }
328 |         ],
329 |         "requestBody": {
330 |           "required": true,
331 |           "content": {
332 |             "application/json": {
333 |               "schema": {
334 |                 "$ref": "#/components/schemas/EnableSaasDto"
335 |               }
336 |             }
337 |           }
338 |         },
339 |         "responses": {
340 |           "201": {
341 |             "description": ""
342 |           }
343 |         },
344 |         "tags": [
345 |           "SaaS"
346 |         ],
347 |         "security": [
348 |           {
349 |             "Agency-Access": []
350 |           }
351 |         ]
352 |       }
353 |     },
354 |     "/saas-api/public-api/pause/{locationId}": {
355 |       "post": {
356 |         "operationId": "pause-location",
357 |         "summary": "Pause location",
358 |         "description": "Pause Sub account for given locationId",
359 |         "parameters": [
360 |           {
361 |             "name": "Authorization",
362 |             "in": "header",
363 |             "description": "Access Token",
364 |             "required": true,
365 |             "schema": {
366 |               "type": "string",
367 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
368 |             }
369 |           },
370 |           {
371 |             "name": "Version",
372 |             "in": "header",
373 |             "description": "API Version",
374 |             "required": true,
375 |             "schema": {
376 |               "type": "string",
377 |               "enum": [
378 |                 "2021-04-15"
379 |               ]
380 |             }
381 |           },
382 |           {
383 |             "name": "channel",
384 |             "in": "header",
385 |             "description": "Api channel",
386 |             "required": true,
387 |             "schema": {
388 |               "type": "string",
389 |               "enum": [
390 |                 "OAUTH"
391 |               ]
392 |             }
393 |           },
394 |           {
395 |             "name": "source",
396 |             "in": "header",
397 |             "description": "Api source",
398 |             "required": true,
399 |             "schema": {
400 |               "type": "string",
401 |               "enum": [
402 |                 "INTEGRATION"
403 |               ]
404 |             }
405 |           },
406 |           {
407 |             "name": "locationId",
408 |             "required": true,
409 |             "in": "path",
410 |             "schema": {
411 |               "type": "string"
412 |             }
413 |           }
414 |         ],
415 |         "requestBody": {
416 |           "required": true,
417 |           "content": {
418 |             "application/json": {
419 |               "schema": {
420 |                 "$ref": "#/components/schemas/PauseLocationDto"
421 |               }
422 |             }
423 |           }
424 |         },
425 |         "responses": {
426 |           "201": {
427 |             "description": ""
428 |           }
429 |         },
430 |         "tags": [
431 |           "SaaS"
432 |         ],
433 |         "security": [
434 |           {
435 |             "Agency-Access": []
436 |           }
437 |         ]
438 |       }
439 |     },
440 |     "/saas-api/public-api/update-rebilling/{companyId}": {
441 |       "post": {
442 |         "operationId": "update-rebilling",
443 |         "summary": "Update Rebilling",
444 |         "description": "Bulk update rebilling for given locationIds",
445 |         "parameters": [
446 |           {
447 |             "name": "Authorization",
448 |             "in": "header",
449 |             "description": "Access Token",
450 |             "required": true,
451 |             "schema": {
452 |               "type": "string",
453 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
454 |             }
455 |           },
456 |           {
457 |             "name": "Version",
458 |             "in": "header",
459 |             "description": "API Version",
460 |             "required": true,
461 |             "schema": {
462 |               "type": "string",
463 |               "enum": [
464 |                 "2021-04-15"
465 |               ]
466 |             }
467 |           },
468 |           {
469 |             "name": "channel",
470 |             "in": "header",
471 |             "description": "Api channel",
472 |             "required": true,
473 |             "schema": {
474 |               "type": "string",
475 |               "enum": [
476 |                 "OAUTH"
477 |               ]
478 |             }
479 |           },
480 |           {
481 |             "name": "source",
482 |             "in": "header",
483 |             "description": "Api source",
484 |             "required": true,
485 |             "schema": {
486 |               "type": "string",
487 |               "enum": [
488 |                 "INTEGRATION"
489 |               ]
490 |             }
491 |           },
492 |           {
493 |             "name": "companyId",
494 |             "required": true,
495 |             "in": "path",
496 |             "schema": {
497 |               "type": "string"
498 |             }
499 |           }
500 |         ],
501 |         "requestBody": {
502 |           "required": true,
503 |           "content": {
504 |             "application/json": {
505 |               "schema": {
506 |                 "$ref": "#/components/schemas/UpdateRebillingDto"
507 |               }
508 |             }
509 |           }
510 |         },
511 |         "responses": {
512 |           "201": {
513 |             "description": ""
514 |           }
515 |         },
516 |         "tags": [
517 |           "SaaS"
518 |         ],
519 |         "security": [
520 |           {
521 |             "Agency-Access": []
522 |           }
523 |         ]
524 |       }
525 |     }
526 |   },
527 |   "info": {
528 |     "title": "SaaS API",
529 |     "description": "API Service for SaaS",
530 |     "version": "1.0",
531 |     "contact": {}
532 |   },
533 |   "tags": [
534 |     {
535 |       "name": "saas",
536 |       "description": "API Service for SaaS"
537 |     }
538 |   ],
539 |   "servers": [
540 |     {
541 |       "url": "https://services.leadconnectorhq.com"
542 |     }
543 |   ],
544 |   "components": {
545 |     "securitySchemes": {
546 |       "bearer": {
547 |         "scheme": "bearer",
548 |         "bearerFormat": "JWT",
549 |         "name": "token-id",
550 |         "in": "header",
551 |         "description": "Use the Access Token generated by exchanging API Key for token id",
552 |         "type": "http"
553 |       },
554 |       "Location-Access": {
555 |         "scheme": "bearer",
556 |         "bearerFormat": "JWT",
557 |         "name": "Authorization",
558 |         "in": "header",
559 |         "description": "Use the Access Token generated with user type as Location",
560 |         "type": "http"
561 |       },
562 |       "Agency-Access": {
563 |         "scheme": "bearer",
564 |         "bearerFormat": "JWT",
565 |         "name": "Authorization",
566 |         "in": "header",
567 |         "description": "Use the Access Token generated with user type as Company",
568 |         "type": "http"
569 |       }
570 |     },
571 |     "schemas": {
572 |       "UpdateSubscriptionDto": {
573 |         "type": "object",
574 |         "properties": {
575 |           "subscriptionId": {
576 |             "type": "string"
577 |           },
578 |           "customerId": {
579 |             "type": "string"
580 |           },
581 |           "companyId": {
582 |             "type": "string"
583 |           }
584 |         },
585 |         "required": [
586 |           "subscriptionId",
587 |           "customerId",
588 |           "companyId"
589 |         ]
590 |       },
591 |       "BulkDisableSaasDto": {
592 |         "type": "object",
593 |         "properties": {
594 |           "locationIds": {
595 |             "type": "array",
596 |             "items": {
597 |               "type": "string"
598 |             }
599 |           }
600 |         },
601 |         "required": [
602 |           "locationIds"
603 |         ]
604 |       },
605 |       "EnableSaasDto": {
606 |         "type": "object",
607 |         "properties": {
608 |           "stripeAccountId": {
609 |             "type": "string",
610 |             "description": "Stripe account id(Required only for SaaS V1)",
611 |             "example": "acct_1QDPY5FpU9DlKp7RQ8BXfywx"
612 |           },
613 |           "name": {
614 |             "type": "string",
615 |             "description": "Name of the stripe customer(Required only for SaaS V1)",
616 |             "example": "John Doe"
617 |           },
618 |           "email": {
619 |             "type": "string",
620 |             "description": "Email of the stripe customer(Required only for SaaS V1)",
621 |             "example": "john.doe@example.com"
622 |           },
623 |           "stripeCustomerId": {
624 |             "type": "string",
625 |             "description": "Stripe customer id if exists(Required only for SaaS V1)",
626 |             "example": "cus_1QDPY5FpU9DlKp7RQ8BXfywx"
627 |           },
628 |           "companyId": {
629 |             "type": "string"
630 |           },
631 |           "isSaaSV2": {
632 |             "type": "boolean",
633 |             "description": "Denotes if it is a saas v2 or v1 sub-account",
634 |             "example": true
635 |           },
636 |           "contactId": {
637 |             "type": "string",
638 |             "description": "Agency subaccount used for payment provider integration(Required Only for SaaS V2)",
639 |             "example": "1QDPY5FpU9DlKp7RQ8BXfywx"
640 |           },
641 |           "providerLocationId": {
642 |             "type": "string"
643 |           },
644 |           "description": {
645 |             "type": "string"
646 |           },
647 |           "saasPlanId": {
648 |             "type": "string",
649 |             "description": "Required only while pre-configuring saas subscription",
650 |             "example": "1QDPY5FpU9DlKp7RQ8BXfywx"
651 |           },
652 |           "priceId": {
653 |             "type": "string",
654 |             "description": "Required only while pre-configuring saas subscription",
655 |             "example": "price_1QDPY5FpU9DlKp7RQ8BXfywx"
656 |           }
657 |         },
658 |         "required": [
659 |           "companyId",
660 |           "isSaaSV2"
661 |         ]
662 |       },
663 |       "PauseLocationDto": {
664 |         "type": "object",
665 |         "properties": {
666 |           "paused": {
667 |             "type": "boolean"
668 |           },
669 |           "companyId": {
670 |             "type": "string"
671 |           }
672 |         },
673 |         "required": [
674 |           "paused",
675 |           "companyId"
676 |         ]
677 |       },
678 |       "UpdateRebillingDto": {
679 |         "type": "object",
680 |         "properties": {
681 |           "product": {
682 |             "type": "string"
683 |           },
684 |           "locationIds": {
685 |             "type": "array",
686 |             "items": {
687 |               "type": "string"
688 |             }
689 |           },
690 |           "config": {
691 |             "type": "object"
692 |           }
693 |         },
694 |         "required": [
695 |           "product",
696 |           "locationIds",
697 |           "config"
698 |         ]
699 |       }
700 |     }
701 |   }
702 | }


--------------------------------------------------------------------------------
/snapshots/snapshots.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/snapshots/": {
  5 |       "get": {
  6 |         "operationId": "get-custom-snapshots",
  7 |         "summary": "Get Snapshots",
  8 |         "description": "Get a list of all own and imported Snapshots",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "companyId",
 34 |             "required": true,
 35 |             "in": "query",
 36 |             "example": "5D112kQsiKESj6rash",
 37 |             "description": "Company Id",
 38 |             "schema": {
 39 |               "type": "string"
 40 |             }
 41 |           }
 42 |         ],
 43 |         "responses": {
 44 |           "200": {
 45 |             "description": "Successful response",
 46 |             "content": {
 47 |               "application/json": {
 48 |                 "schema": {
 49 |                   "$ref": "#/components/schemas/GetSnapshotsSuccessfulResponseDto"
 50 |                 }
 51 |               }
 52 |             }
 53 |           },
 54 |           "400": {
 55 |             "description": "Bad Request",
 56 |             "content": {
 57 |               "application/json": {
 58 |                 "schema": {
 59 |                   "$ref": "#/components/schemas/BadRequestDTO"
 60 |                 }
 61 |               }
 62 |             }
 63 |           },
 64 |           "401": {
 65 |             "description": "Unauthorized",
 66 |             "content": {
 67 |               "application/json": {
 68 |                 "schema": {
 69 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 70 |                 }
 71 |               }
 72 |             }
 73 |           }
 74 |         },
 75 |         "tags": [
 76 |           "Snapshots"
 77 |         ],
 78 |         "security": [
 79 |           {
 80 |             "Agency-Access": []
 81 |           }
 82 |         ]
 83 |       }
 84 |     },
 85 |     "/snapshots/share/link": {
 86 |       "post": {
 87 |         "operationId": "create-snapshot-share-link",
 88 |         "summary": "Create Snapshot Share Link",
 89 |         "description": "Create a share link for snapshot",
 90 |         "parameters": [
 91 |           {
 92 |             "name": "Authorization",
 93 |             "in": "header",
 94 |             "description": "Access Token",
 95 |             "required": true,
 96 |             "schema": {
 97 |               "type": "string",
 98 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 99 |             }
100 |           },
101 |           {
102 |             "name": "companyId",
103 |             "required": true,
104 |             "in": "query",
105 |             "schema": {
106 |               "type": "string"
107 |             }
108 |           },
109 |           {
110 |             "name": "Version",
111 |             "in": "header",
112 |             "description": "API Version",
113 |             "required": true,
114 |             "schema": {
115 |               "type": "string",
116 |               "enum": [
117 |                 "2021-07-28"
118 |               ]
119 |             }
120 |           }
121 |         ],
122 |         "requestBody": {
123 |           "required": true,
124 |           "content": {
125 |             "application/json": {
126 |               "schema": {
127 |                 "$ref": "#/components/schemas/CreateSnapshotShareLinkRequestDTO"
128 |               }
129 |             }
130 |           }
131 |         },
132 |         "responses": {
133 |           "201": {
134 |             "description": "Successful response",
135 |             "content": {
136 |               "application/json": {
137 |                 "schema": {
138 |                   "$ref": "#/components/schemas/CreateSnapshotShareLinkSuccessfulResponseDTO"
139 |                 }
140 |               }
141 |             }
142 |           },
143 |           "400": {
144 |             "description": "Bad Request",
145 |             "content": {
146 |               "application/json": {
147 |                 "schema": {
148 |                   "$ref": "#/components/schemas/BadRequestDTO"
149 |                 }
150 |               }
151 |             }
152 |           },
153 |           "401": {
154 |             "description": "Unauthorized",
155 |             "content": {
156 |               "application/json": {
157 |                 "schema": {
158 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
159 |                 }
160 |               }
161 |             }
162 |           }
163 |         },
164 |         "tags": [
165 |           "Snapshots"
166 |         ],
167 |         "security": [
168 |           {
169 |             "Agency-Access": []
170 |           }
171 |         ]
172 |       }
173 |     },
174 |     "/snapshots/snapshot-status/{snapshotId}": {
175 |       "get": {
176 |         "operationId": "get-snapshot-push",
177 |         "summary": "Get Snapshot Push between Dates",
178 |         "description": "Get list of sub-accounts snapshot pushed in time period",
179 |         "parameters": [
180 |           {
181 |             "name": "Authorization",
182 |             "in": "header",
183 |             "description": "Access Token",
184 |             "required": true,
185 |             "schema": {
186 |               "type": "string",
187 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
188 |             }
189 |           },
190 |           {
191 |             "name": "snapshotId",
192 |             "required": true,
193 |             "in": "path",
194 |             "schema": {
195 |               "type": "string",
196 |               "example": "39It2BFz7EkNaNBALPif"
197 |             }
198 |           },
199 |           {
200 |             "name": "companyId",
201 |             "required": true,
202 |             "in": "query",
203 |             "schema": {
204 |               "type": "string",
205 |               "example": "5D112kQsiKESj6rash"
206 |             }
207 |           },
208 |           {
209 |             "name": "from",
210 |             "required": true,
211 |             "in": "query",
212 |             "schema": {
213 |               "type": "string",
214 |               "example": "10-10-2022 12:00 AM"
215 |             }
216 |           },
217 |           {
218 |             "name": "to",
219 |             "required": true,
220 |             "in": "query",
221 |             "schema": {
222 |               "type": "string",
223 |               "example": "12-18-2023 11:59 PM"
224 |             }
225 |           },
226 |           {
227 |             "name": "lastDoc",
228 |             "required": true,
229 |             "description": "Id for last document till what you want to skip",
230 |             "in": "query",
231 |             "schema": {
232 |               "type": "string",
233 |               "example":"VUJO4Sw2TrDNZ5lx4wZg"
234 |             }
235 |           },
236 |           {
237 |             "name": "limit",
238 |             "required": true,
239 |             "in": "query",
240 |             "schema": {
241 |               "type": "string",
242 |               "example":"10"
243 |             }
244 |           },
245 |           {
246 |             "name": "Version",
247 |             "in": "header",
248 |             "description": "API Version",
249 |             "required": true,
250 |             "schema": {
251 |               "type": "string",
252 |               "enum": [
253 |                 "2021-07-28"
254 |               ]
255 |             }
256 |           }
257 |         ],
258 |         "responses": {
259 |           "200": {
260 |             "description": "Successful response",
261 |             "content": {
262 |               "application/json": {
263 |                 "schema": {
264 |                   "$ref": "#/components/schemas/GetSnapshotPushStatusSuccessfulResponseDTO"
265 |                 }
266 |               }
267 |             }
268 |           },
269 |           "400": {
270 |             "description": "Bad Request",
271 |             "content": {
272 |               "application/json": {
273 |                 "schema": {
274 |                   "$ref": "#/components/schemas/BadRequestDTO"
275 |                 }
276 |               }
277 |             }
278 |           },
279 |           "401": {
280 |             "description": "Unauthorized",
281 |             "content": {
282 |               "application/json": {
283 |                 "schema": {
284 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
285 |                 }
286 |               }
287 |             }
288 |           }
289 |         },
290 |         "tags": [
291 |           "Snapshots"
292 |         ],
293 |         "security": [
294 |           {
295 |             "Agency-Access": []
296 |           }
297 |         ]
298 |       }
299 |     },
300 |     "/snapshots/snapshot-status/{snapshotId}/location/{locationId}": {
301 |       "get": {
302 |         "operationId": "get-latest-snapshot-push",
303 |         "summary": "Get Last Snapshot Push",
304 |         "description": "Get Latest Snapshot Push Status for a location id",
305 |         "parameters": [
306 |           {
307 |             "name": "Authorization",
308 |             "in": "header",
309 |             "description": "Access Token",
310 |             "required": true,
311 |             "schema": {
312 |               "type": "string",
313 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
314 |             }
315 |           },
316 |           {
317 |             "name": "companyId",
318 |             "required": true,
319 |             "in": "query",
320 |             "schema": {
321 |               "type": "string",
322 |               "example": "5D112kQsiKESj6rash"
323 |             }
324 |           },
325 |           {
326 |             "name": "snapshotId",
327 |             "required": true,
328 |             "in": "path",
329 |             "schema": {
330 |               "type": "string",
331 |               "example": "39It2BFz7EkNaNBALPif"
332 |             }
333 |           },
334 |           {
335 |             "name": "locationId",
336 |             "required": true,
337 |             "in": "path",
338 |             "schema": {
339 |               "type": "string",
340 |               "example": "IIRGHCgxSINdPT79M75P"
341 |             }
342 |           },
343 |           {
344 |             "name": "Version",
345 |             "in": "header",
346 |             "description": "API Version",
347 |             "required": true,
348 |             "schema": {
349 |               "type": "string",
350 |               "enum": [
351 |                 "2021-07-28"
352 |               ]
353 |             }
354 |           }
355 |         ],
356 |         "responses": {
357 |           "200": {
358 |             "description": "Successful response",
359 |             "content": {
360 |               "application/json": {
361 |                 "schema": {
362 |                   "$ref": "#/components/schemas/GetLatestSnapshotPushStatusSuccessfulResponseDTO"
363 |                 }
364 |               }
365 |             }
366 |           },
367 |           "400": {
368 |             "description": "Bad Request",
369 |             "content": {
370 |               "application/json": {
371 |                 "schema": {
372 |                   "$ref": "#/components/schemas/BadRequestDTO"
373 |                 }
374 |               }
375 |             }
376 |           },
377 |           "401": {
378 |             "description": "Unauthorized",
379 |             "content": {
380 |               "application/json": {
381 |                 "schema": {
382 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
383 |                 }
384 |               }
385 |             }
386 |           }
387 |         },
388 |         "tags": [
389 |           "Snapshots"
390 |         ],
391 |         "security": [
392 |           {
393 |             "Agency-Access": []
394 |           }
395 |         ]
396 |       }
397 |     }
398 |   },
399 |   "info": {
400 |     "title": "Snapshots API",
401 |     "description": "Documentation for Snapshots API",
402 |     "version": "1.0",
403 |     "contact": {}
404 |   },
405 |   "tags": [
406 |     {
407 |       "name": "Snapshots",
408 |       "description": "Documentation for Snapshots API"
409 |     }
410 |   ],
411 |   "servers": [
412 |     {
413 |       "url": "https://services.leadconnectorhq.com"
414 |     }
415 |   ],
416 |   "components": {
417 |     "securitySchemes": {
418 |       "bearer": {
419 |         "scheme": "bearer",
420 |         "bearerFormat": "JWT",
421 |         "name": "Authorization",
422 |         "in": "header",
423 |         "description": "Use the Access Token generated with user type as Location (OR) Personal Integration Token from Location.",
424 |         "type": "http"
425 |       },
426 |       "Location-Access": {
427 |         "scheme": "bearer",
428 |         "bearerFormat": "JWT",
429 |         "name": "Authorization",
430 |         "in": "header",
431 |         "description": "Use the Access Token generated with user type as Location (OR) Personal Integration Token from Location.",
432 |         "type": "http"
433 |       },
434 |       "Agency-Access": {
435 |         "scheme": "bearer",
436 |         "bearerFormat": "JWT",
437 |         "name": "Authorization",
438 |         "in": "header",
439 |         "description": "Use the Access Token generated with user type as Agency (OR) Personal Integration Token from Agency.",
440 |         "type": "http"
441 |       }
442 |     },
443 |     "schemas": {
444 |       "BadRequestDTO": {
445 |         "type": "object",
446 |         "properties": {
447 |           "statusCode": {
448 |             "type": "number",
449 |             "example": 400
450 |           },
451 |           "message": {
452 |             "type": "string",
453 |             "example": "Bad Request"
454 |           }
455 |         }
456 |       },
457 |       "UnauthorizedDTO": {
458 |         "type": "object",
459 |         "properties": {
460 |           "statusCode": {
461 |             "type": "number",
462 |             "example": 401
463 |           },
464 |           "message": {
465 |             "type": "string",
466 |             "example": "Invalid token: access token is invalid"
467 |           },
468 |           "error": {
469 |             "type": "string",
470 |             "example": "Unauthorized"
471 |           }
472 |         }
473 |       },
474 |       "SnapshotsSchema": {
475 |         "type": "object",
476 |         "properties": {
477 |           "id": {
478 |             "type": "string",
479 |             "example": "1eM2UgkfaECOYyUdCo9Pa",
480 |             "description": "Snapshot Id."
481 |           },
482 |           "name": {
483 |             "type": "string",
484 |             "example": "Martial Arts Snapshot",
485 |             "description": "Name of the snapshot"
486 |           },
487 |           "type": {
488 |             "type": "string",
489 |             "example": "own",
490 |             "description": "Type of snapshot - own or imported."
491 |           }
492 |         }
493 |       },
494 |       "GetSnapshotsSuccessfulResponseDto": {
495 |         "type": "object",
496 |         "properties": {
497 |           "snapshots": {
498 |             "type": "array",
499 |             "items": {
500 |               "$ref": "#/components/schemas/SnapshotsSchema"
501 |             }
502 |           }
503 |         }
504 |       },
505 |       "CreateSnapshotShareLinkRequestDTO": {
506 |         "type": "object",
507 |         "properties": {
508 |           "snapshot_id": {
509 |             "type": "string",
510 |             "example": "1eM2UgkfaECOYyUdCo9Pa",
511 |             "description": "id for snapshot to be shared"
512 |           },
513 |           "share_type": {
514 |             "type": "string",
515 |             "example": "permanent_link",
516 |             "description": "Type of share link to generate",
517 |             "enum": [
518 |               "link",
519 |               "permanent_link",
520 |               "agency_link",
521 |               "location_link"
522 |             ]
523 |           },
524 |           "relationship_number": {
525 |             "type": "string",
526 |             "example": "0-128-926,1-208-926,2-008-926",
527 |             "description": "Comma separated Relationship number of Agencies to create agency restricted share link"
528 |           },
529 |           "share_location_id": {
530 |             "type": "string",
531 |             "example": "l1C08ntBrFjLS0elLIYU, U1C08ntBrFjLS0elKIYP",
532 |             "description": "Comma separated Sub-Account ids to create sub-account restricted share link"
533 |           }
534 |         },
535 |         "required": [
536 |           "snapshot_id",
537 |           "share_type"
538 |         ]
539 |       },
540 |       "CreateSnapshotShareLinkSuccessfulResponseDTO": {
541 |         "type": "object",
542 |         "properties": {
543 |           "id": {
544 |             "type": "string",
545 |             "example": "1eM2UgkfaECOYyUdCo9Pa",
546 |             "description": "id for shared snapshot"
547 |           },
548 |           "shareLink": {
549 |             "type": "string",
550 |             "example": "https://affiliates.gohighlevel.com/?share=1eM2UgkfaECOYyUdCo9Pa",
551 |             "description": "Share Link for snapshot"
552 |           }
553 |         }
554 |       },
555 |       "SnapshotStatusSchema": {
556 |         "type": "object",
557 |         "properties": {
558 |           "id": {
559 |             "type": "string",
560 |             "example": "1eM2UgkfaECOYyUdCo9Pa",
561 |             "description": "Document id"
562 |           },
563 |           "locationId": {
564 |             "type": "string",
565 |             "example": "BrKClvyvdxhJ9Mxz2pzQ",
566 |             "description": "Sub-account id"
567 |           },
568 |           "status": {
569 |             "type": "string",
570 |             "example": "processing",
571 |             "description": "Status of snapshot push"
572 |           },
573 |           "dateAdded": {
574 |             "format": "date-time",
575 |             "type": "string",
576 |             "example": "10/28/2022, 6:24:54 PM",
577 |             "description": "Timestamp of when snapshot processing starts for sub-account "
578 |           }
579 |         }
580 |       },
581 |       "GetSnapshotPushStatusSuccessfulResponseDTO": {
582 |         "type": "object",
583 |         "properties": {
584 |           "data": {
585 |             "type": "array",
586 |             "items": {
587 |               "$ref": "#/components/schemas/SnapshotStatusSchema"
588 |             }
589 |           }
590 |         }
591 |       },
592 |       "SnapshotStatusSchemaWithAssets": {
593 |         "type": "object",
594 |         "properties": {
595 |           "id": {
596 |             "type": "string",
597 |             "example": "1eM2UgkfaECOYyUdCo9Pa",
598 |             "description": "Document id"
599 |           },
600 |           "locationId": {
601 |             "type": "string",
602 |             "example": "BrKClvyvdxhJ9Mxz2pzQ",
603 |             "description": "Sub-account id"
604 |           },
605 |           "status": {
606 |             "type": "string",
607 |             "example": "processing",
608 |             "description": "Status of snapshot push"
609 |           },
610 |           "completed": {
611 |             "example": "['forms', 'surveys', 'funnels', 'workflows']",
612 |             "description": "List of completed assets",
613 |             "type": "array",
614 |             "items": {
615 |               "type": "string"
616 |             }
617 |           },
618 |           "pending": {
619 |             "example": "['custom_fields','custom_values','tags']",
620 |             "description": "List of pending assets",
621 |             "type": "array",
622 |             "items": {
623 |               "type": "string"
624 |             }
625 |           }
626 |         }
627 |       },
628 |       "GetLatestSnapshotPushStatusSuccessfulResponseDTO": {
629 |         "type": "object",
630 |         "properties": {
631 |           "data": {
632 |             "$ref": "#/components/schemas/SnapshotStatusSchemaWithAssets"
633 |           }
634 |         }
635 |       }
636 |     }
637 |   }
638 | }


--------------------------------------------------------------------------------
/social-media-posting/social-media-posting.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/social-media-posting/oauth/google/start": {
   5 |       "get": {
   6 |         "operationId": "start-google-oauth",
   7 |         "summary": "Starts OAuth For Google Account",
   8 |         "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Google login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"google\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Google account details using below API -\n  API: '/social-media-posting/oauth/google/accounts/:accountId' \n\n  Method: GET",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "locationId",
  34 |             "required": true,
  35 |             "in": "query",
  36 |             "description": "Location Id",
  37 |             "example": "w37swmmLbA02zgqKPpxITe2",
  38 |             "schema": {
  39 |               "type": "string"
  40 |             }
  41 |           },
  42 |           {
  43 |             "name": "userId",
  44 |             "required": true,
  45 |             "in": "query",
  46 |             "description": "User Id",
  47 |             "example": "u37swmmLbA02zgqKPpxITe2",
  48 |             "schema": {
  49 |               "type": "string"
  50 |             }
  51 |           },
  52 |           {
  53 |             "name": "page",
  54 |             "required": false,
  55 |             "in": "query",
  56 |             "description": "Page",
  57 |             "example": "integration",
  58 |             "schema": {
  59 |               "type": "string"
  60 |             }
  61 |           },
  62 |           {
  63 |             "name": "reconnect",
  64 |             "required": false,
  65 |             "in": "query",
  66 |             "description": "Reconnect",
  67 |             "example": "true",
  68 |             "schema": {
  69 |               "type": "string"
  70 |             }
  71 |           }
  72 |         ],
  73 |         "responses": {
  74 |           "200": {
  75 |             "description": "Successful Response"
  76 |           },
  77 |           "400": {
  78 |             "description": "Bad Request",
  79 |             "content": {
  80 |               "application/json": {
  81 |                 "schema": {
  82 |                   "$ref": "#/components/schemas/BadRequestDTO"
  83 |                 }
  84 |               }
  85 |             }
  86 |           },
  87 |           "401": {
  88 |             "description": "Unauthorized",
  89 |             "content": {
  90 |               "application/json": {
  91 |                 "schema": {
  92 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
  93 |                 }
  94 |               }
  95 |             }
  96 |           },
  97 |           "422": {
  98 |             "description": "Unprocessable Entity",
  99 |             "content": {
 100 |               "application/json": {
 101 |                 "schema": {
 102 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 103 |                 }
 104 |               }
 105 |             }
 106 |           }
 107 |         },
 108 |         "tags": [
 109 |           "Oauth | Google"
 110 |         ],
 111 |         "security": [
 112 |           {
 113 |             "bearer": []
 114 |           }
 115 |         ]
 116 |       }
 117 |     },
 118 |     "/social-media-posting/oauth/{locationId}/google/locations/{accountId}": {
 119 |       "get": {
 120 |         "operationId": "get-google-locations",
 121 |         "summary": "Get google business locations",
 122 |         "description": "Get google business locations",
 123 |         "parameters": [
 124 |           {
 125 |             "name": "Authorization",
 126 |             "in": "header",
 127 |             "description": "Access Token",
 128 |             "required": true,
 129 |             "schema": {
 130 |               "type": "string",
 131 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 132 |             }
 133 |           },
 134 |           {
 135 |             "name": "Version",
 136 |             "in": "header",
 137 |             "description": "API Version",
 138 |             "required": true,
 139 |             "schema": {
 140 |               "type": "string",
 141 |               "enum": [
 142 |                 "2021-07-28"
 143 |               ]
 144 |             }
 145 |           },
 146 |           {
 147 |             "name": "locationId",
 148 |             "required": true,
 149 |             "in": "path",
 150 |             "description": "Account Location Id",
 151 |             "example": "w37swmmLbA02zgqKPpxITe2",
 152 |             "schema": {
 153 |               "type": "string"
 154 |             }
 155 |           },
 156 |           {
 157 |             "name": "accountId",
 158 |             "required": true,
 159 |             "in": "path",
 160 |             "description": "Account Id",
 161 |             "example": "w37swmmLbA02zgqKPpxITe",
 162 |             "schema": {
 163 |               "type": "string"
 164 |             }
 165 |           }
 166 |         ],
 167 |         "responses": {
 168 |           "200": {
 169 |             "description": "Successful response",
 170 |             "content": {
 171 |               "application/json": {
 172 |                 "schema": {
 173 |                   "$ref": "#/components/schemas/GetGoogleLocationResponseDTO"
 174 |                 }
 175 |               }
 176 |             }
 177 |           },
 178 |           "400": {
 179 |             "description": "Bad Request",
 180 |             "content": {
 181 |               "application/json": {
 182 |                 "schema": {
 183 |                   "$ref": "#/components/schemas/BadRequestDTO"
 184 |                 }
 185 |               }
 186 |             }
 187 |           },
 188 |           "401": {
 189 |             "description": "Unauthorized",
 190 |             "content": {
 191 |               "application/json": {
 192 |                 "schema": {
 193 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 194 |                 }
 195 |               }
 196 |             }
 197 |           },
 198 |           "422": {
 199 |             "description": "Unprocessable Entity",
 200 |             "content": {
 201 |               "application/json": {
 202 |                 "schema": {
 203 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 204 |                 }
 205 |               }
 206 |             }
 207 |           }
 208 |         },
 209 |         "tags": [
 210 |           "Oauth | Google"
 211 |         ],
 212 |         "security": [
 213 |           {
 214 |             "bearer": []
 215 |           }
 216 |         ]
 217 |       },
 218 |       "post": {
 219 |         "operationId": "set-google-locations",
 220 |         "summary": "Set google business locations",
 221 |         "description": "Set google business locations",
 222 |         "parameters": [
 223 |           {
 224 |             "name": "Authorization",
 225 |             "in": "header",
 226 |             "description": "Access Token",
 227 |             "required": true,
 228 |             "schema": {
 229 |               "type": "string",
 230 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 231 |             }
 232 |           },
 233 |           {
 234 |             "name": "Version",
 235 |             "in": "header",
 236 |             "description": "API Version",
 237 |             "required": true,
 238 |             "schema": {
 239 |               "type": "string",
 240 |               "enum": [
 241 |                 "2021-07-28"
 242 |               ]
 243 |             }
 244 |           },
 245 |           {
 246 |             "name": "locationId",
 247 |             "required": true,
 248 |             "in": "path",
 249 |             "description": "Account Location Id",
 250 |             "example": "w37swmmLbA02zgqKPpxITe2",
 251 |             "schema": {
 252 |               "type": "string"
 253 |             }
 254 |           },
 255 |           {
 256 |             "name": "accountId",
 257 |             "required": true,
 258 |             "in": "path",
 259 |             "description": "Account Id",
 260 |             "example": "w37swmmLbA02zgqKPpxITe",
 261 |             "schema": {
 262 |               "type": "string"
 263 |             }
 264 |           }
 265 |         ],
 266 |         "requestBody": {
 267 |           "required": true,
 268 |           "content": {
 269 |             "application/json": {
 270 |               "schema": {
 271 |                 "$ref": "#/components/schemas/AttachGMBLocationDTO"
 272 |               }
 273 |             }
 274 |           }
 275 |         },
 276 |         "responses": {
 277 |           "201": {
 278 |             "description": "Successful response",
 279 |             "content": {
 280 |               "application/json": {
 281 |                 "schema": {
 282 |                   "$ref": "#/components/schemas/SocialMediaGmbAccountResponseDTO"
 283 |                 }
 284 |               }
 285 |             }
 286 |           },
 287 |           "400": {
 288 |             "description": "Bad Request",
 289 |             "content": {
 290 |               "application/json": {
 291 |                 "schema": {
 292 |                   "$ref": "#/components/schemas/BadRequestDTO"
 293 |                 }
 294 |               }
 295 |             }
 296 |           },
 297 |           "401": {
 298 |             "description": "Unauthorized",
 299 |             "content": {
 300 |               "application/json": {
 301 |                 "schema": {
 302 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 303 |                 }
 304 |               }
 305 |             }
 306 |           },
 307 |           "422": {
 308 |             "description": "Unprocessable Entity",
 309 |             "content": {
 310 |               "application/json": {
 311 |                 "schema": {
 312 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 313 |                 }
 314 |               }
 315 |             }
 316 |           }
 317 |         },
 318 |         "tags": [
 319 |           "Oauth | Google"
 320 |         ],
 321 |         "security": [
 322 |           {
 323 |             "bearer": []
 324 |           }
 325 |         ]
 326 |       }
 327 |     },
 328 |     "/social-media-posting/{locationId}/posts/list": {
 329 |       "post": {
 330 |         "operationId": "get-posts",
 331 |         "summary": "Get posts",
 332 |         "description": "Get Posts",
 333 |         "parameters": [
 334 |           {
 335 |             "name": "Authorization",
 336 |             "in": "header",
 337 |             "description": "Access Token",
 338 |             "required": true,
 339 |             "schema": {
 340 |               "type": "string",
 341 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 342 |             }
 343 |           },
 344 |           {
 345 |             "name": "Version",
 346 |             "in": "header",
 347 |             "description": "API Version",
 348 |             "required": true,
 349 |             "schema": {
 350 |               "type": "string",
 351 |               "enum": [
 352 |                 "2021-07-28"
 353 |               ]
 354 |             }
 355 |           },
 356 |           {
 357 |             "name": "locationId",
 358 |             "required": true,
 359 |             "in": "path",
 360 |             "description": "Location Id",
 361 |             "example": "ve9EPM428h8vShlRW1KT",
 362 |             "schema": {
 363 |               "type": "string"
 364 |             }
 365 |           }
 366 |         ],
 367 |         "requestBody": {
 368 |           "required": true,
 369 |           "content": {
 370 |             "application/json": {
 371 |               "schema": {
 372 |                 "$ref": "#/components/schemas/SearchPostDTO"
 373 |               }
 374 |             }
 375 |           }
 376 |         },
 377 |         "responses": {
 378 |           "201": {
 379 |             "description": "Successful response",
 380 |             "content": {
 381 |               "application/json": {
 382 |                 "schema": {
 383 |                   "$ref": "#/components/schemas/PostSuccessfulResponseDTO"
 384 |                 }
 385 |               }
 386 |             }
 387 |           },
 388 |           "400": {
 389 |             "description": "Bad Request",
 390 |             "content": {
 391 |               "application/json": {
 392 |                 "schema": {
 393 |                   "$ref": "#/components/schemas/BadRequestDTO"
 394 |                 }
 395 |               }
 396 |             }
 397 |           },
 398 |           "401": {
 399 |             "description": "Unauthorized",
 400 |             "content": {
 401 |               "application/json": {
 402 |                 "schema": {
 403 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 404 |                 }
 405 |               }
 406 |             }
 407 |           },
 408 |           "422": {
 409 |             "description": "Unprocessable Entity",
 410 |             "content": {
 411 |               "application/json": {
 412 |                 "schema": {
 413 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 414 |                 }
 415 |               }
 416 |             }
 417 |           }
 418 |         },
 419 |         "tags": [
 420 |           "Post"
 421 |         ],
 422 |         "security": [
 423 |           {
 424 |             "bearer": []
 425 |           }
 426 |         ]
 427 |       }
 428 |     },
 429 |     "/social-media-posting/{locationId}/posts": {
 430 |       "post": {
 431 |         "operationId": "create-post",
 432 |         "summary": "Create post",
 433 |         "description": "Create posts for all supported platforms. It is possible to create customized posts per channel by using the same platform account IDs in a request and hitting the create post API multiple times with different summaries and account IDs per platform.\n\nThe content and media limitations, as well as platform rate limiters corresponding to the respective platforms, are provided in the following reference link:\n\n  Link: [Platform Limitations](https://help.leadconnectorhq.com/support/solutions/articles/48001240003-social-planner-image-video-content-and-api-limitations \"Social Planner Help\")",
 434 |         "parameters": [
 435 |           {
 436 |             "name": "Authorization",
 437 |             "in": "header",
 438 |             "description": "Access Token",
 439 |             "required": true,
 440 |             "schema": {
 441 |               "type": "string",
 442 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 443 |             }
 444 |           },
 445 |           {
 446 |             "name": "Version",
 447 |             "in": "header",
 448 |             "description": "API Version",
 449 |             "required": true,
 450 |             "schema": {
 451 |               "type": "string",
 452 |               "enum": [
 453 |                 "2021-07-28"
 454 |               ]
 455 |             }
 456 |           },
 457 |           {
 458 |             "name": "locationId",
 459 |             "required": true,
 460 |             "in": "path",
 461 |             "description": "Location Id",
 462 |             "example": "ve9EPM428h8vShlRW1KT",
 463 |             "schema": {
 464 |               "type": "string"
 465 |             }
 466 |           }
 467 |         ],
 468 |         "requestBody": {
 469 |           "required": true,
 470 |           "content": {
 471 |             "application/json": {
 472 |               "schema": {
 473 |                 "$ref": "#/components/schemas/CreatePostDTO"
 474 |               }
 475 |             }
 476 |           }
 477 |         },
 478 |         "responses": {
 479 |           "201": {
 480 |             "description": "Successful response",
 481 |             "content": {
 482 |               "application/json": {
 483 |                 "schema": {
 484 |                   "$ref": "#/components/schemas/CreatePostSuccessfulResponseDTO"
 485 |                 }
 486 |               }
 487 |             }
 488 |           },
 489 |           "400": {
 490 |             "description": "Bad Request",
 491 |             "content": {
 492 |               "application/json": {
 493 |                 "schema": {
 494 |                   "$ref": "#/components/schemas/BadRequestDTO"
 495 |                 }
 496 |               }
 497 |             }
 498 |           },
 499 |           "401": {
 500 |             "description": "Unauthorized",
 501 |             "content": {
 502 |               "application/json": {
 503 |                 "schema": {
 504 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 505 |                 }
 506 |               }
 507 |             }
 508 |           },
 509 |           "422": {
 510 |             "description": "Unprocessable Entity",
 511 |             "content": {
 512 |               "application/json": {
 513 |                 "schema": {
 514 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 515 |                 }
 516 |               }
 517 |             }
 518 |           }
 519 |         },
 520 |         "tags": [
 521 |           "Post"
 522 |         ],
 523 |         "security": [
 524 |           {
 525 |             "bearer": []
 526 |           }
 527 |         ]
 528 |       }
 529 |     },
 530 |     "/social-media-posting/{locationId}/posts/{id}": {
 531 |       "get": {
 532 |         "operationId": "get-post",
 533 |         "summary": "Get post",
 534 |         "description": "Get post",
 535 |         "parameters": [
 536 |           {
 537 |             "name": "Authorization",
 538 |             "in": "header",
 539 |             "description": "Access Token",
 540 |             "required": true,
 541 |             "schema": {
 542 |               "type": "string",
 543 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 544 |             }
 545 |           },
 546 |           {
 547 |             "name": "Version",
 548 |             "in": "header",
 549 |             "description": "API Version",
 550 |             "required": true,
 551 |             "schema": {
 552 |               "type": "string",
 553 |               "enum": [
 554 |                 "2021-07-28"
 555 |               ]
 556 |             }
 557 |           },
 558 |           {
 559 |             "name": "locationId",
 560 |             "required": true,
 561 |             "in": "path",
 562 |             "description": "Location Id",
 563 |             "example": "ve9EPM428h8vShlRW1KT",
 564 |             "schema": {
 565 |               "type": "string"
 566 |             }
 567 |           },
 568 |           {
 569 |             "name": "id",
 570 |             "required": true,
 571 |             "in": "path",
 572 |             "description": "Post Id",
 573 |             "example": "65fac446d599990d1313c1dd",
 574 |             "schema": {
 575 |               "type": "string"
 576 |             }
 577 |           }
 578 |         ],
 579 |         "responses": {
 580 |           "200": {
 581 |             "description": "Successful response",
 582 |             "content": {
 583 |               "application/json": {
 584 |                 "schema": {
 585 |                   "$ref": "#/components/schemas/GetPostSuccessfulResponseDTO"
 586 |                 }
 587 |               }
 588 |             }
 589 |           },
 590 |           "400": {
 591 |             "description": "Bad Request",
 592 |             "content": {
 593 |               "application/json": {
 594 |                 "schema": {
 595 |                   "$ref": "#/components/schemas/BadRequestDTO"
 596 |                 }
 597 |               }
 598 |             }
 599 |           },
 600 |           "401": {
 601 |             "description": "Unauthorized",
 602 |             "content": {
 603 |               "application/json": {
 604 |                 "schema": {
 605 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 606 |                 }
 607 |               }
 608 |             }
 609 |           },
 610 |           "422": {
 611 |             "description": "Unprocessable Entity",
 612 |             "content": {
 613 |               "application/json": {
 614 |                 "schema": {
 615 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 616 |                 }
 617 |               }
 618 |             }
 619 |           }
 620 |         },
 621 |         "tags": [
 622 |           "Post"
 623 |         ],
 624 |         "security": [
 625 |           {
 626 |             "bearer": []
 627 |           }
 628 |         ]
 629 |       },
 630 |       "put": {
 631 |         "operationId": "edit-post",
 632 |         "summary": "Edit post",
 633 |         "description": "Create posts for all supported platforms. It is possible to create customized posts per channel by using the same platform account IDs in a request and hitting the create post API multiple times with different summaries and account IDs per platform.\n\nThe content and media limitations, as well as platform rate limiters corresponding to the respective platforms, are provided in the following reference link:\n\n  Link: [Platform Limitations](https://help.leadconnectorhq.com/support/solutions/articles/48001240003-social-planner-image-video-content-and-api-limitations \"Social Planner Help\")",
 634 |         "parameters": [
 635 |           {
 636 |             "name": "Authorization",
 637 |             "in": "header",
 638 |             "description": "Access Token",
 639 |             "required": true,
 640 |             "schema": {
 641 |               "type": "string",
 642 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 643 |             }
 644 |           },
 645 |           {
 646 |             "name": "Version",
 647 |             "in": "header",
 648 |             "description": "API Version",
 649 |             "required": true,
 650 |             "schema": {
 651 |               "type": "string",
 652 |               "enum": [
 653 |                 "2021-07-28"
 654 |               ]
 655 |             }
 656 |           },
 657 |           {
 658 |             "name": "locationId",
 659 |             "required": true,
 660 |             "in": "path",
 661 |             "description": "Location Id",
 662 |             "example": "ve9EPM428h8vShlRW1KT",
 663 |             "schema": {
 664 |               "type": "string"
 665 |             }
 666 |           },
 667 |           {
 668 |             "name": "id",
 669 |             "required": true,
 670 |             "in": "path",
 671 |             "description": "Post Id",
 672 |             "example": "65fac446d599990d1313c1dd",
 673 |             "schema": {
 674 |               "type": "string"
 675 |             }
 676 |           }
 677 |         ],
 678 |         "requestBody": {
 679 |           "required": true,
 680 |           "content": {
 681 |             "application/json": {
 682 |               "schema": {
 683 |                 "$ref": "#/components/schemas/PostCreateRequest"
 684 |               }
 685 |             }
 686 |           }
 687 |         },
 688 |         "responses": {
 689 |           "200": {
 690 |             "description": "Successful response",
 691 |             "content": {
 692 |               "application/json": {
 693 |                 "schema": {
 694 |                   "$ref": "#/components/schemas/UpdatePostSuccessfulResponseDTO"
 695 |                 }
 696 |               }
 697 |             }
 698 |           },
 699 |           "400": {
 700 |             "description": "Bad Request",
 701 |             "content": {
 702 |               "application/json": {
 703 |                 "schema": {
 704 |                   "$ref": "#/components/schemas/BadRequestDTO"
 705 |                 }
 706 |               }
 707 |             }
 708 |           },
 709 |           "401": {
 710 |             "description": "Unauthorized",
 711 |             "content": {
 712 |               "application/json": {
 713 |                 "schema": {
 714 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 715 |                 }
 716 |               }
 717 |             }
 718 |           },
 719 |           "422": {
 720 |             "description": "Unprocessable Entity",
 721 |             "content": {
 722 |               "application/json": {
 723 |                 "schema": {
 724 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 725 |                 }
 726 |               }
 727 |             }
 728 |           }
 729 |         },
 730 |         "tags": [
 731 |           "Post"
 732 |         ],
 733 |         "security": [
 734 |           {
 735 |             "bearer": []
 736 |           }
 737 |         ]
 738 |       },
 739 |       "delete": {
 740 |         "operationId": "delete-post",
 741 |         "summary": "Delete Post",
 742 |         "description": "Delete Post",
 743 |         "parameters": [
 744 |           {
 745 |             "name": "Authorization",
 746 |             "in": "header",
 747 |             "description": "Access Token",
 748 |             "required": true,
 749 |             "schema": {
 750 |               "type": "string",
 751 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 752 |             }
 753 |           },
 754 |           {
 755 |             "name": "Version",
 756 |             "in": "header",
 757 |             "description": "API Version",
 758 |             "required": true,
 759 |             "schema": {
 760 |               "type": "string",
 761 |               "enum": [
 762 |                 "2021-07-28"
 763 |               ]
 764 |             }
 765 |           },
 766 |           {
 767 |             "name": "locationId",
 768 |             "required": true,
 769 |             "in": "path",
 770 |             "description": "Location Id",
 771 |             "example": "ve9EPM428h8vShlRW1KT",
 772 |             "schema": {
 773 |               "type": "string"
 774 |             }
 775 |           },
 776 |           {
 777 |             "name": "id",
 778 |             "required": true,
 779 |             "in": "path",
 780 |             "description": "Post Id",
 781 |             "example": "65fac446d599990d1313c1dd",
 782 |             "schema": {
 783 |               "type": "string"
 784 |             }
 785 |           }
 786 |         ],
 787 |         "responses": {
 788 |           "200": {
 789 |             "description": "Successful response",
 790 |             "content": {
 791 |               "application/json": {
 792 |                 "schema": {
 793 |                   "$ref": "#/components/schemas/DeletePostSuccessfulResponseDTO"
 794 |                 }
 795 |               }
 796 |             }
 797 |           },
 798 |           "400": {
 799 |             "description": "Bad Request",
 800 |             "content": {
 801 |               "application/json": {
 802 |                 "schema": {
 803 |                   "$ref": "#/components/schemas/BadRequestDTO"
 804 |                 }
 805 |               }
 806 |             }
 807 |           },
 808 |           "401": {
 809 |             "description": "Unauthorized",
 810 |             "content": {
 811 |               "application/json": {
 812 |                 "schema": {
 813 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 814 |                 }
 815 |               }
 816 |             }
 817 |           },
 818 |           "422": {
 819 |             "description": "Unprocessable Entity",
 820 |             "content": {
 821 |               "application/json": {
 822 |                 "schema": {
 823 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 824 |                 }
 825 |               }
 826 |             }
 827 |           }
 828 |         },
 829 |         "tags": [
 830 |           "Post"
 831 |         ],
 832 |         "security": [
 833 |           {
 834 |             "bearer": []
 835 |           }
 836 |         ]
 837 |       }
 838 |     },
 839 |     "/social-media-posting/{locationId}/posts/bulk-delete": {
 840 |       "post": {
 841 |         "operationId": "bulk-delete-social-planner-posts",
 842 |         "summary": "Bulk Delete Social Planner Posts",
 843 |         "description": "Deletes multiple posts based on the provided list of post IDs. \n                  This operation is useful for clearing up large numbers of posts efficiently. \n                  \nNote: \n                  \n1.The maximum number of posts that can be deleted in a single request is '50'.\n                  \n2.However, It will only get deleted in Highlevel database but still\n                   it is recommended to be cautious of this operation.",
 844 |         "parameters": [
 845 |           {
 846 |             "name": "Authorization",
 847 |             "in": "header",
 848 |             "description": "Access Token",
 849 |             "required": true,
 850 |             "schema": {
 851 |               "type": "string",
 852 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 853 |             }
 854 |           },
 855 |           {
 856 |             "name": "Version",
 857 |             "in": "header",
 858 |             "description": "API Version",
 859 |             "required": true,
 860 |             "schema": {
 861 |               "type": "string",
 862 |               "enum": [
 863 |                 "2021-07-28"
 864 |               ]
 865 |             }
 866 |           }
 867 |         ],
 868 |         "requestBody": {
 869 |           "required": true,
 870 |           "content": {
 871 |             "application/json": {
 872 |               "schema": {
 873 |                 "$ref": "#/components/schemas/DeletePostsDto"
 874 |               }
 875 |             }
 876 |           }
 877 |         },
 878 |         "responses": {
 879 |           "201": {
 880 |             "description": "Posts deleted successfully",
 881 |             "content": {
 882 |               "application/json": {
 883 |                 "schema": {
 884 |                   "$ref": "#/components/schemas/BulkDeleteResponseDto"
 885 |                 }
 886 |               }
 887 |             }
 888 |           },
 889 |           "400": {
 890 |             "description": "Cannot delete more than 50 posts at a time.",
 891 |             "content": {
 892 |               "application/json": {
 893 |                 "schema": {
 894 |                   "$ref": "#/components/schemas/BadRequestDTO"
 895 |                 }
 896 |               }
 897 |             }
 898 |           },
 899 |           "401": {
 900 |             "description": "Unauthorized",
 901 |             "content": {
 902 |               "application/json": {
 903 |                 "schema": {
 904 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 905 |                 }
 906 |               }
 907 |             }
 908 |           },
 909 |           "404": {
 910 |             "description": "No posts found with the given IDs."
 911 |           },
 912 |           "422": {
 913 |             "description": "Unprocessable Entity",
 914 |             "content": {
 915 |               "application/json": {
 916 |                 "schema": {
 917 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 918 |                 }
 919 |               }
 920 |             }
 921 |           },
 922 |           "500": {
 923 |             "description": "An error occurred while trying to delete the posts. Please try again later."
 924 |           }
 925 |         },
 926 |         "tags": [
 927 |           "Post"
 928 |         ]
 929 |       }
 930 |     },
 931 |     "/social-media-posting/{locationId}/accounts": {
 932 |       "get": {
 933 |         "operationId": "get-account",
 934 |         "summary": "Get Accounts",
 935 |         "description": "Get list of accounts and groups",
 936 |         "parameters": [
 937 |           {
 938 |             "name": "Authorization",
 939 |             "in": "header",
 940 |             "description": "Access Token",
 941 |             "required": true,
 942 |             "schema": {
 943 |               "type": "string",
 944 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 945 |             }
 946 |           },
 947 |           {
 948 |             "name": "Version",
 949 |             "in": "header",
 950 |             "description": "API Version",
 951 |             "required": true,
 952 |             "schema": {
 953 |               "type": "string",
 954 |               "enum": [
 955 |                 "2021-07-28"
 956 |               ]
 957 |             }
 958 |           },
 959 |           {
 960 |             "name": "locationId",
 961 |             "required": true,
 962 |             "in": "path",
 963 |             "description": "Location Id",
 964 |             "example": "ve9EPM428h8vShlRW1KT",
 965 |             "schema": {
 966 |               "type": "string"
 967 |             }
 968 |           }
 969 |         ],
 970 |         "responses": {
 971 |           "200": {
 972 |             "description": "Successful response",
 973 |             "content": {
 974 |               "application/json": {
 975 |                 "schema": {
 976 |                   "$ref": "#/components/schemas/AccountsListResponseDTO"
 977 |                 }
 978 |               }
 979 |             }
 980 |           },
 981 |           "400": {
 982 |             "description": "Bad Request",
 983 |             "content": {
 984 |               "application/json": {
 985 |                 "schema": {
 986 |                   "$ref": "#/components/schemas/BadRequestDTO"
 987 |                 }
 988 |               }
 989 |             }
 990 |           },
 991 |           "401": {
 992 |             "description": "Unauthorized",
 993 |             "content": {
 994 |               "application/json": {
 995 |                 "schema": {
 996 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 997 |                 }
 998 |               }
 999 |             }
1000 |           },
1001 |           "422": {
1002 |             "description": "Unprocessable Entity",
1003 |             "content": {
1004 |               "application/json": {
1005 |                 "schema": {
1006 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1007 |                 }
1008 |               }
1009 |             }
1010 |           }
1011 |         },
1012 |         "tags": [
1013 |           "Account"
1014 |         ],
1015 |         "security": [
1016 |           {
1017 |             "bearer": []
1018 |           }
1019 |         ]
1020 |       }
1021 |     },
1022 |     "/social-media-posting/{locationId}/accounts/{id}": {
1023 |       "delete": {
1024 |         "operationId": "delete-account",
1025 |         "summary": "Delete Account",
1026 |         "description": "Delete account and account from group",
1027 |         "parameters": [
1028 |           {
1029 |             "name": "Authorization",
1030 |             "in": "header",
1031 |             "description": "Access Token",
1032 |             "required": true,
1033 |             "schema": {
1034 |               "type": "string",
1035 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1036 |             }
1037 |           },
1038 |           {
1039 |             "name": "Version",
1040 |             "in": "header",
1041 |             "description": "API Version",
1042 |             "required": true,
1043 |             "schema": {
1044 |               "type": "string",
1045 |               "enum": [
1046 |                 "2021-07-28"
1047 |               ]
1048 |             }
1049 |           },
1050 |           {
1051 |             "name": "locationId",
1052 |             "required": true,
1053 |             "in": "path",
1054 |             "description": "Location Id",
1055 |             "example": "ve9EPM428h8vShlRW1KT",
1056 |             "schema": {
1057 |               "type": "string"
1058 |             }
1059 |           },
1060 |           {
1061 |             "name": "id",
1062 |             "required": true,
1063 |             "in": "path",
1064 |             "description": "Id",
1065 |             "example": "65fac446d599990d1313c1dd",
1066 |             "schema": {
1067 |               "type": "string"
1068 |             }
1069 |           },
1070 |           {
1071 |             "name": "companyId",
1072 |             "required": false,
1073 |             "in": "query",
1074 |             "description": "Company ID",
1075 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
1076 |             "schema": {
1077 |               "type": "string"
1078 |             }
1079 |           },
1080 |           {
1081 |             "name": "userId",
1082 |             "required": false,
1083 |             "in": "query",
1084 |             "description": "User ID",
1085 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
1086 |             "schema": {
1087 |               "type": "string"
1088 |             }
1089 |           }
1090 |         ],
1091 |         "responses": {
1092 |           "200": {
1093 |             "description": "Successful response",
1094 |             "content": {
1095 |               "application/json": {
1096 |                 "schema": {
1097 |                   "$ref": "#/components/schemas/LocationAndAccountDeleteResponseDTO"
1098 |                 }
1099 |               }
1100 |             }
1101 |           },
1102 |           "400": {
1103 |             "description": "Bad Request",
1104 |             "content": {
1105 |               "application/json": {
1106 |                 "schema": {
1107 |                   "$ref": "#/components/schemas/BadRequestDTO"
1108 |                 }
1109 |               }
1110 |             }
1111 |           },
1112 |           "401": {
1113 |             "description": "Unauthorized",
1114 |             "content": {
1115 |               "application/json": {
1116 |                 "schema": {
1117 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1118 |                 }
1119 |               }
1120 |             }
1121 |           },
1122 |           "422": {
1123 |             "description": "Unprocessable Entity",
1124 |             "content": {
1125 |               "application/json": {
1126 |                 "schema": {
1127 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1128 |                 }
1129 |               }
1130 |             }
1131 |           }
1132 |         },
1133 |         "tags": [
1134 |           "Account"
1135 |         ],
1136 |         "security": [
1137 |           {
1138 |             "bearer": []
1139 |           }
1140 |         ]
1141 |       }
1142 |     },
1143 |     "/social-media-posting/oauth/facebook/start": {
1144 |       "get": {
1145 |         "operationId": "start-facebook-oauth",
1146 |         "summary": "Starts OAuth For Facebook Account",
1147 |         "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Facebook login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"facebook\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Facebook account details using below API -\n  API: '/social-media-posting/oauth/facebook/accounts/:accountId' \n\n  Method: GET",
1148 |         "parameters": [
1149 |           {
1150 |             "name": "Authorization",
1151 |             "in": "header",
1152 |             "description": "Access Token",
1153 |             "required": true,
1154 |             "schema": {
1155 |               "type": "string",
1156 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1157 |             }
1158 |           },
1159 |           {
1160 |             "name": "Version",
1161 |             "in": "header",
1162 |             "description": "API Version",
1163 |             "required": true,
1164 |             "schema": {
1165 |               "type": "string",
1166 |               "enum": [
1167 |                 "2021-07-28"
1168 |               ]
1169 |             }
1170 |           },
1171 |           {
1172 |             "name": "locationId",
1173 |             "required": true,
1174 |             "in": "query",
1175 |             "description": "Account Location Id",
1176 |             "example": "w37swmmLbA02zgqKPpxITe2",
1177 |             "schema": {
1178 |               "type": "string"
1179 |             }
1180 |           },
1181 |           {
1182 |             "name": "userId",
1183 |             "required": true,
1184 |             "in": "query",
1185 |             "description": "User ID",
1186 |             "example": "u37swmmLbA02zgqKPpxITe2",
1187 |             "schema": {
1188 |               "type": "string"
1189 |             }
1190 |           },
1191 |           {
1192 |             "name": "page",
1193 |             "required": false,
1194 |             "in": "query",
1195 |             "description": "Facebook Page",
1196 |             "example": "integration",
1197 |             "schema": {
1198 |               "type": "string"
1199 |             }
1200 |           },
1201 |           {
1202 |             "name": "reconnect",
1203 |             "required": false,
1204 |             "in": "query",
1205 |             "description": "Reconnect boolean as string",
1206 |             "example": "true",
1207 |             "schema": {
1208 |               "type": "string"
1209 |             }
1210 |           }
1211 |         ],
1212 |         "responses": {
1213 |           "200": {
1214 |             "description": "Successful Response"
1215 |           },
1216 |           "400": {
1217 |             "description": "Bad Request",
1218 |             "content": {
1219 |               "application/json": {
1220 |                 "schema": {
1221 |                   "$ref": "#/components/schemas/BadRequestDTO"
1222 |                 }
1223 |               }
1224 |             }
1225 |           },
1226 |           "401": {
1227 |             "description": "Unauthorized",
1228 |             "content": {
1229 |               "application/json": {
1230 |                 "schema": {
1231 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1232 |                 }
1233 |               }
1234 |             }
1235 |           },
1236 |           "422": {
1237 |             "description": "Unprocessable Entity",
1238 |             "content": {
1239 |               "application/json": {
1240 |                 "schema": {
1241 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1242 |                 }
1243 |               }
1244 |             }
1245 |           }
1246 |         },
1247 |         "tags": [
1248 |           "Oauth | Facebook"
1249 |         ],
1250 |         "security": [
1251 |           {
1252 |             "bearer": []
1253 |           }
1254 |         ]
1255 |       }
1256 |     },
1257 |     "/social-media-posting/oauth/{locationId}/facebook/accounts/{accountId}": {
1258 |       "get": {
1259 |         "operationId": "get-facebook-page-group",
1260 |         "summary": "Get facebook pages",
1261 |         "description": "Get facebook pages",
1262 |         "parameters": [
1263 |           {
1264 |             "name": "Authorization",
1265 |             "in": "header",
1266 |             "description": "Access Token",
1267 |             "required": true,
1268 |             "schema": {
1269 |               "type": "string",
1270 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1271 |             }
1272 |           },
1273 |           {
1274 |             "name": "Version",
1275 |             "in": "header",
1276 |             "description": "API Version",
1277 |             "required": true,
1278 |             "schema": {
1279 |               "type": "string",
1280 |               "enum": [
1281 |                 "2021-07-28"
1282 |               ]
1283 |             }
1284 |           },
1285 |           {
1286 |             "name": "locationId",
1287 |             "required": true,
1288 |             "in": "path",
1289 |             "description": "Account Location Id",
1290 |             "example": "w37swmmLbA02zgqKPpxITe2",
1291 |             "schema": {
1292 |               "type": "string"
1293 |             }
1294 |           },
1295 |           {
1296 |             "name": "accountId",
1297 |             "required": true,
1298 |             "in": "path",
1299 |             "description": "Account Id",
1300 |             "example": "w37swmmLbA02zgqKPpxITe",
1301 |             "schema": {
1302 |               "type": "string"
1303 |             }
1304 |           }
1305 |         ],
1306 |         "responses": {
1307 |           "200": {
1308 |             "description": "Successful response, runs Facebook OAuth and redirects to application",
1309 |             "content": {
1310 |               "application/json": {
1311 |                 "schema": {
1312 |                   "$ref": "#/components/schemas/GetFacebookAccountsResponseDTO"
1313 |                 }
1314 |               }
1315 |             }
1316 |           },
1317 |           "400": {
1318 |             "description": "Bad Request",
1319 |             "content": {
1320 |               "application/json": {
1321 |                 "schema": {
1322 |                   "$ref": "#/components/schemas/BadRequestDTO"
1323 |                 }
1324 |               }
1325 |             }
1326 |           },
1327 |           "401": {
1328 |             "description": "Unauthorized",
1329 |             "content": {
1330 |               "application/json": {
1331 |                 "schema": {
1332 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1333 |                 }
1334 |               }
1335 |             }
1336 |           },
1337 |           "422": {
1338 |             "description": "Unprocessable Entity",
1339 |             "content": {
1340 |               "application/json": {
1341 |                 "schema": {
1342 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1343 |                 }
1344 |               }
1345 |             }
1346 |           }
1347 |         },
1348 |         "tags": [
1349 |           "Oauth | Facebook"
1350 |         ],
1351 |         "security": [
1352 |           {
1353 |             "bearer": []
1354 |           }
1355 |         ]
1356 |       },
1357 |       "post": {
1358 |         "operationId": "attach-facebook-page-group",
1359 |         "summary": "Attach facebook pages",
1360 |         "description": "Attach facebook pages",
1361 |         "parameters": [
1362 |           {
1363 |             "name": "Authorization",
1364 |             "in": "header",
1365 |             "description": "Access Token",
1366 |             "required": true,
1367 |             "schema": {
1368 |               "type": "string",
1369 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1370 |             }
1371 |           },
1372 |           {
1373 |             "name": "Version",
1374 |             "in": "header",
1375 |             "description": "API Version",
1376 |             "required": true,
1377 |             "schema": {
1378 |               "type": "string",
1379 |               "enum": [
1380 |                 "2021-07-28"
1381 |               ]
1382 |             }
1383 |           },
1384 |           {
1385 |             "name": "locationId",
1386 |             "required": true,
1387 |             "in": "path",
1388 |             "description": "Account Location Id",
1389 |             "example": "w37swmmLbA02zgqKPpxITe2",
1390 |             "schema": {
1391 |               "type": "string"
1392 |             }
1393 |           },
1394 |           {
1395 |             "name": "accountId",
1396 |             "required": true,
1397 |             "in": "path",
1398 |             "description": "Account Id",
1399 |             "example": "w37swmmLbA02zgqKPpxITe",
1400 |             "schema": {
1401 |               "type": "string"
1402 |             }
1403 |           }
1404 |         ],
1405 |         "requestBody": {
1406 |           "required": true,
1407 |           "content": {
1408 |             "application/json": {
1409 |               "schema": {
1410 |                 "$ref": "#/components/schemas/AttachFBAccountDTO"
1411 |               }
1412 |             }
1413 |           }
1414 |         },
1415 |         "responses": {
1416 |           "201": {
1417 |             "description": "Successful response",
1418 |             "content": {
1419 |               "application/json": {
1420 |                 "schema": {
1421 |                   "$ref": "#/components/schemas/SocialMediaFBAccountResponseDTO"
1422 |                 }
1423 |               }
1424 |             }
1425 |           },
1426 |           "400": {
1427 |             "description": "Bad Request",
1428 |             "content": {
1429 |               "application/json": {
1430 |                 "schema": {
1431 |                   "$ref": "#/components/schemas/BadRequestDTO"
1432 |                 }
1433 |               }
1434 |             }
1435 |           },
1436 |           "401": {
1437 |             "description": "Unauthorized",
1438 |             "content": {
1439 |               "application/json": {
1440 |                 "schema": {
1441 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1442 |                 }
1443 |               }
1444 |             }
1445 |           },
1446 |           "422": {
1447 |             "description": "Unprocessable Entity",
1448 |             "content": {
1449 |               "application/json": {
1450 |                 "schema": {
1451 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1452 |                 }
1453 |               }
1454 |             }
1455 |           }
1456 |         },
1457 |         "tags": [
1458 |           "Oauth | Facebook"
1459 |         ],
1460 |         "security": [
1461 |           {
1462 |             "bearer": []
1463 |           }
1464 |         ]
1465 |       }
1466 |     },
1467 |     "/social-media-posting/oauth/instagram/start": {
1468 |       "get": {
1469 |         "operationId": "start-instagram-oauth",
1470 |         "summary": "Starts OAuth For Instagram Account",
1471 |         "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Instagram login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"instagram\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Instagram account details using below API -\n  API: '/social-media-posting/oauth/instagram/accounts/:accountId' \n\n  Method: GET",
1472 |         "parameters": [
1473 |           {
1474 |             "name": "Authorization",
1475 |             "in": "header",
1476 |             "description": "Access Token",
1477 |             "required": true,
1478 |             "schema": {
1479 |               "type": "string",
1480 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1481 |             }
1482 |           },
1483 |           {
1484 |             "name": "Version",
1485 |             "in": "header",
1486 |             "description": "API Version",
1487 |             "required": true,
1488 |             "schema": {
1489 |               "type": "string",
1490 |               "enum": [
1491 |                 "2021-07-28"
1492 |               ]
1493 |             }
1494 |           },
1495 |           {
1496 |             "name": "locationId",
1497 |             "required": true,
1498 |             "in": "query",
1499 |             "description": "Location Id",
1500 |             "example": "w37swmmLbA02zgqKPpxITe2",
1501 |             "schema": {
1502 |               "type": "string"
1503 |             }
1504 |           },
1505 |           {
1506 |             "name": "userId",
1507 |             "required": true,
1508 |             "in": "query",
1509 |             "description": "User Id",
1510 |             "example": "u37swmmLbA02zgqKPpxITe2",
1511 |             "schema": {
1512 |               "type": "string"
1513 |             }
1514 |           },
1515 |           {
1516 |             "name": "page",
1517 |             "required": false,
1518 |             "in": "query",
1519 |             "description": "Page",
1520 |             "example": "integration",
1521 |             "schema": {
1522 |               "type": "string"
1523 |             }
1524 |           },
1525 |           {
1526 |             "name": "reconnect",
1527 |             "required": false,
1528 |             "in": "query",
1529 |             "description": "Reconnect",
1530 |             "example": "true",
1531 |             "schema": {
1532 |               "type": "string"
1533 |             }
1534 |           }
1535 |         ],
1536 |         "responses": {
1537 |           "200": {
1538 |             "description": "Successful Response"
1539 |           },
1540 |           "400": {
1541 |             "description": "Bad Request",
1542 |             "content": {
1543 |               "application/json": {
1544 |                 "schema": {
1545 |                   "$ref": "#/components/schemas/BadRequestDTO"
1546 |                 }
1547 |               }
1548 |             }
1549 |           },
1550 |           "401": {
1551 |             "description": "Unauthorized",
1552 |             "content": {
1553 |               "application/json": {
1554 |                 "schema": {
1555 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1556 |                 }
1557 |               }
1558 |             }
1559 |           },
1560 |           "422": {
1561 |             "description": "Unprocessable Entity",
1562 |             "content": {
1563 |               "application/json": {
1564 |                 "schema": {
1565 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1566 |                 }
1567 |               }
1568 |             }
1569 |           }
1570 |         },
1571 |         "tags": [
1572 |           "Oauth | Instagram"
1573 |         ],
1574 |         "security": [
1575 |           {
1576 |             "bearer": []
1577 |           }
1578 |         ]
1579 |       }
1580 |     },
1581 |     "/social-media-posting/oauth/{locationId}/instagram/accounts/{accountId}": {
1582 |       "get": {
1583 |         "operationId": "get-instagram-page-group",
1584 |         "summary": "Get Instagram Professional Accounts",
1585 |         "description": "Get Instagram Professional Accounts",
1586 |         "parameters": [
1587 |           {
1588 |             "name": "Authorization",
1589 |             "in": "header",
1590 |             "description": "Access Token",
1591 |             "required": true,
1592 |             "schema": {
1593 |               "type": "string",
1594 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1595 |             }
1596 |           },
1597 |           {
1598 |             "name": "Version",
1599 |             "in": "header",
1600 |             "description": "API Version",
1601 |             "required": true,
1602 |             "schema": {
1603 |               "type": "string",
1604 |               "enum": [
1605 |                 "2021-07-28"
1606 |               ]
1607 |             }
1608 |           },
1609 |           {
1610 |             "name": "locationId",
1611 |             "required": true,
1612 |             "in": "path",
1613 |             "description": "Account Location Id",
1614 |             "example": "w37swmmLbA02zgqKPpxITe2",
1615 |             "schema": {
1616 |               "type": "string"
1617 |             }
1618 |           },
1619 |           {
1620 |             "name": "accountId",
1621 |             "required": true,
1622 |             "in": "path",
1623 |             "description": "Account Id",
1624 |             "example": "w37swmmLbA02zgqKPpxITe",
1625 |             "schema": {
1626 |               "type": "string"
1627 |             }
1628 |           }
1629 |         ],
1630 |         "responses": {
1631 |           "200": {
1632 |             "description": "Successful response",
1633 |             "content": {
1634 |               "application/json": {
1635 |                 "schema": {
1636 |                   "$ref": "#/components/schemas/GetInstagramAccountsResponseDTO"
1637 |                 }
1638 |               }
1639 |             }
1640 |           },
1641 |           "400": {
1642 |             "description": "Bad Request",
1643 |             "content": {
1644 |               "application/json": {
1645 |                 "schema": {
1646 |                   "$ref": "#/components/schemas/BadRequestDTO"
1647 |                 }
1648 |               }
1649 |             }
1650 |           },
1651 |           "401": {
1652 |             "description": "Unauthorized",
1653 |             "content": {
1654 |               "application/json": {
1655 |                 "schema": {
1656 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1657 |                 }
1658 |               }
1659 |             }
1660 |           },
1661 |           "422": {
1662 |             "description": "Unprocessable Entity",
1663 |             "content": {
1664 |               "application/json": {
1665 |                 "schema": {
1666 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1667 |                 }
1668 |               }
1669 |             }
1670 |           }
1671 |         },
1672 |         "tags": [
1673 |           "Oauth | Instagram"
1674 |         ],
1675 |         "security": [
1676 |           {
1677 |             "bearer": []
1678 |           }
1679 |         ]
1680 |       },
1681 |       "post": {
1682 |         "operationId": "attach-instagram-page-group",
1683 |         "summary": "Attach Instagram Professional Accounts",
1684 |         "description": "Attach Instagram Professional Accounts",
1685 |         "parameters": [
1686 |           {
1687 |             "name": "Authorization",
1688 |             "in": "header",
1689 |             "description": "Access Token",
1690 |             "required": true,
1691 |             "schema": {
1692 |               "type": "string",
1693 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1694 |             }
1695 |           },
1696 |           {
1697 |             "name": "Version",
1698 |             "in": "header",
1699 |             "description": "API Version",
1700 |             "required": true,
1701 |             "schema": {
1702 |               "type": "string",
1703 |               "enum": [
1704 |                 "2021-07-28"
1705 |               ]
1706 |             }
1707 |           },
1708 |           {
1709 |             "name": "locationId",
1710 |             "required": true,
1711 |             "in": "path",
1712 |             "description": "Account Location Id",
1713 |             "example": "w37swmmLbA02zgqKPpxITe2",
1714 |             "schema": {
1715 |               "type": "string"
1716 |             }
1717 |           },
1718 |           {
1719 |             "name": "accountId",
1720 |             "required": true,
1721 |             "in": "path",
1722 |             "description": "Account Id",
1723 |             "example": "w37swmmLbA02zgqKPpxITe",
1724 |             "schema": {
1725 |               "type": "string"
1726 |             }
1727 |           }
1728 |         ],
1729 |         "requestBody": {
1730 |           "required": true,
1731 |           "content": {
1732 |             "application/json": {
1733 |               "schema": {
1734 |                 "$ref": "#/components/schemas/AttachIGAccountDTO"
1735 |               }
1736 |             }
1737 |           }
1738 |         },
1739 |         "responses": {
1740 |           "201": {
1741 |             "description": "Successful response",
1742 |             "content": {
1743 |               "application/json": {
1744 |                 "schema": {
1745 |                   "$ref": "#/components/schemas/SocialMediaInstagramAccountResponseDTO"
1746 |                 }
1747 |               }
1748 |             }
1749 |           },
1750 |           "400": {
1751 |             "description": "Bad Request",
1752 |             "content": {
1753 |               "application/json": {
1754 |                 "schema": {
1755 |                   "$ref": "#/components/schemas/BadRequestDTO"
1756 |                 }
1757 |               }
1758 |             }
1759 |           },
1760 |           "401": {
1761 |             "description": "Unauthorized",
1762 |             "content": {
1763 |               "application/json": {
1764 |                 "schema": {
1765 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1766 |                 }
1767 |               }
1768 |             }
1769 |           },
1770 |           "422": {
1771 |             "description": "Unprocessable Entity",
1772 |             "content": {
1773 |               "application/json": {
1774 |                 "schema": {
1775 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1776 |                 }
1777 |               }
1778 |             }
1779 |           }
1780 |         },
1781 |         "tags": [
1782 |           "Oauth | Instagram"
1783 |         ],
1784 |         "security": [
1785 |           {
1786 |             "bearer": []
1787 |           }
1788 |         ]
1789 |       }
1790 |     },
1791 |     "/social-media-posting/oauth/linkedin/start": {
1792 |       "get": {
1793 |         "operationId": "start-linkedin-oauth",
1794 |         "summary": "Starts OAuth For LinkedIn Account",
1795 |         "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to LinkedIn login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"linkedin\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch LinkedIn account details using below API -\n  API: '/social-media-posting/oauth/linkedin/accounts/:accountId' \n\n  Method: GET",
1796 |         "parameters": [
1797 |           {
1798 |             "name": "Authorization",
1799 |             "in": "header",
1800 |             "description": "Access Token",
1801 |             "required": true,
1802 |             "schema": {
1803 |               "type": "string",
1804 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1805 |             }
1806 |           },
1807 |           {
1808 |             "name": "Version",
1809 |             "in": "header",
1810 |             "description": "API Version",
1811 |             "required": true,
1812 |             "schema": {
1813 |               "type": "string",
1814 |               "enum": [
1815 |                 "2021-07-28"
1816 |               ]
1817 |             }
1818 |           },
1819 |           {
1820 |             "name": "locationId",
1821 |             "required": true,
1822 |             "in": "query",
1823 |             "description": "Location Id",
1824 |             "example": "w37swmmLbA02zgqKPpxITe2",
1825 |             "schema": {
1826 |               "type": "string"
1827 |             }
1828 |           },
1829 |           {
1830 |             "name": "userId",
1831 |             "required": true,
1832 |             "in": "query",
1833 |             "description": "User Id",
1834 |             "example": "u37swmmLbA02zgqKPpxITe2",
1835 |             "schema": {
1836 |               "type": "string"
1837 |             }
1838 |           },
1839 |           {
1840 |             "name": "page",
1841 |             "required": false,
1842 |             "in": "query",
1843 |             "description": "Page",
1844 |             "example": "integration",
1845 |             "schema": {
1846 |               "type": "string"
1847 |             }
1848 |           },
1849 |           {
1850 |             "name": "reconnect",
1851 |             "required": false,
1852 |             "in": "query",
1853 |             "description": "Reconnect",
1854 |             "example": "integration",
1855 |             "schema": {
1856 |               "type": "string"
1857 |             }
1858 |           }
1859 |         ],
1860 |         "responses": {
1861 |           "200": {
1862 |             "description": "Successful Response"
1863 |           },
1864 |           "400": {
1865 |             "description": "Bad Request",
1866 |             "content": {
1867 |               "application/json": {
1868 |                 "schema": {
1869 |                   "$ref": "#/components/schemas/BadRequestDTO"
1870 |                 }
1871 |               }
1872 |             }
1873 |           },
1874 |           "401": {
1875 |             "description": "Unauthorized",
1876 |             "content": {
1877 |               "application/json": {
1878 |                 "schema": {
1879 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1880 |                 }
1881 |               }
1882 |             }
1883 |           },
1884 |           "422": {
1885 |             "description": "Unprocessable Entity",
1886 |             "content": {
1887 |               "application/json": {
1888 |                 "schema": {
1889 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1890 |                 }
1891 |               }
1892 |             }
1893 |           }
1894 |         },
1895 |         "tags": [
1896 |           "Oauth | LinkedIn"
1897 |         ],
1898 |         "security": [
1899 |           {
1900 |             "bearer": []
1901 |           }
1902 |         ]
1903 |       }
1904 |     },
1905 |     "/social-media-posting/oauth/{locationId}/linkedin/accounts/{accountId}": {
1906 |       "get": {
1907 |         "operationId": "get-linkedin-page-profile",
1908 |         "summary": "Get Linkedin pages and profile",
1909 |         "description": "Get Linkedin pages and profile",
1910 |         "parameters": [
1911 |           {
1912 |             "name": "Authorization",
1913 |             "in": "header",
1914 |             "description": "Access Token",
1915 |             "required": true,
1916 |             "schema": {
1917 |               "type": "string",
1918 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
1919 |             }
1920 |           },
1921 |           {
1922 |             "name": "Version",
1923 |             "in": "header",
1924 |             "description": "API Version",
1925 |             "required": true,
1926 |             "schema": {
1927 |               "type": "string",
1928 |               "enum": [
1929 |                 "2021-07-28"
1930 |               ]
1931 |             }
1932 |           },
1933 |           {
1934 |             "name": "locationId",
1935 |             "required": true,
1936 |             "in": "path",
1937 |             "description": "Account Location Id",
1938 |             "example": "w37swmmLbA02zgqKPpxITe2",
1939 |             "schema": {
1940 |               "type": "string"
1941 |             }
1942 |           },
1943 |           {
1944 |             "name": "accountId",
1945 |             "required": true,
1946 |             "in": "path",
1947 |             "description": "Account Id",
1948 |             "example": "w37swmmLbA02zgqKPpxITe",
1949 |             "schema": {
1950 |               "type": "string"
1951 |             }
1952 |           }
1953 |         ],
1954 |         "responses": {
1955 |           "200": {
1956 |             "description": "Successful response",
1957 |             "content": {
1958 |               "application/json": {
1959 |                 "schema": {
1960 |                   "$ref": "#/components/schemas/GetLinkedInAccountsResponseDTO"
1961 |                 }
1962 |               }
1963 |             }
1964 |           },
1965 |           "400": {
1966 |             "description": "Bad Request",
1967 |             "content": {
1968 |               "application/json": {
1969 |                 "schema": {
1970 |                   "$ref": "#/components/schemas/BadRequestDTO"
1971 |                 }
1972 |               }
1973 |             }
1974 |           },
1975 |           "401": {
1976 |             "description": "Unauthorized",
1977 |             "content": {
1978 |               "application/json": {
1979 |                 "schema": {
1980 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
1981 |                 }
1982 |               }
1983 |             }
1984 |           },
1985 |           "422": {
1986 |             "description": "Unprocessable Entity",
1987 |             "content": {
1988 |               "application/json": {
1989 |                 "schema": {
1990 |                   "$ref": "#/components/schemas/UnprocessableDTO"
1991 |                 }
1992 |               }
1993 |             }
1994 |           }
1995 |         },
1996 |         "tags": [
1997 |           "Oauth | LinkedIn"
1998 |         ],
1999 |         "security": [
2000 |           {
2001 |             "bearer": []
2002 |           }
2003 |         ]
2004 |       },
2005 |       "post": {
2006 |         "operationId": "attach-linkedin-page-profile",
2007 |         "summary": "Attach linkedin pages and profile",
2008 |         "description": "Attach linkedin pages and profile",
2009 |         "parameters": [
2010 |           {
2011 |             "name": "Authorization",
2012 |             "in": "header",
2013 |             "description": "Access Token",
2014 |             "required": true,
2015 |             "schema": {
2016 |               "type": "string",
2017 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2018 |             }
2019 |           },
2020 |           {
2021 |             "name": "Version",
2022 |             "in": "header",
2023 |             "description": "API Version",
2024 |             "required": true,
2025 |             "schema": {
2026 |               "type": "string",
2027 |               "enum": [
2028 |                 "2021-07-28"
2029 |               ]
2030 |             }
2031 |           },
2032 |           {
2033 |             "name": "locationId",
2034 |             "required": true,
2035 |             "in": "path",
2036 |             "description": "Account Location Id",
2037 |             "example": "w37swmmLbA02zgqKPpxITe2",
2038 |             "schema": {
2039 |               "type": "string"
2040 |             }
2041 |           },
2042 |           {
2043 |             "name": "accountId",
2044 |             "required": true,
2045 |             "in": "path",
2046 |             "description": "Account Id",
2047 |             "example": "w37swmmLbA02zgqKPpxITe",
2048 |             "schema": {
2049 |               "type": "string"
2050 |             }
2051 |           }
2052 |         ],
2053 |         "requestBody": {
2054 |           "required": true,
2055 |           "content": {
2056 |             "application/json": {
2057 |               "schema": {
2058 |                 "$ref": "#/components/schemas/AttachLinkedinAccountDTO"
2059 |               }
2060 |             }
2061 |           }
2062 |         },
2063 |         "responses": {
2064 |           "201": {
2065 |             "description": "Successful response",
2066 |             "content": {
2067 |               "application/json": {
2068 |                 "schema": {
2069 |                   "$ref": "#/components/schemas/SocialMediaLinkedInAccountResponseDTO"
2070 |                 }
2071 |               }
2072 |             }
2073 |           },
2074 |           "400": {
2075 |             "description": "Bad Request",
2076 |             "content": {
2077 |               "application/json": {
2078 |                 "schema": {
2079 |                   "$ref": "#/components/schemas/BadRequestDTO"
2080 |                 }
2081 |               }
2082 |             }
2083 |           },
2084 |           "401": {
2085 |             "description": "Unauthorized",
2086 |             "content": {
2087 |               "application/json": {
2088 |                 "schema": {
2089 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2090 |                 }
2091 |               }
2092 |             }
2093 |           },
2094 |           "422": {
2095 |             "description": "Unprocessable Entity",
2096 |             "content": {
2097 |               "application/json": {
2098 |                 "schema": {
2099 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2100 |                 }
2101 |               }
2102 |             }
2103 |           }
2104 |         },
2105 |         "tags": [
2106 |           "Oauth | LinkedIn"
2107 |         ],
2108 |         "security": [
2109 |           {
2110 |             "bearer": []
2111 |           }
2112 |         ]
2113 |       }
2114 |     },
2115 |     "/social-media-posting/oauth/twitter/start": {
2116 |       "get": {
2117 |         "operationId": "start-twitter-oauth",
2118 |         "summary": "Starts OAuth For Twitter Account",
2119 |         "description": "<div><div>\n  <span style= \"display: inline-block;\n    width: 25px; height: 25px;\n    background-color: red;\n    color: black;\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    line-height: 20px;\n    border: 2px solid black;\n    border-radius: 20%;\n    margin-right: 10px;\">\n    !\n  </span>\n  <span><strong>As of December 4, 2024, X (formerly Twitter) is no longer supported. We apologise for any inconvenience.</strong></span>\n</div></div>",
2120 |         "deprecated": true,
2121 |         "parameters": [
2122 |           {
2123 |             "name": "Authorization",
2124 |             "in": "header",
2125 |             "description": "Access Token",
2126 |             "required": true,
2127 |             "schema": {
2128 |               "type": "string",
2129 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2130 |             }
2131 |           },
2132 |           {
2133 |             "name": "Version",
2134 |             "in": "header",
2135 |             "description": "API Version",
2136 |             "required": true,
2137 |             "schema": {
2138 |               "type": "string",
2139 |               "enum": [
2140 |                 "2021-07-28"
2141 |               ]
2142 |             }
2143 |           },
2144 |           {
2145 |             "name": "locationId",
2146 |             "required": true,
2147 |             "in": "query",
2148 |             "description": "Location Id",
2149 |             "example": "w37swmmLbA02zgqKPpxITe2",
2150 |             "schema": {
2151 |               "type": "string"
2152 |             }
2153 |           },
2154 |           {
2155 |             "name": "userId",
2156 |             "required": true,
2157 |             "in": "query",
2158 |             "description": "User Id",
2159 |             "example": "u37swmmLbA02zgqKPpxITe2",
2160 |             "schema": {
2161 |               "type": "string"
2162 |             }
2163 |           },
2164 |           {
2165 |             "name": "page",
2166 |             "required": false,
2167 |             "in": "query",
2168 |             "description": "Page",
2169 |             "example": "integration",
2170 |             "schema": {
2171 |               "type": "string"
2172 |             }
2173 |           },
2174 |           {
2175 |             "name": "reconnect",
2176 |             "required": false,
2177 |             "in": "query",
2178 |             "description": "Reconnect",
2179 |             "example": "true",
2180 |             "schema": {
2181 |               "type": "string"
2182 |             }
2183 |           }
2184 |         ],
2185 |         "responses": {
2186 |           "200": {
2187 |             "description": "Successful Response"
2188 |           },
2189 |           "400": {
2190 |             "description": "Bad Request",
2191 |             "content": {
2192 |               "application/json": {
2193 |                 "schema": {
2194 |                   "$ref": "#/components/schemas/BadRequestDTO"
2195 |                 }
2196 |               }
2197 |             }
2198 |           },
2199 |           "401": {
2200 |             "description": "Unauthorized",
2201 |             "content": {
2202 |               "application/json": {
2203 |                 "schema": {
2204 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2205 |                 }
2206 |               }
2207 |             }
2208 |           },
2209 |           "422": {
2210 |             "description": "Unprocessable Entity",
2211 |             "content": {
2212 |               "application/json": {
2213 |                 "schema": {
2214 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2215 |                 }
2216 |               }
2217 |             }
2218 |           }
2219 |         },
2220 |         "tags": [
2221 |           "Oauth | Twitter"
2222 |         ]
2223 |       }
2224 |     },
2225 |     "/social-media-posting/oauth/{locationId}/twitter/accounts/{accountId}": {
2226 |       "get": {
2227 |         "operationId": "get-twitter-profile",
2228 |         "summary": "Get Twitter profile",
2229 |         "description": "<div><div>\n  <span style= \"display: inline-block;\n    width: 25px; height: 25px;\n    background-color: red;\n    color: black;\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    line-height: 20px;\n    border: 2px solid black;\n    border-radius: 20%;\n    margin-right: 10px;\">\n    !\n  </span>\n  <span><strong>As of December 4, 2024, X (formerly Twitter) is no longer supported. We apologise for any inconvenience.</strong></span>\n</div></div>",
2230 |         "deprecated": true,
2231 |         "parameters": [
2232 |           {
2233 |             "name": "Authorization",
2234 |             "in": "header",
2235 |             "description": "Access Token",
2236 |             "required": true,
2237 |             "schema": {
2238 |               "type": "string",
2239 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2240 |             }
2241 |           },
2242 |           {
2243 |             "name": "Version",
2244 |             "in": "header",
2245 |             "description": "API Version",
2246 |             "required": true,
2247 |             "schema": {
2248 |               "type": "string",
2249 |               "enum": [
2250 |                 "2021-07-28"
2251 |               ]
2252 |             }
2253 |           },
2254 |           {
2255 |             "name": "locationId",
2256 |             "required": true,
2257 |             "in": "path",
2258 |             "description": "Account Location Id",
2259 |             "example": "w37swmmLbA02zgqKPpxITe2",
2260 |             "schema": {
2261 |               "type": "string"
2262 |             }
2263 |           },
2264 |           {
2265 |             "name": "accountId",
2266 |             "required": true,
2267 |             "in": "path",
2268 |             "description": "Account Id",
2269 |             "example": "w37swmmLbA02zgqKPpxITe",
2270 |             "schema": {
2271 |               "type": "string"
2272 |             }
2273 |           }
2274 |         ],
2275 |         "responses": {
2276 |           "200": {
2277 |             "description": "Successful response",
2278 |             "content": {
2279 |               "application/json": {
2280 |                 "schema": {
2281 |                   "$ref": "#/components/schemas/GetTwitterAccountsResponseDTO"
2282 |                 }
2283 |               }
2284 |             }
2285 |           },
2286 |           "400": {
2287 |             "description": "Bad Request",
2288 |             "content": {
2289 |               "application/json": {
2290 |                 "schema": {
2291 |                   "$ref": "#/components/schemas/BadRequestDTO"
2292 |                 }
2293 |               }
2294 |             }
2295 |           },
2296 |           "401": {
2297 |             "description": "Unauthorized",
2298 |             "content": {
2299 |               "application/json": {
2300 |                 "schema": {
2301 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2302 |                 }
2303 |               }
2304 |             }
2305 |           },
2306 |           "422": {
2307 |             "description": "Unprocessable Entity",
2308 |             "content": {
2309 |               "application/json": {
2310 |                 "schema": {
2311 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2312 |                 }
2313 |               }
2314 |             }
2315 |           }
2316 |         },
2317 |         "tags": [
2318 |           "Oauth | Twitter"
2319 |         ]
2320 |       },
2321 |       "post": {
2322 |         "operationId": "attach-twitter-profile",
2323 |         "summary": "Attach Twitter profile",
2324 |         "description": "<div><div>\n  <span style= \"display: inline-block;\n    width: 25px; height: 25px;\n    background-color: red;\n    color: black;\n    font-weight: bold;\n    font-size: 24px;\n    text-align: center;\n    line-height: 20px;\n    border: 2px solid black;\n    border-radius: 20%;\n    margin-right: 10px;\">\n    !\n  </span>\n  <span><strong>As of December 4, 2024, X (formerly Twitter) is no longer supported. We apologise for any inconvenience.</strong></span>\n</div></div>",
2325 |         "deprecated": true,
2326 |         "parameters": [
2327 |           {
2328 |             "name": "Authorization",
2329 |             "in": "header",
2330 |             "description": "Access Token",
2331 |             "required": true,
2332 |             "schema": {
2333 |               "type": "string",
2334 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2335 |             }
2336 |           },
2337 |           {
2338 |             "name": "Version",
2339 |             "in": "header",
2340 |             "description": "API Version",
2341 |             "required": true,
2342 |             "schema": {
2343 |               "type": "string",
2344 |               "enum": [
2345 |                 "2021-07-28"
2346 |               ]
2347 |             }
2348 |           },
2349 |           {
2350 |             "name": "locationId",
2351 |             "required": true,
2352 |             "in": "path",
2353 |             "description": "Account Location Id",
2354 |             "example": "w37swmmLbA02zgqKPpxITe2",
2355 |             "schema": {
2356 |               "type": "string"
2357 |             }
2358 |           },
2359 |           {
2360 |             "name": "accountId",
2361 |             "required": true,
2362 |             "in": "path",
2363 |             "description": "Account Id",
2364 |             "example": "w37swmmLbA02zgqKPpxITe",
2365 |             "schema": {
2366 |               "type": "string"
2367 |             }
2368 |           }
2369 |         ],
2370 |         "requestBody": {
2371 |           "required": true,
2372 |           "content": {
2373 |             "application/json": {
2374 |               "schema": {
2375 |                 "$ref": "#/components/schemas/AttachTwitterAccountDTO"
2376 |               }
2377 |             }
2378 |           }
2379 |         },
2380 |         "responses": {
2381 |           "201": {
2382 |             "description": "Successful response",
2383 |             "content": {
2384 |               "application/json": {
2385 |                 "schema": {
2386 |                   "$ref": "#/components/schemas/SocialMediaTwitterAccountResponseDTO"
2387 |                 }
2388 |               }
2389 |             }
2390 |           },
2391 |           "400": {
2392 |             "description": "Bad Request",
2393 |             "content": {
2394 |               "application/json": {
2395 |                 "schema": {
2396 |                   "$ref": "#/components/schemas/BadRequestDTO"
2397 |                 }
2398 |               }
2399 |             }
2400 |           },
2401 |           "401": {
2402 |             "description": "Unauthorized",
2403 |             "content": {
2404 |               "application/json": {
2405 |                 "schema": {
2406 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2407 |                 }
2408 |               }
2409 |             }
2410 |           },
2411 |           "422": {
2412 |             "description": "Unprocessable Entity",
2413 |             "content": {
2414 |               "application/json": {
2415 |                 "schema": {
2416 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2417 |                 }
2418 |               }
2419 |             }
2420 |           }
2421 |         },
2422 |         "tags": [
2423 |           "Oauth | Twitter"
2424 |         ]
2425 |       }
2426 |     },
2427 |     "/social-media-posting/{locationId}/csv": {
2428 |       "post": {
2429 |         "operationId": "upload-csv",
2430 |         "summary": "Upload CSV",
2431 |         "parameters": [
2432 |           {
2433 |             "name": "Authorization",
2434 |             "in": "header",
2435 |             "description": "Access Token",
2436 |             "required": true,
2437 |             "schema": {
2438 |               "type": "string",
2439 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2440 |             }
2441 |           },
2442 |           {
2443 |             "name": "Version",
2444 |             "in": "header",
2445 |             "description": "API Version",
2446 |             "required": true,
2447 |             "schema": {
2448 |               "type": "string",
2449 |               "enum": [
2450 |                 "2021-07-28"
2451 |               ]
2452 |             }
2453 |           },
2454 |           {
2455 |             "name": "locationId",
2456 |             "required": true,
2457 |             "in": "path",
2458 |             "description": "Location Id",
2459 |             "example": "ve9EPM428h8vShlRW1KT",
2460 |             "schema": {
2461 |               "type": "string"
2462 |             }
2463 |           }
2464 |         ],
2465 |         "requestBody": {
2466 |           "required": true,
2467 |           "content": {
2468 |             "multipart/form-data": {
2469 |               "schema": {
2470 |                 "$ref": "#/components/schemas/UploadCSVDTO"
2471 |               }
2472 |             }
2473 |           }
2474 |         },
2475 |         "responses": {
2476 |           "201": {
2477 |             "description": "Successful response",
2478 |             "content": {
2479 |               "application/json": {
2480 |                 "schema": {
2481 |                   "$ref": "#/components/schemas/UploadFileResponseDTO"
2482 |                 }
2483 |               }
2484 |             }
2485 |           },
2486 |           "400": {
2487 |             "description": "Bad Request",
2488 |             "content": {
2489 |               "application/json": {
2490 |                 "schema": {
2491 |                   "$ref": "#/components/schemas/BadRequestDTO"
2492 |                 }
2493 |               }
2494 |             }
2495 |           },
2496 |           "401": {
2497 |             "description": "Unauthorized",
2498 |             "content": {
2499 |               "application/json": {
2500 |                 "schema": {
2501 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2502 |                 }
2503 |               }
2504 |             }
2505 |           },
2506 |           "422": {
2507 |             "description": "Unprocessable Entity",
2508 |             "content": {
2509 |               "application/json": {
2510 |                 "schema": {
2511 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2512 |                 }
2513 |               }
2514 |             }
2515 |           }
2516 |         },
2517 |         "tags": [
2518 |           "CSV"
2519 |         ],
2520 |         "security": [
2521 |           {
2522 |             "bearer": []
2523 |           }
2524 |         ]
2525 |       },
2526 |       "get": {
2527 |         "operationId": "get-upload-status",
2528 |         "summary": "Get Upload Status",
2529 |         "parameters": [
2530 |           {
2531 |             "name": "Authorization",
2532 |             "in": "header",
2533 |             "description": "Access Token",
2534 |             "required": true,
2535 |             "schema": {
2536 |               "type": "string",
2537 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2538 |             }
2539 |           },
2540 |           {
2541 |             "name": "Version",
2542 |             "in": "header",
2543 |             "description": "API Version",
2544 |             "required": true,
2545 |             "schema": {
2546 |               "type": "string",
2547 |               "enum": [
2548 |                 "2021-07-28"
2549 |               ]
2550 |             }
2551 |           },
2552 |           {
2553 |             "name": "locationId",
2554 |             "required": true,
2555 |             "in": "path",
2556 |             "description": "Location Id",
2557 |             "example": "ve9EPM428h8vShlRW1KT",
2558 |             "schema": {
2559 |               "type": "string"
2560 |             }
2561 |           },
2562 |           {
2563 |             "name": "skip",
2564 |             "required": false,
2565 |             "in": "query",
2566 |             "example": "1",
2567 |             "schema": {
2568 |               "default": "0",
2569 |               "type": "string"
2570 |             }
2571 |           },
2572 |           {
2573 |             "name": "limit",
2574 |             "required": false,
2575 |             "in": "query",
2576 |             "example": "10",
2577 |             "schema": {
2578 |               "default": "10",
2579 |               "type": "string"
2580 |             }
2581 |           },
2582 |           {
2583 |             "name": "includeUsers",
2584 |             "required": false,
2585 |             "in": "query",
2586 |             "example": "true",
2587 |             "schema": {
2588 |               "type": "string"
2589 |             }
2590 |           },
2591 |           {
2592 |             "name": "userId",
2593 |             "required": false,
2594 |             "in": "query",
2595 |             "description": "User ID",
2596 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
2597 |             "schema": {
2598 |               "type": "string"
2599 |             }
2600 |           }
2601 |         ],
2602 |         "responses": {
2603 |           "200": {
2604 |             "description": "Successful response",
2605 |             "content": {
2606 |               "application/json": {
2607 |                 "schema": {
2608 |                   "$ref": "#/components/schemas/GetUploadStatusResponseDTO"
2609 |                 }
2610 |               }
2611 |             }
2612 |           },
2613 |           "400": {
2614 |             "description": "Bad Request",
2615 |             "content": {
2616 |               "application/json": {
2617 |                 "schema": {
2618 |                   "$ref": "#/components/schemas/BadRequestDTO"
2619 |                 }
2620 |               }
2621 |             }
2622 |           },
2623 |           "401": {
2624 |             "description": "Unauthorized",
2625 |             "content": {
2626 |               "application/json": {
2627 |                 "schema": {
2628 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2629 |                 }
2630 |               }
2631 |             }
2632 |           },
2633 |           "422": {
2634 |             "description": "Unprocessable Entity",
2635 |             "content": {
2636 |               "application/json": {
2637 |                 "schema": {
2638 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2639 |                 }
2640 |               }
2641 |             }
2642 |           }
2643 |         },
2644 |         "tags": [
2645 |           "CSV"
2646 |         ],
2647 |         "security": [
2648 |           {
2649 |             "bearer": []
2650 |           }
2651 |         ]
2652 |       }
2653 |     },
2654 |     "/social-media-posting/{locationId}/set-accounts": {
2655 |       "post": {
2656 |         "operationId": "set-accounts",
2657 |         "summary": "Set Accounts",
2658 |         "parameters": [
2659 |           {
2660 |             "name": "Authorization",
2661 |             "in": "header",
2662 |             "description": "Access Token",
2663 |             "required": true,
2664 |             "schema": {
2665 |               "type": "string",
2666 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2667 |             }
2668 |           },
2669 |           {
2670 |             "name": "Version",
2671 |             "in": "header",
2672 |             "description": "API Version",
2673 |             "required": true,
2674 |             "schema": {
2675 |               "type": "string",
2676 |               "enum": [
2677 |                 "2021-07-28"
2678 |               ]
2679 |             }
2680 |           },
2681 |           {
2682 |             "name": "locationId",
2683 |             "required": true,
2684 |             "in": "path",
2685 |             "description": "Location Id",
2686 |             "example": "ve9EPM428h8vShlRW1KT",
2687 |             "schema": {
2688 |               "type": "string"
2689 |             }
2690 |           }
2691 |         ],
2692 |         "requestBody": {
2693 |           "required": true,
2694 |           "content": {
2695 |             "application/json": {
2696 |               "schema": {
2697 |                 "$ref": "#/components/schemas/SetAccountsDTO"
2698 |               }
2699 |             }
2700 |           }
2701 |         },
2702 |         "responses": {
2703 |           "201": {
2704 |             "description": "Successful response",
2705 |             "content": {
2706 |               "application/json": {
2707 |                 "schema": {
2708 |                   "$ref": "#/components/schemas/SetAccountsResponseDTO"
2709 |                 }
2710 |               }
2711 |             }
2712 |           },
2713 |           "400": {
2714 |             "description": "Bad Request",
2715 |             "content": {
2716 |               "application/json": {
2717 |                 "schema": {
2718 |                   "$ref": "#/components/schemas/BadRequestDTO"
2719 |                 }
2720 |               }
2721 |             }
2722 |           },
2723 |           "401": {
2724 |             "description": "Unauthorized",
2725 |             "content": {
2726 |               "application/json": {
2727 |                 "schema": {
2728 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2729 |                 }
2730 |               }
2731 |             }
2732 |           },
2733 |           "422": {
2734 |             "description": "Unprocessable Entity",
2735 |             "content": {
2736 |               "application/json": {
2737 |                 "schema": {
2738 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2739 |                 }
2740 |               }
2741 |             }
2742 |           }
2743 |         },
2744 |         "tags": [
2745 |           "CSV"
2746 |         ],
2747 |         "security": [
2748 |           {
2749 |             "bearer": []
2750 |           }
2751 |         ]
2752 |       }
2753 |     },
2754 |     "/social-media-posting/{locationId}/csv/{id}": {
2755 |       "get": {
2756 |         "operationId": "get-csv-post",
2757 |         "summary": "Get CSV Post",
2758 |         "parameters": [
2759 |           {
2760 |             "name": "Authorization",
2761 |             "in": "header",
2762 |             "description": "Access Token",
2763 |             "required": true,
2764 |             "schema": {
2765 |               "type": "string",
2766 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2767 |             }
2768 |           },
2769 |           {
2770 |             "name": "Version",
2771 |             "in": "header",
2772 |             "description": "API Version",
2773 |             "required": true,
2774 |             "schema": {
2775 |               "type": "string",
2776 |               "enum": [
2777 |                 "2021-07-28"
2778 |               ]
2779 |             }
2780 |           },
2781 |           {
2782 |             "name": "locationId",
2783 |             "required": true,
2784 |             "in": "path",
2785 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
2786 |             "schema": {
2787 |               "type": "string"
2788 |             }
2789 |           },
2790 |           {
2791 |             "name": "id",
2792 |             "required": true,
2793 |             "in": "path",
2794 |             "example": "65f92e55cc884f0d0845e447",
2795 |             "description": "CSV Id",
2796 |             "schema": {
2797 |               "type": "string"
2798 |             }
2799 |           },
2800 |           {
2801 |             "name": "skip",
2802 |             "required": false,
2803 |             "in": "query",
2804 |             "example": "0",
2805 |             "schema": {
2806 |               "type": "string"
2807 |             }
2808 |           },
2809 |           {
2810 |             "name": "limit",
2811 |             "required": false,
2812 |             "in": "query",
2813 |             "example": "10",
2814 |             "schema": {
2815 |               "type": "string"
2816 |             }
2817 |           }
2818 |         ],
2819 |         "responses": {
2820 |           "200": {
2821 |             "description": "Successful response",
2822 |             "content": {
2823 |               "application/json": {
2824 |                 "schema": {
2825 |                   "$ref": "#/components/schemas/GetCsvPostResponseDTO"
2826 |                 }
2827 |               }
2828 |             }
2829 |           },
2830 |           "400": {
2831 |             "description": "Bad Request",
2832 |             "content": {
2833 |               "application/json": {
2834 |                 "schema": {
2835 |                   "$ref": "#/components/schemas/BadRequestDTO"
2836 |                 }
2837 |               }
2838 |             }
2839 |           },
2840 |           "401": {
2841 |             "description": "Unauthorized",
2842 |             "content": {
2843 |               "application/json": {
2844 |                 "schema": {
2845 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2846 |                 }
2847 |               }
2848 |             }
2849 |           },
2850 |           "422": {
2851 |             "description": "Unprocessable Entity",
2852 |             "content": {
2853 |               "application/json": {
2854 |                 "schema": {
2855 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2856 |                 }
2857 |               }
2858 |             }
2859 |           }
2860 |         },
2861 |         "tags": [
2862 |           "CSV"
2863 |         ],
2864 |         "security": [
2865 |           {
2866 |             "bearer": []
2867 |           }
2868 |         ]
2869 |       },
2870 |       "patch": {
2871 |         "operationId": "start-csv-finalize",
2872 |         "summary": "Start CSV Finalize",
2873 |         "parameters": [
2874 |           {
2875 |             "name": "Authorization",
2876 |             "in": "header",
2877 |             "description": "Access Token",
2878 |             "required": true,
2879 |             "schema": {
2880 |               "type": "string",
2881 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2882 |             }
2883 |           },
2884 |           {
2885 |             "name": "Version",
2886 |             "in": "header",
2887 |             "description": "API Version",
2888 |             "required": true,
2889 |             "schema": {
2890 |               "type": "string",
2891 |               "enum": [
2892 |                 "2021-07-28"
2893 |               ]
2894 |             }
2895 |           },
2896 |           {
2897 |             "name": "locationId",
2898 |             "required": true,
2899 |             "in": "path",
2900 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
2901 |             "schema": {
2902 |               "type": "string"
2903 |             }
2904 |           },
2905 |           {
2906 |             "name": "id",
2907 |             "required": true,
2908 |             "in": "path",
2909 |             "example": "65f92e55cc884f0d0845e447",
2910 |             "description": "CSV Id",
2911 |             "schema": {
2912 |               "type": "string"
2913 |             }
2914 |           }
2915 |         ],
2916 |         "requestBody": {
2917 |           "required": true,
2918 |           "content": {
2919 |             "application/json": {
2920 |               "schema": {
2921 |                 "$ref": "#/components/schemas/CSVDefaultDTO"
2922 |               }
2923 |             }
2924 |           }
2925 |         },
2926 |         "responses": {
2927 |           "200": {
2928 |             "description": "Successful response",
2929 |             "content": {
2930 |               "application/json": {
2931 |                 "schema": {
2932 |                   "$ref": "#/components/schemas/CsvPostStatusResponseDTO"
2933 |                 }
2934 |               }
2935 |             }
2936 |           },
2937 |           "400": {
2938 |             "description": "Bad Request",
2939 |             "content": {
2940 |               "application/json": {
2941 |                 "schema": {
2942 |                   "$ref": "#/components/schemas/BadRequestDTO"
2943 |                 }
2944 |               }
2945 |             }
2946 |           },
2947 |           "401": {
2948 |             "description": "Unauthorized",
2949 |             "content": {
2950 |               "application/json": {
2951 |                 "schema": {
2952 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
2953 |                 }
2954 |               }
2955 |             }
2956 |           },
2957 |           "422": {
2958 |             "description": "Unprocessable Entity",
2959 |             "content": {
2960 |               "application/json": {
2961 |                 "schema": {
2962 |                   "$ref": "#/components/schemas/UnprocessableDTO"
2963 |                 }
2964 |               }
2965 |             }
2966 |           }
2967 |         },
2968 |         "tags": [
2969 |           "CSV"
2970 |         ],
2971 |         "security": [
2972 |           {
2973 |             "bearer": []
2974 |           }
2975 |         ]
2976 |       },
2977 |       "delete": {
2978 |         "operationId": "delete-csv",
2979 |         "summary": "Delete CSV",
2980 |         "parameters": [
2981 |           {
2982 |             "name": "Authorization",
2983 |             "in": "header",
2984 |             "description": "Access Token",
2985 |             "required": true,
2986 |             "schema": {
2987 |               "type": "string",
2988 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
2989 |             }
2990 |           },
2991 |           {
2992 |             "name": "Version",
2993 |             "in": "header",
2994 |             "description": "API Version",
2995 |             "required": true,
2996 |             "schema": {
2997 |               "type": "string",
2998 |               "enum": [
2999 |                 "2021-07-28"
3000 |               ]
3001 |             }
3002 |           },
3003 |           {
3004 |             "name": "locationId",
3005 |             "required": true,
3006 |             "in": "path",
3007 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
3008 |             "schema": {
3009 |               "type": "string"
3010 |             }
3011 |           },
3012 |           {
3013 |             "name": "id",
3014 |             "required": true,
3015 |             "in": "path",
3016 |             "example": "65f92e55cc884f0d0845e447",
3017 |             "description": "CSV Id",
3018 |             "schema": {
3019 |               "type": "string"
3020 |             }
3021 |           }
3022 |         ],
3023 |         "responses": {
3024 |           "200": {
3025 |             "description": "Successful response",
3026 |             "content": {
3027 |               "application/json": {
3028 |                 "schema": {
3029 |                   "$ref": "#/components/schemas/DeleteCsvResponseDTO"
3030 |                 }
3031 |               }
3032 |             }
3033 |           },
3034 |           "400": {
3035 |             "description": "Bad Request",
3036 |             "content": {
3037 |               "application/json": {
3038 |                 "schema": {
3039 |                   "$ref": "#/components/schemas/BadRequestDTO"
3040 |                 }
3041 |               }
3042 |             }
3043 |           },
3044 |           "401": {
3045 |             "description": "Unauthorized",
3046 |             "content": {
3047 |               "application/json": {
3048 |                 "schema": {
3049 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3050 |                 }
3051 |               }
3052 |             }
3053 |           },
3054 |           "422": {
3055 |             "description": "Unprocessable Entity",
3056 |             "content": {
3057 |               "application/json": {
3058 |                 "schema": {
3059 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3060 |                 }
3061 |               }
3062 |             }
3063 |           }
3064 |         },
3065 |         "tags": [
3066 |           "CSV"
3067 |         ],
3068 |         "security": [
3069 |           {
3070 |             "bearer": []
3071 |           }
3072 |         ]
3073 |       }
3074 |     },
3075 |     "/social-media-posting/{locationId}/csv/{csvId}/post/{postId}": {
3076 |       "delete": {
3077 |         "operationId": "delete-csv-post",
3078 |         "summary": "Delete CSV Post",
3079 |         "parameters": [
3080 |           {
3081 |             "name": "Authorization",
3082 |             "in": "header",
3083 |             "description": "Access Token",
3084 |             "required": true,
3085 |             "schema": {
3086 |               "type": "string",
3087 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3088 |             }
3089 |           },
3090 |           {
3091 |             "name": "Version",
3092 |             "in": "header",
3093 |             "description": "API Version",
3094 |             "required": true,
3095 |             "schema": {
3096 |               "type": "string",
3097 |               "enum": [
3098 |                 "2021-07-28"
3099 |               ]
3100 |             }
3101 |           },
3102 |           {
3103 |             "name": "locationId",
3104 |             "required": true,
3105 |             "in": "path",
3106 |             "example": "sdfdsfdsfEWEsdfsdsW32dd",
3107 |             "schema": {
3108 |               "type": "string"
3109 |             }
3110 |           },
3111 |           {
3112 |             "name": "postId",
3113 |             "required": true,
3114 |             "in": "path",
3115 |             "example": "65f92e55cc884f0d0845e447",
3116 |             "description": "CSV Post Id",
3117 |             "schema": {
3118 |               "type": "string"
3119 |             }
3120 |           },
3121 |           {
3122 |             "name": "csvId",
3123 |             "required": true,
3124 |             "in": "path",
3125 |             "example": "65f92e55cc884f0d0845e447",
3126 |             "description": "CSV Id",
3127 |             "schema": {
3128 |               "type": "string"
3129 |             }
3130 |           }
3131 |         ],
3132 |         "responses": {
3133 |           "200": {
3134 |             "description": "Successful response",
3135 |             "content": {
3136 |               "application/json": {
3137 |                 "schema": {
3138 |                   "$ref": "#/components/schemas/DeletePostResponseDTO"
3139 |                 }
3140 |               }
3141 |             }
3142 |           },
3143 |           "400": {
3144 |             "description": "Bad Request",
3145 |             "content": {
3146 |               "application/json": {
3147 |                 "schema": {
3148 |                   "$ref": "#/components/schemas/BadRequestDTO"
3149 |                 }
3150 |               }
3151 |             }
3152 |           },
3153 |           "401": {
3154 |             "description": "Unauthorized",
3155 |             "content": {
3156 |               "application/json": {
3157 |                 "schema": {
3158 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3159 |                 }
3160 |               }
3161 |             }
3162 |           },
3163 |           "422": {
3164 |             "description": "Unprocessable Entity",
3165 |             "content": {
3166 |               "application/json": {
3167 |                 "schema": {
3168 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3169 |                 }
3170 |               }
3171 |             }
3172 |           }
3173 |         },
3174 |         "tags": [
3175 |           "CSV"
3176 |         ],
3177 |         "security": [
3178 |           {
3179 |             "bearer": []
3180 |           }
3181 |         ]
3182 |       }
3183 |     },
3184 |     "/social-media-posting/oauth/tiktok/start": {
3185 |       "get": {
3186 |         "operationId": "start-tiktok-oauth",
3187 |         "summary": "Starts OAuth For Tiktok Account",
3188 |         "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Tiktok login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"tiktok\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Tiktok account details using below API -\n  API: '/social-media-posting/oauth/tiktok/accounts/:accountId' \n\n  Method: GET",
3189 |         "parameters": [
3190 |           {
3191 |             "name": "Authorization",
3192 |             "in": "header",
3193 |             "description": "Access Token",
3194 |             "required": true,
3195 |             "schema": {
3196 |               "type": "string",
3197 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3198 |             }
3199 |           },
3200 |           {
3201 |             "name": "Version",
3202 |             "in": "header",
3203 |             "description": "API Version",
3204 |             "required": true,
3205 |             "schema": {
3206 |               "type": "string",
3207 |               "enum": [
3208 |                 "2021-07-28"
3209 |               ]
3210 |             }
3211 |           },
3212 |           {
3213 |             "name": "locationId",
3214 |             "required": true,
3215 |             "in": "query",
3216 |             "description": "Location Id",
3217 |             "example": "w37swmmLbA02zgqKPpxITe2",
3218 |             "schema": {
3219 |               "type": "string"
3220 |             }
3221 |           },
3222 |           {
3223 |             "name": "userId",
3224 |             "required": true,
3225 |             "in": "query",
3226 |             "description": "User Id",
3227 |             "example": "u37swmmLbA02zgqKPpxITe2",
3228 |             "schema": {
3229 |               "type": "string"
3230 |             }
3231 |           },
3232 |           {
3233 |             "name": "page",
3234 |             "required": false,
3235 |             "in": "query",
3236 |             "description": "Page",
3237 |             "example": "integration",
3238 |             "schema": {
3239 |               "type": "string"
3240 |             }
3241 |           },
3242 |           {
3243 |             "name": "reconnect",
3244 |             "required": false,
3245 |             "in": "query",
3246 |             "description": "Reconnect",
3247 |             "example": "true",
3248 |             "schema": {
3249 |               "type": "string"
3250 |             }
3251 |           }
3252 |         ],
3253 |         "responses": {
3254 |           "200": {
3255 |             "description": "Successful Response"
3256 |           },
3257 |           "400": {
3258 |             "description": "Bad Request",
3259 |             "content": {
3260 |               "application/json": {
3261 |                 "schema": {
3262 |                   "$ref": "#/components/schemas/BadRequestDTO"
3263 |                 }
3264 |               }
3265 |             }
3266 |           },
3267 |           "401": {
3268 |             "description": "Unauthorized",
3269 |             "content": {
3270 |               "application/json": {
3271 |                 "schema": {
3272 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3273 |                 }
3274 |               }
3275 |             }
3276 |           },
3277 |           "422": {
3278 |             "description": "Unprocessable Entity",
3279 |             "content": {
3280 |               "application/json": {
3281 |                 "schema": {
3282 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3283 |                 }
3284 |               }
3285 |             }
3286 |           }
3287 |         },
3288 |         "tags": [
3289 |           "Oauth | Tiktok"
3290 |         ],
3291 |         "security": [
3292 |           {
3293 |             "bearer": []
3294 |           }
3295 |         ]
3296 |       }
3297 |     },
3298 |     "/social-media-posting/oauth/{locationId}/tiktok/accounts/{accountId}": {
3299 |       "get": {
3300 |         "operationId": "get-tiktok-profile",
3301 |         "summary": "Get Tiktok profile",
3302 |         "description": "Get Tiktok profile",
3303 |         "parameters": [
3304 |           {
3305 |             "name": "Authorization",
3306 |             "in": "header",
3307 |             "description": "Access Token",
3308 |             "required": true,
3309 |             "schema": {
3310 |               "type": "string",
3311 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3312 |             }
3313 |           },
3314 |           {
3315 |             "name": "Version",
3316 |             "in": "header",
3317 |             "description": "API Version",
3318 |             "required": true,
3319 |             "schema": {
3320 |               "type": "string",
3321 |               "enum": [
3322 |                 "2021-07-28"
3323 |               ]
3324 |             }
3325 |           },
3326 |           {
3327 |             "name": "locationId",
3328 |             "required": true,
3329 |             "in": "path",
3330 |             "description": "Account Location Id",
3331 |             "example": "w37swmmLbA02zgqKPpxITe2",
3332 |             "schema": {
3333 |               "type": "string"
3334 |             }
3335 |           },
3336 |           {
3337 |             "name": "accountId",
3338 |             "required": true,
3339 |             "in": "path",
3340 |             "description": "Account Id",
3341 |             "example": "w37swmmLbA02zgqKPpxITe",
3342 |             "schema": {
3343 |               "type": "string"
3344 |             }
3345 |           }
3346 |         ],
3347 |         "responses": {
3348 |           "200": {
3349 |             "description": "Successful response",
3350 |             "content": {
3351 |               "application/json": {
3352 |                 "schema": {
3353 |                   "$ref": "#/components/schemas/GetTiktokAccountResponseDTO"
3354 |                 }
3355 |               }
3356 |             }
3357 |           },
3358 |           "400": {
3359 |             "description": "Bad Request",
3360 |             "content": {
3361 |               "application/json": {
3362 |                 "schema": {
3363 |                   "$ref": "#/components/schemas/BadRequestDTO"
3364 |                 }
3365 |               }
3366 |             }
3367 |           },
3368 |           "401": {
3369 |             "description": "Unauthorized",
3370 |             "content": {
3371 |               "application/json": {
3372 |                 "schema": {
3373 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3374 |                 }
3375 |               }
3376 |             }
3377 |           },
3378 |           "422": {
3379 |             "description": "Unprocessable Entity",
3380 |             "content": {
3381 |               "application/json": {
3382 |                 "schema": {
3383 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3384 |                 }
3385 |               }
3386 |             }
3387 |           }
3388 |         },
3389 |         "tags": [
3390 |           "Oauth | Tiktok"
3391 |         ],
3392 |         "security": [
3393 |           {
3394 |             "bearer": []
3395 |           }
3396 |         ]
3397 |       },
3398 |       "post": {
3399 |         "operationId": "attach-tiktok-profile",
3400 |         "summary": "Attach Tiktok profile",
3401 |         "description": "Attach Tiktok profile",
3402 |         "parameters": [
3403 |           {
3404 |             "name": "Authorization",
3405 |             "in": "header",
3406 |             "description": "Access Token",
3407 |             "required": true,
3408 |             "schema": {
3409 |               "type": "string",
3410 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3411 |             }
3412 |           },
3413 |           {
3414 |             "name": "Version",
3415 |             "in": "header",
3416 |             "description": "API Version",
3417 |             "required": true,
3418 |             "schema": {
3419 |               "type": "string",
3420 |               "enum": [
3421 |                 "2021-07-28"
3422 |               ]
3423 |             }
3424 |           },
3425 |           {
3426 |             "name": "locationId",
3427 |             "required": true,
3428 |             "in": "path",
3429 |             "description": "Account Location Id",
3430 |             "example": "w37swmmLbA02zgqKPpxITe2",
3431 |             "schema": {
3432 |               "type": "string"
3433 |             }
3434 |           },
3435 |           {
3436 |             "name": "accountId",
3437 |             "required": true,
3438 |             "in": "path",
3439 |             "description": "Account Id",
3440 |             "example": "w37swmmLbA02zgqKPpxITe",
3441 |             "schema": {
3442 |               "type": "string"
3443 |             }
3444 |           }
3445 |         ],
3446 |         "requestBody": {
3447 |           "required": true,
3448 |           "content": {
3449 |             "application/json": {
3450 |               "schema": {
3451 |                 "$ref": "#/components/schemas/AttachTiktokAccountDTO"
3452 |               }
3453 |             }
3454 |           }
3455 |         },
3456 |         "responses": {
3457 |           "201": {
3458 |             "description": "Successful response",
3459 |             "content": {
3460 |               "application/json": {
3461 |                 "schema": {
3462 |                   "$ref": "#/components/schemas/SocialMediaTiktokAccountResponseDTO"
3463 |                 }
3464 |               }
3465 |             }
3466 |           },
3467 |           "400": {
3468 |             "description": "Bad Request",
3469 |             "content": {
3470 |               "application/json": {
3471 |                 "schema": {
3472 |                   "$ref": "#/components/schemas/BadRequestDTO"
3473 |                 }
3474 |               }
3475 |             }
3476 |           },
3477 |           "401": {
3478 |             "description": "Unauthorized",
3479 |             "content": {
3480 |               "application/json": {
3481 |                 "schema": {
3482 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3483 |                 }
3484 |               }
3485 |             }
3486 |           },
3487 |           "422": {
3488 |             "description": "Unprocessable Entity",
3489 |             "content": {
3490 |               "application/json": {
3491 |                 "schema": {
3492 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3493 |                 }
3494 |               }
3495 |             }
3496 |           }
3497 |         },
3498 |         "tags": [
3499 |           "Oauth | Tiktok"
3500 |         ],
3501 |         "security": [
3502 |           {
3503 |             "bearer": []
3504 |           }
3505 |         ]
3506 |       }
3507 |     },
3508 |     "/social-media-posting/oauth/tiktok-business/start": {
3509 |       "get": {
3510 |         "operationId": "start-tiktok-business-oauth",
3511 |         "summary": "Starts OAuth For Tiktok Business Account",
3512 |         "description": "Open the API in a window with appropriate params and headers instead of using the Curl. User is navigated to Tiktok-Business login OAuth screen. On successful login, listen on window object for message where event listener returns data in its callback function. \n  ### Sample code to listen to event data:\n    window.addEventListener('message', \n      function(e) {\n        if (e.data && e.data.page === 'social_media_posting') {\n        const { actionType, page, platform, placement, accountId, reconnectAccounts } = e.data\n        }\n      },\n    false)\n  ### Event Data Response:\n    {\n      actionType: string,            Ex: \"close\" \n      page: string,                  Ex: \"social-media-posting\" \n      platform: string,              Ex: \"tiktok-business\" \n      placement: string,             Ex: \"placement\" \n      accountId: string,             Ex: \"658a9b6833b91e0ecb8f3958\" \n      reconnectAccounts: string[]]   Ex: [\"658a9b6833b91e0ecb834acd\", \"efd2daa9b6833b91e0ecb8f3511\"] \n    }\n  ### The accountId retrieved from above data can be used to fetch Tiktok-Business account details using below API -\n  API: '/social-media-posting/oauth/tiktok-business/accounts/:accountId' \n\n  Method: GET",
3513 |         "parameters": [
3514 |           {
3515 |             "name": "Authorization",
3516 |             "in": "header",
3517 |             "description": "Access Token",
3518 |             "required": true,
3519 |             "schema": {
3520 |               "type": "string",
3521 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3522 |             }
3523 |           },
3524 |           {
3525 |             "name": "Version",
3526 |             "in": "header",
3527 |             "description": "API Version",
3528 |             "required": true,
3529 |             "schema": {
3530 |               "type": "string",
3531 |               "enum": [
3532 |                 "2021-07-28"
3533 |               ]
3534 |             }
3535 |           },
3536 |           {
3537 |             "name": "locationId",
3538 |             "required": true,
3539 |             "in": "query",
3540 |             "description": "Location Id",
3541 |             "example": "w37swmmLbA02zgqKPpxITe2",
3542 |             "schema": {
3543 |               "type": "string"
3544 |             }
3545 |           },
3546 |           {
3547 |             "name": "userId",
3548 |             "required": true,
3549 |             "in": "query",
3550 |             "description": "User Id",
3551 |             "example": "u37swmmLbA02zgqKPpxITe2",
3552 |             "schema": {
3553 |               "type": "string"
3554 |             }
3555 |           },
3556 |           {
3557 |             "name": "page",
3558 |             "required": false,
3559 |             "in": "query",
3560 |             "description": "Page",
3561 |             "example": "integration",
3562 |             "schema": {
3563 |               "type": "string"
3564 |             }
3565 |           },
3566 |           {
3567 |             "name": "reconnect",
3568 |             "required": false,
3569 |             "in": "query",
3570 |             "description": "Reconnect",
3571 |             "example": "true",
3572 |             "schema": {
3573 |               "type": "string"
3574 |             }
3575 |           }
3576 |         ],
3577 |         "responses": {
3578 |           "200": {
3579 |             "description": "Successful Response"
3580 |           },
3581 |           "400": {
3582 |             "description": "Bad Request",
3583 |             "content": {
3584 |               "application/json": {
3585 |                 "schema": {
3586 |                   "$ref": "#/components/schemas/BadRequestDTO"
3587 |                 }
3588 |               }
3589 |             }
3590 |           },
3591 |           "401": {
3592 |             "description": "Unauthorized",
3593 |             "content": {
3594 |               "application/json": {
3595 |                 "schema": {
3596 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3597 |                 }
3598 |               }
3599 |             }
3600 |           },
3601 |           "422": {
3602 |             "description": "Unprocessable Entity",
3603 |             "content": {
3604 |               "application/json": {
3605 |                 "schema": {
3606 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3607 |                 }
3608 |               }
3609 |             }
3610 |           }
3611 |         },
3612 |         "tags": [
3613 |           "Oauth | Tiktok"
3614 |         ],
3615 |         "security": [
3616 |           {
3617 |             "bearer": []
3618 |           }
3619 |         ]
3620 |       }
3621 |     },
3622 |     "/social-media-posting/oauth/{locationId}/tiktok-business/accounts/{accountId}": {
3623 |       "get": {
3624 |         "operationId": "get-tiktok-business-profile",
3625 |         "summary": "Get Tiktok Business profile",
3626 |         "description": "Get Tiktok Business profile",
3627 |         "parameters": [
3628 |           {
3629 |             "name": "Authorization",
3630 |             "in": "header",
3631 |             "description": "Access Token",
3632 |             "required": true,
3633 |             "schema": {
3634 |               "type": "string",
3635 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3636 |             }
3637 |           },
3638 |           {
3639 |             "name": "Version",
3640 |             "in": "header",
3641 |             "description": "API Version",
3642 |             "required": true,
3643 |             "schema": {
3644 |               "type": "string",
3645 |               "enum": [
3646 |                 "2021-07-28"
3647 |               ]
3648 |             }
3649 |           },
3650 |           {
3651 |             "name": "locationId",
3652 |             "required": true,
3653 |             "in": "path",
3654 |             "description": "Account Location Id",
3655 |             "example": "w37swmmLbA02zgqKPpxITe2",
3656 |             "schema": {
3657 |               "type": "string"
3658 |             }
3659 |           },
3660 |           {
3661 |             "name": "accountId",
3662 |             "required": true,
3663 |             "in": "path",
3664 |             "description": "Account Id",
3665 |             "example": "w37swmmLbA02zgqKPpxITe",
3666 |             "schema": {
3667 |               "type": "string"
3668 |             }
3669 |           }
3670 |         ],
3671 |         "responses": {
3672 |           "200": {
3673 |             "description": "Successful response",
3674 |             "content": {
3675 |               "application/json": {
3676 |                 "schema": {
3677 |                   "$ref": "#/components/schemas/GetTiktokBusinessAccountResponseDTO"
3678 |                 }
3679 |               }
3680 |             }
3681 |           },
3682 |           "400": {
3683 |             "description": "Bad Request",
3684 |             "content": {
3685 |               "application/json": {
3686 |                 "schema": {
3687 |                   "$ref": "#/components/schemas/BadRequestDTO"
3688 |                 }
3689 |               }
3690 |             }
3691 |           },
3692 |           "401": {
3693 |             "description": "Unauthorized",
3694 |             "content": {
3695 |               "application/json": {
3696 |                 "schema": {
3697 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3698 |                 }
3699 |               }
3700 |             }
3701 |           },
3702 |           "422": {
3703 |             "description": "Unprocessable Entity",
3704 |             "content": {
3705 |               "application/json": {
3706 |                 "schema": {
3707 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3708 |                 }
3709 |               }
3710 |             }
3711 |           }
3712 |         },
3713 |         "tags": [
3714 |           "Oauth | Tiktok"
3715 |         ],
3716 |         "security": [
3717 |           {
3718 |             "bearer": []
3719 |           }
3720 |         ]
3721 |       }
3722 |     },
3723 |     "/social-media-posting/{locationId}/categories": {
3724 |       "get": {
3725 |         "operationId": "get-categories-location-id",
3726 |         "summary": "Get categories by location id",
3727 |         "parameters": [
3728 |           {
3729 |             "name": "Authorization",
3730 |             "in": "header",
3731 |             "description": "Access Token",
3732 |             "required": true,
3733 |             "schema": {
3734 |               "type": "string",
3735 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3736 |             }
3737 |           },
3738 |           {
3739 |             "name": "Version",
3740 |             "in": "header",
3741 |             "description": "API Version",
3742 |             "required": true,
3743 |             "schema": {
3744 |               "type": "string",
3745 |               "enum": [
3746 |                 "2021-07-28"
3747 |               ]
3748 |             }
3749 |           },
3750 |           {
3751 |             "name": "locationId",
3752 |             "required": true,
3753 |             "in": "path",
3754 |             "description": "Location Id",
3755 |             "example": "ve9EPM428h8vShlRW1KT",
3756 |             "schema": {
3757 |               "type": "string"
3758 |             }
3759 |           },
3760 |           {
3761 |             "name": "searchText",
3762 |             "required": false,
3763 |             "in": "query",
3764 |             "description": "Search text string",
3765 |             "example": "test",
3766 |             "schema": {
3767 |               "type": "string"
3768 |             }
3769 |           },
3770 |           {
3771 |             "name": "limit",
3772 |             "required": false,
3773 |             "in": "query",
3774 |             "description": "Limit",
3775 |             "example": "10",
3776 |             "schema": {
3777 |               "type": "string"
3778 |             }
3779 |           },
3780 |           {
3781 |             "name": "skip",
3782 |             "required": false,
3783 |             "in": "query",
3784 |             "description": "Skip",
3785 |             "example": "0",
3786 |             "schema": {
3787 |               "type": "string"
3788 |             }
3789 |           }
3790 |         ],
3791 |         "responses": {
3792 |           "200": {
3793 |             "description": "Successful response",
3794 |             "content": {
3795 |               "application/json": {
3796 |                 "schema": {
3797 |                   "$ref": "#/components/schemas/GetByLocationIdResponseDTO"
3798 |                 }
3799 |               }
3800 |             }
3801 |           },
3802 |           "400": {
3803 |             "description": "Bad Request",
3804 |             "content": {
3805 |               "application/json": {
3806 |                 "schema": {
3807 |                   "$ref": "#/components/schemas/BadRequestDTO"
3808 |                 }
3809 |               }
3810 |             }
3811 |           },
3812 |           "401": {
3813 |             "description": "Unauthorized",
3814 |             "content": {
3815 |               "application/json": {
3816 |                 "schema": {
3817 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3818 |                 }
3819 |               }
3820 |             }
3821 |           },
3822 |           "422": {
3823 |             "description": "Unprocessable Entity",
3824 |             "content": {
3825 |               "application/json": {
3826 |                 "schema": {
3827 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3828 |                 }
3829 |               }
3830 |             }
3831 |           }
3832 |         },
3833 |         "tags": [
3834 |           "Category"
3835 |         ],
3836 |         "security": [
3837 |           {
3838 |             "bearer": []
3839 |           }
3840 |         ]
3841 |       }
3842 |     },
3843 |     "/social-media-posting/{locationId}/categories/{id}": {
3844 |       "get": {
3845 |         "operationId": "get-categories-id",
3846 |         "summary": "Get categories by id",
3847 |         "parameters": [
3848 |           {
3849 |             "name": "Authorization",
3850 |             "in": "header",
3851 |             "description": "Access Token",
3852 |             "required": true,
3853 |             "schema": {
3854 |               "type": "string",
3855 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3856 |             }
3857 |           },
3858 |           {
3859 |             "name": "Version",
3860 |             "in": "header",
3861 |             "description": "API Version",
3862 |             "required": true,
3863 |             "schema": {
3864 |               "type": "string",
3865 |               "enum": [
3866 |                 "2021-07-28"
3867 |               ]
3868 |             }
3869 |           },
3870 |           {
3871 |             "name": "id",
3872 |             "required": true,
3873 |             "in": "path",
3874 |             "description": "Category Id",
3875 |             "example": "6284c43d519161e96cc09c13",
3876 |             "schema": {
3877 |               "type": "string"
3878 |             }
3879 |           },
3880 |           {
3881 |             "name": "locationId",
3882 |             "required": true,
3883 |             "in": "path",
3884 |             "description": "Location Id",
3885 |             "example": "6284c43d519161e96cc09c13",
3886 |             "schema": {
3887 |               "type": "string"
3888 |             }
3889 |           }
3890 |         ],
3891 |         "responses": {
3892 |           "200": {
3893 |             "description": "Successful response",
3894 |             "content": {
3895 |               "application/json": {
3896 |                 "schema": {
3897 |                   "$ref": "#/components/schemas/GetByIdResponseDTO"
3898 |                 }
3899 |               }
3900 |             }
3901 |           },
3902 |           "400": {
3903 |             "description": "Bad Request",
3904 |             "content": {
3905 |               "application/json": {
3906 |                 "schema": {
3907 |                   "$ref": "#/components/schemas/BadRequestDTO"
3908 |                 }
3909 |               }
3910 |             }
3911 |           },
3912 |           "401": {
3913 |             "description": "Unauthorized",
3914 |             "content": {
3915 |               "application/json": {
3916 |                 "schema": {
3917 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
3918 |                 }
3919 |               }
3920 |             }
3921 |           },
3922 |           "422": {
3923 |             "description": "Unprocessable Entity",
3924 |             "content": {
3925 |               "application/json": {
3926 |                 "schema": {
3927 |                   "$ref": "#/components/schemas/UnprocessableDTO"
3928 |                 }
3929 |               }
3930 |             }
3931 |           }
3932 |         },
3933 |         "tags": [
3934 |           "Category"
3935 |         ],
3936 |         "security": [
3937 |           {
3938 |             "bearer": []
3939 |           }
3940 |         ]
3941 |       }
3942 |     },
3943 |     "/social-media-posting/{locationId}/tags": {
3944 |       "get": {
3945 |         "operationId": "get-tags-location-id",
3946 |         "summary": "Get tags by location id",
3947 |         "parameters": [
3948 |           {
3949 |             "name": "Authorization",
3950 |             "in": "header",
3951 |             "description": "Access Token",
3952 |             "required": true,
3953 |             "schema": {
3954 |               "type": "string",
3955 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
3956 |             }
3957 |           },
3958 |           {
3959 |             "name": "Version",
3960 |             "in": "header",
3961 |             "description": "API Version",
3962 |             "required": true,
3963 |             "schema": {
3964 |               "type": "string",
3965 |               "enum": [
3966 |                 "2021-07-28"
3967 |               ]
3968 |             }
3969 |           },
3970 |           {
3971 |             "name": "locationId",
3972 |             "required": true,
3973 |             "in": "path",
3974 |             "description": "Location Id",
3975 |             "example": "ve9EPM428h8vShlRW1KT",
3976 |             "schema": {
3977 |               "type": "string"
3978 |             }
3979 |           },
3980 |           {
3981 |             "name": "searchText",
3982 |             "required": false,
3983 |             "in": "query",
3984 |             "description": "Search text string",
3985 |             "example": "test",
3986 |             "schema": {
3987 |               "type": "string"
3988 |             }
3989 |           },
3990 |           {
3991 |             "name": "limit",
3992 |             "required": false,
3993 |             "in": "query",
3994 |             "description": "Limit",
3995 |             "example": 10,
3996 |             "schema": {
3997 |               "type": "string"
3998 |             }
3999 |           },
4000 |           {
4001 |             "name": "skip",
4002 |             "required": false,
4003 |             "in": "query",
4004 |             "description": "Skip",
4005 |             "example": 0,
4006 |             "schema": {
4007 |               "type": "string"
4008 |             }
4009 |           }
4010 |         ],
4011 |         "responses": {
4012 |           "200": {
4013 |             "description": "Successful response",
4014 |             "content": {
4015 |               "application/json": {
4016 |                 "schema": {
4017 |                   "$ref": "#/components/schemas/GetTagsByLocationIdResponseDTO"
4018 |                 }
4019 |               }
4020 |             }
4021 |           },
4022 |           "400": {
4023 |             "description": "Bad Request",
4024 |             "content": {
4025 |               "application/json": {
4026 |                 "schema": {
4027 |                   "$ref": "#/components/schemas/BadRequestDTO"
4028 |                 }
4029 |               }
4030 |             }
4031 |           },
4032 |           "401": {
4033 |             "description": "Unauthorized",
4034 |             "content": {
4035 |               "application/json": {
4036 |                 "schema": {
4037 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4038 |                 }
4039 |               }
4040 |             }
4041 |           },
4042 |           "422": {
4043 |             "description": "Unprocessable Entity",
4044 |             "content": {
4045 |               "application/json": {
4046 |                 "schema": {
4047 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4048 |                 }
4049 |               }
4050 |             }
4051 |           }
4052 |         },
4053 |         "tags": [
4054 |           "Tag"
4055 |         ],
4056 |         "security": [
4057 |           {
4058 |             "bearer": []
4059 |           }
4060 |         ]
4061 |       }
4062 |     },
4063 |     "/social-media-posting/{locationId}/tags/details": {
4064 |       "post": {
4065 |         "operationId": "get-tags-by-ids",
4066 |         "summary": "Get tags by ids",
4067 |         "parameters": [
4068 |           {
4069 |             "name": "Authorization",
4070 |             "in": "header",
4071 |             "description": "Access Token",
4072 |             "required": true,
4073 |             "schema": {
4074 |               "type": "string",
4075 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
4076 |             }
4077 |           },
4078 |           {
4079 |             "name": "Version",
4080 |             "in": "header",
4081 |             "description": "API Version",
4082 |             "required": true,
4083 |             "schema": {
4084 |               "type": "string",
4085 |               "enum": [
4086 |                 "2021-07-28"
4087 |               ]
4088 |             }
4089 |           },
4090 |           {
4091 |             "name": "locationId",
4092 |             "required": true,
4093 |             "in": "path",
4094 |             "description": "Location Id",
4095 |             "example": "ve9EPM428h8vShlRW1KT",
4096 |             "schema": {
4097 |               "type": "string"
4098 |             }
4099 |           }
4100 |         ],
4101 |         "requestBody": {
4102 |           "required": true,
4103 |           "content": {
4104 |             "application/json": {
4105 |               "schema": {
4106 |                 "$ref": "#/components/schemas/UpdateTagDTO"
4107 |               }
4108 |             }
4109 |           }
4110 |         },
4111 |         "responses": {
4112 |           "201": {
4113 |             "description": "Successful response",
4114 |             "content": {
4115 |               "application/json": {
4116 |                 "schema": {
4117 |                   "$ref": "#/components/schemas/GetTagsByIdResponseDTO"
4118 |                 }
4119 |               }
4120 |             }
4121 |           },
4122 |           "400": {
4123 |             "description": "Bad Request",
4124 |             "content": {
4125 |               "application/json": {
4126 |                 "schema": {
4127 |                   "$ref": "#/components/schemas/BadRequestDTO"
4128 |                 }
4129 |               }
4130 |             }
4131 |           },
4132 |           "401": {
4133 |             "description": "Unauthorized",
4134 |             "content": {
4135 |               "application/json": {
4136 |                 "schema": {
4137 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
4138 |                 }
4139 |               }
4140 |             }
4141 |           },
4142 |           "422": {
4143 |             "description": "Unprocessable Entity",
4144 |             "content": {
4145 |               "application/json": {
4146 |                 "schema": {
4147 |                   "$ref": "#/components/schemas/UnprocessableDTO"
4148 |                 }
4149 |               }
4150 |             }
4151 |           }
4152 |         },
4153 |         "tags": [
4154 |           "Tag"
4155 |         ],
4156 |         "security": [
4157 |           {
4158 |             "bearer": []
4159 |           }
4160 |         ]
4161 |       }
4162 |     }
4163 |   },
4164 |   "info": {
4165 |     "title": "Social Media Posting API",
4166 |     "description": "Documentation for Social Media Posting API",
4167 |     "version": "1.0",
4168 |     "contact": {}
4169 |   },
4170 |   "tags": [
4171 |     {
4172 |       "name": "Social Media Posting",
4173 |       "description": "Documentation for Social Media Posting API"
4174 |     }
4175 |   ],
4176 |   "servers": [
4177 |     {
4178 |       "url": "https://services.leadconnectorhq.com"
4179 |     }
4180 |   ],
4181 |   "components": {
4182 |     "securitySchemes": {
4183 |       "bearer": {
4184 |         "scheme": "bearer",
4185 |         "bearerFormat": "JWT",
4186 |         "name": "Authorization",
4187 |         "in": "header",
4188 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
4189 |         "type": "http"
4190 |       },
4191 |       "Location-Access": {
4192 |         "scheme": "bearer",
4193 |         "bearerFormat": "JWT",
4194 |         "name": "Authorization",
4195 |         "in": "header",
4196 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
4197 |         "type": "http"
4198 |       },
4199 |       "Agency-Access": {
4200 |         "scheme": "bearer",
4201 |         "bearerFormat": "JWT",
4202 |         "name": "Authorization",
4203 |         "in": "header",
4204 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
4205 |         "type": "http"
4206 |       }
4207 |     },
4208 |     "schemas": {
4209 |       "BadRequestDTO": {
4210 |         "type": "object",
4211 |         "properties": {
4212 |           "statusCode": {
4213 |             "type": "number",
4214 |             "example": 400
4215 |           },
4216 |           "message": {
4217 |             "type": "string",
4218 |             "example": "Bad Request"
4219 |           }
4220 |         }
4221 |       },
4222 |       "UnauthorizedDTO": {
4223 |         "type": "object",
4224 |         "properties": {
4225 |           "statusCode": {
4226 |             "type": "number",
4227 |             "example": 401
4228 |           },
4229 |           "message": {
4230 |             "type": "string",
4231 |             "example": "Invalid token: access token is invalid"
4232 |           },
4233 |           "error": {
4234 |             "type": "string",
4235 |             "example": "Unauthorized"
4236 |           }
4237 |         }
4238 |       },
4239 |       "UnprocessableDTO": {
4240 |         "type": "object",
4241 |         "properties": {
4242 |           "statusCode": {
4243 |             "type": "number",
4244 |             "example": 422
4245 |           },
4246 |           "message": {
4247 |             "example": [
4248 |               "Unprocessable Entity"
4249 |             ],
4250 |             "type": "array",
4251 |             "items": {
4252 |               "type": "string"
4253 |             }
4254 |           },
4255 |           "error": {
4256 |             "type": "string",
4257 |             "example": "Unprocessable Entity"
4258 |           }
4259 |         }
4260 |       },
4261 |       "GoogleLocationSchema": {
4262 |         "type": "object",
4263 |         "properties": {
4264 |           "name": {
4265 |             "type": "string",
4266 |             "example": "accounts/114659701071209971352"
4267 |           },
4268 |           "storeCode": {
4269 |             "type": "string",
4270 |             "example": "w37swmmLbA02zgqKPpxITe"
4271 |           },
4272 |           "title": {
4273 |             "type": "string",
4274 |             "example": "Location Title"
4275 |           },
4276 |           "metadata": {
4277 |             "type": "object",
4278 |             "description": "Meta data not related to User",
4279 |             "example": {}
4280 |           },
4281 |           "storefrontAddress": {
4282 |             "type": "object",
4283 |             "description": "Store front address",
4284 |             "example": {}
4285 |           },
4286 |           "relationshipData": {
4287 |             "type": "object",
4288 |             "description": "All locations and chain related to this one",
4289 |             "example": {}
4290 |           },
4291 |           "maxLocation": {
4292 |             "type": "boolean",
4293 |             "example": true
4294 |           },
4295 |           "isVerified": {
4296 |             "type": "boolean",
4297 |             "example": true
4298 |           },
4299 |           "isConnected": {
4300 |             "type": "boolean",
4301 |             "example": true
4302 |           }
4303 |         }
4304 |       },
4305 |       "GoogleAccountsSchema": {
4306 |         "type": "object",
4307 |         "properties": {
4308 |           "name": {
4309 |             "type": "string",
4310 |             "example": "accounts/114659701071209971352"
4311 |           },
4312 |           "accountName": {
4313 |             "type": "string",
4314 |             "example": "Account Name Test"
4315 |           },
4316 |           "type": {
4317 |             "type": "string",
4318 |             "example": "PERSONAL"
4319 |           },
4320 |           "verificationState": {
4321 |             "type": "string",
4322 |             "example": "UNVERIFIED"
4323 |           },
4324 |           "vettedState": {
4325 |             "type": "string",
4326 |             "example": "NOT_VETTED"
4327 |           }
4328 |         }
4329 |       },
4330 |       "GetGoogleLocationSchema": {
4331 |         "type": "object",
4332 |         "properties": {
4333 |           "location": {
4334 |             "description": "Google Location Details",
4335 |             "allOf": [
4336 |               {
4337 |                 "$ref": "#/components/schemas/GoogleLocationSchema"
4338 |               }
4339 |             ]
4340 |           },
4341 |           "account": {
4342 |             "description": "Google Account Details",
4343 |             "allOf": [
4344 |               {
4345 |                 "$ref": "#/components/schemas/GoogleAccountsSchema"
4346 |               }
4347 |             ]
4348 |           }
4349 |         }
4350 |       },
4351 |       "GetGoogleLocationAccountSchema": {
4352 |         "type": "object",
4353 |         "properties": {
4354 |           "locations": {
4355 |             "description": "Locations",
4356 |             "allOf": [
4357 |               {
4358 |                 "$ref": "#/components/schemas/GetGoogleLocationSchema"
4359 |               }
4360 |             ]
4361 |           }
4362 |         }
4363 |       },
4364 |       "GetGoogleLocationResponseDTO": {
4365 |         "type": "object",
4366 |         "properties": {
4367 |           "success": {
4368 |             "type": "boolean",
4369 |             "description": "Success or Failure",
4370 |             "example": true
4371 |           },
4372 |           "statusCode": {
4373 |             "type": "number",
4374 |             "description": "Status Code",
4375 |             "example": 200
4376 |           },
4377 |           "message": {
4378 |             "type": "string",
4379 |             "description": "Message",
4380 |             "example": "Fetched Google Business Account"
4381 |           },
4382 |           "results": {
4383 |             "description": "Requested Results",
4384 |             "allOf": [
4385 |               {
4386 |                 "$ref": "#/components/schemas/GetGoogleLocationAccountSchema"
4387 |               }
4388 |             ]
4389 |           }
4390 |         },
4391 |         "required": [
4392 |           "success",
4393 |           "statusCode",
4394 |           "message"
4395 |         ]
4396 |       },
4397 |       "AttachGMBLocationDTO": {
4398 |         "type": "object",
4399 |         "properties": {
4400 |           "location": {
4401 |             "type": "object"
4402 |           },
4403 |           "account": {
4404 |             "type": "object"
4405 |           },
4406 |           "companyId": {
4407 |             "type": "string",
4408 |             "description": "Company ID",
4409 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
4410 |           }
4411 |         }
4412 |       },
4413 |       "SocialGoogleMediaAccountSchema": {
4414 |         "type": "object",
4415 |         "properties": {
4416 |           "_id": {
4417 |             "type": "string",
4418 |             "example": "65f2d989a4f2f1e5322c3856"
4419 |           },
4420 |           "oAuthId": {
4421 |             "type": "string",
4422 |             "example": "u37swmmLbA02zgqKPpxITe2"
4423 |           },
4424 |           "oldId": {
4425 |             "type": "string",
4426 |             "example": "u37swmmLbA02zgqKPpxITe2"
4427 |           },
4428 |           "locationId": {
4429 |             "type": "string",
4430 |             "example": "u37swmmLbA02zgqKPpxITe2"
4431 |           },
4432 |           "originId": {
4433 |             "type": "string",
4434 |             "example": "u37swmmLbA02zgqKPpxITe2"
4435 |           },
4436 |           "platform": {
4437 |             "type": "object",
4438 |             "example": "google"
4439 |           },
4440 |           "type": {
4441 |             "type": "object",
4442 |             "example": "location"
4443 |           },
4444 |           "name": {
4445 |             "type": "string",
4446 |             "example": "Account Name"
4447 |           },
4448 |           "avatar": {
4449 |             "type": "string",
4450 |             "example": "u37swmmLbA02zgqKPpxITe2"
4451 |           },
4452 |           "meta": {
4453 |             "type": "object",
4454 |             "example": {
4455 |               "pageId": "u37swmmLbA02zgqKPpxITe2",
4456 |               "page": {
4457 |                 "id": "u37swmmLbA02zgqKPpxITe2",
4458 |                 "name": "Account Name",
4459 |                 "avatar": "u37swmmLbA02zgqKPpxITe2"
4460 |               },
4461 |               "storeCode": "122",
4462 |               "isVerified": "true",
4463 |               "verified": true,
4464 |               "protected": true,
4465 |               "locationId": "u37swmmLbA02zgqKPpxITe2",
4466 |               "accountId": "u37swmmLbA02zgqKPpxITe2",
4467 |               "openId": "u37swmmLbA02zgqKPpxITe2",
4468 |               "urn": "u37swmmLbA02zgqKPpxITe2",
4469 |               "username": "testUser",
4470 |               "storefrontAddress": {
4471 |                 "regionCode": "30021",
4472 |                 "languageCode": "E001",
4473 |                 "postalCode": "1221",
4474 |                 "administrativeArea": "Down Town",
4475 |                 "locality": "Louis Street",
4476 |                 "addressLines": [
4477 |                   "207",
4478 |                   "county"
4479 |                 ]
4480 |               }
4481 |             }
4482 |           },
4483 |           "active": {
4484 |             "type": "boolean",
4485 |             "example": true
4486 |           },
4487 |           "deleted": {
4488 |             "type": "boolean",
4489 |             "example": true
4490 |           },
4491 |           "createdAt": {
4492 |             "format": "date-time",
4493 |             "type": "string",
4494 |             "description": "created date",
4495 |             "example": "2024-03-14T11:03:37.015Z"
4496 |           },
4497 |           "updatedAt": {
4498 |             "format": "date-time",
4499 |             "type": "string",
4500 |             "description": "updated date",
4501 |             "example": "2024-03-14T11:03:37.015Z"
4502 |           }
4503 |         }
4504 |       },
4505 |       "SocialMediaGmbAccountResponseDTO": {
4506 |         "type": "object",
4507 |         "properties": {
4508 |           "success": {
4509 |             "type": "boolean",
4510 |             "description": "Success or Failure",
4511 |             "example": true
4512 |           },
4513 |           "statusCode": {
4514 |             "type": "number",
4515 |             "description": "Status Code",
4516 |             "example": 201
4517 |           },
4518 |           "message": {
4519 |             "type": "string",
4520 |             "description": "Message",
4521 |             "example": "Added Google Business Account"
4522 |           },
4523 |           "results": {
4524 |             "description": "Requested Results",
4525 |             "allOf": [
4526 |               {
4527 |                 "$ref": "#/components/schemas/SocialGoogleMediaAccountSchema"
4528 |               }
4529 |             ]
4530 |           }
4531 |         },
4532 |         "required": [
4533 |           "success",
4534 |           "statusCode",
4535 |           "message"
4536 |         ]
4537 |       },
4538 |       "SearchPostDTO": {
4539 |         "type": "object",
4540 |         "properties": {
4541 |           "type": {
4542 |             "type": "string",
4543 |             "description": "type must be one of the following values: recent, all, scheduled, draft, failed, in_review, published, in_progress and deleted",
4544 |             "example": "Filter type",
4545 |             "default": "all"
4546 |           },
4547 |           "accounts": {
4548 |             "type": "string",
4549 |             "description": "List of account Ids seperated by comma as a string",
4550 |             "example": "660a83fc29deacac50033e2b_omaDY3RbWtTP511e808O_17841465964543589, 38bF83fc29deacac50033e2b_omaDY3RbWtr3P11e808O_17841465964543998"
4551 |           },
4552 |           "skip": {
4553 |             "type": "string",
4554 |             "example": "1",
4555 |             "default": "0"
4556 |           },
4557 |           "limit": {
4558 |             "type": "string",
4559 |             "example": "10",
4560 |             "default": "10"
4561 |           },
4562 |           "fromDate": {
4563 |             "type": "string",
4564 |             "description": "From Date",
4565 |             "example": "2024-01-22T05:32:49.463Z"
4566 |           },
4567 |           "toDate": {
4568 |             "type": "string",
4569 |             "description": "To Date",
4570 |             "example": "2024-03-20T05:32:49.463Z"
4571 |           },
4572 |           "includeUsers": {
4573 |             "type": "string",
4574 |             "description": "Include User Data",
4575 |             "example": "true"
4576 |           },
4577 |           "postType": {
4578 |             "type": "object",
4579 |             "description": "Post Type must be one of the following values: - post, story, reel",
4580 |             "example": "post"
4581 |           }
4582 |         },
4583 |         "required": [
4584 |           "skip",
4585 |           "limit",
4586 |           "fromDate",
4587 |           "toDate",
4588 |           "includeUsers"
4589 |         ]
4590 |       },
4591 |       "PostMediaSchema": {
4592 |         "type": "object",
4593 |         "properties": {
4594 |           "url": {
4595 |             "type": "string",
4596 |             "example": "https://i0.wp.com/www.lifeofanarchitect.com/wp-content/uploads/2021/10/architectural-model-making-stairs.jpg"
4597 |           },
4598 |           "caption": {
4599 |             "type": "string",
4600 |             "example": "Caption 1"
4601 |           },
4602 |           "type": {
4603 |             "type": "string",
4604 |             "example": "video/mp4 or image/png"
4605 |           },
4606 |           "thumbnail": {
4607 |             "type": "string",
4608 |             "example": "https://storage.googleapis.com/test/test/media/test.jpeg"
4609 |           },
4610 |           "defaultThumb": {
4611 |             "type": "string",
4612 |             "example": "https://storage.googleapis.com/test/test/media/test.jpeg"
4613 |           },
4614 |           "id": {
4615 |             "type": "string",
4616 |             "example": "Edf3323fsfsdsd"
4617 |           }
4618 |         },
4619 |         "required": [
4620 |           "url"
4621 |         ]
4622 |       },
4623 |       "OgTagsSchema": {
4624 |         "type": "object",
4625 |         "properties": {
4626 |           "metaImage": {
4627 |             "type": "string",
4628 |             "description": "Meta Image",
4629 |             "example": "https://wwww.lifeofanarchitect.com/wp-content/uploads/2021/10/architectural-model-making-stairs.jpg"
4630 |           },
4631 |           "metaLink": {
4632 |             "type": "string",
4633 |             "description": "Meta Link"
4634 |           }
4635 |         }
4636 |       },
4637 |       "PostUserSchema": {
4638 |         "type": "object",
4639 |         "properties": {
4640 |           "id": {
4641 |             "type": "string",
4642 |             "description": "User Id",
4643 |             "example": "6284c43d519161e96cc09c13"
4644 |           },
4645 |           "title": {
4646 |             "type": "string",
4647 |             "description": "Title",
4648 |             "example": "Mr"
4649 |           },
4650 |           "firstName": {
4651 |             "type": "string",
4652 |             "description": "First name",
4653 |             "example": "Harry"
4654 |           },
4655 |           "lastName": {
4656 |             "type": "string",
4657 |             "description": "Last name",
4658 |             "example": "Spencer"
4659 |           },
4660 |           "profilePhoto": {
4661 |             "type": "string",
4662 |             "description": "Profile photo",
4663 |             "example": "https://storage.googleapis.com/user/kCrjKGHZQ2/profile/1dca8c-61c9-404d-a459-751fbcb.jpeg"
4664 |           },
4665 |           "phone": {
4666 |             "type": "string",
4667 |             "description": "Phone number",
4668 |             "example": "901111119"
4669 |           },
4670 |           "email": {
4671 |             "type": "string",
4672 |             "description": "Email Id",
4673 |             "example": "abc@xyc.com"
4674 |           }
4675 |         },
4676 |         "required": [
4677 |           "id",
4678 |           "title",
4679 |           "firstName",
4680 |           "lastName",
4681 |           "profilePhoto",
4682 |           "phone",
4683 |           "email"
4684 |         ]
4685 |       },
4686 |       "FormatedApprovalDetails": {
4687 |         "type": "object",
4688 |         "properties": {
4689 |           "approver": {
4690 |             "type": "string",
4691 |             "description": "Approver",
4692 |             "example": "iVrVJ2uoXNF0wzcBzgl5"
4693 |           },
4694 |           "requesterNote": {
4695 |             "type": "string",
4696 |             "description": "Requester Notes",
4697 |             "example": "Test suggestion"
4698 |           },
4699 |           "approverNote": {
4700 |             "type": "string",
4701 |             "description": "Approver Notes",
4702 |             "example": "Test suggestion"
4703 |           },
4704 |           "approvalStatus": {
4705 |             "type": "object",
4706 |             "description": "Approval Status must be one of the following values: pending, approved, rejected, not_required",
4707 |             "example": "approved"
4708 |           },
4709 |           "approverUser": {
4710 |             "description": "Approver User Details",
4711 |             "allOf": [
4712 |               {
4713 |                 "$ref": "#/components/schemas/PostUserSchema"
4714 |               }
4715 |             ]
4716 |           }
4717 |         }
4718 |       },
4719 |       "TiktokPostSchema": {
4720 |         "type": "object",
4721 |         "properties": {
4722 |           "privacyLevel": {
4723 |             "type": "object",
4724 |             "description": "privacy level is an enum and must be one of the following values: PUBLIC_TO_EVERYONE, MUTUAL_FOLLOW_FRIENDS, SELF_ONLY",
4725 |             "example": "PUBLIC_TO_EVERYONE"
4726 |           },
4727 |           "promoteOtherBrand": {
4728 |             "type": "boolean",
4729 |             "description": "promote other brand",
4730 |             "example": true
4731 |           },
4732 |           "enableComment": {
4733 |             "type": "boolean",
4734 |             "description": "enable comment",
4735 |             "example": true
4736 |           },
4737 |           "enableDuet": {
4738 |             "type": "boolean",
4739 |             "description": "enable duet",
4740 |             "example": true
4741 |           },
4742 |           "enableStitch": {
4743 |             "type": "boolean",
4744 |             "description": "enable stitch",
4745 |             "example": true
4746 |           },
4747 |           "videoDisclosure": {
4748 |             "type": "boolean",
4749 |             "description": "video disclosure",
4750 |             "example": true
4751 |           },
4752 |           "promoteYourBrand": {
4753 |             "type": "boolean",
4754 |             "description": "promote your brand",
4755 |             "example": true
4756 |           }
4757 |         }
4758 |       },
4759 |       "DateSchema": {
4760 |         "type": "object",
4761 |         "properties": {
4762 |           "year": {
4763 |             "type": "number",
4764 |             "example": 2022
4765 |           },
4766 |           "month": {
4767 |             "type": "number",
4768 |             "example": 1
4769 |           },
4770 |           "day": {
4771 |             "type": "number",
4772 |             "example": 1
4773 |           }
4774 |         },
4775 |         "required": [
4776 |           "year",
4777 |           "month",
4778 |           "day"
4779 |         ]
4780 |       },
4781 |       "TimeSchema": {
4782 |         "type": "object",
4783 |         "properties": {
4784 |           "hours": {
4785 |             "type": "number",
4786 |             "example": 23
4787 |           },
4788 |           "minutes": {
4789 |             "type": "number",
4790 |             "example": 56
4791 |           },
4792 |           "seconds": {
4793 |             "type": "number",
4794 |             "example": 34
4795 |           }
4796 |         },
4797 |         "required": [
4798 |           "hours",
4799 |           "minutes",
4800 |           "seconds"
4801 |         ]
4802 |       },
4803 |       "StartDateSchema": {
4804 |         "type": "object",
4805 |         "properties": {
4806 |           "startDate": {
4807 |             "description": "Start Date",
4808 |             "allOf": [
4809 |               {
4810 |                 "$ref": "#/components/schemas/DateSchema"
4811 |               }
4812 |             ]
4813 |           },
4814 |           "startTime": {
4815 |             "description": "Start Time",
4816 |             "allOf": [
4817 |               {
4818 |                 "$ref": "#/components/schemas/TimeSchema"
4819 |               }
4820 |             ]
4821 |           }
4822 |         }
4823 |       },
4824 |       "EndDateSchema": {
4825 |         "type": "object",
4826 |         "properties": {
4827 |           "endDate": {
4828 |             "description": "End Date",
4829 |             "allOf": [
4830 |               {
4831 |                 "$ref": "#/components/schemas/DateSchema"
4832 |               }
4833 |             ]
4834 |           },
4835 |           "endTime": {
4836 |             "description": "End Time",
4837 |             "allOf": [
4838 |               {
4839 |                 "$ref": "#/components/schemas/TimeSchema"
4840 |               }
4841 |             ]
4842 |           }
4843 |         }
4844 |       },
4845 |       "GMBPostSchema": {
4846 |         "type": "object",
4847 |         "properties": {
4848 |           "gmbEventType": {
4849 |             "type": "string",
4850 |             "example": "STANDARD",
4851 |             "description": "gmbEventType must be one of the following values: STANDARD, EVENT, OFFER"
4852 |           },
4853 |           "title": {
4854 |             "type": "string",
4855 |             "description": "Title",
4856 |             "example": "Event Title"
4857 |           },
4858 |           "offerTitle": {
4859 |             "type": "string",
4860 |             "description": "Offer Title",
4861 |             "example": "Hey"
4862 |           },
4863 |           "startDate": {
4864 |             "description": "Start Date",
4865 |             "allOf": [
4866 |               {
4867 |                 "$ref": "#/components/schemas/StartDateSchema"
4868 |               }
4869 |             ]
4870 |           },
4871 |           "endDate": {
4872 |             "description": "End Date",
4873 |             "allOf": [
4874 |               {
4875 |                 "$ref": "#/components/schemas/EndDateSchema"
4876 |               }
4877 |             ]
4878 |           },
4879 |           "termsConditions": {
4880 |             "type": "string",
4881 |             "description": "Terms Condition Url",
4882 |             "example": "https://google.com/privacy"
4883 |           },
4884 |           "url": {
4885 |             "type": "string",
4886 |             "description": "Url",
4887 |             "example": "https://google.com"
4888 |           },
4889 |           "couponCode": {
4890 |             "type": "string",
4891 |             "description": "Coupon Code",
4892 |             "example": "BOGO-50"
4893 |           },
4894 |           "redeemOnlineUrl": {
4895 |             "type": "string",
4896 |             "description": "Redeem Online Url",
4897 |             "example": "https://google.com"
4898 |           },
4899 |           "actionType": {
4900 |             "type": "object",
4901 |             "description": "Action Type must be one of the following values: none, order, book, shop, learn_more, call, sign_up",
4902 |             "example": "book"
4903 |           }
4904 |         }
4905 |       },
4906 |       "GetPostFormattedSchema": {
4907 |         "type": "object",
4908 |         "properties": {
4909 |           "_id": {
4910 |             "type": "string",
4911 |             "example": "61bb16833b3f2791f9715be2"
4912 |           },
4913 |           "source": {
4914 |             "type": "string",
4915 |             "description": "source must be one of the following values: composer, recurring, csv",
4916 |             "enum": [
4917 |               "composer",
4918 |               "csv",
4919 |               "recurring",
4920 |               "review",
4921 |               "rss"
4922 |             ],
4923 |             "example": "composer"
4924 |           },
4925 |           "locationId": {
4926 |             "type": "string",
4927 |             "description": "Location Id",
4928 |             "example": "ve9EPM428h8vShlRW1KT"
4929 |           },
4930 |           "platform": {
4931 |             "type": "string",
4932 |             "description": "platform must be one of the following values: google, facebook, instagram, linkedin, twitter, tiktok",
4933 |             "example": "google"
4934 |           },
4935 |           "displayDate": {
4936 |             "format": "date-time",
4937 |             "type": "string",
4938 |             "example": "2023-08-02T00:00:00.000Z"
4939 |           },
4940 |           "createdAt": {
4941 |             "format": "date-time",
4942 |             "type": "string",
4943 |             "example": "2023-08-02T00:00:00.000Z"
4944 |           },
4945 |           "updatedAt": {
4946 |             "format": "date-time",
4947 |             "type": "string",
4948 |             "example": "2023-08-02T00:00:00.000Z"
4949 |           },
4950 |           "accountId": {
4951 |             "type": "string",
4952 |             "description": "Account Id",
4953 |             "example": "w37swmmLbA02zgqKPpxITe"
4954 |           },
4955 |           "error": {
4956 |             "type": "string",
4957 |             "description": "Error",
4958 |             "example": "Failed due to auth token"
4959 |           },
4960 |           "postId": {
4961 |             "type": "string",
4962 |             "example": "323534534435"
4963 |           },
4964 |           "publishedAt": {
4965 |             "type": "string",
4966 |             "example": "2021-06-22T05:32:49.463Z"
4967 |           },
4968 |           "accountIds": {
4969 |             "description": "Account Ids",
4970 |             "example": [
4971 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
4972 |             ],
4973 |             "type": "array",
4974 |             "items": {
4975 |               "type": "string"
4976 |             }
4977 |           },
4978 |           "summary": {
4979 |             "type": "string",
4980 |             "example": "Sample Summary"
4981 |           },
4982 |           "media": {
4983 |             "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description",
4984 |             "type": "array",
4985 |             "items": {
4986 |               "$ref": "#/components/schemas/PostMediaSchema"
4987 |             }
4988 |           },
4989 |           "status": {
4990 |             "type": "object",
4991 |             "description": "Status must be one of the following values: in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
4992 |             "example": "published"
4993 |           },
4994 |           "createdBy": {
4995 |             "type": "string",
4996 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
4997 |           },
4998 |           "type": {
4999 |             "type": "object",
5000 |             "description": "Post Type must be one of the following values: - post, story, reel",
5001 |             "example": "post"
5002 |           },
5003 |           "tags": {
5004 |             "description": "Tag Ids",
5005 |             "example": [
5006 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
5007 |             ],
5008 |             "type": "array",
5009 |             "items": {
5010 |               "type": "string"
5011 |             }
5012 |           },
5013 |           "ogTagsDetails": {
5014 |             "description": "Og Tags Meta Data",
5015 |             "allOf": [
5016 |               {
5017 |                 "$ref": "#/components/schemas/OgTagsSchema"
5018 |               }
5019 |             ]
5020 |           },
5021 |           "postApprovalDetails": {
5022 |             "description": "Post Approval Details",
5023 |             "allOf": [
5024 |               {
5025 |                 "$ref": "#/components/schemas/FormatedApprovalDetails"
5026 |               }
5027 |             ]
5028 |           },
5029 |           "tiktokPostDetails": {
5030 |             "description": "Tiktok Post Details",
5031 |             "allOf": [
5032 |               {
5033 |                 "$ref": "#/components/schemas/TiktokPostSchema"
5034 |               }
5035 |             ]
5036 |           },
5037 |           "gmbPostDetails": {
5038 |             "description": "GMB Post Details",
5039 |             "allOf": [
5040 |               {
5041 |                 "$ref": "#/components/schemas/GMBPostSchema"
5042 |               }
5043 |             ]
5044 |           },
5045 |           "user": {
5046 |             "description": "User",
5047 |             "allOf": [
5048 |               {
5049 |                 "$ref": "#/components/schemas/PostUserSchema"
5050 |               }
5051 |             ]
5052 |           }
5053 |         },
5054 |         "required": [
5055 |           "locationId",
5056 |           "error",
5057 |           "type"
5058 |         ]
5059 |       },
5060 |       "PostSuccessfulResponseSchema": {
5061 |         "type": "object",
5062 |         "properties": {
5063 |           "posts": {
5064 |             "description": "Post Data",
5065 |             "type": "array",
5066 |             "items": {
5067 |               "$ref": "#/components/schemas/GetPostFormattedSchema"
5068 |             }
5069 |           },
5070 |           "count": {
5071 |             "type": "number",
5072 |             "example": 6
5073 |           }
5074 |         }
5075 |       },
5076 |       "PostSuccessfulResponseDTO": {
5077 |         "type": "object",
5078 |         "properties": {
5079 |           "success": {
5080 |             "type": "boolean",
5081 |             "description": "Success or Failure",
5082 |             "example": true
5083 |           },
5084 |           "statusCode": {
5085 |             "type": "number",
5086 |             "description": "Status Code",
5087 |             "example": 201
5088 |           },
5089 |           "message": {
5090 |             "type": "string",
5091 |             "description": "Message",
5092 |             "example": "Fetched Posts"
5093 |           },
5094 |           "results": {
5095 |             "description": "Requested Results",
5096 |             "allOf": [
5097 |               {
5098 |                 "$ref": "#/components/schemas/PostSuccessfulResponseSchema"
5099 |               }
5100 |             ]
5101 |           }
5102 |         },
5103 |         "required": [
5104 |           "success",
5105 |           "statusCode",
5106 |           "message"
5107 |         ]
5108 |       },
5109 |       "PostApprovalSchema": {
5110 |         "type": "object",
5111 |         "properties": {
5112 |           "approver": {
5113 |             "type": "string",
5114 |             "description": "Approver",
5115 |             "example": "iVrVJ2uoXNF0wzcBzgl5"
5116 |           },
5117 |           "requesterNote": {
5118 |             "type": "string",
5119 |             "description": "Requester Notes",
5120 |             "example": "Test suggestion"
5121 |           },
5122 |           "approverNote": {
5123 |             "type": "string",
5124 |             "description": "Approver Notes",
5125 |             "example": "Test suggestion"
5126 |           },
5127 |           "approvalStatus": {
5128 |             "type": "object",
5129 |             "description": "Approval Status must be one of the following values: pending, approved, rejected, not_required",
5130 |             "example": "approved"
5131 |           }
5132 |         }
5133 |       },
5134 |       "CreatePostDTO": {
5135 |         "type": "object",
5136 |         "properties": {
5137 |           "accountIds": {
5138 |             "description": "Account Ids",
5139 |             "example": [
5140 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
5141 |             ],
5142 |             "type": "array",
5143 |             "items": {
5144 |               "type": "string"
5145 |             }
5146 |           },
5147 |           "summary": {
5148 |             "type": "string",
5149 |             "description": "Post Content \n The limitations of content as per the platforms is provided through the reference link in API description. The summary will be trimmed based on the limit",
5150 |             "example": "Hello World"
5151 |           },
5152 |           "media": {
5153 |             "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description",
5154 |             "type": "array",
5155 |             "items": {
5156 |               "$ref": "#/components/schemas/PostMediaSchema"
5157 |             }
5158 |           },
5159 |           "status": {
5160 |             "type": "object",
5161 |             "description": "Status must be one of the following values: null, in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
5162 |             "example": "draft"
5163 |           },
5164 |           "scheduleDate": {
5165 |             "type": "string",
5166 |             "description": "Schedule Date"
5167 |           },
5168 |           "createdBy": {
5169 |             "type": "string",
5170 |             "description": "Created By"
5171 |           },
5172 |           "followUpComment": {
5173 |             "type": "string",
5174 |             "description": "Follow Up Comment on platform. It is not allowed on Tiktok and GMB accounts and there is a limit of 280 charecters for twitter account",
5175 |             "example": "First comment"
5176 |           },
5177 |           "ogTagsDetails": {
5178 |             "description": "Og Tags Meta Data",
5179 |             "allOf": [
5180 |               {
5181 |                 "$ref": "#/components/schemas/OgTagsSchema"
5182 |               }
5183 |             ]
5184 |           },
5185 |           "type": {
5186 |             "type": "object",
5187 |             "description": "Post Type must be one of the following values: - post, story, reel",
5188 |             "example": "post"
5189 |           },
5190 |           "postApprovalDetails": {
5191 |             "description": "Post Approval Details",
5192 |             "allOf": [
5193 |               {
5194 |                 "$ref": "#/components/schemas/PostApprovalSchema"
5195 |               }
5196 |             ]
5197 |           },
5198 |           "scheduleTimeUpdated": {
5199 |             "type": "boolean",
5200 |             "description": "if schedule datetime is updated",
5201 |             "example": true
5202 |           },
5203 |           "tags": {
5204 |             "description": "Array of Tag Value",
5205 |             "example": [
5206 |               "65f151c99bc2bf3aaf970d72"
5207 |             ],
5208 |             "type": "array",
5209 |             "items": {
5210 |               "type": "string"
5211 |             }
5212 |           },
5213 |           "categoryId": {
5214 |             "type": "string",
5215 |             "description": "Category Id",
5216 |             "example": "65f151c99bc2bf3aaf970d72"
5217 |           },
5218 |           "tiktokPostDetails": {
5219 |             "description": "Tiktok Post Details",
5220 |             "allOf": [
5221 |               {
5222 |                 "$ref": "#/components/schemas/TiktokPostSchema"
5223 |               }
5224 |             ]
5225 |           },
5226 |           "gmbPostDetails": {
5227 |             "description": "GMB Post Details",
5228 |             "allOf": [
5229 |               {
5230 |                 "$ref": "#/components/schemas/GMBPostSchema"
5231 |               }
5232 |             ]
5233 |           },
5234 |           "userId": {
5235 |             "type": "string",
5236 |             "description": "User ID",
5237 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
5238 |           }
5239 |         },
5240 |         "required": [
5241 |           "type"
5242 |         ]
5243 |       },
5244 |       "CreatePostSuccessfulResponseSchema": {
5245 |         "type": "object",
5246 |         "properties": {
5247 |           "post": {
5248 |             "description": "Post Data",
5249 |             "allOf": [
5250 |               {
5251 |                 "$ref": "#/components/schemas/GetPostFormattedSchema"
5252 |               }
5253 |             ]
5254 |           }
5255 |         }
5256 |       },
5257 |       "CreatePostSuccessfulResponseDTO": {
5258 |         "type": "object",
5259 |         "properties": {
5260 |           "success": {
5261 |             "type": "boolean",
5262 |             "description": "Success or Failure",
5263 |             "example": true
5264 |           },
5265 |           "statusCode": {
5266 |             "type": "number",
5267 |             "description": "Status Code",
5268 |             "example": 201
5269 |           },
5270 |           "message": {
5271 |             "type": "string",
5272 |             "description": "Message",
5273 |             "example": "Created Post"
5274 |           },
5275 |           "results": {
5276 |             "description": "Requested Results",
5277 |             "allOf": [
5278 |               {
5279 |                 "$ref": "#/components/schemas/CreatePostSuccessfulResponseSchema"
5280 |               }
5281 |             ]
5282 |           }
5283 |         },
5284 |         "required": [
5285 |           "success",
5286 |           "statusCode",
5287 |           "message"
5288 |         ]
5289 |       },
5290 |       "GetPostSuccessfulResponseSchema": {
5291 |         "type": "object",
5292 |         "properties": {
5293 |           "post": {
5294 |             "description": "Post Data",
5295 |             "allOf": [
5296 |               {
5297 |                 "$ref": "#/components/schemas/GetPostFormattedSchema"
5298 |               }
5299 |             ]
5300 |           }
5301 |         }
5302 |       },
5303 |       "GetPostSuccessfulResponseDTO": {
5304 |         "type": "object",
5305 |         "properties": {
5306 |           "success": {
5307 |             "type": "boolean",
5308 |             "description": "Success or Failure",
5309 |             "example": true
5310 |           },
5311 |           "statusCode": {
5312 |             "type": "number",
5313 |             "description": "Status Code",
5314 |             "example": 200
5315 |           },
5316 |           "message": {
5317 |             "type": "string",
5318 |             "description": "Message",
5319 |             "example": "Fetched Post"
5320 |           },
5321 |           "results": {
5322 |             "description": "Requested Results",
5323 |             "allOf": [
5324 |               {
5325 |                 "$ref": "#/components/schemas/GetPostSuccessfulResponseSchema"
5326 |               }
5327 |             ]
5328 |           }
5329 |         },
5330 |         "required": [
5331 |           "success",
5332 |           "statusCode",
5333 |           "message"
5334 |         ]
5335 |       },
5336 |       "PostCreateRequest": {
5337 |         "type": "object",
5338 |         "properties": {
5339 |           "accountIds": {
5340 |             "description": "Account Ids",
5341 |             "example": [
5342 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
5343 |             ],
5344 |             "type": "array",
5345 |             "items": {
5346 |               "type": "string"
5347 |             }
5348 |           },
5349 |           "summary": {
5350 |             "type": "string",
5351 |             "description": "Post Content \n The limitations of content as per the platforms is provided through the reference link in API description",
5352 |             "example": "Hello World"
5353 |           },
5354 |           "media": {
5355 |             "description": "Post Media Data \n The limitations of media as per the platforms is provided through the reference link in API description",
5356 |             "type": "array",
5357 |             "items": {
5358 |               "$ref": "#/components/schemas/PostMediaSchema"
5359 |             }
5360 |           },
5361 |           "status": {
5362 |             "type": "object",
5363 |             "description": "Status must be one of the following values: in_progress, draft, failed, published, scheduled, in_review, notification_sent, deleted",
5364 |             "example": "draft"
5365 |           },
5366 |           "scheduleDate": {
5367 |             "type": "string",
5368 |             "description": "Schedule Date"
5369 |           },
5370 |           "createdBy": {
5371 |             "type": "string",
5372 |             "description": "Created By"
5373 |           },
5374 |           "followUpComment": {
5375 |             "type": "string",
5376 |             "description": "Follow Up Comment on platform. It is not allowed on Tiktok and GMB accounts and there is a limit of 280 charecters for twitter account",
5377 |             "example": "First comment"
5378 |           },
5379 |           "ogTagsDetails": {
5380 |             "description": "Og Tags Meta Data",
5381 |             "allOf": [
5382 |               {
5383 |                 "$ref": "#/components/schemas/OgTagsSchema"
5384 |               }
5385 |             ]
5386 |           },
5387 |           "type": {
5388 |             "type": "object",
5389 |             "description": "Post Type must be one of the following values: - post, story, reel",
5390 |             "example": "post"
5391 |           },
5392 |           "postApprovalDetails": {
5393 |             "description": "Post Approval Details",
5394 |             "allOf": [
5395 |               {
5396 |                 "$ref": "#/components/schemas/PostApprovalSchema"
5397 |               }
5398 |             ]
5399 |           },
5400 |           "scheduleTimeUpdated": {
5401 |             "type": "boolean",
5402 |             "description": "if schedule datetime is updated",
5403 |             "example": true
5404 |           },
5405 |           "tags": {
5406 |             "description": "Array of Tag Value",
5407 |             "example": [
5408 |               "Tag1"
5409 |             ],
5410 |             "type": "array",
5411 |             "items": {
5412 |               "type": "string"
5413 |             }
5414 |           },
5415 |           "categoryId": {
5416 |             "type": "string",
5417 |             "description": "Category Id"
5418 |           },
5419 |           "tiktokPostDetails": {
5420 |             "description": "Tiktok Post Details",
5421 |             "allOf": [
5422 |               {
5423 |                 "$ref": "#/components/schemas/TiktokPostSchema"
5424 |               }
5425 |             ]
5426 |           },
5427 |           "gmbPostDetails": {
5428 |             "description": "GMB Post Details",
5429 |             "allOf": [
5430 |               {
5431 |                 "$ref": "#/components/schemas/GMBPostSchema"
5432 |               }
5433 |             ]
5434 |           },
5435 |           "userId": {
5436 |             "type": "string",
5437 |             "description": "User ID",
5438 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
5439 |           }
5440 |         },
5441 |         "required": [
5442 |           "type"
5443 |         ]
5444 |       },
5445 |       "UpdatePostSuccessfulResponseDTO": {
5446 |         "type": "object",
5447 |         "properties": {
5448 |           "success": {
5449 |             "type": "boolean",
5450 |             "description": "Success or Failure",
5451 |             "example": true
5452 |           },
5453 |           "statusCode": {
5454 |             "type": "number",
5455 |             "description": "Status Code",
5456 |             "example": 200
5457 |           },
5458 |           "message": {
5459 |             "type": "string",
5460 |             "description": "Message",
5461 |             "example": "Updated Post"
5462 |           }
5463 |         },
5464 |         "required": [
5465 |           "success",
5466 |           "statusCode",
5467 |           "message"
5468 |         ]
5469 |       },
5470 |       "DeletePostSuccessfulResponseSchema": {
5471 |         "type": "object",
5472 |         "properties": {
5473 |           "postId": {
5474 |             "type": "string"
5475 |           }
5476 |         }
5477 |       },
5478 |       "DeletePostSuccessfulResponseDTO": {
5479 |         "type": "object",
5480 |         "properties": {
5481 |           "success": {
5482 |             "type": "boolean",
5483 |             "description": "Success or Failure",
5484 |             "example": true
5485 |           },
5486 |           "statusCode": {
5487 |             "type": "number",
5488 |             "description": "Status Code",
5489 |             "example": 200
5490 |           },
5491 |           "message": {
5492 |             "type": "string",
5493 |             "description": "Message",
5494 |             "example": "Deleted Post"
5495 |           },
5496 |           "results": {
5497 |             "description": "Requested Results",
5498 |             "allOf": [
5499 |               {
5500 |                 "$ref": "#/components/schemas/DeletePostSuccessfulResponseSchema"
5501 |               }
5502 |             ]
5503 |           }
5504 |         },
5505 |         "required": [
5506 |           "success",
5507 |           "statusCode",
5508 |           "message"
5509 |         ]
5510 |       },
5511 |       "GetAccountSchema": {
5512 |         "type": "object",
5513 |         "properties": {
5514 |           "id": {
5515 |             "type": "string",
5516 |             "example": "aF3KhyL8JIuBwzK3m7Ly_Lx1EI6YIgQYMQi0ytFXv_12554616564525983496"
5517 |           },
5518 |           "oauthId": {
5519 |             "type": "string",
5520 |             "example": "aF3KhyL8JIuBwzK3m7Ly"
5521 |           },
5522 |           "profileId": {
5523 |             "type": "string",
5524 |             "example": "aF3KhyL8JIuBwzK3m7Ly"
5525 |           },
5526 |           "name": {
5527 |             "type": "string",
5528 |             "example": "Sample Account"
5529 |           },
5530 |           "platform": {
5531 |             "type": "string",
5532 |             "description": "platform must be one of the following values: google, facebook, instagram, linkedin, twitter, tiktok",
5533 |             "example": "google"
5534 |           },
5535 |           "type": {
5536 |             "type": "string",
5537 |             "example": "location"
5538 |           },
5539 |           "expire": {
5540 |             "type": "string",
5541 |             "example": "2024-03-11T19:29:59.785Z"
5542 |           },
5543 |           "isExpired": {
5544 |             "type": "boolean",
5545 |             "example": false
5546 |           },
5547 |           "meta": {
5548 |             "type": "object",
5549 |             "example": {
5550 |               "hasGoogleUpdated": true,
5551 |               "canDelete": true
5552 |             }
5553 |           }
5554 |         }
5555 |       },
5556 |       "GetGroupSchema": {
5557 |         "type": "object",
5558 |         "properties": {
5559 |           "id": {
5560 |             "type": "string",
5561 |             "description": "Group Id",
5562 |             "example": "6284c43d519161e96cc09c13"
5563 |           },
5564 |           "name": {
5565 |             "type": "string",
5566 |             "description": "name of group",
5567 |             "example": "Primary"
5568 |           },
5569 |           "accountIds": {
5570 |             "example": [
5571 |               "6494063f4260855c1c5776b5_mhoUgTPkz19vjF5Qu7Av_2774080328752823730"
5572 |             ],
5573 |             "type": "array",
5574 |             "items": {
5575 |               "type": "string"
5576 |             }
5577 |           }
5578 |         },
5579 |         "required": [
5580 |           "id",
5581 |           "name",
5582 |           "accountIds"
5583 |         ]
5584 |       },
5585 |       "AccountsListResponseSchema": {
5586 |         "type": "object",
5587 |         "properties": {
5588 |           "accounts": {
5589 |             "type": "array",
5590 |             "items": {
5591 |               "$ref": "#/components/schemas/GetAccountSchema"
5592 |             }
5593 |           },
5594 |           "groups": {
5595 |             "type": "array",
5596 |             "items": {
5597 |               "$ref": "#/components/schemas/GetGroupSchema"
5598 |             }
5599 |           }
5600 |         }
5601 |       },
5602 |       "AccountsListResponseDTO": {
5603 |         "type": "object",
5604 |         "properties": {
5605 |           "success": {
5606 |             "type": "boolean",
5607 |             "description": "Success or Failure",
5608 |             "example": true
5609 |           },
5610 |           "statusCode": {
5611 |             "type": "number",
5612 |             "description": "Status Code",
5613 |             "example": 200
5614 |           },
5615 |           "message": {
5616 |             "type": "string",
5617 |             "description": "Message",
5618 |             "example": "Fetched Accounts"
5619 |           },
5620 |           "results": {
5621 |             "description": "Requested Results",
5622 |             "allOf": [
5623 |               {
5624 |                 "$ref": "#/components/schemas/AccountsListResponseSchema"
5625 |               }
5626 |             ]
5627 |           }
5628 |         },
5629 |         "required": [
5630 |           "success",
5631 |           "statusCode",
5632 |           "message"
5633 |         ]
5634 |       },
5635 |       "DeleteAccountResponseSchema": {
5636 |         "type": "object",
5637 |         "properties": {
5638 |           "locationId": {
5639 |             "type": "string",
5640 |             "description": "Location Id",
5641 |             "example": "ve9EPM428h8vShlRW1KT"
5642 |           },
5643 |           "id": {
5644 |             "type": "string",
5645 |             "description": "Id",
5646 |             "example": "65fac446d599990d1313c1dd"
5647 |           }
5648 |         }
5649 |       },
5650 |       "LocationAndAccountDeleteResponseDTO": {
5651 |         "type": "object",
5652 |         "properties": {
5653 |           "success": {
5654 |             "type": "boolean",
5655 |             "description": "Success or Failure",
5656 |             "example": true
5657 |           },
5658 |           "statusCode": {
5659 |             "type": "number",
5660 |             "description": "Status Code",
5661 |             "example": 200
5662 |           },
5663 |           "message": {
5664 |             "type": "string",
5665 |             "description": "Message",
5666 |             "example": "Deleted Account"
5667 |           },
5668 |           "results": {
5669 |             "description": "Requested Results",
5670 |             "allOf": [
5671 |               {
5672 |                 "$ref": "#/components/schemas/DeleteAccountResponseSchema"
5673 |               }
5674 |             ]
5675 |           }
5676 |         },
5677 |         "required": [
5678 |           "success",
5679 |           "statusCode",
5680 |           "message"
5681 |         ]
5682 |       },
5683 |       "FacebookPageSchema": {
5684 |         "type": "object",
5685 |         "properties": {
5686 |           "id": {
5687 |             "type": "string",
5688 |             "example": "u37swmmLbA02zgqKPpxITe2"
5689 |           },
5690 |           "name": {
5691 |             "type": "string",
5692 |             "example": "FB Page"
5693 |           },
5694 |           "avatar": {
5695 |             "type": "string",
5696 |             "example": "u37swmmLbA02zgqKPpxITe2"
5697 |           },
5698 |           "isOwned": {
5699 |             "type": "boolean",
5700 |             "example": true
5701 |           },
5702 |           "isConnected": {
5703 |             "type": "boolean",
5704 |             "example": true
5705 |           }
5706 |         }
5707 |       },
5708 |       "GetFacebookAccountsSchema": {
5709 |         "type": "object",
5710 |         "properties": {
5711 |           "pages": {
5712 |             "description": "Facebook Pages Details",
5713 |             "type": "array",
5714 |             "items": {
5715 |               "$ref": "#/components/schemas/FacebookPageSchema"
5716 |             }
5717 |           }
5718 |         }
5719 |       },
5720 |       "GetFacebookAccountsResponseDTO": {
5721 |         "type": "object",
5722 |         "properties": {
5723 |           "success": {
5724 |             "type": "boolean",
5725 |             "description": "Success or Failure",
5726 |             "example": true
5727 |           },
5728 |           "statusCode": {
5729 |             "type": "number",
5730 |             "description": "Status Code",
5731 |             "example": 200
5732 |           },
5733 |           "message": {
5734 |             "type": "string",
5735 |             "description": "Message",
5736 |             "example": "Fetched Facebook Account"
5737 |           },
5738 |           "results": {
5739 |             "description": "Requested Results",
5740 |             "allOf": [
5741 |               {
5742 |                 "$ref": "#/components/schemas/GetFacebookAccountsSchema"
5743 |               }
5744 |             ]
5745 |           }
5746 |         },
5747 |         "required": [
5748 |           "success",
5749 |           "statusCode",
5750 |           "message"
5751 |         ]
5752 |       },
5753 |       "AttachFBAccountDTO": {
5754 |         "type": "object",
5755 |         "properties": {
5756 |           "type": {
5757 |             "type": "object",
5758 |             "example": "page"
5759 |           },
5760 |           "originId": {
5761 |             "type": "string",
5762 |             "example": "244405****11687"
5763 |           },
5764 |           "name": {
5765 |             "type": "string",
5766 |             "example": "JOHN_DEO"
5767 |           },
5768 |           "avatar": {
5769 |             "type": "string",
5770 |             "example": "https://storage.googleapis.com/2ad21ebc23/test"
5771 |           },
5772 |           "companyId": {
5773 |             "type": "string",
5774 |             "description": "Company ID",
5775 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
5776 |           }
5777 |         }
5778 |       },
5779 |       "SocialMediaFacebookAccountSchema": {
5780 |         "type": "object",
5781 |         "properties": {
5782 |           "_id": {
5783 |             "type": "string",
5784 |             "example": "65f2d989a4f2f1e5322c3856"
5785 |           },
5786 |           "oAuthId": {
5787 |             "type": "string",
5788 |             "example": "u37swmmLbA02zgqKPpxITe2"
5789 |           },
5790 |           "oldId": {
5791 |             "type": "string",
5792 |             "example": "u37swmmLbA02zgqKPpxITe2"
5793 |           },
5794 |           "locationId": {
5795 |             "type": "string",
5796 |             "example": "u37swmmLbA02zgqKPpxITe2"
5797 |           },
5798 |           "originId": {
5799 |             "type": "string",
5800 |             "example": "u37swmmLbA02zgqKPpxITe2"
5801 |           },
5802 |           "platform": {
5803 |             "type": "object",
5804 |             "example": "facebook"
5805 |           },
5806 |           "type": {
5807 |             "type": "object",
5808 |             "description": "type value must be page",
5809 |             "example": "page"
5810 |           },
5811 |           "name": {
5812 |             "type": "string",
5813 |             "example": "Account Name"
5814 |           },
5815 |           "avatar": {
5816 |             "type": "string",
5817 |             "example": "u37swmmLbA02zgqKPpxITe2"
5818 |           },
5819 |           "meta": {
5820 |             "type": "object",
5821 |             "example": {
5822 |               "pageId": "u37swmmLbA02zgqKPpxITe2",
5823 |               "page": {
5824 |                 "id": "u37swmmLbA02zgqKPpxITe2",
5825 |                 "name": "Account Name",
5826 |                 "avatar": "u37swmmLbA02zgqKPpxITe2"
5827 |               },
5828 |               "storeCode": "122",
5829 |               "isVerified": "true",
5830 |               "verified": true,
5831 |               "protected": true,
5832 |               "locationId": "u37swmmLbA02zgqKPpxITe2",
5833 |               "accountId": "u37swmmLbA02zgqKPpxITe2",
5834 |               "openId": "u37swmmLbA02zgqKPpxITe2",
5835 |               "urn": "u37swmmLbA02zgqKPpxITe2",
5836 |               "username": "testUser",
5837 |               "storefrontAddress": {
5838 |                 "regionCode": "30021",
5839 |                 "languageCode": "E001",
5840 |                 "postalCode": "1221",
5841 |                 "administrativeArea": "Down Town",
5842 |                 "locality": "Louis Street",
5843 |                 "addressLines": [
5844 |                   "207",
5845 |                   "county"
5846 |                 ]
5847 |               }
5848 |             }
5849 |           },
5850 |           "active": {
5851 |             "type": "boolean",
5852 |             "example": true
5853 |           },
5854 |           "deleted": {
5855 |             "type": "boolean",
5856 |             "example": true
5857 |           },
5858 |           "createdAt": {
5859 |             "format": "date-time",
5860 |             "type": "string",
5861 |             "description": "created date",
5862 |             "example": "2024-03-14T11:03:37.015Z"
5863 |           },
5864 |           "updatedAt": {
5865 |             "format": "date-time",
5866 |             "type": "string",
5867 |             "description": "updated date",
5868 |             "example": "2024-03-14T11:03:37.015Z"
5869 |           }
5870 |         }
5871 |       },
5872 |       "SocialMediaFBAccountResponseDTO": {
5873 |         "type": "object",
5874 |         "properties": {
5875 |           "success": {
5876 |             "type": "boolean",
5877 |             "description": "Success or Failure",
5878 |             "example": true
5879 |           },
5880 |           "statusCode": {
5881 |             "type": "number",
5882 |             "description": "Status Code",
5883 |             "example": 201
5884 |           },
5885 |           "message": {
5886 |             "type": "string",
5887 |             "description": "Message",
5888 |             "example": "Added Facebook Account"
5889 |           },
5890 |           "results": {
5891 |             "description": "Requested Results",
5892 |             "allOf": [
5893 |               {
5894 |                 "$ref": "#/components/schemas/SocialMediaFacebookAccountSchema"
5895 |               }
5896 |             ]
5897 |           }
5898 |         },
5899 |         "required": [
5900 |           "success",
5901 |           "statusCode",
5902 |           "message"
5903 |         ]
5904 |       },
5905 |       "InstagramAccountSchema": {
5906 |         "type": "object",
5907 |         "properties": {
5908 |           "id": {
5909 |             "type": "string",
5910 |             "example": "idu37swmmLbA02zgqKPpxITe2"
5911 |           },
5912 |           "name": {
5913 |             "type": "string",
5914 |             "example": "Insta account"
5915 |           },
5916 |           "avatar": {
5917 |             "type": "string",
5918 |             "example": "avau37swmmLbA02zgqKPpxITe2"
5919 |           },
5920 |           "pageId": {
5921 |             "type": "string",
5922 |             "example": "pidu37swmmLbA02zgqKPpxITe2"
5923 |           },
5924 |           "isConnected": {
5925 |             "type": "boolean",
5926 |             "example": true
5927 |           }
5928 |         }
5929 |       },
5930 |       "GetInstagramAccountsSchema": {
5931 |         "type": "object",
5932 |         "properties": {
5933 |           "accounts": {
5934 |             "description": "Instagram Account Details",
5935 |             "type": "array",
5936 |             "items": {
5937 |               "$ref": "#/components/schemas/InstagramAccountSchema"
5938 |             }
5939 |           }
5940 |         }
5941 |       },
5942 |       "GetInstagramAccountsResponseDTO": {
5943 |         "type": "object",
5944 |         "properties": {
5945 |           "success": {
5946 |             "type": "boolean",
5947 |             "description": "Success or Failure",
5948 |             "example": true
5949 |           },
5950 |           "statusCode": {
5951 |             "type": "number",
5952 |             "description": "Status Code",
5953 |             "example": 200
5954 |           },
5955 |           "message": {
5956 |             "type": "string",
5957 |             "description": "Message",
5958 |             "example": "Fetched Instagram Account"
5959 |           },
5960 |           "results": {
5961 |             "description": "Requested Results",
5962 |             "allOf": [
5963 |               {
5964 |                 "$ref": "#/components/schemas/GetInstagramAccountsSchema"
5965 |               }
5966 |             ]
5967 |           }
5968 |         },
5969 |         "required": [
5970 |           "success",
5971 |           "statusCode",
5972 |           "message"
5973 |         ]
5974 |       },
5975 |       "AttachIGAccountDTO": {
5976 |         "type": "object",
5977 |         "properties": {
5978 |           "originId": {
5979 |             "type": "string",
5980 |             "example": "244405****11687"
5981 |           },
5982 |           "name": {
5983 |             "type": "string",
5984 |             "example": "JOHN_DEO"
5985 |           },
5986 |           "avatar": {
5987 |             "type": "string"
5988 |           },
5989 |           "pageId": {
5990 |             "type": "string",
5991 |             "example": "234234234242sd"
5992 |           },
5993 |           "companyId": {
5994 |             "type": "string",
5995 |             "description": "Company ID",
5996 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
5997 |           }
5998 |         },
5999 |         "required": [
6000 |           "pageId"
6001 |         ]
6002 |       },
6003 |       "SocialMediaInstagramAccountSchema": {
6004 |         "type": "object",
6005 |         "properties": {
6006 |           "_id": {
6007 |             "type": "string",
6008 |             "example": "65f2d989a4f2f1e5322c3856"
6009 |           },
6010 |           "oAuthId": {
6011 |             "type": "string",
6012 |             "example": "u37swmmLbA02zgqKPpxITe2"
6013 |           },
6014 |           "oldId": {
6015 |             "type": "string",
6016 |             "example": "u37swmmLbA02zgqKPpxITe2"
6017 |           },
6018 |           "locationId": {
6019 |             "type": "string",
6020 |             "example": "u37swmmLbA02zgqKPpxITe2"
6021 |           },
6022 |           "originId": {
6023 |             "type": "string",
6024 |             "example": "u37swmmLbA02zgqKPpxITe2"
6025 |           },
6026 |           "platform": {
6027 |             "type": "object",
6028 |             "example": "instagram"
6029 |           },
6030 |           "type": {
6031 |             "type": "object",
6032 |             "example": "profile"
6033 |           },
6034 |           "name": {
6035 |             "type": "string",
6036 |             "example": "Profile Name"
6037 |           },
6038 |           "avatar": {
6039 |             "type": "string",
6040 |             "example": "u37swmmLbA02zgqKPpxITe2"
6041 |           },
6042 |           "meta": {
6043 |             "type": "object",
6044 |             "example": {
6045 |               "pageId": "u37swmmLbA02zgqKPpxITe2",
6046 |               "page": {
6047 |                 "id": "u37swmmLbA02zgqKPpxITe2",
6048 |                 "name": "Account Name",
6049 |                 "avatar": "u37swmmLbA02zgqKPpxITe2"
6050 |               },
6051 |               "storeCode": "122",
6052 |               "isVerified": "true",
6053 |               "verified": true,
6054 |               "protected": true,
6055 |               "locationId": "u37swmmLbA02zgqKPpxITe2",
6056 |               "accountId": "u37swmmLbA02zgqKPpxITe2",
6057 |               "openId": "u37swmmLbA02zgqKPpxITe2",
6058 |               "urn": "u37swmmLbA02zgqKPpxITe2",
6059 |               "username": "testUser",
6060 |               "storefrontAddress": {
6061 |                 "regionCode": "30021",
6062 |                 "languageCode": "E001",
6063 |                 "postalCode": "1221",
6064 |                 "administrativeArea": "Down Town",
6065 |                 "locality": "Louis Street",
6066 |                 "addressLines": [
6067 |                   "207",
6068 |                   "county"
6069 |                 ]
6070 |               }
6071 |             }
6072 |           },
6073 |           "active": {
6074 |             "type": "boolean",
6075 |             "example": true
6076 |           },
6077 |           "deleted": {
6078 |             "type": "boolean",
6079 |             "example": true
6080 |           },
6081 |           "createdAt": {
6082 |             "format": "date-time",
6083 |             "type": "string",
6084 |             "description": "created date",
6085 |             "example": "2024-03-14T11:03:37.015Z"
6086 |           },
6087 |           "updatedAt": {
6088 |             "format": "date-time",
6089 |             "type": "string",
6090 |             "description": "updated date",
6091 |             "example": "2024-03-14T11:03:37.015Z"
6092 |           }
6093 |         }
6094 |       },
6095 |       "SocialMediaInstagramAccountResponseDTO": {
6096 |         "type": "object",
6097 |         "properties": {
6098 |           "success": {
6099 |             "type": "boolean",
6100 |             "description": "Success or Failure",
6101 |             "example": true
6102 |           },
6103 |           "statusCode": {
6104 |             "type": "number",
6105 |             "description": "Status Code",
6106 |             "example": 201
6107 |           },
6108 |           "message": {
6109 |             "type": "string",
6110 |             "description": "Message",
6111 |             "example": "Added Instagram Account"
6112 |           },
6113 |           "results": {
6114 |             "description": "Requested Results",
6115 |             "allOf": [
6116 |               {
6117 |                 "$ref": "#/components/schemas/SocialMediaInstagramAccountSchema"
6118 |               }
6119 |             ]
6120 |           }
6121 |         },
6122 |         "required": [
6123 |           "success",
6124 |           "statusCode",
6125 |           "message"
6126 |         ]
6127 |       },
6128 |       "LinkedInPageSchema": {
6129 |         "type": "object",
6130 |         "properties": {
6131 |           "id": {
6132 |             "type": "string",
6133 |             "description": "Page ID",
6134 |             "example": "w37swmmLbA02zgqKPpxITe"
6135 |           },
6136 |           "name": {
6137 |             "type": "string",
6138 |             "description": "LinkedIn Page Name",
6139 |             "example": "Sample Name"
6140 |           },
6141 |           "avatar": {
6142 |             "type": "string",
6143 |             "description": "Profile Avatar url",
6144 |             "example": "w37swmmLbA02zgqKPpxITe"
6145 |           },
6146 |           "urn": {
6147 |             "type": "string",
6148 |             "description": "URN"
6149 |           },
6150 |           "isConnected": {
6151 |             "type": "boolean",
6152 |             "description": "is connected to app",
6153 |             "example": true
6154 |           }
6155 |         }
6156 |       },
6157 |       "LinkedInProfileSchema": {
6158 |         "type": "object",
6159 |         "properties": {
6160 |           "id": {
6161 |             "type": "string",
6162 |             "description": "Id",
6163 |             "example": "w37swmmLbA02zgqKPpxITe"
6164 |           },
6165 |           "name": {
6166 |             "type": "string",
6167 |             "description": "Name of profile",
6168 |             "example": "Profile Name"
6169 |           },
6170 |           "avatar": {
6171 |             "type": "string",
6172 |             "description": "Profile avatar",
6173 |             "example": "w37swmmLbA02zgqKPpxITe"
6174 |           },
6175 |           "urn": {
6176 |             "type": "string",
6177 |             "description": "URN"
6178 |           },
6179 |           "isConnected": {
6180 |             "type": "boolean",
6181 |             "description": "is connected to app",
6182 |             "example": true
6183 |           }
6184 |         }
6185 |       },
6186 |       "GetLinkedInAccountSchema": {
6187 |         "type": "object",
6188 |         "properties": {
6189 |           "pages": {
6190 |             "description": "LinkedIn Pages",
6191 |             "type": "array",
6192 |             "items": {
6193 |               "$ref": "#/components/schemas/LinkedInPageSchema"
6194 |             }
6195 |           },
6196 |           "profile": {
6197 |             "description": "LinkedIn Profile Details",
6198 |             "type": "array",
6199 |             "items": {
6200 |               "$ref": "#/components/schemas/LinkedInProfileSchema"
6201 |             }
6202 |           }
6203 |         }
6204 |       },
6205 |       "GetLinkedInAccountsResponseDTO": {
6206 |         "type": "object",
6207 |         "properties": {
6208 |           "success": {
6209 |             "type": "boolean",
6210 |             "description": "Success or Failure",
6211 |             "example": true
6212 |           },
6213 |           "statusCode": {
6214 |             "type": "number",
6215 |             "description": "Status Code",
6216 |             "example": 200
6217 |           },
6218 |           "message": {
6219 |             "type": "string",
6220 |             "description": "Message",
6221 |             "example": "Fetched LinkedIn Account"
6222 |           },
6223 |           "results": {
6224 |             "description": "Requested Results",
6225 |             "allOf": [
6226 |               {
6227 |                 "$ref": "#/components/schemas/GetLinkedInAccountSchema"
6228 |               }
6229 |             ]
6230 |           }
6231 |         },
6232 |         "required": [
6233 |           "success",
6234 |           "statusCode",
6235 |           "message"
6236 |         ]
6237 |       },
6238 |       "AttachLinkedinAccountDTO": {
6239 |         "type": "object",
6240 |         "properties": {
6241 |           "type": {
6242 |             "type": "string",
6243 |             "enum": [
6244 |               "page",
6245 |               "group",
6246 |               "profile",
6247 |               "location",
6248 |               "business"
6249 |             ]
6250 |           },
6251 |           "originId": {
6252 |             "type": "string",
6253 |             "example": "244405****11687"
6254 |           },
6255 |           "name": {
6256 |             "type": "string",
6257 |             "example": "JOHN_DEO"
6258 |           },
6259 |           "avatar": {
6260 |             "type": "string"
6261 |           },
6262 |           "urn": {
6263 |             "type": "string"
6264 |           },
6265 |           "companyId": {
6266 |             "type": "string",
6267 |             "description": "Company ID",
6268 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
6269 |           }
6270 |         }
6271 |       },
6272 |       "SocialMediaLinkedInAccountSchema": {
6273 |         "type": "object",
6274 |         "properties": {
6275 |           "_id": {
6276 |             "type": "string",
6277 |             "example": "65f2d989a4f2f1e5322c3856"
6278 |           },
6279 |           "oAuthId": {
6280 |             "type": "string",
6281 |             "example": "u37swmmLbA02zgqKPpxITe2"
6282 |           },
6283 |           "oldId": {
6284 |             "type": "string",
6285 |             "example": "u37swmmLbA02zgqKPpxITe2"
6286 |           },
6287 |           "locationId": {
6288 |             "type": "string",
6289 |             "example": "u37swmmLbA02zgqKPpxITe2"
6290 |           },
6291 |           "originId": {
6292 |             "type": "string",
6293 |             "example": "u37swmmLbA02zgqKPpxITe2"
6294 |           },
6295 |           "platform": {
6296 |             "type": "object",
6297 |             "example": "linkedin"
6298 |           },
6299 |           "type": {
6300 |             "type": "object",
6301 |             "description": "type must be one of the following values: page, profile",
6302 |             "example": "profile"
6303 |           },
6304 |           "name": {
6305 |             "type": "string",
6306 |             "example": "Profile Name"
6307 |           },
6308 |           "avatar": {
6309 |             "type": "string",
6310 |             "example": "u37swmmLbA02zgqKPpxITe2"
6311 |           },
6312 |           "meta": {
6313 |             "type": "object",
6314 |             "example": {
6315 |               "pageId": "u37swmmLbA02zgqKPpxITe2",
6316 |               "page": {
6317 |                 "id": "u37swmmLbA02zgqKPpxITe2",
6318 |                 "name": "Account Name",
6319 |                 "avatar": "u37swmmLbA02zgqKPpxITe2"
6320 |               },
6321 |               "storeCode": "122",
6322 |               "isVerified": "true",
6323 |               "verified": true,
6324 |               "protected": true,
6325 |               "locationId": "u37swmmLbA02zgqKPpxITe2",
6326 |               "accountId": "u37swmmLbA02zgqKPpxITe2",
6327 |               "openId": "u37swmmLbA02zgqKPpxITe2",
6328 |               "urn": "u37swmmLbA02zgqKPpxITe2",
6329 |               "username": "testUser",
6330 |               "storefrontAddress": {
6331 |                 "regionCode": "30021",
6332 |                 "languageCode": "E001",
6333 |                 "postalCode": "1221",
6334 |                 "administrativeArea": "Down Town",
6335 |                 "locality": "Louis Street",
6336 |                 "addressLines": [
6337 |                   "207",
6338 |                   "county"
6339 |                 ]
6340 |               }
6341 |             }
6342 |           },
6343 |           "active": {
6344 |             "type": "boolean",
6345 |             "example": true
6346 |           },
6347 |           "deleted": {
6348 |             "type": "boolean",
6349 |             "example": true
6350 |           },
6351 |           "createdAt": {
6352 |             "format": "date-time",
6353 |             "type": "string",
6354 |             "description": "created date",
6355 |             "example": "2024-03-14T11:03:37.015Z"
6356 |           },
6357 |           "updatedAt": {
6358 |             "format": "date-time",
6359 |             "type": "string",
6360 |             "description": "updated date",
6361 |             "example": "2024-03-14T11:03:37.015Z"
6362 |           }
6363 |         }
6364 |       },
6365 |       "SocialMediaLinkedInAccountResponseDTO": {
6366 |         "type": "object",
6367 |         "properties": {
6368 |           "success": {
6369 |             "type": "boolean",
6370 |             "description": "Success or Failure",
6371 |             "example": true
6372 |           },
6373 |           "statusCode": {
6374 |             "type": "number",
6375 |             "description": "Status Code",
6376 |             "example": 200
6377 |           },
6378 |           "message": {
6379 |             "type": "string",
6380 |             "description": "Message",
6381 |             "example": "Added LinkedIn Account"
6382 |           },
6383 |           "results": {
6384 |             "description": "Requested Results",
6385 |             "allOf": [
6386 |               {
6387 |                 "$ref": "#/components/schemas/SocialMediaLinkedInAccountSchema"
6388 |               }
6389 |             ]
6390 |           }
6391 |         },
6392 |         "required": [
6393 |           "success",
6394 |           "statusCode",
6395 |           "message"
6396 |         ]
6397 |       },
6398 |       "TwitterProfileSchema": {
6399 |         "type": "object",
6400 |         "properties": {
6401 |           "id": {
6402 |             "type": "string",
6403 |             "description": "ID of profile",
6404 |             "example": "ZHl1OWpfZEMyeWc5UjJOOU51RVNOal"
6405 |           },
6406 |           "name": {
6407 |             "type": "string",
6408 |             "description": "Name of profile",
6409 |             "example": "Twitter Account name"
6410 |           },
6411 |           "username": {
6412 |             "type": "string",
6413 |             "description": "Username of profile",
6414 |             "example": "sample_user"
6415 |           },
6416 |           "avatar": {
6417 |             "type": "string",
6418 |             "description": "Avatar of profile",
6419 |             "example": "ZHl1OWpfZEMyeWc5UjJOOU51RVNOal"
6420 |           },
6421 |           "protected": {
6422 |             "type": "boolean",
6423 |             "description": "Is protected",
6424 |             "example": true
6425 |           },
6426 |           "verified": {
6427 |             "type": "boolean",
6428 |             "description": "Is verified",
6429 |             "example": true
6430 |           },
6431 |           "isConnected": {
6432 |             "type": "boolean",
6433 |             "description": "Is connected",
6434 |             "example": true
6435 |           }
6436 |         }
6437 |       },
6438 |       "GetTwitterAccountsSchema": {
6439 |         "type": "object",
6440 |         "properties": {
6441 |           "profile": {
6442 |             "description": "Twitter Profile Details",
6443 |             "type": "array",
6444 |             "items": {
6445 |               "$ref": "#/components/schemas/TwitterProfileSchema"
6446 |             }
6447 |           }
6448 |         }
6449 |       },
6450 |       "GetTwitterAccountsResponseDTO": {
6451 |         "type": "object",
6452 |         "properties": {
6453 |           "success": {
6454 |             "type": "boolean",
6455 |             "description": "Success or Failure",
6456 |             "example": true
6457 |           },
6458 |           "statusCode": {
6459 |             "type": "number",
6460 |             "description": "Status Code",
6461 |             "example": 200
6462 |           },
6463 |           "message": {
6464 |             "type": "string",
6465 |             "description": "Message",
6466 |             "example": "Fetched Twitter Account"
6467 |           },
6468 |           "results": {
6469 |             "description": "Requested Results",
6470 |             "allOf": [
6471 |               {
6472 |                 "$ref": "#/components/schemas/GetTwitterAccountsSchema"
6473 |               }
6474 |             ]
6475 |           }
6476 |         },
6477 |         "required": [
6478 |           "success",
6479 |           "statusCode",
6480 |           "message"
6481 |         ]
6482 |       },
6483 |       "AttachTwitterAccountDTO": {
6484 |         "type": "object",
6485 |         "properties": {
6486 |           "originId": {
6487 |             "type": "string",
6488 |             "example": "244405****11687"
6489 |           },
6490 |           "name": {
6491 |             "type": "string",
6492 |             "example": "JOHN_DEO"
6493 |           },
6494 |           "username": {
6495 |             "type": "string",
6496 |             "example": "user_name"
6497 |           },
6498 |           "avatar": {
6499 |             "type": "string"
6500 |           },
6501 |           "protected": {
6502 |             "type": "boolean",
6503 |             "example": true
6504 |           },
6505 |           "verified": {
6506 |             "type": "boolean",
6507 |             "example": true
6508 |           },
6509 |           "companyId": {
6510 |             "type": "string",
6511 |             "description": "Company ID",
6512 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
6513 |           }
6514 |         }
6515 |       },
6516 |       "SocialMediaTwitterAccountSchema": {
6517 |         "type": "object",
6518 |         "properties": {
6519 |           "_id": {
6520 |             "type": "string",
6521 |             "example": "65f2d989a4f2f1e5322c3856"
6522 |           },
6523 |           "oAuthId": {
6524 |             "type": "string",
6525 |             "example": "u37swmmLbA02zgqKPpxITe2"
6526 |           },
6527 |           "oldId": {
6528 |             "type": "string",
6529 |             "example": "u37swmmLbA02zgqKPpxITe2"
6530 |           },
6531 |           "locationId": {
6532 |             "type": "string",
6533 |             "example": "u37swmmLbA02zgqKPpxITe2"
6534 |           },
6535 |           "originId": {
6536 |             "type": "string",
6537 |             "example": "u37swmmLbA02zgqKPpxITe2"
6538 |           },
6539 |           "platform": {
6540 |             "type": "object",
6541 |             "example": "twitter"
6542 |           },
6543 |           "type": {
6544 |             "type": "object",
6545 |             "example": "profile"
6546 |           },
6547 |           "name": {
6548 |             "type": "string",
6549 |             "example": "Profile Name"
6550 |           },
6551 |           "avatar": {
6552 |             "type": "string",
6553 |             "example": "u37swmmLbA02zgqKPpxITe2"
6554 |           },
6555 |           "meta": {
6556 |             "type": "object",
6557 |             "example": {
6558 |               "pageId": "u37swmmLbA02zgqKPpxITe2",
6559 |               "page": {
6560 |                 "id": "u37swmmLbA02zgqKPpxITe2",
6561 |                 "name": "Account Name",
6562 |                 "avatar": "u37swmmLbA02zgqKPpxITe2"
6563 |               },
6564 |               "storeCode": "122",
6565 |               "isVerified": "true",
6566 |               "verified": true,
6567 |               "protected": true,
6568 |               "locationId": "u37swmmLbA02zgqKPpxITe2",
6569 |               "accountId": "u37swmmLbA02zgqKPpxITe2",
6570 |               "openId": "u37swmmLbA02zgqKPpxITe2",
6571 |               "urn": "u37swmmLbA02zgqKPpxITe2",
6572 |               "username": "testUser",
6573 |               "storefrontAddress": {
6574 |                 "regionCode": "30021",
6575 |                 "languageCode": "E001",
6576 |                 "postalCode": "1221",
6577 |                 "administrativeArea": "Down Town",
6578 |                 "locality": "Louis Street",
6579 |                 "addressLines": [
6580 |                   "207",
6581 |                   "county"
6582 |                 ]
6583 |               }
6584 |             }
6585 |           },
6586 |           "active": {
6587 |             "type": "boolean",
6588 |             "example": true
6589 |           },
6590 |           "deleted": {
6591 |             "type": "boolean",
6592 |             "example": true
6593 |           },
6594 |           "createdAt": {
6595 |             "format": "date-time",
6596 |             "type": "string",
6597 |             "description": "created date",
6598 |             "example": "2024-03-14T11:03:37.015Z"
6599 |           },
6600 |           "updatedAt": {
6601 |             "format": "date-time",
6602 |             "type": "string",
6603 |             "description": "updated date",
6604 |             "example": "2024-03-14T11:03:37.015Z"
6605 |           }
6606 |         }
6607 |       },
6608 |       "SocialMediaTwitterAccountResponseDTO": {
6609 |         "type": "object",
6610 |         "properties": {
6611 |           "success": {
6612 |             "type": "boolean",
6613 |             "description": "Success or Failure",
6614 |             "example": true
6615 |           },
6616 |           "statusCode": {
6617 |             "type": "number",
6618 |             "description": "Status Code",
6619 |             "example": 201
6620 |           },
6621 |           "message": {
6622 |             "type": "string",
6623 |             "description": "Message",
6624 |             "example": "Added Twitter Account"
6625 |           },
6626 |           "results": {
6627 |             "description": "Requested Results",
6628 |             "allOf": [
6629 |               {
6630 |                 "$ref": "#/components/schemas/SocialMediaTwitterAccountSchema"
6631 |               }
6632 |             ]
6633 |           }
6634 |         },
6635 |         "required": [
6636 |           "success",
6637 |           "statusCode",
6638 |           "message"
6639 |         ]
6640 |       },
6641 |       "UploadCSVDTO": {
6642 |         "type": "object",
6643 |         "properties": {
6644 |           "file": {
6645 |             "type": "string",
6646 |             "format": "binary"
6647 |           }
6648 |         }
6649 |       },
6650 |       "UploadFileResponseSchema": {
6651 |         "type": "object",
6652 |         "properties": {
6653 |           "filePath": {
6654 |             "type": "string",
6655 |             "example": "omaDY3RbWtTP511e/social-import/d23d68c2-82c0-1db6e2.csv"
6656 |           },
6657 |           "rowsCount": {
6658 |             "type": "number",
6659 |             "example": 6
6660 |           },
6661 |           "fileName": {
6662 |             "type": "string",
6663 |             "example": "CSV Import Sample - CSV Import Sample.csv"
6664 |           }
6665 |         }
6666 |       },
6667 |       "UploadFileResponseDTO": {
6668 |         "type": "object",
6669 |         "properties": {
6670 |           "success": {
6671 |             "type": "boolean",
6672 |             "description": "Success or Failure",
6673 |             "example": true
6674 |           },
6675 |           "statusCode": {
6676 |             "type": "number",
6677 |             "description": "Status Code",
6678 |             "example": 201
6679 |           },
6680 |           "message": {
6681 |             "type": "string",
6682 |             "description": "Message",
6683 |             "example": "Uploaded CSV"
6684 |           },
6685 |           "results": {
6686 |             "description": "Requested Results",
6687 |             "allOf": [
6688 |               {
6689 |                 "$ref": "#/components/schemas/UploadFileResponseSchema"
6690 |               }
6691 |             ]
6692 |           }
6693 |         },
6694 |         "required": [
6695 |           "success",
6696 |           "statusCode",
6697 |           "message"
6698 |         ]
6699 |       },
6700 |       "SetAccountsDTO": {
6701 |         "type": "object",
6702 |         "properties": {
6703 |           "accountIds": {
6704 |             "description": "Account Ids",
6705 |             "example": [
6706 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
6707 |             ],
6708 |             "type": "array",
6709 |             "items": {
6710 |               "type": "string"
6711 |             }
6712 |           },
6713 |           "filePath": {
6714 |             "type": "string",
6715 |             "description": "File path",
6716 |             "example": "o6241QsiRwUIJHyjuhos/social-planner-import/a6d04a26-0401-4e52-8f48-dbb274050fab.csv"
6717 |           },
6718 |           "rowsCount": {
6719 |             "type": "number",
6720 |             "description": "Entires Count. rowcCount must be between 1 and number of posts in CSV",
6721 |             "example": 1
6722 |           },
6723 |           "fileName": {
6724 |             "type": "string",
6725 |             "description": "Name of file",
6726 |             "example": "test.csv"
6727 |           },
6728 |           "approver": {
6729 |             "type": "string",
6730 |             "example": "o6241QsiRwUIJHyjuhos"
6731 |           },
6732 |           "userId": {
6733 |             "type": "string",
6734 |             "description": "User ID",
6735 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
6736 |           }
6737 |         },
6738 |         "required": [
6739 |           "accountIds",
6740 |           "filePath",
6741 |           "rowsCount",
6742 |           "fileName"
6743 |         ]
6744 |       },
6745 |       "SetAccountsResponseDTO": {
6746 |         "type": "object",
6747 |         "properties": {
6748 |           "success": {
6749 |             "type": "boolean",
6750 |             "description": "Success or Failure",
6751 |             "example": true
6752 |           },
6753 |           "statusCode": {
6754 |             "type": "number",
6755 |             "description": "Status Code",
6756 |             "example": 201
6757 |           },
6758 |           "message": {
6759 |             "type": "string",
6760 |             "description": "Message",
6761 |             "example": "Accounts Set Successfully"
6762 |           }
6763 |         },
6764 |         "required": [
6765 |           "success",
6766 |           "statusCode",
6767 |           "message"
6768 |         ]
6769 |       },
6770 |       "CSVImportSchema": {
6771 |         "type": "object",
6772 |         "properties": {
6773 |           "_id": {
6774 |             "type": "string",
6775 |             "description": "Csv Id",
6776 |             "example": "ve9EPM428h8vShlRW1KT"
6777 |           },
6778 |           "locationId": {
6779 |             "type": "string",
6780 |             "description": "locationId",
6781 |             "example": "iVrVJ2uoXNF0wzcBzgl5"
6782 |           },
6783 |           "fileName": {
6784 |             "type": "string",
6785 |             "description": "File Name",
6786 |             "example": "sample.csv"
6787 |           },
6788 |           "accountIds": {
6789 |             "description": "Account Ids",
6790 |             "example": [
6791 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
6792 |             ],
6793 |             "type": "array",
6794 |             "items": {
6795 |               "type": "string"
6796 |             }
6797 |           },
6798 |           "file": {
6799 |             "type": "string",
6800 |             "description": "File path",
6801 |             "example": "File"
6802 |           },
6803 |           "status": {
6804 |             "type": "string",
6805 |             "description": "status must be one of the following values: pending, in_progress, completed, failed, in_review, importing, deleted",
6806 |             "example": "completed"
6807 |           },
6808 |           "count": {
6809 |             "type": "number",
6810 |             "description": "Posts count",
6811 |             "example": 5
6812 |           },
6813 |           "createdBy": {
6814 |             "type": "string",
6815 |             "description": "Created By Id",
6816 |             "example": "SDsdfdf45Dgs4w3ssss"
6817 |           },
6818 |           "traceId": {
6819 |             "type": "string",
6820 |             "description": "Trace Id",
6821 |             "example": "FSeSDsdfdf45Dgs4w3ssss"
6822 |           },
6823 |           "originId": {
6824 |             "type": "string",
6825 |             "description": "Origin Id",
6826 |             "example": "FSeSDsdfdf45Dgs4w3ssss"
6827 |           },
6828 |           "approver": {
6829 |             "type": "string",
6830 |             "description": "Approver Id",
6831 |             "example": "FSeSDsdfdf45Dgs4w3ssss"
6832 |           },
6833 |           "createdAt": {
6834 |             "format": "date-time",
6835 |             "type": "string",
6836 |             "description": "Date Created",
6837 |             "example": "2023-08-02T00:00:00.000Z"
6838 |           }
6839 |         },
6840 |         "required": [
6841 |           "_id"
6842 |         ]
6843 |       },
6844 |       "GetUploadStatusResponseSchema": {
6845 |         "type": "object",
6846 |         "properties": {
6847 |           "csvs": {
6848 |             "description": "CSV Data",
6849 |             "allOf": [
6850 |               {
6851 |                 "$ref": "#/components/schemas/CSVImportSchema"
6852 |               }
6853 |             ]
6854 |           },
6855 |           "count": {
6856 |             "type": "number",
6857 |             "example": 6
6858 |           }
6859 |         },
6860 |         "required": [
6861 |           "csvs",
6862 |           "count"
6863 |         ]
6864 |       },
6865 |       "GetUploadStatusResponseDTO": {
6866 |         "type": "object",
6867 |         "properties": {
6868 |           "success": {
6869 |             "type": "boolean",
6870 |             "description": "Success or Failure",
6871 |             "example": true
6872 |           },
6873 |           "statusCode": {
6874 |             "type": "number",
6875 |             "description": "Status Code",
6876 |             "example": 200
6877 |           },
6878 |           "message": {
6879 |             "type": "string",
6880 |             "description": "Message",
6881 |             "example": "Fetched CSV Upload Status"
6882 |           },
6883 |           "results": {
6884 |             "description": "Requested Results",
6885 |             "allOf": [
6886 |               {
6887 |                 "$ref": "#/components/schemas/GetUploadStatusResponseSchema"
6888 |               }
6889 |             ]
6890 |           }
6891 |         },
6892 |         "required": [
6893 |           "success",
6894 |           "statusCode",
6895 |           "message"
6896 |         ]
6897 |       },
6898 |       "OgImageSchema": {
6899 |         "type": "object",
6900 |         "properties": {
6901 |           "url": {
6902 |             "type": "string",
6903 |             "description": "Image url",
6904 |             "example": "https://knowledge.wharton.upenn.edu/wp-content/uploads/2019/07/072619_socialmedia_phonelikes-600x440.jpg"
6905 |           },
6906 |           "width": {
6907 |             "type": "number",
6908 |             "description": "Image width",
6909 |             "example": 400
6910 |           },
6911 |           "height": {
6912 |             "type": "number",
6913 |             "description": "Image height",
6914 |             "example": 400
6915 |           },
6916 |           "type": {
6917 |             "type": "string",
6918 |             "description": "Image Type",
6919 |             "example": "image/jpg"
6920 |           }
6921 |         }
6922 |       },
6923 |       "IOgTagsSchema": {
6924 |         "type": "object",
6925 |         "properties": {
6926 |           "url": {
6927 |             "type": "string",
6928 |             "description": "Tag url",
6929 |             "example": "https://knowledge.wharton.upenn.edu/article/impact-of-social-media/"
6930 |           },
6931 |           "ogDescription": {
6932 |             "type": "string",
6933 |             "description": "Tag description",
6934 |             "example": "Social media as we know it has barely"
6935 |           },
6936 |           "ogImage": {
6937 |             "description": "Tag description",
6938 |             "allOf": [
6939 |               {
6940 |                 "$ref": "#/components/schemas/OgImageSchema"
6941 |               }
6942 |             ]
6943 |           },
6944 |           "ogTitle": {
6945 |             "type": "string",
6946 |             "description": "Tag Title",
6947 |             "example": "The Impact of Social Media: Is it Irreplaceable?"
6948 |           },
6949 |           "ogUrl": {
6950 |             "type": "string",
6951 |             "description": "Tag Url",
6952 |             "example": "https://knowledge.wharton.upenn.edu/article/impact-of-social-media/"
6953 |           },
6954 |           "ogSiteName": {
6955 |             "type": "string",
6956 |             "description": "Site Name",
6957 |             "example": "Knowledge at Wharton"
6958 |           },
6959 |           "error": {
6960 |             "type": "string",
6961 |             "description": "Og Tag Error",
6962 |             "example": "InvalidLink"
6963 |           }
6964 |         }
6965 |       },
6966 |       "CSVMediaResponseSchema": {
6967 |         "type": "object",
6968 |         "properties": {
6969 |           "url": {
6970 |             "type": "string",
6971 |             "description": "Media Url",
6972 |             "example": "https://storage.googleapis.com/ghl-test/omaDY3RbWtTP511e808O/media/38e53059-b92706571605.png"
6973 |           },
6974 |           "type": {
6975 |             "type": "string",
6976 |             "description": "Media Type",
6977 |             "example": "image/webp"
6978 |           },
6979 |           "size": {
6980 |             "type": "number",
6981 |             "description": "Media Size",
6982 |             "example": 18362
6983 |           },
6984 |           "width": {
6985 |             "type": "number",
6986 |             "description": "Media Width",
6987 |             "example": 500
6988 |           },
6989 |           "height": {
6990 |             "type": "number",
6991 |             "description": "Media Height",
6992 |             "example": 500
6993 |           },
6994 |           "aspectRatio": {
6995 |             "type": "number",
6996 |             "description": "Media Aspect Ratio",
6997 |             "example": 1.5
6998 |           },
6999 |           "duration": {
7000 |             "type": "number",
7001 |             "description": "Media Aspect Ratio",
7002 |             "example": 60
7003 |           },
7004 |           "format": {
7005 |             "type": "string",
7006 |             "description": "Media format",
7007 |             "example": "jpg"
7008 |           },
7009 |           "videoCodecName": {
7010 |             "type": "string",
7011 |             "description": "Video Codec",
7012 |             "example": "h264"
7013 |           },
7014 |           "frameRate": {
7015 |             "type": "number",
7016 |             "description": "Video Frame Rate",
7017 |             "example": 21
7018 |           },
7019 |           "audioCodecName": {
7020 |             "type": "string",
7021 |             "description": "Audio Codec",
7022 |             "example": "aac"
7023 |           },
7024 |           "audioChannels": {
7025 |             "type": "number",
7026 |             "description": "Audio Channel",
7027 |             "example": 1
7028 |           },
7029 |           "displayAspectRatio": {
7030 |             "type": "string",
7031 |             "description": "Display Aspect Ratio",
7032 |             "example": "250 : 167"
7033 |           },
7034 |           "frames": {
7035 |             "description": "List of frames",
7036 |             "type": "array",
7037 |             "items": {
7038 |               "type": "string"
7039 |             }
7040 |           },
7041 |           "selectedPoster": {
7042 |             "type": "number",
7043 |             "description": "Selected Poster",
7044 |             "example": 0
7045 |           },
7046 |           "error": {
7047 |             "type": "string",
7048 |             "description": "Error",
7049 |             "example": "Image is larger than 10MB"
7050 |           },
7051 |           "instagramError": {
7052 |             "type": "string",
7053 |             "description": "Instagram media error. It can we one of the following errors: imageSize, imageType, imageAspectRatio, videoType, videoDuration, videoSize, videoAspectRatio, videoWidthHeight, audioCodec, audioCodecChannels, videoCodec, videoFrameRate",
7054 |             "example": "imageSize"
7055 |           },
7056 |           "gmbError": {
7057 |             "type": "string",
7058 |             "description": "GMB media error. It can be one of the following errors: imageSize, imageDimension, imageType",
7059 |             "example": "imageDimension"
7060 |           },
7061 |           "facebookError": {
7062 |             "type": "string",
7063 |             "description": "Facebook media error. It can be one of the following errors: imageSize, imageType, videoDuration, videoSize",
7064 |             "example": "videoDuration"
7065 |           },
7066 |           "linkedinError": {
7067 |             "type": "string",
7068 |             "description": "LinkedIn media error. It can be one of the following errors: imageSize, imageType, videoType, videoDuration, videoSize",
7069 |             "example": "imageType"
7070 |           },
7071 |           "twitterError": {
7072 |             "type": "string",
7073 |             "description": "Twitter media error. It can be one of the following errors: imageSize, videoType, videoDuration, videoSize",
7074 |             "example": "videoSize"
7075 |           },
7076 |           "tiktokError": {
7077 |             "type": "string",
7078 |             "description": "Tiktok media error. It can be one of the following errors: videoType, videoDuration, videoSize, videoWidthHeight, videoCodec, videoFrameRate",
7079 |             "example": "videoFrameRate"
7080 |           },
7081 |           "tiktokBusinessError": {
7082 |             "type": "string",
7083 |             "description": "Tikok Business media error. It can be one of the following errors: videoType, videoDuration, videoSize, videoWidthHeight, videoCodec, videoFrameRate",
7084 |             "example": "videoType"
7085 |           },
7086 |           "invalidError": {
7087 |             "type": "string",
7088 |             "description": "Media error. It can be one of the following values: imageSize, imageWidth",
7089 |             "example": "imageSize"
7090 |           }
7091 |         }
7092 |       },
7093 |       "CSVPostSchema": {
7094 |         "type": "object",
7095 |         "properties": {
7096 |           "accountIds": {
7097 |             "description": "Account Ids",
7098 |             "example": [
7099 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
7100 |             ],
7101 |             "type": "array",
7102 |             "items": {
7103 |               "type": "string"
7104 |             }
7105 |           },
7106 |           "link": {
7107 |             "description": "OG Tag",
7108 |             "allOf": [
7109 |               {
7110 |                 "$ref": "#/components/schemas/IOgTagsSchema"
7111 |               }
7112 |             ]
7113 |           },
7114 |           "medias": {
7115 |             "description": "Post Media List",
7116 |             "type": "array",
7117 |             "items": {
7118 |               "$ref": "#/components/schemas/CSVMediaResponseSchema"
7119 |             }
7120 |           },
7121 |           "scheduleDate": {
7122 |             "type": "string",
7123 |             "example": "2022-11-23T05:53:00.000Z"
7124 |           },
7125 |           "summary": {
7126 |             "type": "string",
7127 |             "example": "First post"
7128 |           },
7129 |           "followUpComment": {
7130 |             "type": "string",
7131 |             "example": "Initial Comment"
7132 |           },
7133 |           "type": {
7134 |             "type": "object",
7135 |             "example": "post"
7136 |           },
7137 |           "tiktokPostDetails": {
7138 |             "description": "Tiktok Post Details",
7139 |             "allOf": [
7140 |               {
7141 |                 "$ref": "#/components/schemas/TiktokPostSchema"
7142 |               }
7143 |             ]
7144 |           },
7145 |           "gmbPostDetails": {
7146 |             "description": "GMB Post Details",
7147 |             "allOf": [
7148 |               {
7149 |                 "$ref": "#/components/schemas/GMBPostSchema"
7150 |               }
7151 |             ]
7152 |           },
7153 |           "errorMessage": {
7154 |             "type": "string",
7155 |             "description": "Error Description"
7156 |           }
7157 |         }
7158 |       },
7159 |       "GetCsvPostResponseSchema": {
7160 |         "type": "object",
7161 |         "properties": {
7162 |           "csv": {
7163 |             "description": "CSV Data",
7164 |             "allOf": [
7165 |               {
7166 |                 "$ref": "#/components/schemas/CSVImportSchema"
7167 |               }
7168 |             ]
7169 |           },
7170 |           "count": {
7171 |             "type": "number",
7172 |             "example": 6
7173 |           },
7174 |           "posts": {
7175 |             "description": "CSV Posts",
7176 |             "type": "array",
7177 |             "items": {
7178 |               "$ref": "#/components/schemas/CSVPostSchema"
7179 |             }
7180 |           }
7181 |         }
7182 |       },
7183 |       "GetCsvPostResponseDTO": {
7184 |         "type": "object",
7185 |         "properties": {
7186 |           "success": {
7187 |             "type": "boolean",
7188 |             "description": "Success or Failure",
7189 |             "example": true
7190 |           },
7191 |           "statusCode": {
7192 |             "type": "number",
7193 |             "description": "Status Code",
7194 |             "example": 200
7195 |           },
7196 |           "message": {
7197 |             "type": "string",
7198 |             "description": "Message",
7199 |             "example": "Fetched CSV Post"
7200 |           },
7201 |           "results": {
7202 |             "description": "Requested Results",
7203 |             "allOf": [
7204 |               {
7205 |                 "$ref": "#/components/schemas/GetCsvPostResponseSchema"
7206 |               }
7207 |             ]
7208 |           }
7209 |         },
7210 |         "required": [
7211 |           "success",
7212 |           "statusCode",
7213 |           "message"
7214 |         ]
7215 |       },
7216 |       "CSVDefaultDTO": {
7217 |         "type": "object",
7218 |         "properties": {
7219 |           "userId": {
7220 |             "type": "string",
7221 |             "description": "User ID",
7222 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
7223 |           }
7224 |         }
7225 |       },
7226 |       "CsvPostStatusResponseDTO": {
7227 |         "type": "object",
7228 |         "properties": {
7229 |           "success": {
7230 |             "type": "boolean",
7231 |             "description": "Success or Failure",
7232 |             "example": true
7233 |           },
7234 |           "statusCode": {
7235 |             "type": "number",
7236 |             "description": "Status Code",
7237 |             "example": 200
7238 |           },
7239 |           "message": {
7240 |             "type": "string",
7241 |             "description": "Message",
7242 |             "example": "Updated Successfully"
7243 |           }
7244 |         },
7245 |         "required": [
7246 |           "success",
7247 |           "statusCode",
7248 |           "message"
7249 |         ]
7250 |       },
7251 |       "CsvResponse": {
7252 |         "type": "object",
7253 |         "properties": {
7254 |           "locationId": {
7255 |             "type": "string",
7256 |             "example": "Location Name"
7257 |           },
7258 |           "fileName": {
7259 |             "type": "string",
7260 |             "example": "File Name"
7261 |           },
7262 |           "accountIds": {
7263 |             "description": "Account Ids",
7264 |             "example": [
7265 |               "aF3KhyL8JIuBwzK3m7Ly_iVrVJ2uoXNF0wzcBzgl5_12554616564525983496"
7266 |             ],
7267 |             "type": "array",
7268 |             "items": {
7269 |               "type": "string"
7270 |             }
7271 |           },
7272 |           "file": {
7273 |             "type": "string",
7274 |             "example": "File"
7275 |           },
7276 |           "status": {
7277 |             "type": "object",
7278 |             "description": "status must be one of the following values: pending, in_progress, completed, failed, in_review, importing, deleted",
7279 |             "example": "completed"
7280 |           },
7281 |           "count": {
7282 |             "type": "number",
7283 |             "example": 5
7284 |           },
7285 |           "createdBy": {
7286 |             "type": "string",
7287 |             "example": "AccountId_SDsdfdf45Dgs4w3ssss"
7288 |           },
7289 |           "traceId": {
7290 |             "type": "string",
7291 |             "example": "FSeSDsdfdf45Dgs4w3ssss"
7292 |           },
7293 |           "originId": {
7294 |             "type": "string",
7295 |             "example": "FSeSDsdfdf45Dgs4w3ssss"
7296 |           },
7297 |           "approver": {
7298 |             "type": "string",
7299 |             "example": "FSeSDsdfdf45Dgs4w3ssss"
7300 |           }
7301 |         }
7302 |       },
7303 |       "CSVResponseSchema": {
7304 |         "type": "object",
7305 |         "properties": {
7306 |           "csv": {
7307 |             "description": "CSV Data",
7308 |             "allOf": [
7309 |               {
7310 |                 "$ref": "#/components/schemas/CsvResponse"
7311 |               }
7312 |             ]
7313 |           }
7314 |         }
7315 |       },
7316 |       "DeleteCsvResponseDTO": {
7317 |         "type": "object",
7318 |         "properties": {
7319 |           "success": {
7320 |             "type": "boolean",
7321 |             "description": "Success or Failure",
7322 |             "example": true
7323 |           },
7324 |           "statusCode": {
7325 |             "type": "number",
7326 |             "description": "Status Code",
7327 |             "example": 200
7328 |           },
7329 |           "message": {
7330 |             "type": "string",
7331 |             "description": "Message",
7332 |             "example": "Deleted Post"
7333 |           },
7334 |           "results": {
7335 |             "description": "Requested Results",
7336 |             "allOf": [
7337 |               {
7338 |                 "$ref": "#/components/schemas/CSVResponseSchema"
7339 |               }
7340 |             ]
7341 |           }
7342 |         },
7343 |         "required": [
7344 |           "success",
7345 |           "statusCode",
7346 |           "message"
7347 |         ]
7348 |       },
7349 |       "DeletePostResponseSchema": {
7350 |         "type": "object",
7351 |         "properties": {
7352 |           "postId": {
7353 |             "type": "string",
7354 |             "description": "Post Id"
7355 |           }
7356 |         },
7357 |         "required": [
7358 |           "postId"
7359 |         ]
7360 |       },
7361 |       "DeletePostResponseDTO": {
7362 |         "type": "object",
7363 |         "properties": {
7364 |           "success": {
7365 |             "type": "boolean",
7366 |             "description": "Success or Failure",
7367 |             "example": true
7368 |           },
7369 |           "statusCode": {
7370 |             "type": "number",
7371 |             "description": "Status Code",
7372 |             "example": 200
7373 |           },
7374 |           "message": {
7375 |             "type": "string",
7376 |             "description": "Message",
7377 |             "example": "Deleted Post"
7378 |           },
7379 |           "results": {
7380 |             "description": "Requested Results",
7381 |             "allOf": [
7382 |               {
7383 |                 "$ref": "#/components/schemas/DeletePostResponseSchema"
7384 |               }
7385 |             ]
7386 |           }
7387 |         },
7388 |         "required": [
7389 |           "success",
7390 |           "statusCode",
7391 |           "message"
7392 |         ]
7393 |       },
7394 |       "TiktokProfileSchema": {
7395 |         "type": "object",
7396 |         "properties": {
7397 |           "id": {
7398 |             "type": "string",
7399 |             "description": "Id",
7400 |             "example": "w37swmmLbA02zgqKPpxITe"
7401 |           },
7402 |           "name": {
7403 |             "type": "string",
7404 |             "description": "Name of account",
7405 |             "example": "Account Name"
7406 |           },
7407 |           "username": {
7408 |             "type": "string",
7409 |             "description": "Username of account",
7410 |             "example": "User_name"
7411 |           },
7412 |           "avatar": {
7413 |             "type": "string",
7414 |             "description": "Avatar of profile account",
7415 |             "example": "w37swmmLbA02zgqKPpxITe"
7416 |           },
7417 |           "verified": {
7418 |             "type": "boolean",
7419 |             "description": "Is verified",
7420 |             "example": true
7421 |           },
7422 |           "isConnected": {
7423 |             "type": "boolean",
7424 |             "description": "Is connected",
7425 |             "example": true
7426 |           },
7427 |           "type": {
7428 |             "type": "object",
7429 |             "description": "Tiktok Account Type must be one of the following values: business, profile",
7430 |             "example": "BUSINESS"
7431 |           }
7432 |         }
7433 |       },
7434 |       "GetTiktokAccountSchema": {
7435 |         "type": "object",
7436 |         "properties": {
7437 |           "profile": {
7438 |             "description": "Tiktok Business Account",
7439 |             "type": "array",
7440 |             "items": {
7441 |               "$ref": "#/components/schemas/TiktokProfileSchema"
7442 |             }
7443 |           }
7444 |         }
7445 |       },
7446 |       "GetTiktokAccountResponseDTO": {
7447 |         "type": "object",
7448 |         "properties": {
7449 |           "success": {
7450 |             "type": "boolean",
7451 |             "description": "Success or Failure",
7452 |             "example": true
7453 |           },
7454 |           "statusCode": {
7455 |             "type": "number",
7456 |             "description": "Status Code",
7457 |             "example": 200
7458 |           },
7459 |           "message": {
7460 |             "type": "string",
7461 |             "description": "Message",
7462 |             "example": "Fetched Tiktok Account"
7463 |           },
7464 |           "results": {
7465 |             "description": "Requested Results",
7466 |             "allOf": [
7467 |               {
7468 |                 "$ref": "#/components/schemas/GetTiktokAccountSchema"
7469 |               }
7470 |             ]
7471 |           }
7472 |         },
7473 |         "required": [
7474 |           "success",
7475 |           "statusCode",
7476 |           "message"
7477 |         ]
7478 |       },
7479 |       "AttachTiktokAccountDTO": {
7480 |         "type": "object",
7481 |         "properties": {
7482 |           "type": {
7483 |             "type": "string",
7484 |             "enum": [
7485 |               "page",
7486 |               "group",
7487 |               "profile",
7488 |               "location",
7489 |               "business"
7490 |             ]
7491 |           },
7492 |           "originId": {
7493 |             "type": "string",
7494 |             "example": "244405****11687"
7495 |           },
7496 |           "name": {
7497 |             "type": "string",
7498 |             "example": "JOHN_DEO"
7499 |           },
7500 |           "avatar": {
7501 |             "type": "string"
7502 |           },
7503 |           "verified": {
7504 |             "type": "boolean",
7505 |             "example": true
7506 |           },
7507 |           "username": {
7508 |             "type": "string",
7509 |             "example": "JOHN_DEO"
7510 |           },
7511 |           "companyId": {
7512 |             "type": "string",
7513 |             "description": "Company ID",
7514 |             "example": "sdfdsfdsfEWEsdfsdsW32dd"
7515 |           }
7516 |         }
7517 |       },
7518 |       "SocialMediaTiktokAccountSchema": {
7519 |         "type": "object",
7520 |         "properties": {
7521 |           "_id": {
7522 |             "type": "string",
7523 |             "example": "65f2d989a4f2f1e5322c3856"
7524 |           },
7525 |           "oAuthId": {
7526 |             "type": "string",
7527 |             "example": "u37swmmLbA02zgqKPpxITe2"
7528 |           },
7529 |           "oldId": {
7530 |             "type": "string",
7531 |             "example": "u37swmmLbA02zgqKPpxITe2"
7532 |           },
7533 |           "locationId": {
7534 |             "type": "string",
7535 |             "example": "u37swmmLbA02zgqKPpxITe2"
7536 |           },
7537 |           "originId": {
7538 |             "type": "string",
7539 |             "example": "u37swmmLbA02zgqKPpxITe2"
7540 |           },
7541 |           "platform": {
7542 |             "type": "object",
7543 |             "example": "tiktok"
7544 |           },
7545 |           "type": {
7546 |             "type": "object",
7547 |             "description": "type must be one of the following values: profile, business",
7548 |             "example": "profile"
7549 |           },
7550 |           "name": {
7551 |             "type": "string",
7552 |             "example": "Account Name"
7553 |           },
7554 |           "avatar": {
7555 |             "type": "string",
7556 |             "example": "u37swmmLbA02zgqKPpxITe2"
7557 |           },
7558 |           "meta": {
7559 |             "type": "object",
7560 |             "example": {
7561 |               "pageId": "u37swmmLbA02zgqKPpxITe2",
7562 |               "page": {
7563 |                 "id": "u37swmmLbA02zgqKPpxITe2",
7564 |                 "name": "Account Name",
7565 |                 "avatar": "u37swmmLbA02zgqKPpxITe2"
7566 |               },
7567 |               "storeCode": "122",
7568 |               "isVerified": "true",
7569 |               "verified": true,
7570 |               "protected": true,
7571 |               "locationId": "u37swmmLbA02zgqKPpxITe2",
7572 |               "accountId": "u37swmmLbA02zgqKPpxITe2",
7573 |               "openId": "u37swmmLbA02zgqKPpxITe2",
7574 |               "urn": "u37swmmLbA02zgqKPpxITe2",
7575 |               "username": "testUser",
7576 |               "storefrontAddress": {
7577 |                 "regionCode": "30021",
7578 |                 "languageCode": "E001",
7579 |                 "postalCode": "1221",
7580 |                 "administrativeArea": "Down Town",
7581 |                 "locality": "Louis Street",
7582 |                 "addressLines": [
7583 |                   "207",
7584 |                   "county"
7585 |                 ]
7586 |               }
7587 |             }
7588 |           },
7589 |           "active": {
7590 |             "type": "boolean",
7591 |             "example": true
7592 |           },
7593 |           "deleted": {
7594 |             "type": "boolean",
7595 |             "example": true
7596 |           },
7597 |           "createdAt": {
7598 |             "format": "date-time",
7599 |             "type": "string",
7600 |             "description": "created date",
7601 |             "example": "2024-03-14T11:03:37.015Z"
7602 |           },
7603 |           "updatedAt": {
7604 |             "format": "date-time",
7605 |             "type": "string",
7606 |             "description": "updated date",
7607 |             "example": "2024-03-14T11:03:37.015Z"
7608 |           }
7609 |         }
7610 |       },
7611 |       "SocialMediaTiktokAccountResponseDTO": {
7612 |         "type": "object",
7613 |         "properties": {
7614 |           "success": {
7615 |             "type": "boolean",
7616 |             "description": "Success or Failure",
7617 |             "example": true
7618 |           },
7619 |           "statusCode": {
7620 |             "type": "number",
7621 |             "description": "Status Code",
7622 |             "example": 201
7623 |           },
7624 |           "message": {
7625 |             "type": "string",
7626 |             "description": "Message",
7627 |             "example": "Added Tiktok Account"
7628 |           },
7629 |           "results": {
7630 |             "description": "Requested Results",
7631 |             "allOf": [
7632 |               {
7633 |                 "$ref": "#/components/schemas/SocialMediaTiktokAccountSchema"
7634 |               }
7635 |             ]
7636 |           }
7637 |         },
7638 |         "required": [
7639 |           "success",
7640 |           "statusCode",
7641 |           "message"
7642 |         ]
7643 |       },
7644 |       "GetTiktokBusinessAccountSchema": {
7645 |         "type": "object",
7646 |         "properties": {
7647 |           "profile": {
7648 |             "description": "Tiktok Profile",
7649 |             "type": "array",
7650 |             "items": {
7651 |               "$ref": "#/components/schemas/TiktokProfileSchema"
7652 |             }
7653 |           }
7654 |         }
7655 |       },
7656 |       "GetTiktokBusinessAccountResponseDTO": {
7657 |         "type": "object",
7658 |         "properties": {
7659 |           "success": {
7660 |             "type": "boolean",
7661 |             "description": "Success or Failure",
7662 |             "example": true
7663 |           },
7664 |           "statusCode": {
7665 |             "type": "number",
7666 |             "description": "Status Code",
7667 |             "example": 201
7668 |           },
7669 |           "message": {
7670 |             "type": "string",
7671 |             "description": "Message",
7672 |             "example": "Fetched Tiktok Business Account"
7673 |           },
7674 |           "results": {
7675 |             "description": "Requested Results",
7676 |             "allOf": [
7677 |               {
7678 |                 "$ref": "#/components/schemas/GetTiktokBusinessAccountSchema"
7679 |               }
7680 |             ]
7681 |           }
7682 |         },
7683 |         "required": [
7684 |           "success",
7685 |           "statusCode",
7686 |           "message"
7687 |         ]
7688 |       },
7689 |       "CategorySchema": {
7690 |         "type": "object",
7691 |         "properties": {
7692 |           "name": {
7693 |             "type": "string",
7694 |             "description": "Category Name",
7695 |             "example": "Primary"
7696 |           },
7697 |           "primaryColor": {
7698 |             "type": "string",
7699 |             "description": "Color For Category",
7700 |             "example": "#FFFFFF"
7701 |           },
7702 |           "secondaryColor": {
7703 |             "type": "string",
7704 |             "description": "Secondary Color",
7705 |             "example": "#FFFFFF"
7706 |           },
7707 |           "locationId": {
7708 |             "type": "string",
7709 |             "description": "Location ID",
7710 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7711 |           },
7712 |           "_id": {
7713 |             "type": "string",
7714 |             "description": "ID",
7715 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7716 |           },
7717 |           "createdBy": {
7718 |             "type": "string",
7719 |             "description": "Created By User",
7720 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7721 |           },
7722 |           "deleted": {
7723 |             "type": "boolean",
7724 |             "description": "Deleted Value",
7725 |             "example": false
7726 |           },
7727 |           "createdAt": {
7728 |             "format": "date-time",
7729 |             "type": "string",
7730 |             "example": "2023-08-02T00:00:00.000Z"
7731 |           },
7732 |           "updatedAt": {
7733 |             "format": "date-time",
7734 |             "type": "string",
7735 |             "example": "2023-08-02T00:00:00.000Z"
7736 |           }
7737 |         },
7738 |         "required": [
7739 |           "deleted"
7740 |         ]
7741 |       },
7742 |       "GetByLocationIdResponseSchema": {
7743 |         "type": "object",
7744 |         "properties": {
7745 |           "count": {
7746 |             "type": "number",
7747 |             "description": "Count",
7748 |             "example": 3
7749 |           },
7750 |           "categories": {
7751 |             "description": "Meta Data",
7752 |             "type": "array",
7753 |             "items": {
7754 |               "$ref": "#/components/schemas/CategorySchema"
7755 |             }
7756 |           }
7757 |         },
7758 |         "required": [
7759 |           "count",
7760 |           "categories"
7761 |         ]
7762 |       },
7763 |       "GetByLocationIdResponseDTO": {
7764 |         "type": "object",
7765 |         "properties": {
7766 |           "success": {
7767 |             "type": "boolean",
7768 |             "description": "Success or Failure",
7769 |             "example": true
7770 |           },
7771 |           "statusCode": {
7772 |             "type": "number",
7773 |             "description": "Status Code",
7774 |             "example": 200
7775 |           },
7776 |           "message": {
7777 |             "type": "string",
7778 |             "description": "Message",
7779 |             "example": "Fetched Categories by Location ID"
7780 |           },
7781 |           "results": {
7782 |             "description": "Requested Results",
7783 |             "allOf": [
7784 |               {
7785 |                 "$ref": "#/components/schemas/GetByLocationIdResponseSchema"
7786 |               }
7787 |             ]
7788 |           }
7789 |         },
7790 |         "required": [
7791 |           "success",
7792 |           "statusCode",
7793 |           "message"
7794 |         ]
7795 |       },
7796 |       "GetByIdResponseSchema": {
7797 |         "type": "object",
7798 |         "properties": {
7799 |           "name": {
7800 |             "type": "string",
7801 |             "description": "Category Name",
7802 |             "example": "Primary"
7803 |           },
7804 |           "primaryColor": {
7805 |             "type": "string",
7806 |             "description": "Color For Category",
7807 |             "example": "#32a852"
7808 |           },
7809 |           "secondaryColor": {
7810 |             "type": "string",
7811 |             "description": "Secondary Color",
7812 |             "example": "#32a852"
7813 |           },
7814 |           "locationId": {
7815 |             "type": "string",
7816 |             "description": "Location ID",
7817 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7818 |           },
7819 |           "_id": {
7820 |             "type": "string",
7821 |             "description": "ID",
7822 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7823 |           },
7824 |           "createdBy": {
7825 |             "type": "string",
7826 |             "description": "Created By User",
7827 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7828 |           },
7829 |           "deleted": {
7830 |             "type": "boolean",
7831 |             "description": "Deleted Value",
7832 |             "example": false
7833 |           },
7834 |           "message": {
7835 |             "type": "string",
7836 |             "description": "Message",
7837 |             "example": "Category not found"
7838 |           },
7839 |           "createdAt": {
7840 |             "format": "date-time",
7841 |             "type": "string",
7842 |             "example": "2023-08-02T00:00:00.000Z"
7843 |           },
7844 |           "updatedAt": {
7845 |             "format": "date-time",
7846 |             "type": "string",
7847 |             "example": "2023-08-02T00:00:00.000Z"
7848 |           }
7849 |         },
7850 |         "required": [
7851 |           "deleted"
7852 |         ]
7853 |       },
7854 |       "GetCategorySchema": {
7855 |         "type": "object",
7856 |         "properties": {
7857 |           "category": {
7858 |             "description": "Category Schema",
7859 |             "allOf": [
7860 |               {
7861 |                 "$ref": "#/components/schemas/GetByIdResponseSchema"
7862 |               }
7863 |             ]
7864 |           }
7865 |         }
7866 |       },
7867 |       "GetByIdResponseDTO": {
7868 |         "type": "object",
7869 |         "properties": {
7870 |           "success": {
7871 |             "type": "boolean",
7872 |             "description": "Success or Failure",
7873 |             "example": true
7874 |           },
7875 |           "statusCode": {
7876 |             "type": "number",
7877 |             "description": "Status Code",
7878 |             "example": 200
7879 |           },
7880 |           "message": {
7881 |             "type": "string",
7882 |             "description": "Message",
7883 |             "example": "Fetched Category"
7884 |           },
7885 |           "results": {
7886 |             "description": "Requested Results",
7887 |             "allOf": [
7888 |               {
7889 |                 "$ref": "#/components/schemas/GetCategorySchema"
7890 |               }
7891 |             ]
7892 |           }
7893 |         },
7894 |         "required": [
7895 |           "success",
7896 |           "statusCode",
7897 |           "message"
7898 |         ]
7899 |       },
7900 |       "SocialMediaTagSchema": {
7901 |         "type": "object",
7902 |         "properties": {
7903 |           "tag": {
7904 |             "type": "string",
7905 |             "description": "Tag Name",
7906 |             "example": "Primary Tag"
7907 |           },
7908 |           "locationId": {
7909 |             "type": "string",
7910 |             "description": "Location Id",
7911 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7912 |           },
7913 |           "_id": {
7914 |             "type": "string",
7915 |             "description": "ID",
7916 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7917 |           },
7918 |           "createdBy": {
7919 |             "type": "string",
7920 |             "description": "Created By User Id",
7921 |             "example": "Lx1EI6YIgQYMQi0ytFXv"
7922 |           },
7923 |           "deleted": {
7924 |             "type": "boolean",
7925 |             "description": "Deleted boolean value",
7926 |             "example": false
7927 |           },
7928 |           "createdAt": {
7929 |             "format": "date-time",
7930 |             "type": "string",
7931 |             "example": "2023-08-02T00:00:00.000Z"
7932 |           },
7933 |           "updatedAt": {
7934 |             "format": "date-time",
7935 |             "type": "string",
7936 |             "example": "2023-08-02T00:00:00.000Z"
7937 |           }
7938 |         }
7939 |       },
7940 |       "GetTagsByLocationIdResponseSchema": {
7941 |         "type": "object",
7942 |         "properties": {
7943 |           "tags": {
7944 |             "description": "Tags Data",
7945 |             "type": "array",
7946 |             "items": {
7947 |               "$ref": "#/components/schemas/SocialMediaTagSchema"
7948 |             }
7949 |           },
7950 |           "count": {
7951 |             "type": "number",
7952 |             "description": "Count",
7953 |             "example": 3
7954 |           }
7955 |         }
7956 |       },
7957 |       "GetTagsByLocationIdResponseDTO": {
7958 |         "type": "object",
7959 |         "properties": {
7960 |           "success": {
7961 |             "type": "boolean",
7962 |             "description": "Success or Failure",
7963 |             "example": true
7964 |           },
7965 |           "statusCode": {
7966 |             "type": "number",
7967 |             "description": "Status Code",
7968 |             "example": 200
7969 |           },
7970 |           "message": {
7971 |             "type": "string",
7972 |             "description": "Message",
7973 |             "example": "Fetched Tags by Location ID"
7974 |           },
7975 |           "results": {
7976 |             "description": "Requested Results",
7977 |             "allOf": [
7978 |               {
7979 |                 "$ref": "#/components/schemas/GetTagsByLocationIdResponseSchema"
7980 |               }
7981 |             ]
7982 |           }
7983 |         },
7984 |         "required": [
7985 |           "success",
7986 |           "statusCode",
7987 |           "message"
7988 |         ]
7989 |       },
7990 |       "UpdateTagDTO": {
7991 |         "type": "object",
7992 |         "properties": {
7993 |           "tagIds": {
7994 |             "description": "Array of Tag Ids",
7995 |             "example": [
7996 |               "65fbdcfecc884f07e645ea8b"
7997 |             ],
7998 |             "type": "array",
7999 |             "items": {
8000 |               "type": "string"
8001 |             }
8002 |           }
8003 |         },
8004 |         "required": [
8005 |           "tagIds"
8006 |         ]
8007 |       },
8008 |       "GetTagsByIdResponseSchema": {
8009 |         "type": "object",
8010 |         "properties": {
8011 |           "tags": {
8012 |             "description": "Social Media Tag Data",
8013 |             "type": "array",
8014 |             "items": {
8015 |               "$ref": "#/components/schemas/SocialMediaTagSchema"
8016 |             }
8017 |           },
8018 |           "count": {
8019 |             "type": "number",
8020 |             "description": "Count",
8021 |             "example": 3
8022 |           }
8023 |         },
8024 |         "required": [
8025 |           "tags"
8026 |         ]
8027 |       },
8028 |       "GetTagsByIdResponseDTO": {
8029 |         "type": "object",
8030 |         "properties": {
8031 |           "success": {
8032 |             "type": "boolean",
8033 |             "description": "Success or Failure",
8034 |             "example": true
8035 |           },
8036 |           "statusCode": {
8037 |             "type": "number",
8038 |             "description": "Status Code",
8039 |             "example": 201
8040 |           },
8041 |           "message": {
8042 |             "type": "string",
8043 |             "description": "Message",
8044 |             "example": "Fetched Tags by Tag IDs"
8045 |           },
8046 |           "results": {
8047 |             "description": "Requested Results",
8048 |             "allOf": [
8049 |               {
8050 |                 "$ref": "#/components/schemas/GetTagsByIdResponseSchema"
8051 |               }
8052 |             ]
8053 |           }
8054 |         },
8055 |         "required": [
8056 |           "success",
8057 |           "statusCode",
8058 |           "message"
8059 |         ]
8060 |       },
8061 |       "DeletePostsDto": {
8062 |         "type": "object",
8063 |         "properties": {
8064 |           "postIds": {
8065 |             "description": "Requested Results",
8066 |             "example":  ["662791ee3f216822d7da0c8c"],
8067 |             "type": "array",
8068 |             "items": {
8069 |               "type": "string"
8070 |             }
8071 |           }
8072 |         }
8073 |       },
8074 |       "BulkDeletePostSuccessfulResponseSchema": {
8075 |         "type": "object",
8076 |         "properties": {
8077 |           "deletedCount": {
8078 |             "type": "number"
8079 |           }
8080 |         }
8081 |       },
8082 |       "BulkDeleteResponseDto": {
8083 |         "type": "object",
8084 |         "properties": {
8085 |           "success": {
8086 |             "type": "boolean",
8087 |             "description": "Success or Failure",
8088 |             "example": true
8089 |           },
8090 |           "statusCode": {
8091 |             "type": "number",
8092 |             "description": "Status Code",
8093 |             "example": 201
8094 |           },
8095 |           "message": {
8096 |             "type": "string",
8097 |             "description": "Message",
8098 |             "example": "Posts Deleted Successfully"
8099 |           },
8100 |           "results": {
8101 |             "description": "Message and deleted count",
8102 |             "example": { 
8103 |               "message": "Posts deleted successfully",
8104 |               "deletedCount": 10
8105 |             }
8106 |           }
8107 |         },
8108 |         "required": [
8109 |           "success",
8110 |           "statusCode",
8111 |           "message",
8112 |           "results"
8113 |         ]
8114 |       }
8115 |     }
8116 |   }
8117 | }


--------------------------------------------------------------------------------
/surveys/surveys.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/surveys/submissions": {
  5 |       "get": {
  6 |         "operationId": "get-surveys-submissions",
  7 |         "summary": "Get Surveys Submissions",
  8 |         "description": "Get Surveys Submissions",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Access Token"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "locationId",
 34 |             "required": true,
 35 |             "in": "query",
 36 |             "example": "ve9EPM428h8vShlRW1KT",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           },
 41 |           {
 42 |             "name": "page",
 43 |             "required": false,
 44 |             "in": "query",
 45 |             "example": 1,
 46 |             "description": "Page No. By default it will be 1",
 47 |             "schema": {
 48 |               "default": 1,
 49 |               "type": "number"
 50 |             }
 51 |           },
 52 |           {
 53 |             "name": "limit",
 54 |             "required": false,
 55 |             "in": "query",
 56 |             "example": 20,
 57 |             "description": "Limit Per Page records count. will allow maximum up to 100 and default will be 20",
 58 |             "schema": {
 59 |               "default": 20,
 60 |               "type": "number"
 61 |             }
 62 |           },
 63 |           {
 64 |             "name": "surveyId",
 65 |             "required": false,
 66 |             "in": "query",
 67 |             "example": "jjusM6EOngDExnbo2DbU",
 68 |             "description": "Filter submission by survey id",
 69 |             "schema": {
 70 |               "type": "string"
 71 |             }
 72 |           },
 73 |           {
 74 |             "name": "q",
 75 |             "required": false,
 76 |             "in": "query",
 77 |             "example": "john@deo.com",
 78 |             "description": "Filter by contactId, name, email or phone no.",
 79 |             "schema": {
 80 |               "type": "string"
 81 |             }
 82 |           },
 83 |           {
 84 |             "name": "startAt",
 85 |             "required": false,
 86 |             "in": "query",
 87 |             "example": "2020-11-14",
 88 |             "description": "Get submission by starting of this date. By default it will be same date of last month(YYYY-MM-DD).",
 89 |             "schema": {
 90 |               "type": "string"
 91 |             }
 92 |           },
 93 |           {
 94 |             "name": "endAt",
 95 |             "required": false,
 96 |             "in": "query",
 97 |             "example": "2020-12-14",
 98 |             "description": "Get submission by ending of this date. By default it will be current date(YYYY-MM-DD).",
 99 |             "schema": {
100 |               "type": "string"
101 |             }
102 |           }
103 |         ],
104 |         "responses": {
105 |           "200": {
106 |             "description": "Successful response",
107 |             "content": {
108 |               "application/json": {
109 |                 "schema": {
110 |                   "$ref": "#/components/schemas/GetSurveysSubmissionSuccessfulResponseDto"
111 |                 }
112 |               }
113 |             }
114 |           },
115 |           "400": {
116 |             "description": "Bad Request",
117 |             "content": {
118 |               "application/json": {
119 |                 "schema": {
120 |                   "$ref": "#/components/schemas/BadRequestDTO"
121 |                 }
122 |               }
123 |             }
124 |           },
125 |           "401": {
126 |             "description": "Unauthorized",
127 |             "content": {
128 |               "application/json": {
129 |                 "schema": {
130 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
131 |                 }
132 |               }
133 |             }
134 |           },
135 |           "422": {
136 |             "description": "Unprocessable Entity",
137 |             "content": {
138 |               "application/json": {
139 |                 "schema": {
140 |                   "$ref": "#/components/schemas/UnprocessableDTO"
141 |                 }
142 |               }
143 |             }
144 |           }
145 |         },
146 |         "tags": [
147 |           "Surveys"
148 |         ],
149 |         "security": [
150 |           {
151 |             "bearer": []
152 |           }
153 |         ]
154 |       }
155 |     },
156 |     "/surveys/": {
157 |       "get": {
158 |         "operationId": "get-surveys",
159 |         "summary": "Get Surveys",
160 |         "description": "Get Surveys",
161 |         "parameters": [
162 |           {
163 |             "name": "Authorization",
164 |             "in": "header",
165 |             "description": "Access Token",
166 |             "required": true,
167 |             "schema": {
168 |               "type": "string",
169 |               "example": "Access Token"
170 |             }
171 |           },
172 |           {
173 |             "name": "Version",
174 |             "in": "header",
175 |             "description": "API Version",
176 |             "required": true,
177 |             "schema": {
178 |               "type": "string",
179 |               "enum": [
180 |                 "2021-07-28"
181 |               ]
182 |             }
183 |           },
184 |           {
185 |             "name": "locationId",
186 |             "required": true,
187 |             "in": "query",
188 |             "example": "ve9EPM428h8vShlRW1KT",
189 |             "schema": {
190 |               "type": "string"
191 |             }
192 |           },
193 |           {
194 |             "name": "skip",
195 |             "required": false,
196 |             "in": "query",
197 |             "example": 0,
198 |             "schema": {
199 |               "type": "number"
200 |             }
201 |           },
202 |           {
203 |             "name": "limit",
204 |             "required": false,
205 |             "in": "query",
206 |             "example": 20,
207 |             "description": "Limit Per Page records count. will allow maximum up to 50 and default will be 10",
208 |             "schema": {
209 |               "default": 10,
210 |               "type": "number"
211 |             }
212 |           },
213 |           {
214 |             "name": "type",
215 |             "required": false,
216 |             "in": "query",
217 |             "example": "folder",
218 |             "schema": {
219 |               "type": "string"
220 |             }
221 |           }
222 |         ],
223 |         "responses": {
224 |           "200": {
225 |             "description": "Successful response",
226 |             "content": {
227 |               "application/json": {
228 |                 "schema": {
229 |                   "$ref": "#/components/schemas/GetSurveysSuccessfulResponseDto"
230 |                 }
231 |               }
232 |             }
233 |           },
234 |           "400": {
235 |             "description": "Bad Request",
236 |             "content": {
237 |               "application/json": {
238 |                 "schema": {
239 |                   "$ref": "#/components/schemas/BadRequestDTO"
240 |                 }
241 |               }
242 |             }
243 |           },
244 |           "401": {
245 |             "description": "Unauthorized",
246 |             "content": {
247 |               "application/json": {
248 |                 "schema": {
249 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
250 |                 }
251 |               }
252 |             }
253 |           }
254 |         },
255 |         "tags": [
256 |           "Surveys"
257 |         ],
258 |         "security": [
259 |           {
260 |             "bearer": []
261 |           }
262 |         ]
263 |       }
264 |     }
265 |   },
266 |   "info": {
267 |     "title": "Surveys API",
268 |     "description": "Documentation for surveys API",
269 |     "version": "1.0",
270 |     "contact": {}
271 |   },
272 |   "tags": [
273 |     {
274 |       "name": "Surveys",
275 |       "description": "Documentation for surveys API"
276 |     }
277 |   ],
278 |   "servers": [
279 |     {
280 |       "url": "https://services.leadconnectorhq.com"
281 |     }
282 |   ],
283 |   "components": {
284 |     "securitySchemes": {
285 |       "bearer": {
286 |         "scheme": "bearer",
287 |         "bearerFormat": "JWT",
288 |         "name": "Authorization",
289 |         "in": "header",
290 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
291 |         "type": "http"
292 |       },
293 |       "Location-Access": {
294 |         "scheme": "bearer",
295 |         "bearerFormat": "JWT",
296 |         "name": "Authorization",
297 |         "in": "header",
298 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
299 |         "type": "http"
300 |       },
301 |       "Agency-Access": {
302 |         "scheme": "bearer",
303 |         "bearerFormat": "JWT",
304 |         "name": "Authorization",
305 |         "in": "header",
306 |         "description": "Use the Access Token generated with user type as Agency.",
307 |         "type": "http"
308 |       }
309 |     },
310 |     "schemas": {
311 |       "BadRequestDTO": {
312 |         "type": "object",
313 |         "properties": {
314 |           "statusCode": {
315 |             "type": "number",
316 |             "example": 400
317 |           },
318 |           "message": {
319 |             "type": "string",
320 |             "example": "Bad Request"
321 |           }
322 |         }
323 |       },
324 |       "UnauthorizedDTO": {
325 |         "type": "object",
326 |         "properties": {
327 |           "statusCode": {
328 |             "type": "number",
329 |             "example": 401
330 |           },
331 |           "message": {
332 |             "type": "string",
333 |             "example": "Invalid token: access token is invalid"
334 |           },
335 |           "error": {
336 |             "type": "string",
337 |             "example": "Unauthorized"
338 |           }
339 |         }
340 |       },
341 |       "GetSurveysSchema": {
342 |         "type": "object",
343 |         "properties": {
344 |           "id": {
345 |             "type": "string",
346 |             "example": "I5GFa3d3cKjojpe4VVUx"
347 |           },
348 |           "name": {
349 |             "type": "string",
350 |             "example": "Survey 1"
351 |           },
352 |           "locationId": {
353 |             "type": "string",
354 |             "example": "ve9EPM428h8vShlRW1KT"
355 |           }
356 |         }
357 |       },
358 |       "GetSurveysSuccessfulResponseDto": {
359 |         "type": "object",
360 |         "properties": {
361 |           "surveys": {
362 |             "type": "array",
363 |             "items": {
364 |               "$ref": "#/components/schemas/GetSurveysSchema"
365 |             }
366 |           },
367 |           "total": {
368 |             "type": "number",
369 |             "example": 20,
370 |             "description": "Number of surveys"
371 |           }
372 |         }
373 |       },
374 |       "PageDetailsSchema": {
375 |         "type": "object",
376 |         "properties": {
377 |           "url": {
378 |             "type": "string",
379 |             "example": "https://example.com"
380 |           },
381 |           "title": {
382 |             "type": "string",
383 |             "example": "Example Page"
384 |           }
385 |         }
386 |       },
387 |       "ContactSessionIds": {
388 |         "type": "object",
389 |         "properties": {
390 |           "ids": {
391 |             "example": [
392 |               "session1",
393 |               "session2"
394 |             ],
395 |             "nullable": true,
396 |             "type": "array",
397 |             "items": {
398 |               "type": "string"
399 |             }
400 |           }
401 |         }
402 |       },
403 |       "EventDataSchema": {
404 |         "type": "object",
405 |         "properties": {
406 |           "fbc": {
407 |             "type": "string",
408 |             "example": "fb.1.123456789.987654321"
409 |           },
410 |           "fbp": {
411 |             "type": "string",
412 |             "example": "fbp.1.987654321.123456789"
413 |           },
414 |           "page": {
415 |             "$ref": "#/components/schemas/PageDetailsSchema"
416 |           },
417 |           "type": {
418 |             "type": "string",
419 |             "example": "page-visit"
420 |           },
421 |           "domain": {
422 |             "type": "string",
423 |             "example": "example.com"
424 |           },
425 |           "medium": {
426 |             "type": "string",
427 |             "example": "survey"
428 |           },
429 |           "source": {
430 |             "type": "string",
431 |             "example": "Direct traffic"
432 |           },
433 |           "version": {
434 |             "type": "string",
435 |             "example": "v3"
436 |           },
437 |           "adSource": {
438 |             "type": "string",
439 |             "example": "example-ad-source"
440 |           },
441 |           "mediumId": {
442 |             "type": "string",
443 |             "example": "medium-id-123"
444 |           },
445 |           "parentId": {
446 |             "type": "string",
447 |             "example": "parent-id-456"
448 |           },
449 |           "referrer": {
450 |             "type": "string",
451 |             "example": "https://staging.gohighlevel.com"
452 |           },
453 |           "fbEventId": {
454 |             "type": "string",
455 |             "example": "event-id-789"
456 |           },
457 |           "timestamp": {
458 |             "type": "number",
459 |             "example": 1234567890
460 |           },
461 |           "parentName": {
462 |             "type": "string",
463 |             "example": "Parent Survey"
464 |           },
465 |           "fingerprint": {
466 |             "type": "string",
467 |             "example": "example-fingerprint"
468 |           },
469 |           "pageVisitType": {
470 |             "type": "string",
471 |             "example": "survey"
472 |           },
473 |           "contactSessionIds": {
474 |             "nullable": true,
475 |             "allOf": [
476 |               {
477 |                 "$ref": "#/components/schemas/ContactSessionIds"
478 |               }
479 |             ]
480 |           }
481 |         }
482 |       },
483 |       "othersSchema": {
484 |         "type": "object",
485 |         "properties": {
486 |           "__submissions_other_field__": {
487 |             "type": "string",
488 |             "example": "john@deo.com"
489 |           },
490 |           "__custom_field_id__": {
491 |             "type": "string",
492 |             "example": "20"
493 |           },
494 |           "eventData": {
495 |             "$ref": "#/components/schemas/EventDataSchema"
496 |           },
497 |           "fieldsOriSequance": {
498 |             "example": [
499 |               "full_name",
500 |               "first_name",
501 |               "last_name",
502 |               "phone",
503 |               "email"
504 |             ],
505 |             "type": "array",
506 |             "items": {
507 |               "type": "string"
508 |             }
509 |           }
510 |         }
511 |       },
512 |       "SubmissionSchema": {
513 |         "type": "object",
514 |         "properties": {
515 |           "id": {
516 |             "type": "string",
517 |             "example": "be759b9a-c3ec-4b29-ba07-fc3c89c77673"
518 |           },
519 |           "contactId": {
520 |             "type": "string",
521 |             "example": "9NkT25Vor1v4aQatFsv2"
522 |           },
523 |           "createdAt": {
524 |             "type": "string",
525 |             "example": "2020-11-01T18:02:21.000Z"
526 |           },
527 |           "surveyId": {
528 |             "type": "string",
529 |             "example": "jjusM6EOngDExnbo2DbU"
530 |           },
531 |           "name": {
532 |             "type": "string",
533 |             "example": "test"
534 |           },
535 |           "email": {
536 |             "type": "string",
537 |             "example": "test@test.com"
538 |           },
539 |           "others": {
540 |             "$ref": "#/components/schemas/othersSchema"
541 |           }
542 |         }
543 |       },
544 |       "metaSchema": {
545 |         "type": "object",
546 |         "properties": {
547 |           "total": {
548 |             "type": "number",
549 |             "example": 1
550 |           },
551 |           "currentPage": {
552 |             "type": "number",
553 |             "example": 1
554 |           },
555 |           "nextPage": {
556 |             "type": "number",
557 |             "example": null,
558 |             "nullable": true
559 |           },
560 |           "prevPage": {
561 |             "type": "number",
562 |             "example": null,
563 |             "nullable": true
564 |           }
565 |         }
566 |       },
567 |       "GetSurveysSubmissionSuccessfulResponseDto": {
568 |         "type": "object",
569 |         "properties": {
570 |           "submissions": {
571 |             "type": "array",
572 |             "items": {
573 |               "$ref": "#/components/schemas/SubmissionSchema"
574 |             }
575 |           },
576 |           "meta": {
577 |             "$ref": "#/components/schemas/metaSchema"
578 |           }
579 |         }
580 |       },
581 |       "UnprocessableDTO": {
582 |         "type": "object",
583 |         "properties": {
584 |           "statusCode": {
585 |             "type": "number",
586 |             "example": 422
587 |           },
588 |           "message": {
589 |             "example": [
590 |               "Unprocessable Entity"
591 |             ],
592 |             "type": "array",
593 |             "items": {
594 |               "type": "string"
595 |             }
596 |           },
597 |           "error": {
598 |             "type": "string",
599 |             "example": "Unprocessable Entity"
600 |           }
601 |         }
602 |       }
603 |     }
604 |   }
605 | }


--------------------------------------------------------------------------------
/toc.json:
--------------------------------------------------------------------------------
  1 | {
  2 |     "items": [
  3 |         {
  4 |             "type": "divider",
  5 |             "title": "OAUTH 2.0"
  6 |         },
  7 |         {
  8 |             "type": "item",
  9 |             "title": "Overview",
 10 |             "uri": "docs/oauth/Overview.md"
 11 |         },
 12 |         {
 13 |             "type": "item",
 14 |             "title": "Scopes",
 15 |             "uri": "docs/oauth/Scopes.md"
 16 |         },
 17 |         {
 18 |             "type": "item",
 19 |             "title": "Authorization",
 20 |             "uri": "docs/oauth/Authorization.md"
 21 |         },
 22 |         {
 23 |             "type": "item",
 24 |             "title": "External Billing",
 25 |             "uri": "docs/oauth/Billing.md"
 26 |         },
 27 |         {
 28 |             "type": "item",
 29 |             "title": "External Authentication",
 30 |             "uri": "docs/oauth/ExternalAuthentication.md"
 31 |         },
 32 |         {
 33 |             "type": "item",
 34 |             "title": "User Context in Marketplace Apps",
 35 |             "uri": "docs/marketplace modules/shared_secret_customJS_customPages.md"
 36 |         },
 37 |         {
 38 |             "type": "item",
 39 |             "title": "Webhook Authentication",
 40 |             "uri": "docs/oauth/WebhookAuthentication.md"
 41 |         },
 42 |         {
 43 |             "type": "item",
 44 |             "title": "FAQs",
 45 |             "uri": "docs/oauth/Faqs.md"
 46 |         },
 47 |         {
 48 |             "type": "item",
 49 |             "title": "OAuth 2.0",
 50 |             "uri": "oauth/oauth.json"
 51 |         },
 52 |         {
 53 |             "type": "divider",
 54 |             "title": "APIs"
 55 |         },
 56 |         {
 57 |             "type": "item",
 58 |             "title": "Country List",
 59 |             "uri": "docs/country list/Country.md"
 60 |         },
 61 |         {
 62 |             "type": "item",
 63 |             "title": "Businesses",
 64 |             "uri": "businesses/businesses.json"
 65 |         },
 66 |         {
 67 |             "type": "item",
 68 |             "title": "Calendars",
 69 |             "uri": "calendars/calendars.json"
 70 |         },
 71 |         {
 72 |             "type": "item",
 73 |             "title": "Campaigns",
 74 |             "uri": "campaigns/campaigns.json"
 75 |         },
 76 |         {
 77 |             "type": "item",
 78 |             "title": "Companies",
 79 |             "uri": "companies/companies.json"
 80 |         },
 81 |         {
 82 |             "type": "item",
 83 |             "title": "Contacts",
 84 |             "uri": "contacts/contacts.json"
 85 |         },
 86 |         {
 87 |             "type": "item",
 88 |             "title": "Objects",
 89 |             "uri": "objects/objects.json"
 90 |         },
 91 |         {
 92 |             "type": "item",
 93 |             "title": "Associations",
 94 |             "uri": "associations/associations.json"
 95 |         },
 96 |         {
 97 |             "type": "item",
 98 |             "title": "Custom Fields V2",
 99 |             "uri": "custom-fields/custom-fields.json"
100 |         },
101 |         {
102 |             "type": "item",
103 |             "title": "Conversations",
104 |             "uri": "conversations/conversations.json"
105 |         },
106 |         {
107 |             "type": "item",
108 |             "title": "Courses",
109 |             "uri": "courses/courses.json"
110 |         },
111 |         {
112 |             "type": "item",
113 |             "title": "Emails",
114 |             "uri": "emails/emails.json"
115 |         },
116 |         {
117 |             "type": "item",
118 |             "title": "Forms",
119 |             "uri": "forms/forms.json"
120 |         },
121 |         {
122 |             "type": "item",
123 |             "title": "Invoices",
124 |             "uri": "invoices/invoices.json"
125 |         },
126 |         {
127 |             "type": "item",
128 |             "title": "Trigger Links",
129 |             "uri": "links/links.json"
130 |         },
131 |         {
132 |             "type": "item",
133 |             "title": "Sub-Accounts (Formerly locations)",
134 |             "uri": "locations/locations.json"
135 |         },
136 |         {
137 |             "type": "item",
138 |             "title": "Media Library",
139 |             "uri": "medias/medias.json"
140 |         },
141 |         {
142 |             "type": "item",
143 |             "title": "Marketplace",
144 |             "uri": "marketplace/marketplace.json"
145 |         },
146 |         {
147 |             "type": "item",
148 |             "title": "Blogs",
149 |             "uri": "blogs/blogs.json"
150 |         },
151 |         {
152 |             "type": "item",
153 |             "title": "Funnels",
154 |             "uri": "funnels/funnels.json"
155 |         },
156 |         {
157 |             "type": "item",
158 |             "title": "Opportunities",
159 |             "uri": "opportunities/opportunities.json"
160 |         },
161 |         {
162 |             "type": "item",
163 |             "title": "Payments",
164 |             "uri": "payments/payments.json"
165 |         },
166 |         {
167 |             "type": "item",
168 |             "title": "Products",
169 |             "uri": "products/products.json"
170 |         },
171 |         {
172 |             "type": "item",
173 |             "title": "Saas",
174 |             "uri": "saas-api/saas-api.json"
175 |         },
176 |         {
177 |             "type": "item",
178 |             "title": "Snapshots",
179 |             "uri": "snapshots/snapshots.json"
180 |         },
181 |         {
182 |             "type": "item",
183 |             "title": "Social Planner",
184 |             "uri": "social-media-posting/social-media-posting.json"
185 |         },
186 |         {
187 |             "type": "item",
188 |             "title": "Surveys",
189 |             "uri": "surveys/surveys.json"
190 |         },
191 |         {
192 |             "type": "item",
193 |             "title": "Users",
194 |             "uri": "users/users.json"
195 |         },
196 |         {
197 |             "type": "item",
198 |             "title": "Workflows",
199 |             "uri": "workflows/workflows.json"
200 |         },
201 |         {
202 |             "type": "item",
203 |             "title": "LC Email",
204 |             "uri": "email-isv/email-isv.json"
205 |         },
206 |         {
207 |             "type": "item",
208 |             "title": "Custom Menus",
209 |             "uri": "custom-menus/custom-menus.json"
210 |         },
211 |         {
212 |             "type": "divider",
213 |             "title": "webhook events"
214 |         },
215 |         {
216 |             "type": "item",
217 |             "title": "AppointmentCreate",
218 |             "uri": "docs/webhook events/AppointmentCreate.md"
219 |         },
220 |         {
221 |             "type": "item",
222 |             "title": "AppointmentDelete",
223 |             "uri": "docs/webhook events/AppointmentDelete.md"
224 |         },
225 |         {
226 |             "type": "item",
227 |             "title": "AppointmentUpdate",
228 |             "uri": "docs/webhook events/AppointmentUpdate.md"
229 |         },
230 |         {
231 |             "type": "item",
232 |             "title": "AppInstall",
233 |             "uri": "docs/webhook events/AppInstall.md"
234 |         },
235 |         {
236 |             "type": "item",
237 |             "title": "AppUninstall",
238 |             "uri": "docs/webhook events/AppUninstall.md"
239 |         },
240 |         {
241 |             "type": "item",
242 |             "title": "CampaignStatusUpdate",
243 |             "uri": "docs/webhook events/CampaignStatusUpdate.md"
244 |         },
245 |         {
246 |             "type": "item",
247 |             "title": "ContactCreate",
248 |             "uri": "docs/webhook events/ContactCreate.md"
249 |         },
250 |         {
251 |             "type": "item",
252 |             "title": "ContactDelete",
253 |             "uri": "docs/webhook events/ContactDelete.md"
254 |         },
255 |         {
256 |             "type": "item",
257 |             "title": "ContactDndUpdate",
258 |             "uri": "docs/webhook events/ContactDndUpdate.md"
259 |         },
260 |         {
261 |             "type": "item",
262 |             "title": "ContactTagUpdate",
263 |             "uri": "docs/webhook events/ContactTagUpdate.md"
264 |         },
265 |         {
266 |             "type": "item",
267 |             "title": "ContactUpdate",
268 |             "uri": "docs/webhook events/ContactUpdate.md"
269 |         },
270 |         {
271 |             "type": "item",
272 |             "title": "Conversation Provider Outbound Webhook",
273 |             "uri": "docs/webhook events/ProviderOutboundMessage.md"
274 |         },
275 |         {
276 |             "type": "item",
277 |             "title": "Conversation Unread Webhook",
278 |             "uri": "docs/webhook events/ConversationUnreadWebhook.md"
279 |         },
280 |         {
281 |             "type": "item",
282 |             "title": "InboundMessage",
283 |             "uri": "docs/webhook events/InboundMessage.md"
284 |         },
285 |         {
286 |             "type": "item",
287 |             "title": "InvoiceCreate",
288 |             "uri": "docs/webhook events/InvoiceCreate.md"
289 |         },
290 |         {
291 |             "type": "item",
292 |             "title": "InvoiceSent",
293 |             "uri": "docs/webhook events/InvoiceSent.md"
294 |         },
295 |         {
296 |             "type": "item",
297 |             "title": "InvoiceVoid",
298 |             "uri": "docs/webhook events/InvoiceVoid.md"
299 |         },
300 |         {
301 |             "type": "item",
302 |             "title": "InvoicePaid",
303 |             "uri": "docs/webhook events/InvoicePaid.md"
304 |         },
305 |         {
306 |             "type": "item",
307 |             "title": "InvoicePartiallyPaid",
308 |             "uri": "docs/webhook events/InvoicePartiallyPaid.md"
309 |         },
310 |         {
311 |             "type": "item",
312 |             "title": "InvoiceDelete",
313 |             "uri": "docs/webhook events/InvoiceDelete.md"
314 |         },
315 |         {
316 |             "type": "item",
317 |             "title": "InvoiceUpdate",
318 |             "uri": "docs/webhook events/InvoiceUpdate.md"
319 |         },
320 |         {
321 |             "type": "item",
322 |             "title": "LCEmailStats",
323 |             "uri": "docs/webhook events/LCEmailStats.md"
324 |         },
325 |         {
326 |             "type": "item",
327 |             "title": "LocationCreate",
328 |             "uri": "docs/webhook events/LocationCreate.md"
329 |         },
330 |         {
331 |             "type": "item",
332 |             "title": "LocationUpdate",
333 |             "uri": "docs/webhook events/LocationUpdate.md"
334 |         },
335 |         {
336 |             "type": "item",
337 |             "title": "NoteCreate",
338 |             "uri": "docs/webhook events/NoteCreate.md"
339 |         },
340 |         {
341 |             "type": "item",
342 |             "title": "NoteDelete",
343 |             "uri": "docs/webhook events/NoteDelete.md"
344 |         },
345 |         {
346 |             "type": "item",
347 |             "title": "NoteUpdate",
348 |             "uri": "docs/webhook events/NoteUpdate.md"
349 |         },
350 |         {
351 |             "type": "item",
352 |             "title": "OpportunityAssignedToUpdate",
353 |             "uri": "docs/webhook events/OpportunityAssignedToUpdate.md"
354 |         },
355 |         {
356 |             "type": "item",
357 |             "title": "OpportunityCreate",
358 |             "uri": "docs/webhook events/OpportunityCreate.md"
359 |         },
360 |         {
361 |             "type": "item",
362 |             "title": "OpportunityDelete",
363 |             "uri": "docs/webhook events/OpportunityDelete.md"
364 |         },
365 |         {
366 |             "type": "item",
367 |             "title": "OpportunityMonetaryValueUpdate",
368 |             "uri": "docs/webhook events/OpportunityMonetaryValueUpdate.md"
369 |         },
370 |         {
371 |             "type": "item",
372 |             "title": "OpportunityStageUpdate",
373 |             "uri": "docs/webhook events/OpportunityStageUpdate.md"
374 |         },
375 |         {
376 |             "type": "item",
377 |             "title": "OpportunityStatusUpdate",
378 |             "uri": "docs/webhook events/OpportunityStatusUpdate.md"
379 |         },
380 |         {
381 |             "type": "item",
382 |             "title": "OpportunityUpdate",
383 |             "uri": "docs/webhook events/OpportunityUpdate.md"
384 |         },
385 |         {
386 |             "type": "item",
387 |             "title": "OrderCreate",
388 |             "uri": "docs/webhook events/OrderCreate.md"
389 |         },
390 |         {
391 |             "type": "item",
392 |             "title": "OrderStatusUpdate",
393 |             "uri": "docs/webhook events/OrderStatusUpdate.md"
394 |         },
395 |         {
396 |             "type": "item",
397 |             "title": "OutboundMessage",
398 |             "uri": "docs/webhook events/OutboundMessage.md"
399 |         },
400 |         {
401 |             "type": "item",
402 |             "title": "PlanChange",
403 |             "uri": "docs/webhook events/PlanChange.md"
404 |         },
405 |         {
406 |             "type": "item",
407 |             "title": "PriceCreate",
408 |             "uri": "docs/webhook events/PriceCreate.md"
409 |         },
410 |         {
411 |             "type": "item",
412 |             "title": "PriceUpdate",
413 |             "uri": "docs/webhook events/PriceUpdate.md"
414 |         },
415 |         {
416 |             "type": "item",
417 |             "title": "PriceDelete",
418 |             "uri": "docs/webhook events/PriceDelete.md"
419 |         },
420 |         {
421 |             "type": "item",
422 |             "title": "ProductCreate",
423 |             "uri": "docs/webhook events/ProductCreate.md"
424 |         },
425 |         {
426 |             "type": "item",
427 |             "title": "ProductUpdate",
428 |             "uri": "docs/webhook events/ProductUpdate.md"
429 |         },
430 |         {
431 |             "type": "item",
432 |             "title": "ProductDelete",
433 |             "uri": "docs/webhook events/ProductDelete.md"
434 |         },
435 |         {
436 |             "type": "item",
437 |             "title": "TaskComplete",
438 |             "uri": "docs/webhook events/TaskComplete.md"
439 |         },
440 |         {
441 |             "type": "item",
442 |             "title": "TaskCreate",
443 |             "uri": "docs/webhook events/TaskCreate.md"
444 |         },
445 |         {
446 |             "type": "item",
447 |             "title": "TaskDelete",
448 |             "uri": "docs/webhook events/TaskDelete.md"
449 |         },
450 |         {
451 |             "type": "item",
452 |             "title": "UserCreate",
453 |             "uri": "docs/webhook events/UserCreate.md"
454 |         },
455 |         {
456 |             "type": "item",
457 |             "title": "ObjectSchemaCreate",
458 |             "uri": "docs/webhook events/ObjectSchemaCreate.md"
459 |         },
460 |         {
461 |             "type": "item",
462 |             "title": "ObjectSchemaUpdate",
463 |             "uri": "docs/webhook events/ObjectSchemaUpdate.md"
464 |         },
465 |         {
466 |             "type": "item",
467 |             "title": "RecordCreate",
468 |             "uri": "docs/webhook events/RecordCreate.md"
469 |         },
470 |         {
471 |             "type": "item",
472 |             "title": "RecordUpdate",
473 |             "uri": "docs/webhook events/RecordUpdate.md"
474 |         },
475 |         {
476 |             "type": "item",
477 |             "title": "RecordDelete",
478 |             "uri": "docs/webhook events/RecordDelete.md"
479 |         },
480 |         {
481 |             "type": "item",
482 |             "title": "RelationCreate",
483 |             "uri": "docs/webhook events/RelationCreate.md"
484 |         },
485 |         {
486 |             "type": "item",
487 |             "title": "RelationDelete",
488 |             "uri": "docs/webhook events/RelationDelete.md"
489 |         },
490 |         {
491 |             "type": "item",
492 |             "title": "AssociationUpdate",
493 |             "uri": "docs/webhook events/AssociationUpdate.md"
494 |         },
495 |         {
496 |             "type": "item",
497 |             "title": "AssociationCreate",
498 |             "uri": "docs/webhook events/AssociationCreate.md"
499 |         },
500 |         {
501 |             "type": "item",
502 |             "title": "AssociationDelete",
503 |             "uri": "docs/webhook events/AssociationDelete.md"
504 |         },
505 |         {
506 |             "type": "divider",
507 |             "title": "Custom Js"
508 |         },
509 |         {
510 |             "type": "item",
511 |             "title": "Wrapper Functions",
512 |             "uri": "docs/marketplace modules/CustomJs.md"
513 |         }
514 |     ]
515 | }


--------------------------------------------------------------------------------
/users/users.json:
--------------------------------------------------------------------------------
   1 | {
   2 |   "openapi": "3.0.0",
   3 |   "paths": {
   4 |     "/users/search": {
   5 |       "get": {
   6 |         "operationId": "search-users",
   7 |         "summary": "Search Users",
   8 |         "description": "Search Users",
   9 |         "parameters": [
  10 |           {
  11 |             "name": "Authorization",
  12 |             "in": "header",
  13 |             "description": "Access Token",
  14 |             "required": true,
  15 |             "schema": {
  16 |               "type": "string",
  17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
  18 |             }
  19 |           },
  20 |           {
  21 |             "name": "Version",
  22 |             "in": "header",
  23 |             "description": "API Version",
  24 |             "required": true,
  25 |             "schema": {
  26 |               "type": "string",
  27 |               "enum": [
  28 |                 "2021-07-28"
  29 |               ]
  30 |             }
  31 |           },
  32 |           {
  33 |             "name": "companyId",
  34 |             "required": true,
  35 |             "in": "query",
  36 |             "example": "5DP41231LkQsiKESj6rh",
  37 |             "description": "Company ID in which the search needs to be performed",
  38 |             "schema": {
  39 |               "type": "string"
  40 |             }
  41 |           },
  42 |           {
  43 |             "name": "query",
  44 |             "required": false,
  45 |             "in": "query",
  46 |             "example": "John",
  47 |             "description": "The search term for the user is matched based on the user full name, email or phone",
  48 |             "schema": {
  49 |               "type": "string"
  50 |             }
  51 |           },
  52 |           {
  53 |             "name": "skip",
  54 |             "required": false,
  55 |             "in": "query",
  56 |             "example": "1",
  57 |             "description": "No of results to be skipped before returning the result",
  58 |             "schema": {
  59 |               "default": "0",
  60 |               "type": "string"
  61 |             }
  62 |           },
  63 |           {
  64 |             "name": "limit",
  65 |             "required": false,
  66 |             "in": "query",
  67 |             "example": "10",
  68 |             "description": "No of results to be limited before returning the result",
  69 |             "schema": {
  70 |               "default": "25",
  71 |               "type": "string"
  72 |             }
  73 |           },
  74 |           {
  75 |             "name": "locationId",
  76 |             "required": false,
  77 |             "in": "query",
  78 |             "example": "5DP41231LkQsiKESj6rh",
  79 |             "description": "Location ID in which the search needs to be performed",
  80 |             "schema": {
  81 |               "type": "string"
  82 |             }
  83 |           },
  84 |           {
  85 |             "name": "type",
  86 |             "required": false,
  87 |             "in": "query",
  88 |             "example": "agency",
  89 |             "description": "Type of the users to be filtered in the search",
  90 |             "schema": {
  91 |               "type": "string"
  92 |             }
  93 |           },
  94 |           {
  95 |             "name": "role",
  96 |             "required": false,
  97 |             "in": "query",
  98 |             "example": "admin",
  99 |             "description": "Role of the users to be filtered in the search",
 100 |             "schema": {
 101 |               "type": "string"
 102 |             }
 103 |           },
 104 |           {
 105 |             "name": "ids",
 106 |             "required": false,
 107 |             "in": "query",
 108 |             "example": "5DP4iH6HLkQsiKESj6rh,5DP4iH6HLkQsiKESj34h",
 109 |             "description": "List of User IDs to be filtered in the search",
 110 |             "schema": {
 111 |               "type": "string"
 112 |             }
 113 |           },
 114 |           {
 115 |             "name": "sort",
 116 |             "required": false,
 117 |             "in": "query",
 118 |             "example": "dateAdded",
 119 |             "description": "The field on which sort is applied in which the results need to be sorted. Default is based on the first and last name",
 120 |             "schema": {
 121 |               "type": "string"
 122 |             }
 123 |           },
 124 |           {
 125 |             "name": "sortDirection",
 126 |             "required": false,
 127 |             "in": "query",
 128 |             "example": "asc",
 129 |             "description": "The direction in which the results need to be sorted",
 130 |             "schema": {
 131 |               "type": "string"
 132 |             }
 133 |           },
 134 |           {
 135 |             "name": "enabled2waySync",
 136 |             "required": false,
 137 |             "in": "query",
 138 |             "schema": {
 139 |               "type": "boolean"
 140 |             }
 141 |           }
 142 |         ],
 143 |         "responses": {
 144 |           "200": {
 145 |             "description": "Successful response",
 146 |             "content": {
 147 |               "application/json": {
 148 |                 "schema": {
 149 |                   "$ref": "#/components/schemas/SearchUserSuccessfulResponseDto"
 150 |                 }
 151 |               }
 152 |             }
 153 |           },
 154 |           "400": {
 155 |             "description": "Bad Request",
 156 |             "content": {
 157 |               "application/json": {
 158 |                 "schema": {
 159 |                   "$ref": "#/components/schemas/BadRequestDTO"
 160 |                 }
 161 |               }
 162 |             }
 163 |           },
 164 |           "401": {
 165 |             "description": "Unauthorized",
 166 |             "content": {
 167 |               "application/json": {
 168 |                 "schema": {
 169 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 170 |                 }
 171 |               }
 172 |             }
 173 |           },
 174 |           "422": {
 175 |             "description": "Unprocessable Entity",
 176 |             "content": {
 177 |               "application/json": {
 178 |                 "schema": {
 179 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 180 |                 }
 181 |               }
 182 |             }
 183 |           }
 184 |         },
 185 |         "tags": [
 186 |           "Search"
 187 |         ],
 188 |         "security": [
 189 |           {
 190 |             "Agency-Access": []
 191 |           },
 192 |           {
 193 |             "Location-Access": []
 194 |           }
 195 |         ]
 196 |       }
 197 |     },
 198 |     "/users/{userId}": {
 199 |       "get": {
 200 |         "operationId": "get-user",
 201 |         "summary": "Get User",
 202 |         "description": "Get User",
 203 |         "parameters": [
 204 |           {
 205 |             "name": "Authorization",
 206 |             "in": "header",
 207 |             "description": "Access Token",
 208 |             "required": true,
 209 |             "schema": {
 210 |               "type": "string",
 211 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 212 |             }
 213 |           },
 214 |           {
 215 |             "name": "Version",
 216 |             "in": "header",
 217 |             "description": "API Version",
 218 |             "required": true,
 219 |             "schema": {
 220 |               "type": "string",
 221 |               "enum": [
 222 |                 "2021-07-28"
 223 |               ]
 224 |             }
 225 |           }
 226 |         ],
 227 |         "responses": {
 228 |           "200": {
 229 |             "description": "Successful response",
 230 |             "content": {
 231 |               "application/json": {
 232 |                 "schema": {
 233 |                   "$ref": "#/components/schemas/UserSuccessfulResponseDto"
 234 |                 }
 235 |               }
 236 |             }
 237 |           },
 238 |           "400": {
 239 |             "description": "Bad Request",
 240 |             "content": {
 241 |               "application/json": {
 242 |                 "schema": {
 243 |                   "$ref": "#/components/schemas/BadRequestDTO"
 244 |                 }
 245 |               }
 246 |             }
 247 |           },
 248 |           "401": {
 249 |             "description": "Unauthorized",
 250 |             "content": {
 251 |               "application/json": {
 252 |                 "schema": {
 253 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 254 |                 }
 255 |               }
 256 |             }
 257 |           },
 258 |           "422": {
 259 |             "description": "Unprocessable Entity",
 260 |             "content": {
 261 |               "application/json": {
 262 |                 "schema": {
 263 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 264 |                 }
 265 |               }
 266 |             }
 267 |           }
 268 |         },
 269 |         "tags": [
 270 |           "Users"
 271 |         ],
 272 |         "security": [
 273 |           {
 274 |             "Agency-Access": []
 275 |           },
 276 |           {
 277 |             "Location-Access": []
 278 |           }
 279 |         ]
 280 |       },
 281 |       "put": {
 282 |         "operationId": "update-user",
 283 |         "summary": "Update User",
 284 |         "description": "Update User",
 285 |         "parameters": [
 286 |           {
 287 |             "name": "Authorization",
 288 |             "in": "header",
 289 |             "description": "Access Token",
 290 |             "required": true,
 291 |             "schema": {
 292 |               "type": "string",
 293 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 294 |             }
 295 |           },
 296 |           {
 297 |             "name": "Version",
 298 |             "in": "header",
 299 |             "description": "API Version",
 300 |             "required": true,
 301 |             "schema": {
 302 |               "type": "string",
 303 |               "enum": [
 304 |                 "2021-07-28"
 305 |               ]
 306 |             }
 307 |           }
 308 |         ],
 309 |         "requestBody": {
 310 |           "required": true,
 311 |           "content": {
 312 |             "application/json": {
 313 |               "schema": {
 314 |                 "$ref": "#/components/schemas/UpdateUserDto"
 315 |               }
 316 |             }
 317 |           }
 318 |         },
 319 |         "responses": {
 320 |           "200": {
 321 |             "description": "Successful response",
 322 |             "content": {
 323 |               "application/json": {
 324 |                 "schema": {
 325 |                   "$ref": "#/components/schemas/UserSuccessfulResponseDto"
 326 |                 }
 327 |               }
 328 |             }
 329 |           },
 330 |           "400": {
 331 |             "description": "Bad Request",
 332 |             "content": {
 333 |               "application/json": {
 334 |                 "schema": {
 335 |                   "$ref": "#/components/schemas/BadRequestDTO"
 336 |                 }
 337 |               }
 338 |             }
 339 |           },
 340 |           "401": {
 341 |             "description": "Unauthorized",
 342 |             "content": {
 343 |               "application/json": {
 344 |                 "schema": {
 345 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 346 |                 }
 347 |               }
 348 |             }
 349 |           },
 350 |           "422": {
 351 |             "description": "Unprocessable Entity",
 352 |             "content": {
 353 |               "application/json": {
 354 |                 "schema": {
 355 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 356 |                 }
 357 |               }
 358 |             }
 359 |           }
 360 |         },
 361 |         "tags": [
 362 |           "Users"
 363 |         ],
 364 |         "security": [
 365 |           {
 366 |             "Agency-Access": []
 367 |           },
 368 |           {
 369 |             "Location-Access": []
 370 |           }
 371 |         ]
 372 |       },
 373 |       "delete": {
 374 |         "operationId": "delete-user",
 375 |         "summary": "Delete User",
 376 |         "description": "Delete User",
 377 |         "parameters": [
 378 |           {
 379 |             "name": "Authorization",
 380 |             "in": "header",
 381 |             "description": "Access Token",
 382 |             "required": true,
 383 |             "schema": {
 384 |               "type": "string",
 385 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 386 |             }
 387 |           },
 388 |           {
 389 |             "name": "Version",
 390 |             "in": "header",
 391 |             "description": "API Version",
 392 |             "required": true,
 393 |             "schema": {
 394 |               "type": "string",
 395 |               "enum": [
 396 |                 "2021-07-28"
 397 |               ]
 398 |             }
 399 |           }
 400 |         ],
 401 |         "responses": {
 402 |           "200": {
 403 |             "description": "Successful response",
 404 |             "content": {
 405 |               "application/json": {
 406 |                 "schema": {
 407 |                   "$ref": "#/components/schemas/DeleteUserSuccessfulResponseDto"
 408 |                 }
 409 |               }
 410 |             }
 411 |           },
 412 |           "400": {
 413 |             "description": "Bad Request",
 414 |             "content": {
 415 |               "application/json": {
 416 |                 "schema": {
 417 |                   "$ref": "#/components/schemas/BadRequestDTO"
 418 |                 }
 419 |               }
 420 |             }
 421 |           },
 422 |           "401": {
 423 |             "description": "Unauthorized",
 424 |             "content": {
 425 |               "application/json": {
 426 |                 "schema": {
 427 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 428 |                 }
 429 |               }
 430 |             }
 431 |           },
 432 |           "422": {
 433 |             "description": "Unprocessable Entity",
 434 |             "content": {
 435 |               "application/json": {
 436 |                 "schema": {
 437 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 438 |                 }
 439 |               }
 440 |             }
 441 |           }
 442 |         },
 443 |         "tags": [
 444 |           "Users"
 445 |         ],
 446 |         "security": [
 447 |           {
 448 |             "Agency-Access": []
 449 |           },
 450 |           {
 451 |             "Location-Access": []
 452 |           }
 453 |         ]
 454 |       }
 455 |     },
 456 |     "/users/": {
 457 |       "get": {
 458 |         "operationId": "get-user-by-location",
 459 |         "summary": "Get User by Location",
 460 |         "description": "Get User by Location",
 461 |         "parameters": [
 462 |           {
 463 |             "name": "Authorization",
 464 |             "in": "header",
 465 |             "description": "Access Token",
 466 |             "required": true,
 467 |             "schema": {
 468 |               "type": "string",
 469 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 470 |             }
 471 |           },
 472 |           {
 473 |             "name": "Version",
 474 |             "in": "header",
 475 |             "description": "API Version",
 476 |             "required": true,
 477 |             "schema": {
 478 |               "type": "string",
 479 |               "enum": [
 480 |                 "2021-07-28"
 481 |               ]
 482 |             }
 483 |           },
 484 |           {
 485 |             "name": "locationId",
 486 |             "required": true,
 487 |             "in": "query",
 488 |             "example": "s4BtzHFWmT28mbb85uPa",
 489 |             "schema": {
 490 |               "type": "string"
 491 |             }
 492 |           }
 493 |         ],
 494 |         "responses": {
 495 |           "200": {
 496 |             "description": "Successful response",
 497 |             "content": {
 498 |               "application/json": {
 499 |                 "schema": {
 500 |                   "$ref": "#/components/schemas/LocationSuccessfulResponseDto"
 501 |                 }
 502 |               }
 503 |             }
 504 |           },
 505 |           "400": {
 506 |             "description": "Bad Request",
 507 |             "content": {
 508 |               "application/json": {
 509 |                 "schema": {
 510 |                   "$ref": "#/components/schemas/BadRequestDTO"
 511 |                 }
 512 |               }
 513 |             }
 514 |           },
 515 |           "401": {
 516 |             "description": "Unauthorized",
 517 |             "content": {
 518 |               "application/json": {
 519 |                 "schema": {
 520 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 521 |                 }
 522 |               }
 523 |             }
 524 |           }
 525 |         },
 526 |         "tags": [
 527 |           "Users"
 528 |         ],
 529 |         "security": [
 530 |           {
 531 |             "Location-Access": []
 532 |           }
 533 |         ]
 534 |       },
 535 |       "post": {
 536 |         "operationId": "create-user",
 537 |         "summary": "Create User",
 538 |         "description": "Create User",
 539 |         "parameters": [
 540 |           {
 541 |             "name": "Authorization",
 542 |             "in": "header",
 543 |             "description": "Access Token",
 544 |             "required": true,
 545 |             "schema": {
 546 |               "type": "string",
 547 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 548 |             }
 549 |           },
 550 |           {
 551 |             "name": "Version",
 552 |             "in": "header",
 553 |             "description": "API Version",
 554 |             "required": true,
 555 |             "schema": {
 556 |               "type": "string",
 557 |               "enum": [
 558 |                 "2021-07-28"
 559 |               ]
 560 |             }
 561 |           }
 562 |         ],
 563 |         "requestBody": {
 564 |           "required": true,
 565 |           "content": {
 566 |             "application/json": {
 567 |               "schema": {
 568 |                 "$ref": "#/components/schemas/CreateUserDto"
 569 |               }
 570 |             }
 571 |           }
 572 |         },
 573 |         "responses": {
 574 |           "201": {
 575 |             "description": "Successful response",
 576 |             "content": {
 577 |               "application/json": {
 578 |                 "schema": {
 579 |                   "$ref": "#/components/schemas/UserSuccessfulResponseDto"
 580 |                 }
 581 |               }
 582 |             }
 583 |           },
 584 |           "400": {
 585 |             "description": "Bad Request",
 586 |             "content": {
 587 |               "application/json": {
 588 |                 "schema": {
 589 |                   "$ref": "#/components/schemas/BadRequestDTO"
 590 |                 }
 591 |               }
 592 |             }
 593 |           },
 594 |           "401": {
 595 |             "description": "Unauthorized",
 596 |             "content": {
 597 |               "application/json": {
 598 |                 "schema": {
 599 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 600 |                 }
 601 |               }
 602 |             }
 603 |           },
 604 |           "422": {
 605 |             "description": "Unprocessable Entity",
 606 |             "content": {
 607 |               "application/json": {
 608 |                 "schema": {
 609 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 610 |                 }
 611 |               }
 612 |             }
 613 |           }
 614 |         },
 615 |         "tags": [
 616 |           "Users"
 617 |         ],
 618 |         "security": [
 619 |           {
 620 |             "Agency-Access": []
 621 |           },
 622 |           {
 623 |             "Location-Access": []
 624 |           }
 625 |         ]
 626 |       }
 627 |     }
 628 |   },
 629 |   "info": {
 630 |     "title": "Users API",
 631 |     "description": "Documentation for users API",
 632 |     "version": "1.0",
 633 |     "contact": {}
 634 |   },
 635 |   "tags": [
 636 |     {
 637 |       "name": "Users",
 638 |       "description": "Documentation for users API"
 639 |     },
 640 |     {
 641 |       "name": "Search",
 642 |       "description": "Documentation for users API"
 643 |     }
 644 |   ],
 645 |   "servers": [
 646 |     {
 647 |       "url": "https://services.leadconnectorhq.com"
 648 |     }
 649 |   ],
 650 |   "components": {
 651 |     "securitySchemes": {
 652 |       "bearer": {
 653 |         "scheme": "bearer",
 654 |         "bearerFormat": "JWT",
 655 |         "name": "Authorization",
 656 |         "in": "header",
 657 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 658 |         "type": "http"
 659 |       },
 660 |       "Location-Access": {
 661 |         "scheme": "bearer",
 662 |         "bearerFormat": "JWT",
 663 |         "name": "Authorization",
 664 |         "in": "header",
 665 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
 666 |         "type": "http"
 667 |       },
 668 |       "Agency-Access": {
 669 |         "scheme": "bearer",
 670 |         "bearerFormat": "JWT",
 671 |         "name": "Authorization",
 672 |         "in": "header",
 673 |         "description": "Use the Access Token generated with user type as Agency (OR) Private Integration Token of Agency.",
 674 |         "type": "http"
 675 |       }
 676 |     },
 677 |     "schemas": {
 678 |       "BadRequestDTO": {
 679 |         "type": "object",
 680 |         "properties": {
 681 |           "statusCode": {
 682 |             "type": "number",
 683 |             "example": 400
 684 |           },
 685 |           "message": {
 686 |             "type": "string",
 687 |             "example": "Bad Request"
 688 |           }
 689 |         }
 690 |       },
 691 |       "UnauthorizedDTO": {
 692 |         "type": "object",
 693 |         "properties": {
 694 |           "statusCode": {
 695 |             "type": "number",
 696 |             "example": 401
 697 |           },
 698 |           "message": {
 699 |             "type": "string",
 700 |             "example": "Invalid token: access token is invalid"
 701 |           },
 702 |           "error": {
 703 |             "type": "string",
 704 |             "example": "Unauthorized"
 705 |           }
 706 |         }
 707 |       },
 708 |       "PermissionsDto": {
 709 |         "type": "object",
 710 |         "properties": {
 711 |           "campaignsEnabled": {
 712 |             "type": "boolean",
 713 |             "example": true,
 714 |             "default": true
 715 |           },
 716 |           "campaignsReadOnly": {
 717 |             "type": "boolean",
 718 |             "example": false,
 719 |             "default": false
 720 |           },
 721 |           "contactsEnabled": {
 722 |             "type": "boolean",
 723 |             "example": true,
 724 |             "default": true
 725 |           },
 726 |           "workflowsEnabled": {
 727 |             "type": "boolean",
 728 |             "example": true,
 729 |             "default": true
 730 |           },
 731 |           "workflowsReadOnly": {
 732 |             "type": "boolean",
 733 |             "example": true,
 734 |             "default": false
 735 |           },
 736 |           "triggersEnabled": {
 737 |             "type": "boolean",
 738 |             "example": true,
 739 |             "default": true
 740 |           },
 741 |           "funnelsEnabled": {
 742 |             "type": "boolean",
 743 |             "example": true,
 744 |             "default": true
 745 |           },
 746 |           "websitesEnabled": {
 747 |             "type": "boolean",
 748 |             "example": false,
 749 |             "default": false
 750 |           },
 751 |           "opportunitiesEnabled": {
 752 |             "type": "boolean",
 753 |             "example": true,
 754 |             "default": true
 755 |           },
 756 |           "dashboardStatsEnabled": {
 757 |             "type": "boolean",
 758 |             "example": true,
 759 |             "default": true
 760 |           },
 761 |           "bulkRequestsEnabled": {
 762 |             "type": "boolean",
 763 |             "example": true,
 764 |             "default": true
 765 |           },
 766 |           "appointmentsEnabled": {
 767 |             "type": "boolean",
 768 |             "example": true,
 769 |             "default": true
 770 |           },
 771 |           "reviewsEnabled": {
 772 |             "type": "boolean",
 773 |             "example": true,
 774 |             "default": true
 775 |           },
 776 |           "onlineListingsEnabled": {
 777 |             "type": "boolean",
 778 |             "example": true,
 779 |             "default": true
 780 |           },
 781 |           "phoneCallEnabled": {
 782 |             "type": "boolean",
 783 |             "example": true,
 784 |             "default": true
 785 |           },
 786 |           "conversationsEnabled": {
 787 |             "type": "boolean",
 788 |             "example": true,
 789 |             "default": true
 790 |           },
 791 |           "assignedDataOnly": {
 792 |             "type": "boolean",
 793 |             "example": false,
 794 |             "default": false
 795 |           },
 796 |           "adwordsReportingEnabled": {
 797 |             "type": "boolean",
 798 |             "example": false,
 799 |             "default": false
 800 |           },
 801 |           "membershipEnabled": {
 802 |             "type": "boolean",
 803 |             "example": false,
 804 |             "default": false
 805 |           },
 806 |           "facebookAdsReportingEnabled": {
 807 |             "type": "boolean",
 808 |             "example": false,
 809 |             "default": false
 810 |           },
 811 |           "attributionsReportingEnabled": {
 812 |             "type": "boolean",
 813 |             "example": false,
 814 |             "default": false
 815 |           },
 816 |           "settingsEnabled": {
 817 |             "type": "boolean",
 818 |             "example": true,
 819 |             "default": true
 820 |           },
 821 |           "tagsEnabled": {
 822 |             "type": "boolean",
 823 |             "example": true,
 824 |             "default": true
 825 |           },
 826 |           "leadValueEnabled": {
 827 |             "type": "boolean",
 828 |             "example": true,
 829 |             "default": true
 830 |           },
 831 |           "marketingEnabled": {
 832 |             "type": "boolean",
 833 |             "example": true,
 834 |             "default": true
 835 |           },
 836 |           "agentReportingEnabled": {
 837 |             "type": "boolean",
 838 |             "example": true,
 839 |             "default": true
 840 |           },
 841 |           "botService": {
 842 |             "type": "boolean",
 843 |             "example": false,
 844 |             "default": false
 845 |           },
 846 |           "socialPlanner": {
 847 |             "type": "boolean",
 848 |             "example": true,
 849 |             "default": true
 850 |           },
 851 |           "bloggingEnabled": {
 852 |             "type": "boolean",
 853 |             "example": true,
 854 |             "default": true
 855 |           },
 856 |           "invoiceEnabled": {
 857 |             "type": "boolean",
 858 |             "example": true,
 859 |             "default": true
 860 |           },
 861 |           "affiliateManagerEnabled": {
 862 |             "type": "boolean",
 863 |             "example": true,
 864 |             "default": true
 865 |           },
 866 |           "contentAiEnabled": {
 867 |             "type": "boolean",
 868 |             "example": true,
 869 |             "default": true
 870 |           },
 871 |           "refundsEnabled": {
 872 |             "type": "boolean",
 873 |             "example": true,
 874 |             "default": true
 875 |           },
 876 |           "recordPaymentEnabled": {
 877 |             "type": "boolean",
 878 |             "example": true,
 879 |             "default": true
 880 |           },
 881 |           "cancelSubscriptionEnabled": {
 882 |             "type": "boolean",
 883 |             "example": true,
 884 |             "default": true
 885 |           },
 886 |           "paymentsEnabled": {
 887 |             "type": "boolean",
 888 |             "example": true,
 889 |             "default": true
 890 |           },
 891 |           "communitiesEnabled": {
 892 |             "type": "boolean",
 893 |             "example": true,
 894 |             "default": true
 895 |           },
 896 |           "exportPaymentsEnabled": {
 897 |             "type": "boolean",
 898 |             "example": true,
 899 |             "default": true
 900 |           }
 901 |         }
 902 |       },
 903 |       "RoleSchema": {
 904 |         "type": "object",
 905 |         "properties": {
 906 |           "type": {
 907 |             "type": "string",
 908 |             "example": "account"
 909 |           },
 910 |           "role": {
 911 |             "type": "string",
 912 |             "example": "admin"
 913 |           },
 914 |           "locationIds": {
 915 |             "example": [
 916 |               "ve9EPM428h8vShlRW1KT"
 917 |             ],
 918 |             "type": "array",
 919 |             "items": {
 920 |               "type": "string"
 921 |             }
 922 |           },
 923 |           "restrictSubAccount": {
 924 |             "type": "boolean",
 925 |             "example": "true"
 926 |           }
 927 |         }
 928 |       },
 929 |       "UserSchema": {
 930 |         "type": "object",
 931 |         "properties": {
 932 |           "id": {
 933 |             "type": "string",
 934 |             "example": "0IHuJvc2ofPAAA8GzTRi"
 935 |           },
 936 |           "name": {
 937 |             "type": "string",
 938 |             "example": "John Deo"
 939 |           },
 940 |           "firstName": {
 941 |             "type": "string",
 942 |             "example": "John"
 943 |           },
 944 |           "lastName": {
 945 |             "type": "string",
 946 |             "example": "Deo"
 947 |           },
 948 |           "email": {
 949 |             "type": "string",
 950 |             "example": "john@deo.com"
 951 |           },
 952 |           "phone": {
 953 |             "type": "string",
 954 |             "example": "+1 808-868-8888"
 955 |           },
 956 |           "extension": {
 957 |             "type": "string",
 958 |             "example": ""
 959 |           },
 960 |           "permissions": {
 961 |             "$ref": "#/components/schemas/PermissionsDto"
 962 |           },
 963 |           "scopes": {
 964 |             "type": "string",
 965 |             "enum": [
 966 |               "campaigns.readonly",
 967 |               "campaigns.write",
 968 |               "calendars/events.write",
 969 |               "calendars/events.readonly",
 970 |               "contacts.write",
 971 |               "contacts/bulkActions.write",
 972 |               "workflows.readonly",
 973 |               "workflows.write",
 974 |               "triggers.write",
 975 |               "funnels.write",
 976 |               "websites.write",
 977 |               "medias.write",
 978 |               "medias.readonly",
 979 |               "opportunities.write",
 980 |               "opportunities/leadValue.readonly",
 981 |               "opportunities/bulkActions.write",
 982 |               "reporting/phone.readonly",
 983 |               "reporting/adwords.readonly",
 984 |               "reporting/facebookAds.readonly",
 985 |               "reporting/attributions.readonly",
 986 |               "reporting/agent.readonly",
 987 |               "reporting/reports.write",
 988 |               "reporting/reports.readonly",
 989 |               "payments.write",
 990 |               "payments/refunds.write",
 991 |               "payments/records.write",
 992 |               "payments/exports.write",
 993 |               "payments/subscriptionsCancel.write",
 994 |               "invoices.write",
 995 |               "invoices.readonly",
 996 |               "invoices/schedule.readonly",
 997 |               "invoices/schedule.write",
 998 |               "invoices/template.readonly",
 999 |               "invoices/template.write",
1000 |               "reputation/review.write",
1001 |               "reputation/listing.write",
1002 |               "conversations.write",
1003 |               "conversations.readonly",
1004 |               "conversations/message.readonly",
1005 |               "conversations/message.write",
1006 |               "contentAI.write",
1007 |               "dashboard/stats.readonly",
1008 |               "locations/tags.write",
1009 |               "locations/tags.readonly",
1010 |               "marketing.write",
1011 |               "eliza.write",
1012 |               "settings.write",
1013 |               "socialplanner/post.write",
1014 |               "socialplanner/account.readonly",
1015 |               "socialplanner/account.write",
1016 |               "socialplanner/category.readonly",
1017 |               "socialplanner/category.write",
1018 |               "socialplanner/csv.readonly",
1019 |               "socialplanner/csv.write",
1020 |               "socialplanner/group.write",
1021 |               "socialplanner/hashtag.readonly",
1022 |               "socialplanner/hashtag.write",
1023 |               "socialplanner/oauth.readonly",
1024 |               "socialplanner/oauth.write",
1025 |               "socialplanner/post.readonly",
1026 |               "socialplanner/recurring.readonly",
1027 |               "socialplanner/recurring.write",
1028 |               "socialplanner/review.readonly",
1029 |               "socialplanner/review.write",
1030 |               "socialplanner/rss.readonly",
1031 |               "socialplanner/rss.write",
1032 |               "socialplanner/search.readonly",
1033 |               "socialplanner/setting.readonly",
1034 |               "socialplanner/setting.write",
1035 |               "socialplanner/stat.readonly",
1036 |               "socialplanner/tag.readonly",
1037 |               "socialplanner/tag.write",
1038 |               "socialplanner/filters.readonly",
1039 |               "socialplanner/medias.readonly",
1040 |               "socialplanner/medias.write",
1041 |               "socialplanner/watermarks.readonly",
1042 |               "socialplanner/watermarks.write",
1043 |               "socialplanner/metatag.readonly",
1044 |               "socialplanner/facebook.readonly",
1045 |               "socialplanner/linkedin.readonly",
1046 |               "socialplanner/twitter.readonly",
1047 |               "socialplanner/notification.readonly",
1048 |               "socialplanner/notification.write",
1049 |               "socialplanner/snapshot.readonly",
1050 |               "socialplanner/snapshot.write",
1051 |               "marketing/affiliate.write",
1052 |               "blogs.write",
1053 |               "membership.write",
1054 |               "communities.write",
1055 |               "certificates.write",
1056 |               "certificates.readonly",
1057 |               "adPublishing.write",
1058 |               "adPublishing.readonly",
1059 |               "prospecting.write",
1060 |               "prospecting.readonly",
1061 |               "prospecting/reports.readonly",
1062 |               "private-integration-location.readonly",
1063 |               "private-integration-location.write",
1064 |               "private-integration-company.readonly",
1065 |               "private-integration-company.write",
1066 |               "native-integrations.readonly",
1067 |               "native-integrations.write",
1068 |               "wordpress.write",
1069 |               "wordpress.read",
1070 |               "custom-menu-link.write",
1071 |               "users/team-management.write",
1072 |               "users/team-management.readonly"
1073 |             ]
1074 |           },
1075 |           "roles": {
1076 |             "$ref": "#/components/schemas/RoleSchema"
1077 |           },
1078 |           "deleted": {
1079 |             "type": "boolean",
1080 |             "example": false
1081 |           },
1082 |           "lcPhone": {
1083 |             "type": "object",
1084 |             "example": {
1085 |               "locationId": "+1234556677"
1086 |             },
1087 |             "description": "LC Phone Inbound Phone Numbers"
1088 |           }
1089 |         }
1090 |       },
1091 |       "SearchUserSuccessfulResponseDto": {
1092 |         "type": "object",
1093 |         "properties": {
1094 |           "users": {
1095 |             "type": "array",
1096 |             "items": {
1097 |               "$ref": "#/components/schemas/UserSchema"
1098 |             }
1099 |           },
1100 |           "count": {
1101 |             "type": "number",
1102 |             "example": 1231
1103 |           }
1104 |         }
1105 |       },
1106 |       "UnprocessableDTO": {
1107 |         "type": "object",
1108 |         "properties": {
1109 |           "statusCode": {
1110 |             "type": "number",
1111 |             "example": 422
1112 |           },
1113 |           "message": {
1114 |             "example": [
1115 |               "Unprocessable Entity"
1116 |             ],
1117 |             "type": "array",
1118 |             "items": {
1119 |               "type": "string"
1120 |             }
1121 |           },
1122 |           "error": {
1123 |             "type": "string",
1124 |             "example": "Unprocessable Entity"
1125 |           }
1126 |         }
1127 |       },
1128 |       "LocationSuccessfulResponseDto": {
1129 |         "type": "object",
1130 |         "properties": {
1131 |           "users": {
1132 |             "type": "array",
1133 |             "items": {
1134 |               "$ref": "#/components/schemas/UserSchema"
1135 |             }
1136 |           }
1137 |         }
1138 |       },
1139 |       "UserSuccessfulResponseDto": {
1140 |         "type": "object",
1141 |         "properties": {
1142 |           "id": {
1143 |             "type": "string",
1144 |             "example": "0IHuJvc2ofPAAA8GzTRi"
1145 |           },
1146 |           "name": {
1147 |             "type": "string",
1148 |             "example": "John Deo"
1149 |           },
1150 |           "firstName": {
1151 |             "type": "string",
1152 |             "example": "John"
1153 |           },
1154 |           "lastName": {
1155 |             "type": "string",
1156 |             "example": "Deo"
1157 |           },
1158 |           "email": {
1159 |             "type": "string",
1160 |             "example": "john@deo.com"
1161 |           },
1162 |           "phone": {
1163 |             "type": "string",
1164 |             "example": "+1 808-868-8888"
1165 |           },
1166 |           "extension": {
1167 |             "type": "string",
1168 |             "example": ""
1169 |           },
1170 |           "permissions": {
1171 |             "$ref": "#/components/schemas/PermissionsDto"
1172 |           },
1173 |           "scopes": {
1174 |             "type": "string",
1175 |             "enum": [
1176 |               "campaigns.readonly",
1177 |               "campaigns.write",
1178 |               "calendars/events.write",
1179 |               "calendars/events.readonly",
1180 |               "contacts.write",
1181 |               "contacts/bulkActions.write",
1182 |               "workflows.readonly",
1183 |               "workflows.write",
1184 |               "triggers.write",
1185 |               "funnels.write",
1186 |               "websites.write",
1187 |               "medias.write",
1188 |               "medias.readonly",
1189 |               "opportunities.write",
1190 |               "opportunities/leadValue.readonly",
1191 |               "opportunities/bulkActions.write",
1192 |               "reporting/phone.readonly",
1193 |               "reporting/adwords.readonly",
1194 |               "reporting/facebookAds.readonly",
1195 |               "reporting/attributions.readonly",
1196 |               "reporting/agent.readonly",
1197 |               "reporting/reports.write",
1198 |               "reporting/reports.readonly",
1199 |               "payments.write",
1200 |               "payments/refunds.write",
1201 |               "payments/records.write",
1202 |               "payments/exports.write",
1203 |               "payments/subscriptionsCancel.write",
1204 |               "invoices.write",
1205 |               "invoices.readonly",
1206 |               "invoices/schedule.readonly",
1207 |               "invoices/schedule.write",
1208 |               "invoices/template.readonly",
1209 |               "invoices/template.write",
1210 |               "reputation/review.write",
1211 |               "reputation/listing.write",
1212 |               "conversations.write",
1213 |               "conversations.readonly",
1214 |               "conversations/message.readonly",
1215 |               "conversations/message.write",
1216 |               "contentAI.write",
1217 |               "dashboard/stats.readonly",
1218 |               "locations/tags.write",
1219 |               "locations/tags.readonly",
1220 |               "marketing.write",
1221 |               "eliza.write",
1222 |               "settings.write",
1223 |               "socialplanner/post.write",
1224 |               "socialplanner/account.readonly",
1225 |               "socialplanner/account.write",
1226 |               "socialplanner/category.readonly",
1227 |               "socialplanner/category.write",
1228 |               "socialplanner/csv.readonly",
1229 |               "socialplanner/csv.write",
1230 |               "socialplanner/group.write",
1231 |               "socialplanner/hashtag.readonly",
1232 |               "socialplanner/hashtag.write",
1233 |               "socialplanner/oauth.readonly",
1234 |               "socialplanner/oauth.write",
1235 |               "socialplanner/post.readonly",
1236 |               "socialplanner/recurring.readonly",
1237 |               "socialplanner/recurring.write",
1238 |               "socialplanner/review.readonly",
1239 |               "socialplanner/review.write",
1240 |               "socialplanner/rss.readonly",
1241 |               "socialplanner/rss.write",
1242 |               "socialplanner/search.readonly",
1243 |               "socialplanner/setting.readonly",
1244 |               "socialplanner/setting.write",
1245 |               "socialplanner/stat.readonly",
1246 |               "socialplanner/tag.readonly",
1247 |               "socialplanner/tag.write",
1248 |               "socialplanner/filters.readonly",
1249 |               "socialplanner/medias.readonly",
1250 |               "socialplanner/medias.write",
1251 |               "socialplanner/watermarks.readonly",
1252 |               "socialplanner/watermarks.write",
1253 |               "socialplanner/metatag.readonly",
1254 |               "socialplanner/facebook.readonly",
1255 |               "socialplanner/linkedin.readonly",
1256 |               "socialplanner/twitter.readonly",
1257 |               "socialplanner/notification.readonly",
1258 |               "socialplanner/notification.write",
1259 |               "socialplanner/snapshot.readonly",
1260 |               "socialplanner/snapshot.write",
1261 |               "marketing/affiliate.write",
1262 |               "blogs.write",
1263 |               "membership.write",
1264 |               "communities.write",
1265 |               "certificates.write",
1266 |               "certificates.readonly",
1267 |               "adPublishing.write",
1268 |               "adPublishing.readonly",
1269 |               "prospecting.write",
1270 |               "prospecting.readonly",
1271 |               "prospecting/reports.readonly",
1272 |               "private-integration-location.readonly",
1273 |               "private-integration-location.write",
1274 |               "private-integration-company.readonly",
1275 |               "private-integration-company.write",
1276 |               "native-integrations.readonly",
1277 |               "native-integrations.write",
1278 |               "wordpress.write",
1279 |               "wordpress.read",
1280 |               "custom-menu-link.write",
1281 |               "users/team-management.write",
1282 |               "users/team-management.readonly"
1283 |             ]
1284 |           },
1285 |           "roles": {
1286 |             "$ref": "#/components/schemas/RoleSchema"
1287 |           },
1288 |           "lcPhone": {
1289 |             "type": "object",
1290 |             "example": {
1291 |               "locationId": "+1234556677"
1292 |             },
1293 |             "description": "LC Phone Inbound Phone Numbers"
1294 |           }
1295 |         }
1296 |       },
1297 |       "CreateUserDto": {
1298 |         "type": "object",
1299 |         "properties": {
1300 |           "companyId": {
1301 |             "type": "string",
1302 |             "example": "ve9EPM428h8vShlRW1KT"
1303 |           },
1304 |           "firstName": {
1305 |             "type": "string",
1306 |             "example": "John"
1307 |           },
1308 |           "lastName": {
1309 |             "type": "string",
1310 |             "example": "Deo"
1311 |           },
1312 |           "email": {
1313 |             "type": "string",
1314 |             "example": "john@deo.com"
1315 |           },
1316 |           "password": {
1317 |             "type": "string",
1318 |             "example": "*******"
1319 |           },
1320 |           "phone": {
1321 |             "type": "string",
1322 |             "example": "+18832327657"
1323 |           },
1324 |           "type": {
1325 |             "type": "string",
1326 |             "example": "account"
1327 |           },
1328 |           "role": {
1329 |             "type": "string",
1330 |             "example": "admin"
1331 |           },
1332 |           "locationIds": {
1333 |             "example": [
1334 |               "C2QujeCh8ZnC7al2InWR"
1335 |             ],
1336 |             "type": "array",
1337 |             "items": {
1338 |               "type": "string"
1339 |             }
1340 |           },
1341 |           "permissions": {
1342 |             "$ref": "#/components/schemas/PermissionsDto"
1343 |           },
1344 |           "scopes": {
1345 |             "type": "array",
1346 |             "example": [
1347 |               "contacts.write",
1348 |               "campaigns.readonly"
1349 |             ],
1350 |             "description": "Scopes allowed for users. Only scopes that have been passed will be enabled. Note:- If passed empty all the scopes will be get disabled",
1351 |             "items": {
1352 |               "type": "string",
1353 |               "enum": [
1354 |                 "campaigns.readonly",
1355 |                 "campaigns.write",
1356 |                 "calendars/events.write",
1357 |                 "calendars/events.readonly",
1358 |                 "contacts.write",
1359 |                 "contacts/bulkActions.write",
1360 |                 "workflows.readonly",
1361 |                 "workflows.write",
1362 |                 "triggers.write",
1363 |                 "funnels.write",
1364 |                 "websites.write",
1365 |                 "medias.write",
1366 |                 "medias.readonly",
1367 |                 "opportunities.write",
1368 |                 "opportunities/leadValue.readonly",
1369 |                 "opportunities/bulkActions.write",
1370 |                 "reporting/phone.readonly",
1371 |                 "reporting/adwords.readonly",
1372 |                 "reporting/facebookAds.readonly",
1373 |                 "reporting/attributions.readonly",
1374 |                 "reporting/agent.readonly",
1375 |                 "reporting/reports.write",
1376 |                 "reporting/reports.readonly",
1377 |                 "payments.write",
1378 |                 "payments/refunds.write",
1379 |                 "payments/records.write",
1380 |                 "payments/exports.write",
1381 |                 "payments/subscriptionsCancel.write",
1382 |                 "invoices.write",
1383 |                 "invoices.readonly",
1384 |                 "invoices/schedule.readonly",
1385 |                 "invoices/schedule.write",
1386 |                 "invoices/template.readonly",
1387 |                 "invoices/template.write",
1388 |                 "reputation/review.write",
1389 |                 "reputation/listing.write",
1390 |                 "conversations.write",
1391 |                 "conversations.readonly",
1392 |                 "conversations/message.readonly",
1393 |                 "conversations/message.write",
1394 |                 "contentAI.write",
1395 |                 "dashboard/stats.readonly",
1396 |                 "locations/tags.write",
1397 |                 "locations/tags.readonly",
1398 |                 "marketing.write",
1399 |                 "eliza.write",
1400 |                 "settings.write",
1401 |                 "socialplanner/post.write",
1402 |                 "socialplanner/account.readonly",
1403 |                 "socialplanner/account.write",
1404 |                 "socialplanner/category.readonly",
1405 |                 "socialplanner/category.write",
1406 |                 "socialplanner/csv.readonly",
1407 |                 "socialplanner/csv.write",
1408 |                 "socialplanner/group.write",
1409 |                 "socialplanner/hashtag.readonly",
1410 |                 "socialplanner/hashtag.write",
1411 |                 "socialplanner/oauth.readonly",
1412 |                 "socialplanner/oauth.write",
1413 |                 "socialplanner/post.readonly",
1414 |                 "socialplanner/recurring.readonly",
1415 |                 "socialplanner/recurring.write",
1416 |                 "socialplanner/review.readonly",
1417 |                 "socialplanner/review.write",
1418 |                 "socialplanner/rss.readonly",
1419 |                 "socialplanner/rss.write",
1420 |                 "socialplanner/search.readonly",
1421 |                 "socialplanner/setting.readonly",
1422 |                 "socialplanner/setting.write",
1423 |                 "socialplanner/stat.readonly",
1424 |                 "socialplanner/tag.readonly",
1425 |                 "socialplanner/tag.write",
1426 |                 "socialplanner/filters.readonly",
1427 |                 "socialplanner/medias.readonly",
1428 |                 "socialplanner/medias.write",
1429 |                 "socialplanner/watermarks.readonly",
1430 |                 "socialplanner/watermarks.write",
1431 |                 "socialplanner/metatag.readonly",
1432 |                 "socialplanner/facebook.readonly",
1433 |                 "socialplanner/linkedin.readonly",
1434 |                 "socialplanner/twitter.readonly",
1435 |                 "socialplanner/notification.readonly",
1436 |                 "socialplanner/notification.write",
1437 |                 "socialplanner/snapshot.readonly",
1438 |                 "socialplanner/snapshot.write",
1439 |                 "marketing/affiliate.write",
1440 |                 "blogs.write",
1441 |                 "membership.write",
1442 |                 "communities.write",
1443 |                 "certificates.write",
1444 |                 "certificates.readonly",
1445 |                 "adPublishing.write",
1446 |                 "adPublishing.readonly",
1447 |                 "prospecting.write",
1448 |                 "prospecting.readonly",
1449 |                 "prospecting/reports.readonly",
1450 |                 "private-integration-location.readonly",
1451 |                 "private-integration-location.write",
1452 |                 "private-integration-company.readonly",
1453 |                 "private-integration-company.write",
1454 |                 "native-integrations.readonly",
1455 |                 "native-integrations.write",
1456 |                 "wordpress.write",
1457 |                 "wordpress.read",
1458 |                 "custom-menu-link.write",
1459 |                 "users/team-management.write",
1460 |                 "users/team-management.readonly"
1461 |               ]
1462 |             }
1463 |           },
1464 |           "scopesAssignedToOnly": {
1465 |             "type": "array",
1466 |             "example": [
1467 |               "contacts.write",
1468 |               "campaigns.readonly"
1469 |             ],
1470 |             "description": "Assigned Scopes allowed for users. Only scopes that have been passed will be enabled. If passed empty all the assigned scopes will be get disabled",
1471 |             "items": {
1472 |               "type": "string",
1473 |               "enum": [
1474 |                 "campaigns.readonly",
1475 |                 "campaigns.write",
1476 |                 "calendars/events.write",
1477 |                 "calendars/events.readonly",
1478 |                 "contacts.write",
1479 |                 "contacts/bulkActions.write",
1480 |                 "workflows.readonly",
1481 |                 "workflows.write",
1482 |                 "triggers.write",
1483 |                 "funnels.write",
1484 |                 "websites.write",
1485 |                 "medias.write",
1486 |                 "medias.readonly",
1487 |                 "opportunities.write",
1488 |                 "opportunities/leadValue.readonly",
1489 |                 "opportunities/bulkActions.write",
1490 |                 "reporting/phone.readonly",
1491 |                 "reporting/adwords.readonly",
1492 |                 "reporting/facebookAds.readonly",
1493 |                 "reporting/attributions.readonly",
1494 |                 "reporting/agent.readonly",
1495 |                 "reporting/reports.write",
1496 |                 "reporting/reports.readonly",
1497 |                 "payments.write",
1498 |                 "payments/refunds.write",
1499 |                 "payments/records.write",
1500 |                 "payments/exports.write",
1501 |                 "payments/subscriptionsCancel.write",
1502 |                 "invoices.write",
1503 |                 "invoices.readonly",
1504 |                 "invoices/schedule.readonly",
1505 |                 "invoices/schedule.write",
1506 |                 "invoices/template.readonly",
1507 |                 "invoices/template.write",
1508 |                 "reputation/review.write",
1509 |                 "reputation/listing.write",
1510 |                 "conversations.write",
1511 |                 "conversations.readonly",
1512 |                 "conversations/message.readonly",
1513 |                 "conversations/message.write",
1514 |                 "contentAI.write",
1515 |                 "dashboard/stats.readonly",
1516 |                 "locations/tags.write",
1517 |                 "locations/tags.readonly",
1518 |                 "marketing.write",
1519 |                 "eliza.write",
1520 |                 "settings.write",
1521 |                 "socialplanner/post.write",
1522 |                 "socialplanner/account.readonly",
1523 |                 "socialplanner/account.write",
1524 |                 "socialplanner/category.readonly",
1525 |                 "socialplanner/category.write",
1526 |                 "socialplanner/csv.readonly",
1527 |                 "socialplanner/csv.write",
1528 |                 "socialplanner/group.write",
1529 |                 "socialplanner/hashtag.readonly",
1530 |                 "socialplanner/hashtag.write",
1531 |                 "socialplanner/oauth.readonly",
1532 |                 "socialplanner/oauth.write",
1533 |                 "socialplanner/post.readonly",
1534 |                 "socialplanner/recurring.readonly",
1535 |                 "socialplanner/recurring.write",
1536 |                 "socialplanner/review.readonly",
1537 |                 "socialplanner/review.write",
1538 |                 "socialplanner/rss.readonly",
1539 |                 "socialplanner/rss.write",
1540 |                 "socialplanner/search.readonly",
1541 |                 "socialplanner/setting.readonly",
1542 |                 "socialplanner/setting.write",
1543 |                 "socialplanner/stat.readonly",
1544 |                 "socialplanner/tag.readonly",
1545 |                 "socialplanner/tag.write",
1546 |                 "socialplanner/filters.readonly",
1547 |                 "socialplanner/medias.readonly",
1548 |                 "socialplanner/medias.write",
1549 |                 "socialplanner/watermarks.readonly",
1550 |                 "socialplanner/watermarks.write",
1551 |                 "socialplanner/metatag.readonly",
1552 |                 "socialplanner/facebook.readonly",
1553 |                 "socialplanner/linkedin.readonly",
1554 |                 "socialplanner/twitter.readonly",
1555 |                 "socialplanner/notification.readonly",
1556 |                 "socialplanner/notification.write",
1557 |                 "socialplanner/snapshot.readonly",
1558 |                 "socialplanner/snapshot.write",
1559 |                 "marketing/affiliate.write",
1560 |                 "blogs.write",
1561 |                 "membership.write",
1562 |                 "communities.write",
1563 |                 "certificates.write",
1564 |                 "certificates.readonly",
1565 |                 "adPublishing.write",
1566 |                 "adPublishing.readonly",
1567 |                 "prospecting.write",
1568 |                 "prospecting.readonly",
1569 |                 "prospecting/reports.readonly",
1570 |                 "private-integration-location.readonly",
1571 |                 "private-integration-location.write",
1572 |                 "private-integration-company.readonly",
1573 |                 "private-integration-company.write",
1574 |                 "native-integrations.readonly",
1575 |                 "native-integrations.write",
1576 |                 "wordpress.write",
1577 |                 "wordpress.read",
1578 |                 "custom-menu-link.write",
1579 |                 "users/team-management.write",
1580 |                 "users/team-management.readonly"
1581 |               ]
1582 |             }
1583 |           },
1584 |           "profilePhoto": {
1585 |             "type": "string",
1586 |             "example": "https://img.png"
1587 |           }
1588 |         },
1589 |         "required": [
1590 |           "companyId",
1591 |           "firstName",
1592 |           "lastName",
1593 |           "email",
1594 |           "password",
1595 |           "type",
1596 |           "role",
1597 |           "locationIds"
1598 |         ]
1599 |       },
1600 |       "UpdateUserDto": {
1601 |         "type": "object",
1602 |         "properties": {
1603 |           "firstName": {
1604 |             "type": "string",
1605 |             "example": "John"
1606 |           },
1607 |           "lastName": {
1608 |             "type": "string",
1609 |             "example": "Deo"
1610 |           },
1611 |           "email": {
1612 |             "type": "string",
1613 |             "example": "john@deo.com",
1614 |             "deprecated": true,
1615 |             "description": "Email update is no longer supported due to security reasons."
1616 |           },
1617 |           "emailChangeOTP": {
1618 |             "type": "string",
1619 |             "description": "OTP to change the email ID of the user",
1620 |             "example": "191344"
1621 |           },
1622 |           "password": {
1623 |             "type": "string",
1624 |             "example": "*******"
1625 |           },
1626 |           "phone": {
1627 |             "type": "string",
1628 |             "example": "+18832327657"
1629 |           },
1630 |           "isEjectedUser": {
1631 |             "type": "boolean",
1632 |             "example": true
1633 |           },
1634 |           "type": {
1635 |             "type": "string",
1636 |             "example": "account"
1637 |           },
1638 |           "role": {
1639 |             "type": "string",
1640 |             "example": "admin"
1641 |           },
1642 |           "companyId": {
1643 |             "type": "string",
1644 |             "description": "Company/Agency Id. Required for Agency Level access",
1645 |             "example": "UAXssdawIWAWD"
1646 |           },
1647 |           "locationIds": {
1648 |             "example": [
1649 |               "C2QujeCh8ZnC7al2InWR"
1650 |             ],
1651 |             "type": "array",
1652 |             "items": {
1653 |               "type": "string"
1654 |             }
1655 |           },
1656 |           "permissions": {
1657 |             "$ref": "#/components/schemas/PermissionsDto"
1658 |           },
1659 |           "scopes": {
1660 |             "type": "array",
1661 |             "example": [
1662 |               "contacts.write",
1663 |               "campaigns.readonly"
1664 |             ],
1665 |             "description": "Scopes allowed for users. Only scopes that have been passed will be enabled. If passed empty all the scopes will be get disabled",
1666 |             "items": {
1667 |               "type": "string",
1668 |               "enum": [
1669 |                 "campaigns.readonly",
1670 |                 "campaigns.write",
1671 |                 "calendars/events.write",
1672 |                 "calendars/events.readonly",
1673 |                 "contacts.write",
1674 |                 "contacts/bulkActions.write",
1675 |                 "workflows.readonly",
1676 |                 "workflows.write",
1677 |                 "triggers.write",
1678 |                 "funnels.write",
1679 |                 "websites.write",
1680 |                 "medias.write",
1681 |                 "medias.readonly",
1682 |                 "opportunities.write",
1683 |                 "opportunities/leadValue.readonly",
1684 |                 "opportunities/bulkActions.write",
1685 |                 "reporting/phone.readonly",
1686 |                 "reporting/adwords.readonly",
1687 |                 "reporting/facebookAds.readonly",
1688 |                 "reporting/attributions.readonly",
1689 |                 "reporting/agent.readonly",
1690 |                 "reporting/reports.write",
1691 |                 "reporting/reports.readonly",
1692 |                 "payments.write",
1693 |                 "payments/refunds.write",
1694 |                 "payments/records.write",
1695 |                 "payments/exports.write",
1696 |                 "payments/subscriptionsCancel.write",
1697 |                 "invoices.write",
1698 |                 "invoices.readonly",
1699 |                 "invoices/schedule.readonly",
1700 |                 "invoices/schedule.write",
1701 |                 "invoices/template.readonly",
1702 |                 "invoices/template.write",
1703 |                 "reputation/review.write",
1704 |                 "reputation/listing.write",
1705 |                 "conversations.write",
1706 |                 "conversations.readonly",
1707 |                 "conversations/message.readonly",
1708 |                 "conversations/message.write",
1709 |                 "contentAI.write",
1710 |                 "dashboard/stats.readonly",
1711 |                 "locations/tags.write",
1712 |                 "locations/tags.readonly",
1713 |                 "marketing.write",
1714 |                 "eliza.write",
1715 |                 "settings.write",
1716 |                 "socialplanner/post.write",
1717 |                 "socialplanner/account.readonly",
1718 |                 "socialplanner/account.write",
1719 |                 "socialplanner/category.readonly",
1720 |                 "socialplanner/category.write",
1721 |                 "socialplanner/csv.readonly",
1722 |                 "socialplanner/csv.write",
1723 |                 "socialplanner/group.write",
1724 |                 "socialplanner/hashtag.readonly",
1725 |                 "socialplanner/hashtag.write",
1726 |                 "socialplanner/oauth.readonly",
1727 |                 "socialplanner/oauth.write",
1728 |                 "socialplanner/post.readonly",
1729 |                 "socialplanner/recurring.readonly",
1730 |                 "socialplanner/recurring.write",
1731 |                 "socialplanner/review.readonly",
1732 |                 "socialplanner/review.write",
1733 |                 "socialplanner/rss.readonly",
1734 |                 "socialplanner/rss.write",
1735 |                 "socialplanner/search.readonly",
1736 |                 "socialplanner/setting.readonly",
1737 |                 "socialplanner/setting.write",
1738 |                 "socialplanner/stat.readonly",
1739 |                 "socialplanner/tag.readonly",
1740 |                 "socialplanner/tag.write",
1741 |                 "socialplanner/filters.readonly",
1742 |                 "socialplanner/medias.readonly",
1743 |                 "socialplanner/medias.write",
1744 |                 "socialplanner/watermarks.readonly",
1745 |                 "socialplanner/watermarks.write",
1746 |                 "socialplanner/metatag.readonly",
1747 |                 "socialplanner/facebook.readonly",
1748 |                 "socialplanner/linkedin.readonly",
1749 |                 "socialplanner/twitter.readonly",
1750 |                 "socialplanner/notification.readonly",
1751 |                 "socialplanner/notification.write",
1752 |                 "socialplanner/snapshot.readonly",
1753 |                 "socialplanner/snapshot.write",
1754 |                 "marketing/affiliate.write",
1755 |                 "blogs.write",
1756 |                 "membership.write",
1757 |                 "communities.write",
1758 |                 "certificates.write",
1759 |                 "certificates.readonly",
1760 |                 "adPublishing.write",
1761 |                 "adPublishing.readonly",
1762 |                 "prospecting.write",
1763 |                 "prospecting.readonly",
1764 |                 "prospecting/reports.readonly",
1765 |                 "private-integration-location.readonly",
1766 |                 "private-integration-location.write",
1767 |                 "private-integration-company.readonly",
1768 |                 "private-integration-company.write",
1769 |                 "native-integrations.readonly",
1770 |                 "native-integrations.write",
1771 |                 "wordpress.write",
1772 |                 "wordpress.read",
1773 |                 "custom-menu-link.write",
1774 |                 "users/team-management.write",
1775 |                 "users/team-management.readonly"
1776 |               ]
1777 |             }
1778 |           },
1779 |           "scopesAssignedToOnly": {
1780 |             "type": "array",
1781 |             "example": [
1782 |               "contacts.write",
1783 |               "campaigns.readonly"
1784 |             ],
1785 |             "description": "Assigned Scopes allowed for users. Only scopes that have been passed will be enabled. If passed empty all the assigned scopes will be get disabled",
1786 |             "items": {
1787 |               "type": "string",
1788 |               "enum": [
1789 |                 "campaigns.readonly",
1790 |                 "campaigns.write",
1791 |                 "calendars/events.write",
1792 |                 "calendars/events.readonly",
1793 |                 "contacts.write",
1794 |                 "contacts/bulkActions.write",
1795 |                 "workflows.readonly",
1796 |                 "workflows.write",
1797 |                 "triggers.write",
1798 |                 "funnels.write",
1799 |                 "websites.write",
1800 |                 "medias.write",
1801 |                 "medias.readonly",
1802 |                 "opportunities.write",
1803 |                 "opportunities/leadValue.readonly",
1804 |                 "opportunities/bulkActions.write",
1805 |                 "reporting/phone.readonly",
1806 |                 "reporting/adwords.readonly",
1807 |                 "reporting/facebookAds.readonly",
1808 |                 "reporting/attributions.readonly",
1809 |                 "reporting/agent.readonly",
1810 |                 "reporting/reports.write",
1811 |                 "reporting/reports.readonly",
1812 |                 "payments.write",
1813 |                 "payments/refunds.write",
1814 |                 "payments/records.write",
1815 |                 "payments/exports.write",
1816 |                 "payments/subscriptionsCancel.write",
1817 |                 "invoices.write",
1818 |                 "invoices.readonly",
1819 |                 "invoices/schedule.readonly",
1820 |                 "invoices/schedule.write",
1821 |                 "invoices/template.readonly",
1822 |                 "invoices/template.write",
1823 |                 "reputation/review.write",
1824 |                 "reputation/listing.write",
1825 |                 "conversations.write",
1826 |                 "conversations.readonly",
1827 |                 "conversations/message.readonly",
1828 |                 "conversations/message.write",
1829 |                 "contentAI.write",
1830 |                 "dashboard/stats.readonly",
1831 |                 "locations/tags.write",
1832 |                 "locations/tags.readonly",
1833 |                 "marketing.write",
1834 |                 "eliza.write",
1835 |                 "settings.write",
1836 |                 "socialplanner/post.write",
1837 |                 "socialplanner/account.readonly",
1838 |                 "socialplanner/account.write",
1839 |                 "socialplanner/category.readonly",
1840 |                 "socialplanner/category.write",
1841 |                 "socialplanner/csv.readonly",
1842 |                 "socialplanner/csv.write",
1843 |                 "socialplanner/group.write",
1844 |                 "socialplanner/hashtag.readonly",
1845 |                 "socialplanner/hashtag.write",
1846 |                 "socialplanner/oauth.readonly",
1847 |                 "socialplanner/oauth.write",
1848 |                 "socialplanner/post.readonly",
1849 |                 "socialplanner/recurring.readonly",
1850 |                 "socialplanner/recurring.write",
1851 |                 "socialplanner/review.readonly",
1852 |                 "socialplanner/review.write",
1853 |                 "socialplanner/rss.readonly",
1854 |                 "socialplanner/rss.write",
1855 |                 "socialplanner/search.readonly",
1856 |                 "socialplanner/setting.readonly",
1857 |                 "socialplanner/setting.write",
1858 |                 "socialplanner/stat.readonly",
1859 |                 "socialplanner/tag.readonly",
1860 |                 "socialplanner/tag.write",
1861 |                 "socialplanner/filters.readonly",
1862 |                 "socialplanner/medias.readonly",
1863 |                 "socialplanner/medias.write",
1864 |                 "socialplanner/watermarks.readonly",
1865 |                 "socialplanner/watermarks.write",
1866 |                 "socialplanner/metatag.readonly",
1867 |                 "socialplanner/facebook.readonly",
1868 |                 "socialplanner/linkedin.readonly",
1869 |                 "socialplanner/twitter.readonly",
1870 |                 "socialplanner/notification.readonly",
1871 |                 "socialplanner/notification.write",
1872 |                 "socialplanner/snapshot.readonly",
1873 |                 "socialplanner/snapshot.write",
1874 |                 "marketing/affiliate.write",
1875 |                 "blogs.write",
1876 |                 "membership.write",
1877 |                 "communities.write",
1878 |                 "certificates.write",
1879 |                 "certificates.readonly",
1880 |                 "adPublishing.write",
1881 |                 "adPublishing.readonly",
1882 |                 "prospecting.write",
1883 |                 "prospecting.readonly",
1884 |                 "prospecting/reports.readonly",
1885 |                 "private-integration-location.readonly",
1886 |                 "private-integration-location.write",
1887 |                 "private-integration-company.readonly",
1888 |                 "private-integration-company.write",
1889 |                 "native-integrations.readonly",
1890 |                 "native-integrations.write",
1891 |                 "wordpress.write",
1892 |                 "wordpress.read",
1893 |                 "custom-menu-link.write",
1894 |                 "users/team-management.write",
1895 |                 "users/team-management.readonly"
1896 |               ]
1897 |             }
1898 |           },
1899 |           "profilePhoto": {
1900 |             "type": "string",
1901 |             "example": "https://img.png"
1902 |           }
1903 |         },
1904 |         "required": [
1905 |           "isEjectedUser"
1906 |         ]
1907 |       },
1908 |       "DeleteUserSuccessfulResponseDto": {
1909 |         "type": "object",
1910 |         "properties": {
1911 |           "succeded": {
1912 |             "type": "boolean",
1913 |             "example": true
1914 |           },
1915 |           "message": {
1916 |             "type": "string",
1917 |             "example": "Queued deleting user with e-mail john@deo.com and name John Deo. Will take effect in a few minutes."
1918 |           }
1919 |         }
1920 |       }
1921 |     }
1922 |   }
1923 | }


--------------------------------------------------------------------------------
/workflows/workflows.json:
--------------------------------------------------------------------------------
  1 | {
  2 |   "openapi": "3.0.0",
  3 |   "paths": {
  4 |     "/workflows/": {
  5 |       "get": {
  6 |         "operationId": "get-workflow",
  7 |         "summary": "Get Workflow",
  8 |         "description": "Get Workflow",
  9 |         "parameters": [
 10 |           {
 11 |             "name": "Authorization",
 12 |             "in": "header",
 13 |             "description": "Access Token",
 14 |             "required": true,
 15 |             "schema": {
 16 |               "type": "string",
 17 |               "example": "Bearer 9c48df2694a849b6089f9d0d3513efe"
 18 |             }
 19 |           },
 20 |           {
 21 |             "name": "Version",
 22 |             "in": "header",
 23 |             "description": "API Version",
 24 |             "required": true,
 25 |             "schema": {
 26 |               "type": "string",
 27 |               "enum": [
 28 |                 "2021-07-28"
 29 |               ]
 30 |             }
 31 |           },
 32 |           {
 33 |             "name": "locationId",
 34 |             "required": true,
 35 |             "in": "query",
 36 |             "example": "ve9EPM428h8vShlRW1KT",
 37 |             "schema": {
 38 |               "type": "string"
 39 |             }
 40 |           }
 41 |         ],
 42 |         "responses": {
 43 |           "200": {
 44 |             "description": "Successful response",
 45 |             "content": {
 46 |               "application/json": {
 47 |                 "schema": {
 48 |                   "$ref": "#/components/schemas/GetWorkflowSuccessfulResponseDto"
 49 |                 }
 50 |               }
 51 |             }
 52 |           },
 53 |           "400": {
 54 |             "description": "Bad Request",
 55 |             "content": {
 56 |               "application/json": {
 57 |                 "schema": {
 58 |                   "$ref": "#/components/schemas/BadRequestDTO"
 59 |                 }
 60 |               }
 61 |             }
 62 |           },
 63 |           "401": {
 64 |             "description": "Unauthorized",
 65 |             "content": {
 66 |               "application/json": {
 67 |                 "schema": {
 68 |                   "$ref": "#/components/schemas/UnauthorizedDTO"
 69 |                 }
 70 |               }
 71 |             }
 72 |           },
 73 |           "422": {
 74 |             "description": "Unprocessable Entity",
 75 |             "content": {
 76 |               "application/json": {
 77 |                 "schema": {
 78 |                   "$ref": "#/components/schemas/UnprocessableDTO"
 79 |                 }
 80 |               }
 81 |             }
 82 |           }
 83 |         },
 84 |         "tags": [
 85 |           "Workflows"
 86 |         ],
 87 |         "security": [
 88 |           {
 89 |             "bearer": []
 90 |           }
 91 |         ]
 92 |       }
 93 |     }
 94 |   },
 95 |   "info": {
 96 |     "title": "workflows API",
 97 |     "description": "Documentation for workflows API",
 98 |     "version": "1.0",
 99 |     "contact": {}
100 |   },
101 |   "tags": [
102 |     {
103 |       "name": "Workflows",
104 |       "description": "Documentation for workflows API"
105 |     }
106 |   ],
107 |   "servers": [
108 |     {
109 |       "url": "https://services.leadconnectorhq.com"
110 |     }
111 |   ],
112 |   "components": {
113 |     "securitySchemes": {
114 |       "bearer": {
115 |         "scheme": "bearer",
116 |         "bearerFormat": "JWT",
117 |         "name": "Authorization",
118 |         "in": "header",
119 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
120 |         "type": "http"
121 |       },
122 |       "Location-Access": {
123 |         "scheme": "bearer",
124 |         "bearerFormat": "JWT",
125 |         "name": "Authorization",
126 |         "in": "header",
127 |         "description": "Use the Access Token generated with user type as Sub-Account (OR) Private Integration Token of Sub-Account.",
128 |         "type": "http"
129 |       },
130 |       "Agency-Access": {
131 |         "scheme": "bearer",
132 |         "bearerFormat": "JWT",
133 |         "name": "Authorization",
134 |         "in": "header",
135 |         "description": "Use the Access Token generated with user type as Agency.",
136 |         "type": "http"
137 |       }
138 |     },
139 |     "schemas": {
140 |       "BadRequestDTO": {
141 |         "type": "object",
142 |         "properties": {
143 |           "statusCode": {
144 |             "type": "number",
145 |             "example": 400
146 |           },
147 |           "message": {
148 |             "type": "string",
149 |             "example": "Bad Request"
150 |           }
151 |         }
152 |       },
153 |       "UnauthorizedDTO": {
154 |         "type": "object",
155 |         "properties": {
156 |           "statusCode": {
157 |             "type": "number",
158 |             "example": 401
159 |           },
160 |           "message": {
161 |             "type": "string",
162 |             "example": "Invalid token: access token is invalid"
163 |           },
164 |           "error": {
165 |             "type": "string",
166 |             "example": "Unauthorized"
167 |           }
168 |         }
169 |       },
170 |       "UnprocessableDTO": {
171 |         "type": "object",
172 |         "properties": {
173 |           "statusCode": {
174 |             "type": "number",
175 |             "example": 422
176 |           },
177 |           "message": {
178 |             "example": [
179 |               "Unprocessable Entity"
180 |             ],
181 |             "type": "array",
182 |             "items": {
183 |               "type": "string"
184 |             }
185 |           },
186 |           "error": {
187 |             "type": "string",
188 |             "example": "Unprocessable Entity"
189 |           }
190 |         }
191 |       },
192 |       "WorkflowSchema": {
193 |         "type": "object",
194 |         "properties": {
195 |           "id": {
196 |             "type": "string",
197 |             "example": "78559bb3-b920-461e-b010-7b2a2816d2a9"
198 |           },
199 |           "name": {
200 |             "type": "string",
201 |             "example": "First Workflow"
202 |           },
203 |           "status": {
204 |             "type": "string",
205 |             "example": "draft"
206 |           },
207 |           "version": {
208 |             "type": "number",
209 |             "example": 2
210 |           },
211 |           "createdAt": {
212 |             "type": "string",
213 |             "example": "2021-05-26T11:33:49.000Z"
214 |           },
215 |           "updatedAt": {
216 |             "type": "string",
217 |             "example": "2021-05-26T11:33:49.000Z"
218 |           },
219 |           "locationId": {
220 |             "type": "string",
221 |             "example": "eBG6WapS3v4ZqwA45MTxtYJ"
222 |           }
223 |         }
224 |       },
225 |       "GetWorkflowSuccessfulResponseDto": {
226 |         "type": "object",
227 |         "properties": {
228 |           "workflows": {
229 |             "type": "array",
230 |             "items": {
231 |               "$ref": "#/components/schemas/WorkflowSchema"
232 |             }
233 |           }
234 |         }
235 |       }
236 |     }
237 |   }
238 | }


--------------------------------------------------------------------------------